["```py\nIn [1]: import math\n        import numpy as np\n        import pandas as pd\n        from pylab import plt, mpl\n        np.random.seed(1)\n        plt.style.use('seaborn')\n        mpl.rcParams['savefig.dpi'] = 300\n        mpl.rcParams['font.family'] = 'serif'\n        np.set_printoptions(suppress=True)\n\nIn [2]: t0 = np.array(10)  ![1](Images/1.png)\n        t0  ![1](Images/1.png)\nOut[2]: array(10)\n\nIn [3]: t1 = np.array((2, 1))  ![2](Images/2.png)\n        t1  ![2](Images/2.png)\nOut[3]: array([2, 1])\n\nIn [4]: t2 = np.arange(10).reshape(5, 2)  ![3](Images/3.png)\n        t2  ![3](Images/3.png)\nOut[4]: array([[0, 1],\n               [2, 3],\n               [4, 5],\n               [6, 7],\n               [8, 9]])\n\nIn [5]: t3 = np.arange(16).reshape(2, 4, 2)  ![4](Images/4.png)\n        t3  ![4](Images/4.png)\nOut[5]: array([[[ 0,  1],\n                [ 2,  3],\n                [ 4,  5],\n                [ 6,  7]],\n\n               [[ 8,  9],\n                [10, 11],\n                [12, 13],\n                [14, 15]]])\n```", "```py\nIn [6]: t2 + 1  ![1](Images/1.png)\nOut[6]: array([[ 1,  2],\n               [ 3,  4],\n               [ 5,  6],\n               [ 7,  8],\n               [ 9, 10]])\n\nIn [7]: t2 + t2  ![2](Images/2.png)\nOut[7]: array([[ 0,  2],\n               [ 4,  6],\n               [ 8, 10],\n               [12, 14],\n               [16, 18]])\n\nIn [8]: t1\nOut[8]: array([2, 1])\n\nIn [9]: t2\nOut[9]: array([[0, 1],\n               [2, 3],\n               [4, 5],\n               [6, 7],\n               [8, 9]])\n\nIn [10]: np.dot(t2, t1)  ![3](Images/3.png)\nOut[10]: array([ 1,  7, 13, 19, 25])\n\nIn [11]: t2[:, 0] * 2 + t2[:, 1] * 1  ![4](Images/4.png)\nOut[11]: array([ 1,  7, 13, 19, 25])\n\nIn [12]: np.dot(t1, t2.T)  ![3](Images/3.png)\nOut[12]: array([ 1,  7, 13, 19, 25])\n```", "```py\nIn [13]: features = 3  ![1](Images/1.png)\n\nIn [14]: samples = 5  ![2](Images/2.png)\n\nIn [15]: l0 = np.random.random((samples, features))  ![3](Images/3.png)\n         l0  ![3](Images/3.png)\nOut[15]: array([[0.417022  , 0.72032449, 0.00011437],\n                [0.30233257, 0.14675589, 0.09233859],\n                [0.18626021, 0.34556073, 0.39676747],\n                [0.53881673, 0.41919451, 0.6852195 ],\n                [0.20445225, 0.87811744, 0.02738759]])\n\nIn [16]: w = np.random.random((features, 1))  ![4](Images/4.png)\n         w  ![4](Images/4.png)\nOut[16]: array([[0.67046751],\n                [0.4173048 ],\n                [0.55868983]])\n\nIn [17]: l2 = np.dot(l0, w)  ![5](Images/5.png)\n         l2  ![5](Images/5.png)\nOut[17]: array([[0.58025848],\n                [0.31553474],\n                [0.49075552],\n                [0.91901616],\n                [0.51882238]])\n\nIn [18]: y = l0[:, 0] * 0.5 + l0[:, 1]   ![6](Images/6.png)\n         y = y.reshape(-1, 1)  ![6](Images/6.png)\n         y  ![6](Images/6.png)\nOut[18]: array([[0.9288355 ],\n                [0.29792218],\n                [0.43869083],\n                [0.68860288],\n                [0.98034356]])\n```", "```py\nIn [19]: e = l2 - y  ![1](Images/1.png)\n         e  ![1](Images/1.png)\nOut[19]: array([[-0.34857702],\n                [ 0.01761256],\n                [ 0.05206469],\n                [ 0.23041328],\n                [-0.46152118]])\n\nIn [20]: mse = (e ** 2).mean()  ![2](Images/2.png)\n         mse  ![2](Images/2.png)\nOut[20]: 0.07812379019517127\n\nIn [21]: d = e * 1  ![3](Images/3.png)\n         d  ![3](Images/3.png)\nOut[21]: array([[-0.34857702],\n                [ 0.01761256],\n                [ 0.05206469],\n                [ 0.23041328],\n                [-0.46152118]])\n\nIn [22]: a = 0.01  ![4](Images/4.png)\n\nIn [23]: u = a * np.dot(l0.T, d)  ![5](Images/5.png)\n         u  ![5](Images/5.png)\nOut[23]: array([[-0.0010055 ],\n                [-0.00539194],\n                [ 0.00167488]])\n\nIn [24]: w  ![6](Images/6.png)\nOut[24]: array([[0.67046751],\n                [0.4173048 ],\n                [0.55868983]])\n\nIn [25]: w -= u  ![6](Images/6.png)\n\nIn [26]: w  ![6](Images/6.png)\nOut[26]: array([[0.67147301],\n                [0.42269674],\n                [0.55701495]])\n\nIn [27]: l2 = np.dot(l0, w)  ![7](Images/7.png)\n\nIn [28]: e = l2 - y  ![8](Images/8.png)\n\nIn [29]: mse = (e ** 2).mean()  ![9](Images/9.png)\n         mse  ![9](Images/9.png)\nOut[29]: 0.07681782193617318\n```", "```py\nIn [30]: a = 0.025  ![1](Images/1.png)\n\nIn [31]: w = np.random.random((features, 1))  ![2](Images/2.png)\n         w  ![2](Images/2.png)\nOut[31]: array([[0.14038694],\n                [0.19810149],\n                [0.80074457]])\n\nIn [32]: steps = 800  ![3](Images/3.png)\n\nIn [33]: for s in range(1, steps + 1):\n             l2 = np.dot(l0, w)\n             e = l2 - y\n             u = a * np.dot(l0.T, e)\n             w -= u\n             mse = (e ** 2).mean()\n             if s % 50 == 0:\n                 print(f'step={s:3d} | mse={mse:.5f}')\n         step= 50 | mse=0.03064\n         step=100 | mse=0.01002\n         step=150 | mse=0.00390\n         step=200 | mse=0.00195\n         step=250 | mse=0.00124\n         step=300 | mse=0.00092\n         step=350 | mse=0.00074\n         step=400 | mse=0.00060\n         step=450 | mse=0.00050\n         step=500 | mse=0.00041\n         step=550 | mse=0.00035\n         step=600 | mse=0.00029\n         step=650 | mse=0.00024\n         step=700 | mse=0.00020\n         step=750 | mse=0.00017\n         step=800 | mse=0.00014\n\nIn [34]: l2 - y  ![4](Images/4.png)\nOut[34]: array([[-0.01240168],\n                [-0.01606065],\n                [ 0.01274072],\n                [-0.00087794],\n                [ 0.01072845]])\n\nIn [35]: w  ![5](Images/5.png)\nOut[35]: array([[0.41907514],\n                [1.02965827],\n                [0.04421136]])\n```", "```py\nIn [36]: def sigmoid(x, deriv=False):\n             if deriv:\n                 return sigmoid(x) * (1 - sigmoid(x))\n             return 1 / (1 + np.exp(-x))\n\nIn [37]: x = np.linspace(-10, 10, 100)\n\nIn [38]: plt.figure(figsize=(10, 6))\n         plt.plot(x, np.where(x > 0, 1, 0), 'y--', label='step function')\n         plt.plot(x, sigmoid(x), 'r', label='sigmoid')\n         plt.plot(x, sigmoid(x, True), '--', label='derivative')\n         plt.legend();\n```", "```py\nIn [39]: features = 4\n         samples = 5\n\nIn [40]: l0 = np.random.randint(0, 2, (samples, features))  ![1](Images/1.png)\n         l0  ![1](Images/1.png)\nOut[40]: array([[1, 1, 1, 1],\n                [0, 1, 1, 0],\n                [0, 1, 0, 0],\n                [1, 1, 1, 0],\n                [1, 0, 0, 1]])\n\nIn [41]: w = np.random.random((features, 1))\n         w\nOut[41]: array([[0.42110763],\n                [0.95788953],\n                [0.53316528],\n                [0.69187711]])\n\nIn [42]: l2 = sigmoid(np.dot(l0, w))  ![2](Images/2.png)\n         l2\nOut[42]: array([[0.93112111],\n                [0.81623654],\n                [0.72269905],\n                [0.87126189],\n                [0.75268514]])\n\nIn [43]: l2.round()\nOut[43]: array([[1.],\n                [1.],\n                [1.],\n                [1.],\n                [1.]])\n\nIn [44]: y = np.random.randint(0, 2, samples)  ![3](Images/3.png)\n         y = y.reshape(-1, 1)  ![3](Images/3.png)\n         y  ![3](Images/3.png)\nOut[44]: array([[1],\n                [1],\n                [0],\n                [0],\n                [0]])\n\nIn [45]: e = l2 - y\n         e\nOut[45]: array([[-0.06887889],\n                [-0.18376346],\n                [ 0.72269905],\n                [ 0.87126189],\n                [ 0.75268514]])\n\nIn [46]: mse = (e ** 2).mean()\n         mse\nOut[46]: 0.37728788783411127\n\nIn [47]: a = 0.02\n\nIn [48]: d = e * sigmoid(l2, True)  ![4](Images/4.png)\n         d\nOut[48]: array([[-0.01396723],\n                [-0.03906484],\n                [ 0.15899479],\n                [ 0.18119776],\n                [ 0.16384833]])\n\nIn [49]: u = a * np.dot(l0.T, d)\n         u\nOut[49]: array([[0.00662158],\n                [0.00574321],\n                [0.00256331],\n                [0.00299762]])\n\nIn [50]: w\nOut[50]: array([[0.42110763],\n                [0.95788953],\n                [0.53316528],\n                [0.69187711]])\n\nIn [51]: w -= u\n\nIn [52]: w\nOut[52]: array([[0.41448605],\n                [0.95214632],\n                [0.53060197],\n                [0.68887949]])\n```", "```py\nIn [53]: steps = 3001\n\nIn [54]: a = 0.025\n\nIn [55]: w = np.random.random((features, 1))\n         w\nOut[55]: array([[0.41253884],\n                [0.03417131],\n                [0.62402999],\n                [0.66063573]])\n\nIn [56]: for s in range(1, steps + 1):\n             l2 = sigmoid(np.dot(l0, w))\n             e = l2 - y\n             d = e * sigmoid(l2, True)\n             u = a * np.dot(l0.T, d)\n             w -= u\n             mse = (e ** 2).mean()\n             if s % 200 == 0:\n                 print(f'step={s:4d} | mse={mse:.4f}')\n         step= 200 | mse=0.1899\n         step= 400 | mse=0.1572\n         step= 600 | mse=0.1349\n         step= 800 | mse=0.1173\n         step=1000 | mse=0.1029\n         step=1200 | mse=0.0908\n         step=1400 | mse=0.0806\n         step=1600 | mse=0.0720\n         step=1800 | mse=0.0646\n         step=2000 | mse=0.0583\n         step=2200 | mse=0.0529\n         step=2400 | mse=0.0482\n         step=2600 | mse=0.0441\n         step=2800 | mse=0.0405\n         step=3000 | mse=0.0373\n\nIn [57]: l2\nOut[57]: array([[0.71220474],\n                [0.92308745],\n                [0.16614971],\n                [0.20193503],\n                [0.17094583]])\n\nIn [58]: l2.round() == y\nOut[58]: array([[ True],\n                [ True],\n                [ True],\n                [ True],\n                [ True]])\n\nIn [59]: w\nOut[59]: array([[-3.86002022],\n                [-1.61346536],\n                [ 4.09895004],\n                [ 2.28088807]])\n```", "```py\nIn [60]: features = 5\n         samples = 5\n\nIn [61]: l0 = np.random.random((samples, features))  ![1](Images/1.png)\n         l0  ![1](Images/1.png)\nOut[61]: array([[0.29849529, 0.44613451, 0.22212455, 0.07336417, 0.46923853],\n                [0.09617226, 0.90337017, 0.11949047, 0.52479938, 0.083623  ],\n                [0.91686133, 0.91044838, 0.29893011, 0.58438912, 0.56591203],\n                [0.61393832, 0.95653566, 0.26097898, 0.23101542, 0.53344849],\n                [0.94993814, 0.49305959, 0.54060051, 0.7654851 , 0.04534573]])\n\nIn [62]: np.linalg.matrix_rank(l0)  ![2](Images/2.png)\nOut[62]: 5\n\nIn [63]: units = 3  ![3](Images/3.png)\n\nIn [64]: w0 = np.random.random((features, units))  ![4](Images/4.png)\n         w0  ![4](Images/4.png)\nOut[64]: array([[0.13996612, 0.79240359, 0.02980136],\n                [0.88312548, 0.54078819, 0.44798018],\n                [0.89213587, 0.37758434, 0.53842469],\n                [0.65229888, 0.36126102, 0.57100856],\n                [0.63783648, 0.12631489, 0.69020459]])\n\nIn [65]: l1 = np.dot(l0, w0)  ![5](Images/5.png)\n         l1  ![5](Images/5.png)\nOut[65]: array([[0.98109007, 0.64743919, 0.69411448],\n                [1.31351565, 0.81000928, 0.82927653],\n                [1.94121167, 1.61435539, 1.32042417],\n                [1.65444429, 1.25315104, 1.08742312],\n                [1.57892999, 1.50576525, 1.00865941]])\n\nIn [66]: w1 = np.random.random((units, 1))  ![6](Images/6.png)\n         w1  ![6](Images/6.png)\nOut[66]: array([[0.6477494 ],\n                [0.35393909],\n                [0.76323305]])\n\nIn [67]: l2 = np.dot(l1, w1)  ![7](Images/7.png)\n         l2  ![7](Images/7.png)\nOut[67]: array([[1.39442565],\n                [1.77045418],\n                [2.83659354],\n                [2.3451617 ],\n                [2.32554234]])\n\nIn [68]: y = np.random.random((samples, 1))  ![8](Images/8.png)\n         y  ![8](Images/8.png)\nOut[68]: array([[0.35653172],\n                [0.75278835],\n                [0.88134183],\n                [0.01166919],\n                [0.49810907]])\n```", "```py\nIn [69]: e2 = l2 - y  ![1](Images/1.png)\n         e2  ![1](Images/1.png)\nOut[69]: array([[1.03789393],\n                [1.01766583],\n                [1.95525171],\n                [2.33349251],\n                [1.82743327]])\n\nIn [70]: mse = (e2 ** 2).mean()\n         mse\nOut[70]: 2.9441152813655007\n\nIn [71]: d2 = e2 * 1  ![1](Images/1.png)\n         d2  ![1](Images/1.png)\nOut[71]: array([[1.03789393],\n                [1.01766583],\n                [1.95525171],\n                [2.33349251],\n                [1.82743327]])\n\nIn [72]: a = 0.05\n\nIn [73]: u2 = a * np.dot(l1.T, d2)  ![1](Images/1.png)\n         u2  ![1](Images/1.png)\nOut[73]: array([[0.64482837],\n                [0.51643336],\n                [0.42634283]])\n\nIn [74]: w1  ![1](Images/1.png)\nOut[74]: array([[0.6477494 ],\n                [0.35393909],\n                [0.76323305]])\n\nIn [75]: w1 -= u2  ![1](Images/1.png)\n\nIn [76]: w1  ![1](Images/1.png)\nOut[76]: array([[ 0.00292103],\n                [-0.16249427],\n                [ 0.33689022]])\n\nIn [77]: e1 = np.dot(d2, w1.T)  ![2](Images/2.png)\n\nIn [78]: d1 = e1 * 1  ![2](Images/2.png)\n\nIn [79]: u1 = a * np.dot(l0.T, d1)  ![2](Images/2.png)\n\nIn [80]: w0 -= u1  ![2](Images/2.png)\n\nIn [81]: w0  ![2](Images/2.png)\nOut[81]: array([[ 0.13918198,  0.8360247 , -0.06063583],\n                [ 0.88220599,  0.59193836,  0.34193342],\n                [ 0.89176585,  0.39816855,  0.49574861],\n                [ 0.65175984,  0.39124762,  0.50883904],\n                [ 0.63739741,  0.15074009,  0.63956519]])\n```", "```py\nIn [82]: a = 0.015\n         steps = 5000\n\nIn [83]: for s in range(1, steps + 1):\n             l1 = np.dot(l0, w0)\n             l2 = np.dot(l1, w1)\n             e2 = l2 - y\n             u2 = a * np.dot(l1.T, e2)\n             w1 -= u2\n             e1 = np.dot(e2, w1.T)\n             u1 = a * np.dot(l0.T, e1)\n             w0 -= u1\n             mse = (e2 ** 2).mean()\n             if s % 750 == 0:\n                 print(f'step={s:5d} | mse={mse:.6f}')\n         step=  750 | mse=0.039263\n         step= 1500 | mse=0.009867\n         step= 2250 | mse=0.000666\n         step= 3000 | mse=0.000027\n         step= 3750 | mse=0.000001\n         step= 4500 | mse=0.000000\n\nIn [84]: l2\nOut[84]: array([[0.35634333],\n                [0.75275415],\n                [0.88135507],\n                [0.01179945],\n                [0.49809208]])\n\nIn [85]: y\nOut[85]: array([[0.35653172],\n                [0.75278835],\n                [0.88134183],\n                [0.01166919],\n                [0.49810907]])\n\nIn [86]: (l2 - y)\nOut[86]: array([[-0.00018839],\n                [-0.00003421],\n                [ 0.00001324],\n                [ 0.00013025],\n                [-0.00001699]])\n```", "```py\nIn [87]: features = 5\n         samples = 10\n         units = 10\n\nIn [88]: np.random.seed(200)\n         l0 = np.random.randint(0, 2, (samples, features))  ![1](Images/1.png)\n         w0 = np.random.random((features, units))\n         w1 = np.random.random((units, 1))\n         y = np.random.randint(0, 2, (samples, 1))  ![2](Images/2.png)\n\nIn [89]: l0  ![1](Images/1.png)\nOut[89]: array([[0, 1, 0, 0, 0],\n                [1, 0, 1, 1, 0],\n                [1, 1, 1, 1, 0],\n                [0, 0, 1, 1, 1],\n                [1, 1, 1, 1, 0],\n                [1, 1, 0, 1, 0],\n                [0, 1, 0, 1, 0],\n                [0, 1, 0, 0, 1],\n                [0, 1, 1, 1, 1],\n                [0, 0, 1, 0, 0]])\n\nIn [90]: y  ![2](Images/2.png)\nOut[90]: array([[1],\n                [0],\n                [1],\n                [0],\n                [1],\n                [0],\n                [0],\n                [0],\n                [1],\n                [1]])\n```", "```py\nIn [91]: a = 0.1\n         steps = 20000\n\nIn [92]: for s in range(1, steps + 1):\n             l1 = sigmoid(np.dot(l0, w0))  ![1](Images/1.png)\n             l2 = sigmoid(np.dot(l1, w1))  ![1](Images/1.png)\n             e2 = l2 - y  ![2](Images/2.png)\n             d2 = e2 * sigmoid(l2, True)  ![2](Images/2.png)\n             u2 = a * np.dot(l1.T, d2)  ![2](Images/2.png)\n             w1 -= u2  ![2](Images/2.png)\n             e1 = np.dot(d2, w1.T)  ![2](Images/2.png)\n             d1 = e1 * sigmoid(l1, True)  ![2](Images/2.png)\n             u1 = a * np.dot(l0.T, d1)  ![2](Images/2.png)\n             w0 -= u1  ![2](Images/2.png)\n             mse = (e2 ** 2).mean()\n             if s % 2000 == 0:\n                 print(f'step={s:5d} | mse={mse:.5f}')\n         step= 2000 | mse=0.00933\n         step= 4000 | mse=0.02399\n         step= 6000 | mse=0.05134\n         step= 8000 | mse=0.00064\n         step=10000 | mse=0.00013\n         step=12000 | mse=0.00009\n         step=14000 | mse=0.00007\n         step=16000 | mse=0.00007\n         step=18000 | mse=0.00012\n         step=20000 | mse=0.00015\n\nIn [93]: acc = l2.round() == y  ![3](Images/3.png)\n         acc  ![3](Images/3.png)\nOut[93]: array([[ True],\n                [ True],\n                [ True],\n                [ True],\n                [ True],\n                [ True],\n                [ True],\n                [ True],\n                [ True],\n                [ True]])\n\nIn [94]: sum(acc) / len(acc)  ![3](Images/3.png)\nOut[94]: array([1.])\n```"]
- en: Chapter 6\. Object Orientated Programming
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第6章。面向对象编程
- en: The purpose of software engineering is to control complexity, not to create
    it.
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 软件工程的目的是控制复杂性，而不是创建它。
- en: ''
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Pamela Zave
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Pamela Zave
- en: Introduction
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: Object oriented programming (OOP) is one of the most popular programming paradigms
    today. Used in the right way, it provides a number of advantages compared to,
    for example, procedural programming. In many cases, OOP seems to be particularly
    suited for financial modeling and implementing financial algorithms. However,
    there are also many critics of OOP, voicing their skepticism targeted towards
    single aspects of OOP or even the paradigm as a whole. This chapter takes a neutral
    stance in that OOP is considered an important tool that might not be the best
    one for every single problem, but one that should be at the disposal of programmers
    and quants working in finance.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 面向对象编程（OOP）是当今最流行的编程范式之一。正确使用时，它与过程式编程相比提供了许多优势。在许多情况下，OOP似乎特别适用于金融建模和实施金融算法。然而，也有许多对OOP持批评态度的人，对OOP的单个方面甚至整个范式表示怀疑。本章对此持中立态度，认为OOP是一个重要的工具，可能不是每个问题的最佳解决方案，但应该是程序员和从事金融工作的量化人员的手头工具之一。
- en: 'With OOP, some new language comes along. The most important terms for the purposes
    of this book and chapter are (more follow below):'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 随着OOP的出现，一些新的术语也随之而来。本书和本章的最重要术语是（更多细节如下）：
- en: Class
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 类
- en: An abstract definition of a class of objects. For example, a human being.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 对象类的抽象定义。例如，一个人类。
- en: Attribute
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 属性
- en: A feature of the class (*class attribute*) or of an instance of the class (*instance
    attribute*). For example, being a mammal or color of the eyes.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 类的特性（*类属性*）或类的实例（*实例属性*）的一个特征。例如，是哺乳动物或眼睛的颜色。
- en: Method
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 方法
- en: An operation that can be implemented on the class. For example, walking.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在类上实现的操作。例如，行走。
- en: Parameters
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 参数
- en: Input parameters taken by a method to influence its behavior. For example, three
    steps.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 一个方法接受的输入参数以影响其行为。例如，三个步骤。
- en: Object
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 对象
- en: An instance of a class. For example, Sandra with blue eyes.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 类的一个实例。例如，有蓝眼睛的Sandra。
- en: Instantiation
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 实例化
- en: The process of creating a specific object based on an abstract class.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 创建基于抽象类的特定对象的过程。
- en: Translated into Python code, a simple class implementing the example of a human
    being might look as follows.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 转换为Python代码，实现人类示例的简单类可能如下所示。
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[![1](images/1.png)](#co_object_orientated_programming_CO1-1)'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](images/1.png)](#co_object_orientated_programming_CO1-1)'
- en: Class definition statement.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 类定义语句。
- en: '[![2](images/2.png)](#co_object_orientated_programming_CO1-2)'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](images/2.png)](#co_object_orientated_programming_CO1-2)'
- en: Special method called during instantiation.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在实例化时调用的特殊方法。
- en: '[![3](images/3.png)](#co_object_orientated_programming_CO1-3)'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](images/3.png)](#co_object_orientated_programming_CO1-3)'
- en: First name attribute initialized with parameter value.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 名字属性初始化为参数值。
- en: '[![4](images/4.png)](#co_object_orientated_programming_CO1-4)'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](images/4.png)](#co_object_orientated_programming_CO1-4)'
- en: Eye color attribute initialized with parameter value.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 眼睛颜色属性初始化为参数值。
- en: '[![5](images/5.png)](#co_object_orientated_programming_CO1-5)'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](images/5.png)](#co_object_orientated_programming_CO1-5)'
- en: Position attribute initialized with 0.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 位置属性初始化为0。
- en: '[![6](images/6.png)](#co_object_orientated_programming_CO1-6)'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '[![6](images/6.png)](#co_object_orientated_programming_CO1-6)'
- en: Method definition for walking with `steps` as parameter.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`steps`作为参数的步行方法定义。
- en: '[![7](images/7.png)](#co_object_orientated_programming_CO1-7)'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '[![7](images/7.png)](#co_object_orientated_programming_CO1-7)'
- en: Code that changes the position given the `steps` value.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 给定`steps`值后改变位置的代码。
- en: Based on the class definition, a new Python object can be instantiated and used.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 根据类定义，可以实例化并使用一个新的Python对象。
- en: '[PRE1]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[![1](images/1.png)](#co_object_orientated_programming_CO2-1)'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](images/1.png)](#co_object_orientated_programming_CO2-1)'
- en: The instantiation.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 实例化。
- en: '[![2](images/2.png)](#co_object_orientated_programming_CO2-2)'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](images/2.png)](#co_object_orientated_programming_CO2-2)'
- en: Accessing attribute values.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 访问属性值。
- en: '[![3](images/3.png)](#co_object_orientated_programming_CO2-4)'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](images/3.png)](#co_object_orientated_programming_CO2-4)'
- en: Calling the method.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 调用方法。
- en: '[![4](images/4.png)](#co_object_orientated_programming_CO2-5)'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](images/4.png)](#co_object_orientated_programming_CO2-5)'
- en: Accessing the updated `position` value.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 访问更新后的`position`值。
- en: 'There are several *human aspects* that might speak for the use of OOP:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 有几个*人类方面*可能支持使用OOP：
- en: Natural way of thinking
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 自然的思考方式
- en: Human thinking typically evolves around real-world or abstract objects, like,
    for example, a car or a financial instrument. OOP is suited to model such objects
    with their characteristics.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 人类思维通常围绕着现实世界或抽象对象展开，比如汽车或金融工具。面向对象编程适合模拟具有其特征的这类对象。
- en: Reducing complexity
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 降低复杂性
- en: Via different approaches, OOP helps reducing the complexity of a problem or
    algorithm and to model it feature-by-feature.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 通过不同的方法，面向对象编程有助于降低问题或算法的复杂性，并逐个特征进行建模。
- en: Nicer user interfaces
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 更好的用户界面
- en: OOP allows in many cases for nicer user interfaces and more compact code. This
    becomes evident, for example, when looking at `NumPy`’s `ndarray` class or `pandas`’s
    `DataFrame` class.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多情况下，面向对象编程可以实现更美观的用户界面和更紧凑的代码。例如，当查看`NumPy`的`ndarray`类或`pandas`的`DataFrame`类时，这一点变得显而易见。
- en: Pythonic way of modeling
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Python建模的方式
- en: Independent of the pros and cons of OOP, it is simply the dominating paradigm
    in Python. This is where the saying “Everything is an object in Python.” comes
    from. OOP also allows the programmer o build custom classes whose instances behave
    like every other instance of a standard Python class.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 独立于面向对象编程的优缺点，它只是Python中的主导范式。这也是“在Python中一切皆为对象。”这句话的由来。面向对象编程还允许程序员构建自定义类，其实例的行为与标准Python类的任何其他实例相同。
- en: 'There are also several *technical aspects* that might speak for OOP:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 也有一些*技术方面*可能支持面向对象编程：
- en: Abstraction
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 抽象化
- en: The use of attributes and methods allows building abstract, flexible models
    of objects — with a focus on what is relevant and neglecting what is not needed.
    In finance, this might mean to have a general class that models a financial instrument
    in abstract fashion. Instances of such a class would then be concrete financial
    products, engineered and offered by an investment bank, for example.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 使用属性和方法可以构建对象的抽象、灵活的模型——重点放在相关的内容上，忽略不需要的内容。在金融领域，这可能意味着拥有一个以抽象方式模拟金融工具的通用类。这种类的实例将是由投资银行设计和提供的具体金融产品，例如。
- en: Modularity
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 模块化
- en: OOP simplifies to break code down into multiple modules which are then linked
    to form the complete code basis. For example, modeling a European option on a
    stock could be achieved by a single class or by two classes, one for the underlying
    stock and one for the option itself.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 面向对象编程简化了将代码拆分为多个模块的过程，然后将这些模块链接起来形成完整的代码基础。例如，可以通过一个类或两个类来建模股票上的欧式期权，一个用于基础股票，另一个用于期权本身。
- en: Inheritance
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 继承
- en: Inheritance refers to the concept that one class can *inherit* attributes and
    methods from another class. In finance, starting with a general financial instrument,
    the next level could be a general derivative instrument, then a European option,
    then a European call option. Every class might inherit attributes and methods
    from classes on a higher level.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 继承指的是一个类可以从另一个类继承属性和方法的概念。在金融领域，从一个通用的金融工具开始，下一个级别可能是一个通用的衍生金融工具，然后是一个欧式期权，再然后是一个欧式看涨期权。每个类都可以从更高级别的类中继承属性和方法。
- en: Aggregation
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 聚合
- en: Aggregation refers to the case in which an object is at least partly made up
    of multiple other objects that might exist independently. A class modeling a European
    call option might have as attributes other objects for both the underlying stock
    and the relevant short rate for discounting. The objects representing the stock
    and the short rate can be used independently by other objects as well.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 聚合指的是一个对象至少部分由多个其他对象组成，这些对象可能是独立存在的。模拟欧式看涨期权的类可能具有其他对象的属性，例如基础股票和用于贴现的相关短期利率。表示股票和短期利率的对象也可以被其他对象独立使用。
- en: Composition
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 组合
- en: Composition is similar to aggregation, but here the single objects cannot exist
    independently of each other. Consider a custom-tailored interest rate swap with
    a fixed leg and a floating leg. The two legs do not exist independently of the
    swap itself.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 组合与聚合类似，但是这里的单个对象不能独立存在。考虑一个定制的固定利率互换合同和一个浮动利率互换合同。这两个腿不能独立于互换合同本身存在。
- en: Polymorphism
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 多态性
- en: Polymorphism can take on multiple forms. Of particular importance in a Python
    context is what is called *duck typing*. This refers to the fact that standard
    operations can be implemented on many different classes and their instances without
    knowing exactly what particular object one is dealing with. For a class of financial
    instruments this might mean that one can call a method `get_current_price()` independent
    of the specific type of the object (stock, option, swap).
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 多态性可以呈现多种形式。在 Python 上下文中特别重要的是所谓的*鸭子类型*。这指的是可以在许多不同类及其实例上实现标准操作，而不需要准确知道正在处理的特定对象是什么。对于金融工具类，这可能意味着可以调用一个名为
    `get_current_price()` 的方法，而不管对象的具体类型是什么（股票、期权、互换等）。
- en: Encapsulation
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 封装
- en: This concept refers to the approach of making data within a class only accessible
    via public methods. A class modeling a stock might have an attribute `current_stock_price`.
    Encapsulation would then give access to the attribute value via a method `get_current_stock_price()`
    and would hide the data from the user (make it private). This approach might avoid
    unintended effects by simply working with and possibly changing attribute values.
    However, there are limits as to how data can be made private in a Python class.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 此概念指的是仅通过公共方法访问类内部数据的方法。模拟股票的类可能有一个属性 `current_stock_price`。封装将通过方法 `get_current_stock_price()`
    提供对属性值的访问，并将数据隐藏（使其私有化）。这种方法可能通过仅使用和可能更改属性值来避免意外效果。但是，对于如何使数据在 Python 类中私有化存在限制。
- en: 'On a somewhat higher level, many of these aspects can be summarized by *two
    generals goals* in software engineering:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在更高层面上，软件工程中的*两个主要目标*可以总结如下：
- en: Re-usability
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 可重用性
- en: Concepts like inheritance and polymorphism improve code re-usability and increase
    efficiency and productivity of the programmer. They also simplify code maintenance.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 继承和多态等概念提高了代码的可重用性，增加了程序员的效率和生产力。它们还简化了代码的维护。
- en: Non-redundancy
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 非冗余性
- en: At the same time, these approaches allow to build a almost non-redundant code,
    avoiding double implementation effort, reducing debugging and testing effort as
    well as maintenance effort. It might also lead to a smaller overall code basis.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 与此同时，这些方法允许构建几乎不冗余的代码，避免双重实现工作，减少调试和测试工作以及维护工作量。它还可能导致更小的总体代码基础。
- en: 'The chapter is organized as follows:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 本章按如下方式组织：
- en: '[“A Look at Python Objects”](#py_objects)'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '[“Python 对象概览”](#py_objects)'
- en: The subsequent section takes a look at some Python objects through the lens
    of OOP.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 下一节将通过面向对象编程的视角简要介绍一些 Python 对象。
- en: '[“Basics of Python Classes”](#oop_basics)'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '[“Python 类基础”](#oop_basics)'
- en: This section introduces central elements of OOP in Python and uses financial
    instruments and portfolio positions as major examples.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 本节介绍了 Python 中面向对象编程的核心要素，并以金融工具和投资组合头寸为主要示例。
- en: '[“Python Data Model”](#data_model)'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '[“Python 数据模型”](#data_model)'
- en: This section discusses important elements of the Python data model and roles
    that certain special methods play.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 本节讨论了 Python 数据模型的重要元素以及某些特殊方法所起的作用。
- en: A Look at Python Objects
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 对象概览
- en: This section takes a brief look at some standard object, already encountered
    in previous section through the eyes of an OOP programmer.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 本节通过面向对象编程程序员的眼光简要介绍了一些标准对象，这些对象在前一节中已经遇到过。
- en: int
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: int
- en: To start simple, consider an integer object. Even for such a simple Python object,
    the major OOP features are present.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简单起见，考虑一个整数对象。即使对于这样一个简单的 Python 对象，主要的面向对象编程（OOP）特征也是存在的。
- en: '[PRE2]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[![1](images/1.png)](#co_object_orientated_programming_CO3-1)'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](images/1.png)](#co_object_orientated_programming_CO3-1)'
- en: New instance `n`.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 新实例 `n`。
- en: '[![2](images/2.png)](#co_object_orientated_programming_CO3-2)'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](images/2.png)](#co_object_orientated_programming_CO3-2)'
- en: Type of the object.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 对象的类型。
- en: '[![3](images/3.png)](#co_object_orientated_programming_CO3-3)'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](images/3.png)](#co_object_orientated_programming_CO3-3)'
- en: An attribute.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 一个属性。
- en: '[![4](images/4.png)](#co_object_orientated_programming_CO3-4)'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](images/4.png)](#co_object_orientated_programming_CO3-4)'
- en: A method.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 一个方法。
- en: '[![5](images/5.png)](#co_object_orientated_programming_CO3-5)'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](images/5.png)](#co_object_orientated_programming_CO3-5)'
- en: Applying the + operator (addition).
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 应用 + 运算符（加法）。
- en: '[![6](images/6.png)](#co_object_orientated_programming_CO3-6)'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '[![6](images/6.png)](#co_object_orientated_programming_CO3-6)'
- en: Applying the * operator (multiplication).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 应用 * 运算符（乘法）。
- en: '[![7](images/7.png)](#co_object_orientated_programming_CO3-7)'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '[![7](images/7.png)](#co_object_orientated_programming_CO3-7)'
- en: Calling the special method `__sizeof__()` to get the memory usage in bytes.^([1](ch06.html#idm140277674288640))
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 调用特殊方法`__sizeof__()`以获取内存使用情况（以字节为单位）。^([1](ch06.html#idm140277674288640))
- en: list
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列表
- en: '`list` objects have, for example, some more methods but basically behave the
    same way.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`list`对象有一些额外的方法，但基本上表现方式相同。'
- en: '[PRE3]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[![1](images/1.png)](#co_object_orientated_programming_CO4-1)'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](images/1.png)](#co_object_orientated_programming_CO4-1)'
- en: New instance `l`.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 新实例`l`。
- en: '[![2](images/2.png)](#co_object_orientated_programming_CO4-2)'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](images/2.png)](#co_object_orientated_programming_CO4-2)'
- en: Type of the object.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 对象的类型。
- en: '[![3](images/3.png)](#co_object_orientated_programming_CO4-3)'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](images/3.png)](#co_object_orientated_programming_CO4-3)'
- en: Selecting an element via indexing.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 通过索引选择元素。
- en: '[![4](images/4.png)](#co_object_orientated_programming_CO4-4)'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](images/4.png)](#co_object_orientated_programming_CO4-4)'
- en: A method.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 一个方法。
- en: '[![5](images/5.png)](#co_object_orientated_programming_CO4-5)'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](images/5.png)](#co_object_orientated_programming_CO4-5)'
- en: Applying the + operator (concatenation).
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 应用+运算符（连接）。
- en: '[![6](images/6.png)](#co_object_orientated_programming_CO4-6)'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '[![6](images/6.png)](#co_object_orientated_programming_CO4-6)'
- en: Applying the * operator (concatenation).
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 应用*运算符（连接）。
- en: '[![7](images/7.png)](#co_object_orientated_programming_CO4-7)'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '[![7](images/7.png)](#co_object_orientated_programming_CO4-7)'
- en: Applying the standard Python function `sum()`.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 应用标准 Python 函数`sum()`。
- en: '[![8](images/8.png)](#co_object_orientated_programming_CO4-8)'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '[![8](images/8.png)](#co_object_orientated_programming_CO4-8)'
- en: Calling the special method `__sizeof__()` to get the memory usage in bytes.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 调用特殊方法`__sizeof__()`以获取内存使用情况（以字节为单位）。
- en: ndarray
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ndarray
- en: '`int` and `list` objects are standard Python objects. The `NumPy` `ndarray`
    object is a “custom-made” object from an open source package.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`int`和`list`对象是标准的 Python 对象。`NumPy`的`ndarray`对象是一个来自开源包的“自定义”对象。'
- en: '[PRE4]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[![1](images/1.png)](#co_object_orientated_programming_CO5-1)'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](images/1.png)](#co_object_orientated_programming_CO5-1)'
- en: Importing `numpy`.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 导入`numpy`。
- en: '[![2](images/2.png)](#co_object_orientated_programming_CO5-2)'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](images/2.png)](#co_object_orientated_programming_CO5-2)'
- en: A new instance `a`.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 新实例`a`。
- en: '[![3](images/3.png)](#co_object_orientated_programming_CO5-4)'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](images/3.png)](#co_object_orientated_programming_CO5-4)'
- en: Type of the object.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 对象的类型。
- en: Although the `ndarray` object is not a standard object, it behaves in many cases
    as if it would be one — thanks to the Python data model as explained further below.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管`ndarray`对象不是标准对象，但在许多情况下表现得就像是一个标准对象——这要归功于下文中解释的Python数据模型。
- en: '[PRE5]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[![1](images/1.png)](#co_object_orientated_programming_CO6-1)'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](images/1.png)](#co_object_orientated_programming_CO6-1)'
- en: An attribute.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 一个属性。
- en: '[![2](images/2.png)](#co_object_orientated_programming_CO6-2)'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](images/2.png)](#co_object_orientated_programming_CO6-2)'
- en: A method (aggregation).
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 一个方法（聚合）。
- en: '[![3](images/3.png)](#co_object_orientated_programming_CO6-3)'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](images/3.png)](#co_object_orientated_programming_CO6-3)'
- en: A method (no aggregation).
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 一个方法（没有聚合）。
- en: '[![4](images/4.png)](#co_object_orientated_programming_CO6-4)'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](images/4.png)](#co_object_orientated_programming_CO6-4)'
- en: Applying the + operator (addition).
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 应用+运算符（加法）。
- en: '[![5](images/5.png)](#co_object_orientated_programming_CO6-5)'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](images/5.png)](#co_object_orientated_programming_CO6-5)'
- en: Applying the * operator (multiplication).
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 应用*运算符（乘法）。
- en: '[![6](images/6.png)](#co_object_orientated_programming_CO6-6)'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '[![6](images/6.png)](#co_object_orientated_programming_CO6-6)'
- en: Applying the standard Python function `sum()`.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 应用标准 Python 函数`sum()`。
- en: '[![7](images/7.png)](#co_object_orientated_programming_CO6-7)'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '[![7](images/7.png)](#co_object_orientated_programming_CO6-7)'
- en: Applying the `NumPy` universal function `np.sum()`.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 应用`NumPy`通用函数`np.sum()`。
- en: '[![8](images/8.png)](#co_object_orientated_programming_CO6-8)'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '[![8](images/8.png)](#co_object_orientated_programming_CO6-8)'
- en: Calling the special method `__sizeof__()` to get the memory usage in bytes.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 调用特殊方法`__sizeof__()`以获取内存使用情况（以字节为单位）。
- en: DataFrame
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DataFrame
- en: Finally, a quick look at the `pandas` `DataFrame` object for the behavior is
    mostly the same as for the `ndarray` object. First, the instantiation of the `DataFrame`
    object based on the `ndarray` object.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，快速查看`pandas`的`DataFrame`对象，因为其行为大多与`ndarray`对象相同。首先，基于`ndarray`对象实例化`DataFrame`对象。
- en: '[PRE6]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[![1](images/1.png)](#co_object_orientated_programming_CO7-1)'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](images/1.png)](#co_object_orientated_programming_CO7-1)'
- en: Importing `pandas`.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 导入`pandas`。
- en: '[![2](images/2.png)](#co_object_orientated_programming_CO7-2)'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](images/2.png)](#co_object_orientated_programming_CO7-2)'
- en: A new instance `df`.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 新实例`df`。
- en: '[![3](images/3.png)](#co_object_orientated_programming_CO7-3)'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](images/3.png)](#co_object_orientated_programming_CO7-3)'
- en: Type of the object.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 对象的类型。
- en: Second, a look at attributes, methods and operations.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，查看属性、方法和操作。
- en: '[PRE7]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[![1](images/1.png)](#co_object_orientated_programming_CO8-1)'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](images/1.png)](#co_object_orientated_programming_CO8-1)'
- en: An attribute.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 一个属性。
- en: '[![2](images/2.png)](#co_object_orientated_programming_CO8-2)'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](images/2.png)](#co_object_orientated_programming_CO8-2)'
- en: A method (aggregation).
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 一个方法（聚合）。
- en: '[![3](images/3.png)](#co_object_orientated_programming_CO8-3)'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](images/3.png)](#co_object_orientated_programming_CO8-3)'
- en: A method (no aggregation).
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 一个方法（无聚合）。
- en: '[![4](images/4.png)](#co_object_orientated_programming_CO8-4)'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](images/4.png)](#co_object_orientated_programming_CO8-4)'
- en: Applying the + operator (addition).
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 应用+运算符（加法）。
- en: '[![5](images/5.png)](#co_object_orientated_programming_CO8-5)'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](images/5.png)](#co_object_orientated_programming_CO8-5)'
- en: Applying the * operator (multiplication).
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 应用*运算符（乘法）。
- en: '[![6](images/6.png)](#co_object_orientated_programming_CO8-6)'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '[![6](images/6.png)](#co_object_orientated_programming_CO8-6)'
- en: Applying the `NumPy` universal function `np.sum()`.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 应用`NumPy`通用函数`np.sum()`。
- en: '[![7](images/7.png)](#co_object_orientated_programming_CO8-7)'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '[![7](images/7.png)](#co_object_orientated_programming_CO8-7)'
- en: Calling the special method `__sizeof__()` to get the memory usage in bytes.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 调用特殊方法`__sizeof__()`以获取以字节为单位的内存使用情况。
- en: Basics of Python Classes
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python类的基础知识
- en: This section is about major concepts and the concrete syntax to make use of
    OOP in Python. The context now is about building custom made classes to model
    types of objects that cannot easily, efficiently or properly modeled by existing
    Python object types. Throughout the example of a *financial instrument* is used.
    Two lines of code suffice to create a new Python class.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 本节涉及主要概念和具体语法，以利用Python中的OOP。当前的背景是构建自定义类来模拟无法轻松、高效或适当地由现有Python对象类型建模的对象类型。在*金融工具*的示例中，只需两行代码即可创建一个新的Python类。
- en: '[PRE8]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[![1](images/1.png)](#co_object_orientated_programming_CO9-1)'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](images/1.png)](#co_object_orientated_programming_CO9-1)'
- en: Class definition statement.^([2](ch06.html#idm140277672765360))
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 类定义语句。^([2](ch06.html#idm140277672765360))
- en: '[![2](images/2.png)](#co_object_orientated_programming_CO9-2)'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](images/2.png)](#co_object_orientated_programming_CO9-2)'
- en: Some code; here simply the `pass` keyword.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 一些代码；这里只是`pass`关键字。
- en: '[![3](images/3.png)](#co_object_orientated_programming_CO9-3)'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](images/3.png)](#co_object_orientated_programming_CO9-3)'
- en: A new instance of the class named `fi`.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 一个名为`fi`的类的新实例。
- en: '[![4](images/4.png)](#co_object_orientated_programming_CO9-4)'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](images/4.png)](#co_object_orientated_programming_CO9-4)'
- en: Every Python object comes with certain, so-called special attributes and methods
    (from `object`); here the special method to retrieve the string representation
    is called.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 每个Python对象都带有某些特殊属性和方法（来自`object`）；这里调用了用于检索字符串表示的特殊方法。
- en: '[![5](images/5.png)](#co_object_orientated_programming_CO9-6)'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](images/5.png)](#co_object_orientated_programming_CO9-6)'
- en: So-called data attributes — in contrast to regular attributes — can be defined
    on the fly for every object.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 所谓的数据属性 —— 与常规属性相对 —— 可以为每个对象即时定义。
- en: '[![6](images/6.png)](#co_object_orientated_programming_CO9-7)'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '[![6](images/6.png)](#co_object_orientated_programming_CO9-7)'
- en: An important special method is `__init__` which gets called during every instantiation
    of an object. It takes as parameters the object itself (`self` by convention)
    and potentially multiple others. In addition to instance attributes
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 一个重要的特殊方法是`__init__`，它在每次实例化对象时被调用。它以对象自身（按照惯例为`self`）和可能的多个其他参数作为参数。除了实例属性之外
- en: '[PRE9]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[![1](images/1.png)](#co_object_orientated_programming_CO10-1)'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](images/1.png)](#co_object_orientated_programming_CO10-1)'
- en: Definition of a class attribute (= inherited by every instance).
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 类属性的定义（=每个实例都继承的）。
- en: '[![2](images/2.png)](#co_object_orientated_programming_CO10-2)'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](images/2.png)](#co_object_orientated_programming_CO10-2)'
- en: The special method `__init__` called during initialization.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 在初始化期间调用特殊方法`__init__`。
- en: '[![3](images/3.png)](#co_object_orientated_programming_CO10-3)'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](images/3.png)](#co_object_orientated_programming_CO10-3)'
- en: Definition of the instance attributes (= individual to every instance).
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 实例属性的定义（=每个实例都是个别的）。
- en: '[![4](images/4.png)](#co_object_orientated_programming_CO10-6)'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](images/4.png)](#co_object_orientated_programming_CO10-6)'
- en: A new instance of the class named `fi`.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 一个名为`fi`的类的新实例。
- en: '[![5](images/5.png)](#co_object_orientated_programming_CO10-7)'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](images/5.png)](#co_object_orientated_programming_CO10-7)'
- en: Accessing an instance attribute.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 访问实例属性。
- en: '[![6](images/6.png)](#co_object_orientated_programming_CO10-8)'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '[![6](images/6.png)](#co_object_orientated_programming_CO10-8)'
- en: Accessing a class attribute.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 访问类属性。
- en: '[![7](images/7.png)](#co_object_orientated_programming_CO10-9)'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '[![7](images/7.png)](#co_object_orientated_programming_CO10-9)'
- en: Changing the value of an instance attribute.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 更改实例属性的值。
- en: Prices of financial instruments change regularly, the symbol of a financial
    instrument probably does not change. To introduce encapsulation to the class definition,
    two methods `get_price()` and `set_price()` might be defined. The code that follows
    additionally inherits from the previous class definition (and not from `object`
    anymore).
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 金融工具的价格经常变动，金融工具的符号可能不会变动。为了向类定义引入封装，可以定义两个方法`get_price()`和`set_price()`。接下来的代码还额外继承了之前的类定义（不再继承自`object`）。
- en: '[PRE10]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[![1](images/1.png)](#co_object_orientated_programming_CO11-1)'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](images/1.png)](#co_object_orientated_programming_CO11-1)'
- en: Class definition via inheritance from previous version.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 通过从上一个版本继承的方式进行类定义。
- en: '[![2](images/2.png)](#co_object_orientated_programming_CO11-2)'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](images/2.png)](#co_object_orientated_programming_CO11-2)'
- en: Defines the `get_price` method.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 定义`get_price`方法。
- en: '[![3](images/3.png)](#co_object_orientated_programming_CO11-4)'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](images/3.png)](#co_object_orientated_programming_CO11-4)'
- en: Defines the `set_price` method …
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 定义`set_price`方法……
- en: '[![4](images/4.png)](#co_object_orientated_programming_CO11-5)'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](images/4.png)](#co_object_orientated_programming_CO11-5)'
- en: … and updates the instance attribute value given the parameter value.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: ……并根据参数值更新实例属性值。
- en: '[![5](images/5.png)](#co_object_orientated_programming_CO11-6)'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](images/5.png)](#co_object_orientated_programming_CO11-6)'
- en: A new instance based on the new class definition named `fi`.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 基于新的类定义创建一个名为`fi`的新实例。
- en: '[![6](images/6.png)](#co_object_orientated_programming_CO11-7)'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '[![6](images/6.png)](#co_object_orientated_programming_CO11-7)'
- en: Calls the `get_price()` method to read the instance attribute value.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 调用`get_price()`方法来读取实例属性值。
- en: '[![7](images/7.png)](#co_object_orientated_programming_CO11-8)'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '[![7](images/7.png)](#co_object_orientated_programming_CO11-8)'
- en: Updates the instance attribute value via `set_price()`.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 通过`set_price()`更新实例属性值。
- en: '[![8](images/8.png)](#co_object_orientated_programming_CO11-10)'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '[![8](images/8.png)](#co_object_orientated_programming_CO11-10)'
- en: Direct access to the instance attribute.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 直接访问实例属性。
- en: Encapsulation generally has the goal of hiding data from the user working with
    a class. Adding respective methods, sometimes called *getter* and *setter* methods,
    is one part of achieving this goal. This does not prevent, however, that the user
    my still directly access and manipulate instance attributes. This is where *private*
    instance attributes come into play. They are defined by two leading underscores.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 封装通常的目标是隐藏用户对类的操作中的数据。添加相应的方法，有时称为*getter*和*setter*方法，是实现此目标的一部分。然而，这并不阻止用户直接访问和操作实例属性。这就是*私有*实例属性发挥作用的地方。它们由两个前导下划线定义。
- en: '[PRE11]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[![1](images/1.png)](#co_object_orientated_programming_CO12-1)'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](images/1.png)](#co_object_orientated_programming_CO12-1)'
- en: Price is defined as a private instance attribute.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 价格被定义为私有实例属性。
- en: '[![2](images/2.png)](#co_object_orientated_programming_CO12-2)'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](images/2.png)](#co_object_orientated_programming_CO12-2)'
- en: The method `get_price()` returns its value.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 方法`get_price()`返回其值。
- en: '[![3](images/3.png)](#co_object_orientated_programming_CO12-3)'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](images/3.png)](#co_object_orientated_programming_CO12-3)'
- en: Trying to access the attribute directly raises an error.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试直接访问属性会引发错误。
- en: '[![4](images/4.png)](#co_object_orientated_programming_CO12-5)'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](images/4.png)](#co_object_orientated_programming_CO12-5)'
- en: By prepending the class name with a single leading underscore, direct access
    and manipulation are still possible.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在类名前添加单个下划线，仍然可以直接访问和操作。
- en: '[![5](images/5.png)](#co_object_orientated_programming_CO12-7)'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](images/5.png)](#co_object_orientated_programming_CO12-7)'
- en: Sets the price back to its original value.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 将价格恢复到其原始值。
- en: Caution
  id: totrans-231
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Although encapsulation can basically be implemented for Python classes via private
    instance attributes and respective methods dealing with them, the hiding of data
    from the user cannot be fully enforced. In that sense, it is rather an engineering
    principle in Python than a technical feature of Python classes.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管封装基本上可以通过私有实例属性和处理它们的方法来实现 Python 类，但无法完全强制隐藏数据不让用户访问。从这个意义上说，这更像是 Python
    中的一种工程原则，而不是 Python 类的技术特性。
- en: Consider another class that models a portfolio position of a financial instrument.
    With the two classes *aggregation* as a concept is easily illustrated. An instance
    of the `PortfolioPosition` class takes an instance of the `FinancialInstrument`
    class as attribute value. Adding an instance attribute, such as `position_size`,
    one can then calculate, for instance, the position value.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑另一个模拟金融工具投资组合头寸的类。通过两个类，*聚合*的概念很容易说明。`PortfolioPosition`类的一个实例将`FinancialInstrument`类的一个实例作为属性值。添加一个实例属性，比如`position_size`，然后可以计算出例如头寸价值。
- en: '[PRE12]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[![1](images/1.png)](#co_object_orientated_programming_CO13-1)'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](images/1.png)](#co_object_orientated_programming_CO13-1)'
- en: An instance attribute based on an instance of the `FinancialInstrument` class.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 基于`FinancialInstrument`类的实例的实例属性。
- en: '[![2](images/2.png)](#co_object_orientated_programming_CO13-2)'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](images/2.png)](#co_object_orientated_programming_CO13-2)'
- en: A private instance attribute of the `PortfolioPosition` class.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '`PortfolioPosition`类的私有实例属性。'
- en: '[![3](images/3.png)](#co_object_orientated_programming_CO13-3)'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](images/3.png)](#co_object_orientated_programming_CO13-3)'
- en: Calculates the position value based on the attributes.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 根据属性计算位置值。
- en: '[![4](images/4.png)](#co_object_orientated_programming_CO13-5)'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](images/4.png)](#co_object_orientated_programming_CO13-5)'
- en: Methods attached to the instance attribute object can be accessed directly (could
    be hidden as well).
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 附加到实例属性对象的方法可以直接访问（也可能被隐藏）。
- en: '[![5](images/5.png)](#co_object_orientated_programming_CO13-6)'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](images/5.png)](#co_object_orientated_programming_CO13-6)'
- en: Updates the price of the financial instrument.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 更新金融工具的价格。
- en: '[![6](images/6.png)](#co_object_orientated_programming_CO13-7)'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '[![6](images/6.png)](#co_object_orientated_programming_CO13-7)'
- en: Calculates the new position value based on the updated price.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 根据更新后的价格计算新位置值。
- en: Python Data Model
  id: totrans-247
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python数据模型
- en: 'The examples of the previous section already highlight some aspects of the
    so-called Python data or object model (cf. [*https://docs.python.org/3/reference/datamodel.html*](https://docs.python.org/3/reference/datamodel.html)).
    The Python data model allows to design classes that consistently interact with
    basic language constructs of Python. Among others, it supports (see Ramalho (2015),
    p. 4) the following tasks and constructs:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 前一节的示例已经突出了所谓的Python数据或对象模型的一些方面（参见[*https://docs.python.org/3/reference/datamodel.html*](https://docs.python.org/3/reference/datamodel.html)）。Python数据模型允许设计与Python基本语言构造一致交互的类。除其他外，它支持（参见Ramalho（2015），第4页）以下任务和结构：
- en: iteration
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 迭代
- en: collection handling
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集合处理
- en: attribute access
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 属性访问
- en: operator overloading
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运算符重载
- en: function and method invocation
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 函数和方法调用
- en: object creation and destruction
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对象创建和销毁
- en: string representation (e.g. for printing)
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 字符串表示（例如，用于打印）
- en: managed contexts (i.e. `with` blocks)
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 受管理的上下文（即`with`块）。
- en: 'Since the Python data model is so important, this section is dedicated to an
    example that explores several aspects of it. The example is found in the book
    Ramalho (2015) and is slightly adjusted. It implements a class for one-dimensional,
    three element vector (think of vectors in Euclidean space). First, the special
    method `__init__`:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Python数据模型非常重要，本节专门介绍了一个示例，探讨了其中的几个方面。示例可在Ramalho（2015）的书中找到，并进行了微调。它实现了一个一维，三元素向量的类（想象一下欧几里德空间中的向量）。首先，特殊方法`__init__`：
- en: '[PRE13]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[![1](images/1.png)](#co_object_orientated_programming_CO14-1)'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](images/1.png)](#co_object_orientated_programming_CO14-1)'
- en: Three pre-initialized instance attributes (think three-dimensional space).
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 三个预初始化的实例属性（想象成三维空间）。
- en: '[![2](images/2.png)](#co_object_orientated_programming_CO14-5)'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](images/2.png)](#co_object_orientated_programming_CO14-5)'
- en: A new instance of the class named `v`.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 名为`v`的类的新实例。
- en: '[![3](images/3.png)](#co_object_orientated_programming_CO14-6)'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](images/3.png)](#co_object_orientated_programming_CO14-6)'
- en: The default string representation.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 默认字符串表示。
- en: The special method `__str__` allows the definition of custom string representations.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 特殊方法`__str__`允许定义自定义字符串表示。
- en: '[PRE14]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[![1](images/1.png)](#co_object_orientated_programming_CO15-1)'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](images/1.png)](#co_object_orientated_programming_CO15-1)'
- en: The new string representation.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 新的字符串表示。
- en: '`abs()` and `bool()` are two standard Python functions whose behavior on the
    `Vector` class can be defined via the special methods `__abs__` and `__bool__`.'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '`abs()`和`bool()`是两个标准的Python函数，它们在`Vector`类上的行为可以通过特殊方法`__abs__`和`__bool__`来定义。'
- en: '[PRE15]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[![1](images/1.png)](#co_object_orientated_programming_CO16-1)'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](images/1.png)](#co_object_orientated_programming_CO16-1)'
- en: Returns the Euclidean norm given the three attribute values.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 返回给定三个属性值的欧几里德范数。
- en: '[![2](images/2.png)](#co_object_orientated_programming_CO16-2)'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](images/2.png)](#co_object_orientated_programming_CO16-2)'
- en: A new `Vector` object with non-zero attribute values.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 具有非零属性值的新`Vector`对象。
- en: '[![3](images/3.png)](#co_object_orientated_programming_CO16-3)'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](images/3.png)](#co_object_orientated_programming_CO16-3)'
- en: A new `Vector` object with zero attribute values only.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 仅具有零属性值的新`Vector`对象。
- en: As shown multiple times, the `+` and `*` operators can be applied to almost
    any Python object. The behavior is defined through the special methods methods
    `__add__` and `__mul__`.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 如多次显示的那样，`+`和`*`运算符几乎可以应用于任何Python对象。其行为是通过特殊方法`__add__`和`__mul__`定义的。
- en: '[PRE16]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[![1](images/1.png)](#co_object_orientated_programming_CO17-1)'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](images/1.png)](#co_object_orientated_programming_CO17-1)'
- en: In this case, both special methods return an object of its own kind.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，两个特殊方法都返回自己的类型对象。
- en: Another standard Python functions is `len()` which gives the length of an object
    in number of elements. This function accesses the special method `__len__` when
    called on a object. On the other hand, the special method `__getitem__` makes
    indexing via the square bracket notation possible.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个标准的 Python 函数是 `len()`，它给出对象的长度，即元素的数量。当在对象上调用时，此函数访问特殊方法 `__len__`。另一方面，特殊方法
    `__getitem__` 使通过方括号表示法进行索引成为可能。
- en: '[PRE17]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[![1](images/1.png)](#co_object_orientated_programming_CO18-1)'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](images/1.png)](#co_object_orientated_programming_CO18-1)'
- en: All instances of the `Vector` class have a length of three.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '`Vector` 类的所有实例都有长度为三。'
- en: Finally, the special method `__iter__` defines the behavior during iterations
    over elements of an object. An object, for which this operation is defined is
    called *iterable*. For instance, all collections and containers are iterable.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，特殊方法 `__iter__` 定义了对对象元素进行迭代的行为。定义了此操作的对象称为*可迭代的*。例如，所有集合和容器都是可迭代的。
- en: '[PRE18]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[![1](images/1.png)](#co_object_orientated_programming_CO19-1)'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](images/1.png)](#co_object_orientated_programming_CO19-1)'
- en: Indirect iteration using index values (via `__getitem__`).
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 使用索引值进行间接迭代（通过`__getitem__`）。
- en: '[![2](images/2.png)](#co_object_orientated_programming_CO19-3)'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](images/2.png)](#co_object_orientated_programming_CO19-3)'
- en: Direct iteration over the class instance (using `__iter__`).
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 对类实例进行直接迭代（使用`__iter__`）。
- en: Tip
  id: totrans-291
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: The Python data model allows the definition of Python classes that interact
    with standard Python operators, functions, etc. seamlessly. This makes Python
    a rather flexible programming language that can easily be enhanced by new classes
    and types of objects.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: Python 数据模型允许定义与标准 Python 操作符、函数等无缝交互的 Python 类。这使得 Python 成为一种相当灵活的编程语言，可以轻松地通过新类和对象类型进行增强。
- en: As a summary, sub-section [“Vector Class”](#vector_class) provides the `Vector`
    class definition in a single code block.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，子节 [“向量类”](#vector_class) 在单个代码块中提供了 `Vector` 类的定义。
- en: Conclusions
  id: totrans-294
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: This chapter introduces notions and approaches from *object oriented programming
    (OOP)* both theoretically as well as on the basis of Python examples. OOP is one
    of the main programming paradigms used in Python. It does not only allow for the
    modeling and implementation of rather complex applications. It also allows to
    create custom objects that behave like standard Python objects due to the flexible
    *Python data model*. Although there are many critics arguing against OOP, it is
    safe to say that it provides the Python programmer and quant with powerful means
    and tools that are helpful when a certain degree of complexity is reached. The
    derivatives pricing package discussed and presented in [Link to Come] presents
    such a case where OOP seems the only sensible programming paradigm to deal with
    the inherent complexities and requirements for abstraction.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 本章从理论上和基于 Python 示例介绍了面向对象编程（OOP）的概念和方法。OOP 是 Python 中使用的主要编程范式之一。它不仅允许建模和实现相当复杂的应用程序，还允许创建自定义对象，这些对象由于灵活的
    Python 数据模型，与标准 Python 对象表现得相似。尽管有许多批评者反对 OOP，但可以肯定地说，当达到一定复杂程度时，它为 Python 程序员和量化人员提供了强大的手段和工具。在
    [Link to Come] 中讨论和展示的衍生定价包呈现了这样一个情况，其中 OOP 似乎是唯一合理的编程范式，以处理固有的复杂性和对抽象的需求。
- en: Further Resources
  id: totrans-296
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多资源
- en: 'These are valuable online resources about OOP in general and Python programming
    and Python OOP in particular:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 关于面向对象编程以及特别是 Python 编程和 Python OOP 的一般和宝贵的在线资源：
- en: '[Lecture Notes on Object-Oriented Programming](https://atomicobject.com/resources/oo-programming/introduction-motivation-for-oo)'
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[面向对象编程讲义](https://atomicobject.com/resources/oo-programming/introduction-motivation-for-oo)'
- en: '[Object-Oriented Programming in Python](http://python-textbok.readthedocs.io/en/1.0/)'
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Python 中的面向对象编程](http://python-textbok.readthedocs.io/en/1.0/)'
- en: 'An excellent resource in book form about Python OOP and the Python data model
    is:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 有关 Python 面向对象编程（OOP）和 Python 数据模型的书籍资源：
- en: 'Ramalho, Luciano (2016): *Fluent Python*. O’Reilly, Beijing et al.'
  id: totrans-301
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Ramalho, Luciano（2016）：*流畅的 Python*。 O’Reilly，北京等。
- en: Python Codes
  id: totrans-302
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 代码
- en: Vector Class
  id: totrans-303
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向量类
- en: '[PRE19]'
  id: totrans-304
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: ^([1](ch06.html#idm140277674288640-marker)) Special attributes and methods in
    Python are characterized by double leading and trailing underscores, such as in
    `__XYZ__`.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch06.html#idm140277674288640-marker)) Python 中的特殊属性和方法以双下划线开头和结尾，例如 `__XYZ__`。
- en: ^([2](ch06.html#idm140277672765360-marker)) Camel case naming for classes is
    the recommended way. However, if there is no ambiguity, lower case naming can
    also be applied such as in `financial_instrument`.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: ^([2](ch06.html#idm140277672765360-marker)) 类名采用驼峰命名法是推荐的方式。然而，如果没有歧义，也可以采用小写命名，比如`financial_instrument`。

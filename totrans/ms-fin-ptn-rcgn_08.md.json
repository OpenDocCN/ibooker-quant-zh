["```py\ndef heikin_ashi(data, open_column, high_column, low_column, close_column, \n                position):\n\n    data = add_column(data, 4)\n\n    `# Heikin-Ashi Open`\n    try:\n        for i in range(len(data)):\n            data[i, position] = (data[i - 1, open_column] + \n                                data[i - 1, close_column]) / 2\n    except:\n        pass\n\n    `# Heikin-Ashi High`\n    for i in range(len(data)):    \n        data[i, position + 1] = max(data[i, position], \n                                data[i, position + 3], \n                                data[i, high_column])\n\n    `# Heikin-Ashi Low    `\n    for i in range(len(data)):    \n        data[i, position + 2] = min(data[i, position], \n                                data[i, position + 3], \n                                data[i, low_column])      \n\n    `# Heikin-Ashi Close`\n    for i in range(len(data)):\n        data[i, position + 3] = (data[i, open_column] + \n                                data[i, high_column] + \n                                data[i, low_column] + \n                                data[i, close_column]) / 4\n\n    return data\n\n```", "```py\ndef candlestick_double_plot(data, buy_column, sell_column, window = 250):\n\n    fig, ax = plt.subplots(2, figsize = (10, 5))\n\n    sample = data[-window:, ]\n\n    for i in range(len(sample)):\n\n        ax[0].vlines(x = i, ymin = sample[i, 6], ymax = sample[i, 5], \n                     color = 'black', linewidth = 1)  \n\n        if sample[i, 7] > sample[i, 4]:\n\n            ax[0].vlines(x = i, ymin = sample[i, 4], ymax = sample[i, 7], \n                         color = 'mediumseagreen', linewidth = 3)  \n\n        if sample[i, 7] < sample[i, 4]:\n\n            ax[0].vlines(x = i, ymin = sample[i, 7], ymax = sample[i, 4], \n                         color = 'maroon', linewidth = 3)  \n\n        if sample[i, 7] == sample[i, 4]:\n\n            ax[0].vlines(x = i, ymin = sample[i, 7], ymax = sample[i, 4] + \n                         0.00005, color = 'black', linewidth = 1.00)  \n\n        if sample[i, buy_column] == 1:\n\n            x = i\n            y = sample[i, 0]\n\n            ax[0].annotate(' ', xy = (x, y), \n                        arrowprops = dict(width = 9, headlength = 11, \n                                          headwidth = 11, facecolor = \n                                          'green', color = 'green'))\n\n        elif sample[i, sell_column] == -1:\n\n            x = i\n            y = sample[i, 0]\n\n            ax[0].annotate(' ', xy = (x, y), \n                        arrowprops = dict(width = 9, headlength = -11,\n                                          headwidth = -11, facecolor = \n                                          'red', color = 'red'))  \n\n    ax[0].grid()\n\n    for i in range(len(sample)):\n\n        ax[1].vlines(x = i, ymin = sample[i, 2], ymax = sample[i, 1],\n                     color = 'black', linewidth = 1)  \n\n        if sample[i, 3] > sample[i, 0]:\n\n            ax[1].vlines(x = i, ymin = sample[i, 0], ymax = sample[i, 3],\n                         color = 'mediumseagreen', linewidth = 3)  \n\n        if sample[i, 3] < sample[i, 0]:\n\n            ax[1].vlines(x = i, ymin = sample[i, 3], ymax = sample[i, 0],\n                         color = 'maroon', linewidth = 3)  \n\n        if sample[i, 3] == sample[i, 0]:\n\n            ax[1].vlines(x = i, ymin = sample[i, 3], ymax = sample[i, 0] +\n                         0.00005, color = 'black', linewidth = 1.00)  \n\n        if sample[i, buy_column] == 1:\n\n            x = i\n            y = sample[i, 0]\n\n            ax[1].annotate(' ', xy = (x, y), \n                        arrowprops = dict(width = 9, headlength = 11, \n                                          headwidth = 11, facecolor = \n                                          'green', color = 'green'))\n\n        elif sample[i, sell_column] == -1:\n\n            x = i\n            y = sample[i, 0]\n\n            ax[1].annotate(' ', xy = (x, y), \n                        arrowprops = dict(width = 9, headlength = -11, \n                                          headwidth = -11, facecolor = \n                                          'red', color = 'red'))  \n\n    ax[1].grid()\n\n```", "```py\ndef k_candlesticks(data, open_column, high_column, low_column, \n                   close_column, lookback, position):\n\n    data = add_column(data, 4)\n\n    `# Averaging the open price`\n    data = ma(data, lookback, open_column, position)\n\n    `# Averaging the high price`\n    data = ma(data, lookback, high_column, position + 1)\n\n    `# Averaging the low price`\n    data = ma(data, lookback, low_column, position + 2)\n\n    `# Averaging the close price`\n    data = ma(data, lookback, close_column, position + 3)\n\n    return data \n```"]
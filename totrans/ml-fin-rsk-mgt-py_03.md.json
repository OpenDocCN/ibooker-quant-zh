["```py\nIn [1]: import quandl\n        import matplotlib.pyplot as plt\n        import warnings\n        warnings.filterwarnings('ignore')\n        plt.style.use('seaborn')\n\nIn [2]: oil = quandl.get(\"NSE/OIL\", authtoken=\"insert you api token\",\n                         start_date=\"1980-01-01\",\n                         end_date=\"2020-01-01\") ![1](assets/1.png)\n\nIn [3]: plt.figure(figsize=(10, 6))\n        plt.plot(oil.Close)\n        plt.ylabel('$')\n        plt.xlabel('Date')\n        plt.show()\n```", "```py\nIn [4]: import yfinance as yf\n        import numpy as np\n        import pandas as pd\n        import datetime\n        import statsmodels.api as sm\n        from statsmodels.tsa.stattools import adfuller\n        from statsmodels.tsa.seasonal import seasonal_decompose\n\nIn [5]: ticker = '^GSPC' ![1](assets/1.png)\n        start = datetime.datetime(2015, 1, 1) ![2](assets/2.png)\n        end = datetime.datetime(2021, 1, 1) ![2](assets/2.png)\n        SP_prices = yf.download(ticker, start=start, end=end, interval='1mo')\\\n                    .Close ![3](assets/3.png)\n        [*********************100%***********************]  1 of 1 completed\n\nIn [6]: seasonal_decompose(SP_prices, period=12).plot()\n        plt.show()\n```", "```py\nIn [7]: plt.figure(figsize=(10, 6))\n        plt.plot(SP_prices) ![1](assets/1.png)\n        plt.title('S&P-500 Prices')\n        plt.ylabel('$')\n        plt.xlabel('Date')\n        plt.show()\n```", "```py\nIn [8]: sm.graphics.tsa.plot_acf(SP_prices, lags=30) ![1](assets/1.png)\n        plt.xlabel('Number of Lags')\n        plt.show()\n```", "```py\nIn [9]: sm.graphics.tsa.plot_pacf(SP_prices, lags=30) ![1](assets/1.png)\n        plt.xlabel('Number of Lags')\n        plt.show()\n```", "```py\nIn [10]: from fredapi import Fred\n         import statsmodels.api as sm\n\nIn [11]: fred = Fred(api_key='insert you api key')\n\nIn [12]: energy = fred.get_series(\"CAPUTLG2211A2S\",\n                                  observation_start=\"2010-01-01\",\n                                  observation_end=\"2020-12-31\") ![1](assets/1.png)\n         energy.head(12)\nOut[12]: 2010-01-01    83.7028\n         2010-02-01    84.9324\n         2010-03-01    82.0379\n         2010-04-01    79.5073\n         2010-05-01    82.8055\n         2010-06-01    84.4108\n         2010-07-01    83.6338\n         2010-08-01    83.7961\n         2010-09-01    83.7459\n         2010-10-01    80.8892\n         2010-11-01    81.7758\n         2010-12-01    85.9894\n         dtype: float64\n\nIn [13]: plt.plot(energy)\n         plt.title('Energy Capacity Utilization')\n         plt.ylabel('$')\n         plt.xlabel('Date')\n         plt.show()\nIn [14]: sm.graphics.tsa.plot_acf(energy, lags=30)\n         plt.xlabel('Number of Lags')\n         plt.show()\n```", "```py\nIn [15]: stat_test = adfuller(SP_prices)[0:2] ![1](assets/1.png)\n         print(\"The test statistic and p-value of ADF test are {}\"\n               .format(stat_test)) ![2](assets/2.png)\n         The test statistic and p-value of ADF test are (0.030295120072926063,\n          0.9609669053518538)\n```", "```py\nIn [16]: diff_SP_price = SP_prices.diff() ![1](assets/1.png)\n\nIn [17]: plt.figure(figsize=(10, 6))\n         plt.plot(diff_SP_price)\n         plt.title('Differenced S&P-500 Price')\n         plt.ylabel('$')\n         plt.xlabel('Date')\n         plt.show()\nIn [18]: sm.graphics.tsa.plot_acf(diff_SP_price.dropna(),lags=30)\n         plt.xlabel('Number of Lags')\n         plt.show()\nIn [19]: stat_test2 = adfuller(diff_SP_price.dropna())[0:2] ![2](assets/2.png)\n         print(\"The test statistic and p-value of ADF test after differencing are {}\"\\\n               .format(stat_test2))\n         The test statistic and p-value of ADF test after differencing are\n          (-7.0951058730170855, 4.3095548146405375e-10)\n```", "```py\nIn [20]: seasonal_index = energy.resample('Q').mean() ![1](assets/1.png)\n\nIn [21]: dates = energy.index.year.unique() ![2](assets/2.png)\n         deseasonalized = []\n         for i in dates:\n             for j in range(1, 13):\n                 deseasonalized.append((energy[str(i)][energy[str(i)]\\\n                                                       .index.month==j])) ![3](assets/3.png)\n         concat_deseasonalized = np.concatenate(deseasonalized) ![4](assets/4.png)\n\nIn [22]: deseason_energy = []\n         for i,s in zip(range(0, len(energy), 3), range(len(seasonal_index))):\n             deseason_energy.append(concat_deseasonalized[i:i+3] /\n                                    seasonal_index.iloc[s]) ![5](assets/5.png)\n         concat_deseason_energy = np.concatenate(deseason_energy)\n         deseason_energy = pd.DataFrame(concat_deseason_energy,\n                                        index=energy.index)\n         deseason_energy.columns = ['Deaseasonalized Energy']\n         deseason_energy.head()\nOut[22]:             Deaseasonalized Energy\n         2010-01-01                1.001737\n         2010-02-01                1.016452\n         2010-03-01                0.981811\n         2010-04-01                0.966758\n         2010-05-01                1.006862\n\nIn [23]: sm.graphics.tsa.plot_acf(deseason_energy, lags=10)\n         plt.xlabel('Number of Lags')\n         plt.show()\nIn [24]: sm.graphics.tsa.plot_pacf(deseason_energy, lags=10)\n         plt.xlabel('Number of Lags')\n         plt.show()\n```", "```py\nIn [25]: mu = 0\n         std = 1\n         WN = np.random.normal(mu, std, 1000)\n\n         plt.plot(WN)\n         plt.xlabel('Number of Simulations')\n         plt.show()\n```", "```py\nIn [26]: ticker = ['AAPL', 'MSFT']\n         start = datetime.datetime(2019, 1, 1)\n         end = datetime.datetime(2021, 1, 1)\n         stock_prices = yf.download(ticker, start, end, interval='1d')\\\n                        .Close ![1](assets/1.png)\n         [*********************100%***********************]  2 of 2 completed\n\nIn [27]: stock_prices = stock_prices.dropna()\n\nIn [28]: for i in ticker:\n             stat_test = adfuller(stock_prices[i])[0:2]\n             print(\"The ADF test statistic and p-value of {} are {}\"\\\n                   .format(i,stat_test))\n         The ADF test statistic and p-value of AAPL are  (0.29788764759932335,\n          0.9772473651259085)\n         The ADF test statistic and p-value of MSFT are  (-0.8345360070598484,\n          0.8087663305296826)\n\nIn [29]: diff_stock_prices = stock_prices.diff().dropna()\n\nIn [30]: split = int(len(diff_stock_prices['AAPL'].values) * 0.95) ![2](assets/2.png)\n         diff_train_aapl = diff_stock_prices['AAPL'].iloc[:split] ![3](assets/3.png)\n         diff_test_aapl = diff_stock_prices['AAPL'].iloc[split:] ![4](assets/4.png)\n         diff_train_msft = diff_stock_prices['MSFT'].iloc[:split] ![5](assets/5.png)\n         diff_test_msft = diff_stock_prices['MSFT'].iloc[split:] ![6](assets/6.png)\n\nIn [31]: diff_train_aapl.to_csv('diff_train_aapl.csv') ![7](assets/7.png)\n         diff_test_aapl.to_csv('diff_test_aapl.csv')\n         diff_train_msft.to_csv('diff_train_msft.csv')\n         diff_test_msft.to_csv('diff_test_msft.csv')\n\nIn [32]: fig, ax = plt.subplots(2, 1, figsize=(10, 6))\n         plt.tight_layout()\n         sm.graphics.tsa.plot_acf(diff_train_aapl,lags=30,\n                                  ax=ax[0], title='ACF - Apple')\n         sm.graphics.tsa.plot_acf(diff_train_msft,lags=30,\n                                  ax=ax[1], title='ACF - Microsoft')\n         plt.show()\n```", "```py\nIn [33]: short_moving_average_appl = diff_train_aapl.rolling(window=9).mean() ![1](assets/1.png)\n         long_moving_average_appl = diff_train_aapl.rolling(window=22).mean() ![2](assets/2.png)\n\nIn [34]: fig, ax = plt.subplots(figsize=(10, 6))\n         ax.plot(diff_train_aapl.loc[start:end].index,\n                 diff_train_aapl.loc[start:end],\n                 label='Stock Price', linestyle='--') ![3](assets/3.png)\n         ax.plot(short_moving_average_appl.loc[start:end].index,\n                 short_moving_average_appl.loc[start:end],\n                 label = 'Short MA', linestyle='solid') ![4](assets/4.png)\n         ax.plot(long_moving_average_appl.loc[start:end].index,\n                 long_moving_average_appl.loc[start:end],\n                 label = 'Long MA', linestyle='solid') ![5](assets/5.png)\n         ax.legend(loc='best')\n         ax.set_ylabel('Price in $')\n         ax.set_title('Stock Prediction-Apple')\n         plt.show()\n```", "```py\nIn [35]: short_moving_average_msft = diff_train_msft.rolling(window=2).mean()\n         long_moving_average_msft = diff_train_msft.rolling(window=22).mean()\n\nIn [36]: fig, ax = plt.subplots(figsize=(10, 6))\n         ax.plot(diff_train_msft.loc[start:end].index,\n                 diff_train_msft.loc[start:end],\n                 label='Stock Price', linestyle='--')\n         ax.plot(short_moving_average_msft.loc[start:end].index,\n                 short_moving_average_msft.loc[start:end],\n                 label = 'Short MA', linestyle='solid')\n         ax.plot(long_moving_average_msft.loc[start:end].index,\n                 long_moving_average_msft.loc[start:end],\n                 label = 'Long MA', linestyle='-.')\n         ax.legend(loc='best')\n         ax.set_ylabel('$')\n         ax.set_xlabel('Date')\n         ax.set_title('Stock Prediction-Microsoft')\n         plt.show()\n```", "```py\nIn [37]: sm.graphics.tsa.plot_pacf(diff_train_aapl, lags=30)\n         plt.title('PACF of Apple')\n         plt.xlabel('Number of Lags')\n         plt.show()\nIn [38]: sm.graphics.tsa.plot_pacf(diff_train_msft, lags=30)\n         plt.title('PACF of Microsoft')\n         plt.xlabel('Number of Lags')\n         plt.show()\n```", "```py\nIn [39]: from statsmodels.tsa.ar_model import AutoReg\n         import warnings\n         warnings.filterwarnings('ignore')\n\nIn [40]: ar_aapl = AutoReg(diff_train_aapl.values, lags=29)\n         ar_fitted_aapl = ar_aapl.fit() ![1](assets/1.png)\n\nIn [41]: ar_predictions_aapl = ar_fitted_aapl.predict(start=len(diff_train_aapl),\n                                                      end=len(diff_train_aapl)\\\n                                                      + len(diff_test_aapl) - 1,\n                                                      dynamic=False) ![2](assets/2.png)\n\nIn [42]: for i in range(len(ar_predictions_aapl)):\n             print('==' * 25)\n             print('predicted values:{:.4f} & actual values:{:.4f}'\\\n                   .format(ar_predictions_aapl[i], diff_test_aapl[i])) ![3](assets/3.png)\n         ==================================================\n         predicted values:1.6511 & actual values:1.3200\n         ==================================================\n         predicted values:-0.8398 & actual values:0.8600\n         ==================================================\n         predicted values:-0.9998 & actual values:0.5600\n         ==================================================\n         predicted values:1.1379 & actual values:2.4600\n         ==================================================\n         predicted values:-0.1123 & actual values:3.6700\n         ==================================================\n         predicted values:1.7843 & actual values:0.3600\n         ==================================================\n         predicted values:-0.9178 & actual values:-0.1400\n         ==================================================\n         predicted values:1.7343 & actual values:-0.6900\n         ==================================================\n         predicted values:-1.5103 & actual values:1.5000\n         ==================================================\n         predicted values:1.8224 & actual values:0.6300\n         ==================================================\n         predicted values:-1.2442 & actual values:-2.6000\n         ==================================================\n         predicted values:-0.5438 & actual values:1.4600\n         ==================================================\n         predicted values:-0.1075 & actual values:-0.8300\n         ==================================================\n         predicted values:-0.6167 & actual values:-0.6300\n         ==================================================\n         predicted values:1.3206 & actual values:6.1000\n         ==================================================\n         predicted values:0.2464 & actual values:-0.0700\n         ==================================================\n         predicted values:0.4489 & actual values:0.8900\n         ==================================================\n         predicted values:-1.3101 & actual values:-2.0400\n         ==================================================\n         predicted values:0.5863 & actual values:1.5700\n         ==================================================\n         predicted values:0.2480 & actual values:3.6500\n         ==================================================\n         predicted values:0.0181 & actual values:-0.9200\n         ==================================================\n         predicted values:0.9913 & actual values:1.0100\n         ==================================================\n         predicted values:0.2672 & actual values:4.7200\n         ==================================================\n         predicted values:0.8258 & actual values:-1.8200\n         ==================================================\n         predicted values:0.1502 & actual values:-1.1500\n         ==================================================\n         predicted values:0.5560 & actual values:-1.0300\n\nIn [43]: ar_predictions_aapl = pd.DataFrame(ar_predictions_aapl) ![4](assets/4.png)\n         ar_predictions_aapl.index = diff_test_aapl.index ![5](assets/5.png)\n\nIn [44]: ar_msft = AutoReg(diff_train_msft.values, lags=26)\n         ar_fitted_msft = ar_msft.fit() ![6](assets/6.png)\n\nIn [45]: ar_predictions_msft = ar_fitted_msft.predict(start=len(diff_train_msft),\n                                                      end=len(diff_train_msft)\\\n                                                      +len(diff_test_msft) - 1,\n                                                      dynamic=False) ![7](assets/7.png)\n\nIn [46]: ar_predictions_msft = pd.DataFrame(ar_predictions_msft) ![8](assets/8.png)\n         ar_predictions_msft.index = diff_test_msft.index ![9](assets/9.png)\n```", "```py\nIn [47]: fig, ax = plt.subplots(2,1, figsize=(18, 15))\n\n         ax[0].plot(diff_test_aapl, label='Actual Stock Price', linestyle='--')\n         ax[0].plot(ar_predictions_aapl, linestyle='solid', label=\"Prediction\")\n         ax[0].set_title('Predicted Stock Price-Apple')\n         ax[0].legend(loc='best')\n         ax[1].plot(diff_test_msft, label='Actual Stock Price', linestyle='--')\n         ax[1].plot(ar_predictions_msft, linestyle='solid', label=\"Prediction\")\n         ax[1].set_title('Predicted Stock Price-Microsoft')\n         ax[1].legend(loc='best')\n         for ax in ax.flat:\n             ax.set(xlabel='Date', ylabel='$')\n         plt.show()\n```", "```py\nIn [48]: from statsmodels.tsa.arima_model import ARIMA\n\nIn [49]: split = int(len(stock_prices['AAPL'].values) * 0.95)\n         train_aapl = stock_prices['AAPL'].iloc[:split]\n         test_aapl = stock_prices['AAPL'].iloc[split:]\n         train_msft = stock_prices['MSFT'].iloc[:split]\n         test_msft = stock_prices['MSFT'].iloc[split:]\n\nIn [50]: arima_aapl = ARIMA(train_aapl,order=(9, 1, 9)) ![1](assets/1.png)\n         arima_fit_aapl = arima_aapl.fit() ![2](assets/2.png)\n\nIn [51]: arima_msft = ARIMA(train_msft, order=(6, 1, 6)) ![3](assets/3.png)\n         arima_fit_msft = arima_msft.fit() ![4](assets/4.png)\n\nIn [52]: arima_predict_aapl = arima_fit_aapl.predict(start=len(train_aapl),\n                                                           end=len(train_aapl)\\\n                                                           + len(test_aapl) - 1,\n                                                           dynamic=False) ![5](assets/5.png)\n         arima_predict_msft = arima_fit_msft.predict(start=len(train_msft),\n                                                           end=len(train_msft)\\\n                                                           + len(test_msft) - 1,\n                                                           dynamic=False) ![6](assets/6.png)\n\nIn [53]: arima_predict_aapl = pd.DataFrame(arima_predict_aapl)\n         arima_predict_aapl.index = diff_test_aapl.index\n         arima_predict_msft = pd.DataFrame(arima_predict_msft)\n         arima_predict_msft.index = diff_test_msft.index ![7](assets/7.png)\n```", "```py\nIn [54]: fig, ax = plt.subplots(2, 1, figsize=(18, 15))\n\n         ax[0].plot(diff_test_aapl, label='Actual Stock Price', linestyle='--')\n         ax[0].plot(arima_predict_aapl, linestyle='solid', label=\"Prediction\")\n         ax[0].set_title('Predicted Stock Price-Apple')\n         ax[0].legend(loc='best')\n         ax[1].plot(diff_test_msft, label='Actual Stock Price', linestyle='--')\n         ax[1].plot(arima_predict_msft, linestyle='solid', label=\"Prediction\")\n         ax[1].set_title('Predicted Stock Price-Microsoft')\n         ax[1].legend(loc='best')\n         for ax in ax.flat:\n             ax.set(xlabel='Date', ylabel='$')\n         plt.show()\n```", "```py\nIn [55]: import itertools\n\nIn [56]: p = q = range(0, 9) ![1](assets/1.png)\n         d = range(0, 3) ![2](assets/2.png)\n         pdq = list(itertools.product(p, d, q)) ![3](assets/3.png)\n         arima_results_aapl = [] ![4](assets/4.png)\n         for param_set in pdq:\n             try:\n                 arima_aapl = ARIMA(train_aapl, order=param_set) ![5](assets/5.png)\n                 arima_fitted_aapl = arima_aapl.fit() ![6](assets/6.png)\n                 arima_results_aapl.append(arima_fitted_aapl.aic) ![7](assets/7.png)\n             except:\n                 continue\n         print('**'*25)\n         print('The Lowest AIC score is' + \\\n               '{:.4f} and the corresponding parameters are {}'.format( \\\n                   pd.DataFrame(arima_results_aapl).where( \\\n                   pd.DataFrame(arima_results_aapl).T.notnull().all()).min()[0],\n                   pdq[arima_results_aapl.index(min(arima_results_aapl))])) ![8](assets/8.png)\n         **************************************************\n         The Lowest AIC score is 1951.9810 and the corresponding parameters are\n         (4, 0, 4)\n\nIn [57]: arima_aapl = ARIMA(train_aapl, order=(4, 1, 4)) ![9](assets/9.png)\n         arima_fit_aapl = arima_aapl.fit() ![9](assets/9.png)\n\nIn [58]: p = q = range(0, 6)\n         d = range(0, 3)\n         pdq = list(itertools.product(p, d, q))\n         arima_results_msft = []\n         for param_set in pdq:\n             try:\n                 arima_msft = ARIMA(stock_prices['MSFT'], order=param_set)\n                 arima_fitted_msft = arima_msft.fit()\n                 arima_results_msft.append(arima_fitted_msft.aic)\n             except:\n                 continue\n         print('**' * 25)\n         print('The lowest AIC score is {:.4f} and parameters are {}'\n               .format(pd.DataFrame(arima_results_msft)\n                       .where(pd.DataFrame(arima_results_msft).T.notnull()\\\n                              .all()).min()[0],\n                       pdq[arima_results_msft.index(min(arima_results_msft))])) ![10](assets/10.png)\n         **************************************************\n         The Lowest AIC score is 2640.6367 and the corresponding parameters are\n         (4, 2, 4)\n\nIn [59]: arima_msft = ARIMA(stock_prices['MSFT'], order=(4, 2 ,4)) ![11](assets/11.png)\n         arima_fit_msft= arima_msft.fit() ![11](assets/11.png)\n\nIn [60]: arima_predict_aapl = arima_fit_aapl.predict(start=len(train_aapl),\n                                                           end=len(train_aapl)\\\n                                                           +len(test_aapl) - 1,\n                                                           dynamic=False) ![12](assets/12.png)\n         arima_predict_msft = arima_fit_msft.predict(start=len(train_msft),\n                                                           end=len(train_msft)\\\n                                                           + len(test_msft) - 1,\n                                                           dynamic=False) ![12](assets/12.png)\n\nIn [61]: arima_predict_aapl = pd.DataFrame(arima_predict_aapl)\n         arima_predict_aapl.index = diff_test_aapl.index\n         arima_predict_msft = pd.DataFrame(arima_predict_msft)\n         arima_predict_msft.index = diff_test_msft.index\n```", "```py\nIn [62]: fig, ax = plt.subplots(2, 1, figsize=(18, 15))\n\n         ax[0].plot(diff_test_aapl, label='Actual Stock Price', linestyle='--')\n         ax[0].plot(arima_predict_aapl, linestyle='solid', label=\"Prediction\")\n         ax[0].set_title('Predicted Stock Price-Apple')\n         ax[0].legend(loc='best')\n         ax[1].plot(diff_test_msft, label='Actual Stock Price', linestyle='--')\n         ax[1].plot(arima_predict_msft, linestyle='solid', label=\"Prediction\")\n         ax[1].set_title('Predicted Stock Price-Microsoft')\n         ax[1].legend(loc='best')\n         for ax in ax.flat:\n             ax.set(xlabel='Date', ylabel='$')\n         plt.show()\n```"]
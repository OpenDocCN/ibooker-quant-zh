["```py\nIn [1]: import math\n        import numpy as np\n\nIn [2]: S0 = 36.  ![1](Images/1.png)\n        K = 40.  ![2](Images/2.png)\n        r = 0.06  ![3](Images/3.png)\n        T = 1.0  ![4](Images/4.png)\n        sigma = 0.2  ![5](Images/5.png)\n\nIn [3]: m = 4  ![6](Images/6.png)\n        dt = T / m  ![7](Images/7.png)\n        df = math.exp(-r * dt)  ![8](Images/8.png)\n        up = math.exp(sigma * math.sqrt(dt))  ![9](Images/9.png)\n        down = 1 / up  ![9](Images/9.png)\n\nIn [4]: q = (1 / df - down) / (up - down)  ![10](Images/10.png)\n```", "```py\nIn [5]: S = np.zeros((m + 1, m + 1))  ![1](Images/1.png)\n        S  ![1](Images/1.png)\nOut[5]: array([[0., 0., 0., 0., 0.],\n               [0., 0., 0., 0., 0.],\n               [0., 0., 0., 0., 0.],\n               [0., 0., 0., 0., 0.],\n               [0., 0., 0., 0., 0.]])\n\nIn [6]: S[0, 0] = S0  ![2](Images/2.png)\n        S  ![2](Images/2.png)\nOut[6]: array([[36.,  0.,  0.,  0.,  0.],\n               [ 0.,  0.,  0.,  0.,  0.],\n               [ 0.,  0.,  0.,  0.,  0.],\n               [ 0.,  0.,  0.,  0.,  0.],\n               [ 0.,  0.,  0.,  0.,  0.]])\n\nIn [7]: z = 1  ![3](Images/3.png)\n        for t in range(1, m + 1):  ![4](Images/4.png)\n            for i in range(0, z):  ![5](Images/5.png)\n                S[i, t] = S[i, t - 1] * up  ![6](Images/6.png)\n                S[i + 1 ,t] = S[i, t - 1] * down  ![6](Images/6.png)\n            z += 1  ![7](Images/7.png)\n\nIn [8]: np.set_printoptions(formatter=\n                {'float_kind': lambda x: '%7.3f' % x})\n\nIn [9]: S  ![8](Images/8.png)\nOut[9]: array([[ 36.000,  39.786,  43.970,  48.595,  53.706],\n               [  0.000,  32.574,  36.000,  39.786,  43.970],\n               [  0.000,   0.000,  29.474,  32.574,  36.000],\n               [  0.000,   0.000,   0.000,  26.669,  29.474],\n               [  0.000,   0.000,   0.000,   0.000,  24.132]])\n```", "```py\nIn [10]: h = np.zeros_like(S)  ![1](Images/1.png)\n\nIn [11]: z = 1\n         for t in range(0, m + 1):\n             for i in range(0, z):\n                 h[i, t] = max(K - S[i, t], 0)  ![2](Images/2.png)\n             z += 1\n\nIn [12]: h  ![2](Images/2.png)\nOut[12]: array([[  4.000,   0.214,   0.000,   0.000,   0.000],\n                [  0.000,   7.426,   4.000,   0.214,   0.000],\n                [  0.000,   0.000,  10.526,   7.426,   4.000],\n                [  0.000,   0.000,   0.000,  13.331,  10.526],\n                [  0.000,   0.000,   0.000,   0.000,  15.868]])\n\nIn [13]: V = np.zeros_like(S)\n         V[:, -1] = h[:, -1]\n         V\nOut[13]: array([[  0.000,   0.000,   0.000,   0.000,   0.000],\n                [  0.000,   0.000,   0.000,   0.000,   0.000],\n                [  0.000,   0.000,   0.000,   0.000,   4.000],\n                [  0.000,   0.000,   0.000,   0.000,  10.526],\n                [  0.000,   0.000,   0.000,   0.000,  15.868]])\n\nIn [14]: m\nOut[14]: 4\n\nIn [15]: # European option pricing\n         z = 0\n         for t in range(m - 1, -1, -1):\n             for i in range(0, m - z):\n                 V[i, t] = df * (q * V[i, t + 1] +\n                             (1-q) * V[i + 1, t + 1])  ![3](Images/3.png)\n             z += 1\n\nIn [16]: V  ![4](Images/4.png)\nOut[16]: array([[  3.977,   2.190,   0.784,   0.000,   0.000],\n                [  0.000,   6.299,   3.985,   1.771,   0.000],\n                [  0.000,   0.000,   9.344,   6.830,   4.000],\n                [  0.000,   0.000,   0.000,  12.735,  10.526],\n                [  0.000,   0.000,   0.000,   0.000,  15.868]])\n\nIn [17]: V[0, 0]  ![5](Images/5.png)\nOut[17]: 3.9771456941187893\n```", "```py\nIn [18]: # American option pricing\n         z = 0\n         for t in range(m - 1, -1, -1):\n             for i in range(0, m-z):\n                 V[i, t] = df * (q * V[i, t + 1] +\n                           (1 - q) * V[i + 1, t + 1])\n                 V[i, t] = max(h[i, t], V[i, t])  ![1](Images/1.png)\n             z += 1\n\nIn [19]: V  ![2](Images/2.png)\nOut[19]: array([[  4.540,   2.307,   0.784,   0.000,   0.000],\n                [  0.000,   7.426,   4.249,   1.771,   0.000],\n                [  0.000,   0.000,  10.526,   7.426,   4.000],\n                [  0.000,   0.000,   0.000,  13.331,  10.526],\n                [  0.000,   0.000,   0.000,   0.000,  15.868]])\n\nIn [20]: V[0, 0]  ![3](Images/3.png)\nOut[20]: 4.539560595224299\n```", "```py\nIn [21]: u = np.arange(m + 1)  ![1](Images/1.png)\n         u  ![1](Images/1.png)\nOut[21]: array([0, 1, 2, 3, 4])\n\nIn [22]: u ** 2  ![2](Images/2.png)\nOut[22]: array([ 0,  1,  4,  9, 16])\n\nIn [23]: 2 ** u  ![3](Images/3.png)\nOut[23]: array([ 1,  2,  4,  8, 16])\n\nIn [24]: u = np.resize(u, (m + 1, m + 1))  ![4](Images/4.png)\n         u\nOut[24]: array([[0, 1, 2, 3, 4],\n                [0, 1, 2, 3, 4],\n                [0, 1, 2, 3, 4],\n                [0, 1, 2, 3, 4],\n                [0, 1, 2, 3, 4]])\n\nIn [25]: d = u.T  ![5](Images/5.png)\n         d  ![5](Images/5.png)\nOut[25]: array([[0, 0, 0, 0, 0],\n                [1, 1, 1, 1, 1],\n                [2, 2, 2, 2, 2],\n                [3, 3, 3, 3, 3],\n                [4, 4, 4, 4, 4]])\n\nIn [26]: (u - 2 * d)  ![6](Images/6.png)\nOut[26]: array([[ 0,  1,  2,  3,  4],\n                [-2, -1,  0,  1,  2],\n                [-4, -3, -2, -1,  0],\n                [-6, -5, -4, -3, -2],\n                [-8, -7, -6, -5, -4]])\n```", "```py\nIn [27]: S = S0 * np.exp(sigma * math.sqrt(dt) * (u - 2 * d))  ![1](Images/1.png)\n         S  ![2](Images/2.png)\nOut[27]: array([[ 36.000,  39.786,  43.970,  48.595,  53.706],\n                [ 29.474,  32.574,  36.000,  39.786,  43.970],\n                [ 24.132,  26.669,  29.474,  32.574,  36.000],\n                [ 19.757,  21.835,  24.132,  26.669,  29.474],\n                [ 16.176,  17.877,  19.757,  21.835,  24.132]])\n```", "```py\nIn [28]: h = np.maximum(K - S, 0)  ![1](Images/1.png)\n         h  ![2](Images/2.png)\nOut[28]: array([[  4.000,   0.214,   0.000,   0.000,   0.000],\n                [ 10.526,   7.426,   4.000,   0.214,   0.000],\n                [ 15.868,  13.331,  10.526,   7.426,   4.000],\n                [ 20.243,  18.165,  15.868,  13.331,  10.526],\n                [ 23.824,  22.123,  20.243,  18.165,  15.868]])\n\nIn [29]: V = h.copy()  ![3](Images/3.png)\n\nIn [30]: # European option pricing\n         for t in range(m - 1, -1, -1):  ![4](Images/4.png)\n             V[0:-1, t] = df * (q * V[:-1, t + 1] +\n                            (1-q) * V[1:, t + 1])  ![4](Images/4.png)\n\nIn [31]: V[0, 0]  ![5](Images/5.png)\nOut[31]: 3.977145694118792\n\nIn [32]: # American option pricing\n         for t in range(m - 1, -1, -1):  ![6](Images/6.png)\n             V[0:-1, t] = df * (q * V[:-1, t + 1] +\n                            (1-q) * V[1:, t + 1])  ![6](Images/6.png)\n             V[:, t] = np.maximum(h[:, t], V[:, t])  ![6](Images/6.png)\n\nIn [33]: V\nOut[33]: array([[  4.540,   2.307,   0.784,   0.000,   0.000],\n                [ 10.526,   7.426,   4.249,   1.771,   0.000],\n                [ 15.868,  13.331,  10.526,   7.426,   4.000],\n                [ 20.243,  18.165,  15.868,  13.331,  10.526],\n                [ 23.824,  22.123,  20.243,  18.165,  15.868]])\n\nIn [34]: V[0, 0]  ![7](Images/7.png)\nOut[34]: 4.5395605952243\n```", "```py\nIn [35]: m = 500  ![1](Images/1.png)\n         dt = T / m\n         df = math.exp(-r * dt)\n         up = math.exp(sigma * math.sqrt(dt))\n         down = 1 / up\n         q = (1 / df - down) / (up - down)\n         q\nOut[35]: 0.5044724639230862\n```", "```py\nIn [36]: def binomial_looping():\n             # stock price simulation in binomial tree\n             S = np.zeros((m + 1, m + 1))\n             S[0, 0] = S0\n             z = 1\n             for t in range(1, m + 1):\n                 for i in range(0, z):\n                     S[i, t] = S[i, t - 1] * up\n                     S[i + 1 ,t] = S[i, t - 1] * down\n                 z += 1\n             # inner value calculation\n             h = np.zeros_like(S)\n             z = 1\n             for t in range(0, m + 1):\n                 for i in range(0, z):\n                     h[i, t] = max(K - S[i, t], 0)\n                 z += 1\n             # American option pricing\n             V = np.zeros_like(S)\n             V[:, -1] = h[:, -1]\n             z = 0\n             for t in range(m - 1, -1, -1):\n                 for i in range(0, m - z):\n                     V[i, t] = df * (q * V[i, t + 1] +\n                               (1 - q) * V[i + 1, t + 1])\n                     V[i, t] = max(h[i, t], V[i, t])\n                 z += 1\n             return V[0, 0]\n```", "```py\nIn [37]: %time binomial_looping()\n         CPU times: user 190 ms, sys: 4.69 ms, total: 194 ms\n         Wall time: 190 ms\n\nOut[37]: 4.486374777505983\n\nIn [38]: %timeit binomial_looping()\n         173 ms ± 2.48 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)\n```", "```py\nIn [39]: def binomial_vectorization():\n             u = np.arange(m + 1)\n             u = np.resize(u, (m + 1, m + 1))\n             d = u.T\n             # stock price simulation\n             S = S0 * np.exp(sigma * math.sqrt(dt) * (u - 2 * d))\n             # inner value calculation\n             h = np.maximum(K - S, 0)\n             # American option pricing\n             V = h.copy()\n             for t in range(m-1, -1, -1):\n                 V[0:-1, t] = df * (q * V[:-1, t + 1] +\n                                (1-q) * V[1:, t + 1])\n                 V[:, t] = np.maximum(h[:, t], V[:, t])\n             return V[0, 0]\n```", "```py\nIn [40]: %time binomial_vectorization()\n         CPU times: user 4.67 ms, sys: 2.39 ms, total: 7.07 ms\n         Wall time: 8.73 ms\n\nOut[40]: 4.486374777506075\n\nIn [41]: %timeit binomial_vectorization()\n         4.7 ms ± 252 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)\n```", "```py\nIn [43]: S0 = 36.  ![1](Images/1.png)\n         K = 40.  ![1](Images/1.png)\n         r = 0.06  ![1](Images/1.png)\n         T = 1.0  ![1](Images/1.png)\n         sigma = 0.2  ![1](Images/1.png)\n\nIn [44]: M = 100  ![2](Images/2.png)\n         I = 50000  ![2](Images/2.png)\n\nIn [45]: dt = T / M  ![2](Images/2.png)\n         dt  ![2](Images/2.png)\nOut[45]: 0.01\n\nIn [46]: df = math.exp(-r * dt)  ![2](Images/2.png)\n         df  ![2](Images/2.png)\nOut[46]: 0.9994001799640054\n\nIn [47]: from numpy.random import default_rng\n         rng = default_rng(100)\n\nIn [48]: rn = rng.standard_normal((M + 1, I))  ![3](Images/3.png)\n         rn ![3](Images/3.png)\nOut[48]: array([[ -1.160,   0.290,   0.780, ...,   1.890,   0.050,  -0.760],\n                [  0.460,  -1.400,   0.140, ...,  -1.350,   0.150,  -0.530],\n                [  0.200,  -0.040,  -0.730, ...,   2.140,   0.170,  -0.340],\n                ...,\n                [ -0.220,  -1.310,   0.730, ...,  -0.820,  -0.600,  -0.400],\n                [ -2.130,  -1.240,   0.580, ...,   0.960,   0.890,   0.780],\n                [  2.130,  -0.410,   0.710, ...,   1.190,   0.100,  -0.520]])\n\nIn [49]: S = np.zeros_like(rn)  ![4](Images/4.png)\n         S[0] = S0  ![4](Images/4.png)\n         S  ![4](Images/4.png)\nOut[49]: array([[ 36.000,  36.000,  36.000, ...,  36.000,  36.000,  36.000],\n                [  0.000,   0.000,   0.000, ...,   0.000,   0.000,   0.000],\n                [  0.000,   0.000,   0.000, ...,   0.000,   0.000,   0.000],\n                ...,\n                [  0.000,   0.000,   0.000, ...,   0.000,   0.000,   0.000],\n                [  0.000,   0.000,   0.000, ...,   0.000,   0.000,   0.000],\n                [  0.000,   0.000,   0.000, ...,   0.000,   0.000,   0.000]])\n\nIn [50]: for t in range(1, M + 1):\n             S[t] = S[t - 1] * np.exp((r - sigma ** 2 / 2) * dt +\n                                    sigma * math.sqrt(dt) * rn[t])  ![5](Images/5.png)\n\nIn [51]: S  ![5](Images/5.png)\nOut[51]: array([[ 36.000,  36.000,  36.000, ...,  36.000,  36.000,  36.000],\n                [ 36.349,  35.023,  36.114, ...,  35.056,  36.119,  35.633],\n                [ 36.508,  35.009,  35.602, ...,  36.601,  36.259,  35.402],\n                ...,\n                [ 42.689,  39.760,  40.681, ...,  37.516,  47.893,  42.846],\n                [ 40.921,  38.804,  41.175, ...,  38.260,  48.769,  43.534],\n                [ 42.716,  38.499,  41.782, ...,  39.200,  48.884,  43.103]])\n\nIn [52]: from pylab import mpl, plt\n         plt.style.use('seaborn')\n         mpl.rcParams['font.family'] = 'serif'\n         mpl.rcParams['savefig.dpi'] = 300\n\nIn [53]: plt.figure(figsize=(10, 6))\n         plt.plot(S[:, :10]);  ![6](Images/6.png)\n```", "```py\nIn [54]: ST = S[-1]\n         plt.figure(figsize=(10, 6))\n         plt.hist(ST, bins=35, color='b', label='frequency');\n         plt.axvline(ST.mean(), color='r', label='mean')\n         plt.axvline(ST.mean() + ST.std(), ls='--', color='y', label='sd up')\n         plt.axvline(ST.mean() - ST.std(), ls='-.', color='y', label='sd down')\n         plt.legend(loc=0);\nIn [55]: S0 * math.exp(r * T)  ![1](Images/1.png)\nOut[55]: 38.22611567563295\n\nIn [56]: ST.mean()  ![2](Images/2.png)\nOut[56]: 38.25248936738523\n```", "```py\nIn [57]: h = np.maximum(K - ST, 0)  ![1](Images/1.png)\n         h  ![1](Images/1.png)\nOut[57]: array([  0.000,   1.501,   0.000, ...,   0.800,   0.000,   0.000])\n\nIn [58]: plt.figure(figsize=(10, 6))\n         plt.hist(h, color='b', bins=35);  ![2](Images/2.png)\nIn [59]: math.exp(-r * T) * h.mean()  ![3](Images/3.png)\nOut[59]: 3.818117261795047\n```", "```py\nIn [60]: h = np.maximum(K - S, 0)  ![1](Images/1.png)\n\nIn [61]: # Least-Squares Monte Carlo Valuation (LSM algorithm)\n         V = h[-1]  ![2](Images/2.png)\n         for t in range(M - 1, 0, -1):  ![3](Images/3.png)\n             reg = np.polyfit(S[t], df * V, deg=5)  ![4](Images/4.png)\n             C = np.polyval(reg, S[t])  ![4](Images/4.png)\n             V = np.where(h[t] > C, h[t], df * V)  ![5](Images/5.png)\n\nIn [62]: df * V.mean()  ![6](Images/6.png)\nOut[62]: 4.454837750511421\n```"]
- en: Chapter 2\. Python Infrastructure
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章 Python 基础设施
- en: In building a house, there is the problem of the selection of wood.
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在建造房屋时，有木材选择的问题。
- en: ''
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: It is essential that the carpenter’s aim be to carry equipment that will cut
    well and, when he has time, to sharpen that equipment.
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 重要的是，木匠的目标是携带能够良好切割的设备，并在有时间时磨削这些设备。
- en: ''
  id: totrans-4
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Miyamoto Musashi (The Book of Five Rings)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 宫本武藏（《五轮书》）
- en: Introduction
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: For someone new to Python, Python deployment might seem all but straightforward.
    The same holds true for the wealth of libraries and packages that can be installed
    optionally. First of all, there is not only *one* Python. Python comes in many
    different flavors, like CPython, Jython, IronPython or PyPy. Then there is still
    the divide between Python 2.7 and the 3.x world.^([1](ch02.html#idm140277702866800))
    In what follows, the chapter focuses on *CPython*, the by far most popular version
    of the Python programming language, and here on *version 3.6*.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 对于新接触Python的人来说，Python部署似乎一切都不简单。对于可以选择安装的丰富库和包也是如此。首先，Python不只有 *一个* 版本。 Python有许多不同的版本，如CPython，Jython，IronPython或PyPy。然后仍然存在Python
    2.7和3.x世界之间的差异。[^1] 接下来，本章重点关注 *CPython*，迄今为止最流行的Python编程语言版本，以及 *版本3.6*。
- en: 'Even when focusing on CPython 3.6 (henceforth just "`Python`“), deployment
    is made difficult due to a number of additional reasons:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 即使专注于 CPython 3.6（以下简称“Python”），部署也因许多其他原因变得困难：
- en: the interpreter (a standard CPython installation) only comes with the so-called
    *standard library* (e.g. covering typical mathematical functions)
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解释器（标准CPython安装）只带有所谓的 *标准库*（例如，涵盖典型的数学函数）
- en: optional Python packages need to be installed separately — and there are hundreds
    of them
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可选的Python包需要单独安装 —— 而且有数百个
- en: compiling/building such non-standard packages on your own can be tricky due
    to dependencies and operating system-specific requirements
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于依赖关系和操作系统特定要求，编译/构建这些非标准包可能会很棘手
- en: taking care of such dependencies and of version consistency over time (i.e.
    maintenance) is often tedious and time consuming
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要注意这些依赖关系并保持版本一致性随着时间的推移（即维护）通常是繁琐且耗时的。
- en: updates and upgrades for certain packages might cause the need for re-compiling
    a multitude of other packages
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对某些包的更新和升级可能导致需要重新编译大量其他包
- en: changing or replacing one package might cause trouble in (many) other places
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改或替换一个包可能会在（许多）其他地方引起麻烦
- en: 'Fortunately, there are tools and strategies available that help with the Python
    deployment issue. This chapter covers the following types of technologies that
    help with Python deployment:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，有一些工具和策略可用于帮助解决Python部署问题。本章介绍了以下几种有助于Python部署的技术类型：
- en: '**package manager**: package managers like [`pip`](https://pypi.python.org/pypi/pip)
    or [`conda`](http://conda.pydata.org/docs/intro.html) help with the installing,
    updating and removing of Python packages; they also help with version consistency
    of different packages'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**包管理器**：像[`pip`](https://pypi.python.org/pypi/pip)或[`conda`](http://conda.pydata.org/docs/intro.html)这样的包管理器有助于安装、更新和删除Python包；它们还有助于不同包的版本一致性'
- en: '**virtual environment manager**: a virtual environment manager like [`virtualenv`](https://pypi.python.org/pypi/virtualenv)
    or `conda` allows to manage multiple Python installations in parallel (e.g. to
    have both a Python 2.7 and 3.6 install on a single machine or to test the most
    recent development version of a fancy Python package without risk)'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**虚拟环境管理器**：虚拟环境管理器如[`virtualenv`](https://pypi.python.org/pypi/virtualenv)或`conda`允许并行管理多个Python安装（例如，在单个计算机上同时拥有Python
    2.7和3.6安装，或者在不冒风险的情况下测试最新的流行Python包的开发版本）'
- en: '**container**: [Docker](http://docker.com) containers represent complete file
    systems containing all pieces of a system needed to run a certain software, like
    code, runtime or system tools; for example, you can run an Ubuntu 16.04 operating
    system with a Python 3.6 install and the respective Python codes in a Docker container
    hosted on a machine running Mac OS or Windows 10, for example'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**容器**：[Docker](http://docker.com)容器代表包含运行某个软件所需的所有系统部件的完整文件系统，如代码、运行时或系统工具；例如，你可以在运行Mac
    OS或Windows 10的机器上运行一个包含Ubuntu 16.04操作系统、Python 3.6安装和相应Python代码的Docker容器中运行。'
- en: '**cloud instance**: deploying Python code for algorithmic trading generally
    requires high availability, security and also performance; these requirements
    can typically only be met by the use of professional compute and storage infrastructure
    that is nowadays available at attractive conditions in the form of fairly small
    to really large and powerful cloud instances; one benefit of a cloud instance,
    i.e. a virtual server, compared to a dedicated server rented longer term, is that
    users generally get charged only for the hours of actual usage; another advantage
    is that such cloud instances are available literally in a minute or two if needed
    which helps agile development and also with scalability'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**云实例**：部署用于算法交易的 Python 代码通常需要高可用性、安全性和性能；这些要求通常只能通过使用现在以有吸引力条件提供的专业计算和存储基础设施来满足，这些基础设施形式可从相对较小到真正大型和强大的云实例；与长期租用的专用服务器相比，云实例，即虚拟服务器的一个好处是，用户通常只需支付实际使用的小时数；另一个优点是，如果需要，这些云实例可以在一两分钟内立即使用，这有助于敏捷开发和可扩展性。'
- en: The structure of this chapter is as follows
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的结构如下所示
- en: '[“Conda as a Package Manager”](#conda_package)'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[“Conda作为包管理器”](#conda_package)'
- en: This section introduces `conda` as a package manager for Python.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 本节介绍了`conda`作为 Python 的包管理器。
- en: '[“Conda as a Virtual Environment Manager”](#conda_environment)'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '[“作为虚拟环境管理器的Conda”](#conda_environment)'
- en: This section focuses on `conda`’s capabilities as a virtual environment manager.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 本节重点介绍`conda`作为虚拟环境管理器的功能。
- en: '[“Using Docker Containerization”](#docker_container)'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '[“使用Docker容器化”](#docker_container)'
- en: This section gives a brief overview of Docker as a containerization technology
    and focuses on the building of a Ubuntu-based container with Python 3.6 installation.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 本节简要介绍 Docker 作为容器化技术，并侧重于构建具有 Python 3.6 安装的基于 Ubuntu 的容器。
- en: '[“Using Cloud Instances”](#cloud_instance)'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '[“使用云实例”](#cloud_instance)'
- en: The section shows how to deploy Python and Jupyter Notebook — as a powerful,
    browser-based tool suite — for Python development in the cloud.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 本节展示了如何在云中部署 Python 和 Jupyter Notebook —— 作为强大的基于浏览器的工具套件 —— 用于 Python 开发。
- en: The goal of this chapter is to have a proper Python installation with the most
    important numerical and data analysis packages available on a professional infrastructure.
    This combination then serves as the backbone for implementing and deploying the
    Python codes in later chapter, be it interactive financial analytics code or code
    in the form of scripts and modules.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的目标是在专业基础设施上具有正确的 Python 安装，并可用最重要的数值和数据分析包，然后这种组合作为在后续章节中实现和部署 Python 代码的骨干，无论是交互式的金融分析代码还是脚本和模块形式的代码。
- en: Conda as a Package Manager
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Conda作为包管理器
- en: Although `conda` can be installed stand alone, an efficient way of doing it
    is via Miniconda, a minimal Python distribution including `conda` as a package
    and virtual environment manager.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然`conda`可以单独安装，但高效的方式是通过 Miniconda，这是一个包括`conda`作为包和虚拟环境管理器的最小 Python 发行版。
- en: Installing Miniconda 3.6
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Miniconda 3.6
- en: You can download the different versions of Miniconda on the [Miniconda page](http://conda.pydata.org/miniconda.html).
    In what follows, the Python 3.6 64-bit version is assumed which is available for
    Linux, Windows and Mac OS. The main example in this sub-section is a session in
    a Ubuntu-based Docker container which downloads the Linux 64-bit installer via
    `wget` and then installs Miniconda. The code as shown should work without modification
    on any other Linux-based or Mac OS-based machine as well.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[Miniconda页面](http://conda.pydata.org/miniconda.html)上下载不同版本的 Miniconda。在接下来的内容中，假定使用
    Python 3.6 64位版本，该版本适用于 Linux、Windows 和 Mac OS。本小节的主要示例是在基于 Ubuntu 的 Docker 容器中进行会话，通过
    `wget` 下载 Linux 64位安装程序，然后安装 Miniconda。如所示的代码应在任何其他基于 Linux 或 Mac OS 的机器上无需修改即可正常工作。
- en: '[PRE0]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Simply pressing the `ENTER` key starts the installation process. After reviewing
    the license agreement, approve the terms by answering `yes`.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 简单地按下`ENTER`键即可开始安装过程。在审查许可协议后，通过回答`yes`来批准条款。
- en: '[PRE1]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: After you have agreed to the licensing terms and have confirmed the install
    location you should allow Miniconda to prepend the new Miniconda install location
    to the `PATH` environment variable by answering `yes` once again.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在您同意许可条款并确认安装位置之后，您应该允许 Miniconda 将新的 Miniconda 安装位置添加到 `PATH` 环境变量中，通过再次回答
    `yes`。
- en: '[PRE2]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: After this rather simple installation procedure, there are now both a basic
    Python install as well as `conda` available. The basic Python install comes already
    with some nice batteries included like the [`SQLite3`](https://sqlite.org) database
    engine. You might try out whether you can start Python in a *new shell instance*
    or after *appending the relevant path* to the respective environment variable.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这个相当简单的安装过程后，现在既有一个基本的 Python 安装，也有`conda`可用。基本的 Python 安装已经包含了一些不错的功能，比如
    [`SQLite3`](https://sqlite.org) 数据库引擎。您可以尝试看看是否可以在*新的 shell 实例*中启动 Python，或者在*追加相关路径*到相应的环境变量后启动
    Python。
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Basic Operations with Conda
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Conda 基本操作
- en: '`Conda` can be used to efficiently handle, among others, the installing, updating
    and removing of Python packages. The following list provides an overview of the
    major functions.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`Conda` 可以高效地处理，安装，更新和删除 Python 包，等等。以下列表提供了主要功能的概述。'
- en: installing Python x.x
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 Python x.x
- en: '`conda install python=x.x`'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`conda install python=x.x`'
- en: updating Python
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 更新 Python
- en: '`conda update python`'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`conda update python`'
- en: installing a package
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 安装一个包
- en: '`conda install $PACKAGE_NAME`'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`conda install $PACKAGE_NAME`'
- en: updating a package
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 更新一个包
- en: '`conda update $PACKAGE_NAME`'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`conda update $PACKAGE_NAME`'
- en: removing a package
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 移除一个包
- en: '`conda remove $PACKAGE_NAME`'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`conda remove $PACKAGE_NAME`'
- en: updating conda itself
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 更新 conda 本身
- en: '`conda update conda`'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`conda update conda`'
- en: searching for packages
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 搜索包
- en: '`conda search $SEARCH_TERM`'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`conda search $SEARCH_TERM`'
- en: listing installed packages
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 列出已安装的包
- en: '`conda list`'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`conda list`'
- en: Given these capabilities, installing, for example, `NumPy` — as one of the most
    important libraries of the so-called scientific stack — is a single command only.
    When the installation takes place on a machine with Intel processor, the procedure
    automatically installs the [Intel Math Kernel Library `mkl`](https://docs.continuum.io/mkl-optimizations/)
    which speeds up numerical operations not only for `NumPy` on Intel machines but
    also for a few other scientific Python packages.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些功能，例如，安装`NumPy`——作为所谓科学堆栈中最重要的库之一——只需一条命令。当在装有英特尔处理器的机器上进行安装时，该过程会自动安装[英特尔数学核心库
    `mkl`](https://docs.continuum.io/mkl-optimizations/)，这不仅加速了在英特尔机器上的`NumPy`的数值操作，还加速了其他几个科学
    Python 包的数值操作。
- en: '[PRE4]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Multiple packages can also be installed at once. The `-y` flag indicates that
    all (potential) questions shall be answered with `yes`.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以一次性安装多个包。`-y` 标志表示所有（可能的）问题都应回答“是”。
- en: '[PRE5]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: After the resulting installation procedure, some of the most important libraries
    for financial analytics are available in addition to the standard ones.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，除了标准库之外，一些金融分析中最重要的库也可用。
- en: '[IPython](http://ipython.org)'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '[IPython](http://ipython.org)'
- en: an improved interactive Python shell
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 一个改进的交互式 Python shell
- en: '[matplotlib](http://matplotlib.org)'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '[matplotlib](http://matplotlib.org)'
- en: the standard plotting library in Python
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Python 中的标准绘图库
- en: '[NumPy](http://numpy.org)'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '[NumPy](http://numpy.org)'
- en: efficient handling of numerical arrays
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 高效处理数值数组
- en: '[pandas](http://pandas.pydata.org)'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '[pandas](http://pandas.pydata.org)'
- en: management of tabular data, like financial time series data
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 管理表格数据，如金融时间序列数据
- en: '[PyTables](http://pytables.org)'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '[PyTables](http://pytables.org)'
- en: a Python wrapper for the [HDF5](http://hdfgroup.org) library
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 用于[HDF5](http://hdfgroup.org)库的 Python 封装
- en: '[SciPy](http://scipy.org)'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '[SciPy](http://scipy.org)'
- en: a collection of scientific classes and functions (installed as a dependency)
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 一组科学类和函数（作为依赖项安装）
- en: '[Seaborn](http://seaborn.pydata.org)'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '[Seaborn](http://seaborn.pydata.org)'
- en: a plotting library adding statistical capabilities and nice plotting defaults
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 一个绘图库，添加了统计功能和良好的绘图默认值
- en: This provides a basic tool set for data analysis in general and financial analytics
    in particular. The next example uses `IPython` and draws a set of pseudo-random
    numbers with `NumPy`.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这提供了一套用于一般数据分析和金融分析的基本工具集。下面的示例使用 `IPython` 并使用 `NumPy` 绘制一组伪随机数。
- en: '[PRE6]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Executing `conda list` verifies which packages are installed.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 执行 `conda list` 可以验证安装了哪些包。
- en: '[PRE7]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In case a package is not needed anymore, it is efficiently removed with `conda
    remove`.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个包不再需要，则可以使用 `conda remove` 高效地移除它。
- en: '[PRE8]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '`conda` as a package manager is already quite useful. However, its full power
    only becomes evident when adding virtual environment management to the mix.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 作为包管理器的`conda`已经非常有用。但是，只有在添加虚拟环境管理时，其全部功能才会显现出来。
- en: Tip
  id: totrans-85
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: '`conda` as a package manager makes installing, updating and removing of Python
    packages a pleasant experience. There is no need to take care of building and
    compiling packages on your own anymore — which can be tricky sometimes given the
    list of dependencies a package specifies and given the specifics to be considered
    on different operating systems.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`conda` 作为一个包管理器，使得安装、更新和移除 Python 包变得愉快。不再需要自行构建和编译包 — 有时候这可能会很棘手，因为一个包指定了一长串依赖项，而且还要考虑到在不同操作系统上的特定情况。'
- en: Conda as a Virtual Environment Manager
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Conda 作为虚拟环境管理器
- en: Having installed Miniconda with `conda` included provides a default Python installation
    depending on what version of Miniconda has been chosen. The virtual environment
    management capabilities of `conda` allow, for example, to add to a Python 3.6
    default installation a completely separated installation of Python 2.7.x. To this
    end, `conda` offers the following functionality.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 安装了包含 `conda` 的 Miniconda 后，会根据选择的 Miniconda 版本提供一个默认的 Python 安装。`conda` 的虚拟环境管理功能允许在
    Python 3.6 默认安装中添加一个完全独立的 Python 2.7.x 安装。为此，`conda` 提供了以下功能。
- en: creating a virtual environment
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个虚拟环境
- en: '`conda create --name $ENVIRONMENT_NAME`'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`conda create --name $ENVIRONMENT_NAME`'
- en: activating an environment
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 激活一个环境
- en: '`source activate $ENVIRONMENT_NAME`'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`source activate $ENVIRONMENT_NAME`'
- en: deactivating an environment
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 停用一个环境
- en: '`source deactivate $ENVIRONMENT_NAME`'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`source deactivate $ENVIRONMENT_NAME`'
- en: removing an environment
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 移除一个环境
- en: '`conda-env remove --name $ENVIRONMENT_NAME`'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`conda-env remove --name $ENVIRONMENT_NAME`'
- en: export to an environment file
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 导出到一个环境文件
- en: '`conda env export > $FILE_NAME`'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`conda env export > $FILE_NAME`'
- en: creating an environment from file
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 从文件创建一个环境
- en: '`conda env create -f $FILE_NAME`'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`conda env create -f $FILE_NAME`'
- en: listing all environments
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 列出所有环境
- en: '`conda info --envs`'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`conda info --envs`'
- en: As a simple illustration, the example code that follows creates an environment
    called `py27`, installs `IPython` and executes a line of Python 2.7.x code.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个简单的示例，接下来的示例代码创建了一个名为 `py27` 的环境，安装了 `IPython` 并执行了一行 Python 2.7.x 代码。
- en: '[PRE9]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Notice how the prompt changes to include `(py27)` after the activation of the
    environment.^([2](ch02.html#idm140277702388192))
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在激活环境后提示符如何变为 `(py27)`。^([2](ch02.html#idm140277702388192))
- en: '[PRE10]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Finally, using `IPython` with Python 2.7 syntax.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，使用 Python 2.7 语法的 `IPython`。
- en: '[PRE11]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: As this example demonstrates, `conda` as a virtual environment manager allows
    to install different Python versions alongside each other. It also allows to install
    different versions of certain packages. The default Python install is not influenced
    by such a procedure, nor are other environments which might exist on the same
    machine. All available environments can be shown via `conda info --envs`.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 正如这个例子所示，`conda` 作为一个虚拟环境管理器允许在一起安装不同的 Python 版本。它还允许安装某些包的不同版本。默认 Python 安装不受这种过程的影响，也不受同一台机器上可能存在的其他环境的影响。所有可用的环境可以通过
    `conda info --envs` 显示。
- en: '[PRE12]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Sometimes it is necessary to share environment information with others or to
    use environment information on multiple machines, for instance. To this end, one
    can export the installed packages list to a file with `conda env export`.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 有时需要与他人共享环境信息或在多台机器上使用环境信息。为此，可以使用 `conda env export` 将安装的包列表导出到一个文件中。
- en: '[PRE13]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: Often, virtual environments, which are technically not that much more than a
    certain (sub-)folder structure, are created to do some quick tests.^([3](ch02.html#idm140277702377552))
    In such a case, an environment is easily removed after deactivation via `conda
    env remove`.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，虚拟环境（从技术上讲，不过是一种特定的（子）文件夹结构）是为了进行一些快速测试而创建的。在这种情况下，通过 `conda env remove`
    轻松删除环境。
- en: '[PRE14]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This concludes the overview of `conda` as a virtual environment manager.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这就结束了 `conda` 作为虚拟环境管理器的概述。
- en: Tip
  id: totrans-116
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: '`conda` does not only help with managing packages, it is also a virtual environment
    manager for Python. It simplifies the creation of different Python environments,
    allowing to have multiple versions of Python and optional packages available on
    the same machine without them influencing each other in any way. `conda` also
    allows to export environment information to easily replicate it on multiple machines
    or to share it with others.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '`conda` 不仅帮助管理包，还是 Python 的虚拟环境管理器。它简化了不同 Python 环境的创建，允许在同一台机器上有多个 Python
    版本和可选包可用，而且它们之间互不影响。`conda` 还允许将环境信息导出，以便在多台机器上轻松复制它或与他人共享。'
- en: Using Docker Containerization
  id: totrans-118
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Docker 容器化
- en: Docker containers have taken over the IT world by storm. Although the technology
    is still quite young, it has established itself as one of the benchmarks for the
    efficient development and deployment of almost any kind of software application.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: Docker容器已经风靡了IT世界。尽管技术仍然很年轻，但它已经确立了自己作为几乎任何类型软件应用的高效开发和部署的基准之一。
- en: For our purposes it suffices to think of a Docker container as a separated (“containerized”)
    file system that includes an operating system (e.g. Ubuntu 16.04\. for server),
    a (Python) runtime, additional system and development tools as well as further
    (Python) libraries and packages as needed. Such a Docker container might run on
    a local machine with Windows 10 or on a cloud instance with a Linux operating
    system, for instance.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的目的，将Docker容器视为一个分离的（“容器化的”）文件系统足以包含操作系统（例如服务器上的Ubuntu 16.04），一个（Python）运行时，额外的系统和开发工具以及根据需要的其他（Python）库和软件包。这样的Docker容器可以在具有Windows
    10的本地机器上运行，也可以在具有Linux操作系统的云实例上运行，例如。
- en: This section does not allow to go into the exciting details of Docker containers.
    It is rather a concise illustration of what the Docker technology can do in the
    context of Python deployment.^([4](ch02.html#idm140277702366912))
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 本节不允许深入探讨Docker容器的有趣细节。它更多地是对Docker技术在Python部署上的简要说明。^([4](ch02.html#idm140277702366912))
- en: Docker Images and Containers
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Docker镜像和容器
- en: However, before moving on to the illustration, two fundamental terms need to
    be distinguished when talking about Docker. The first is a *Docker image* which
    can be compared to a Python class. The second is a *Docker container* which can
    be compared to an instance of the respective Python class.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在进入说明之前，谈论Docker时需要区分两个基本术语。第一个是*Docker镜像*，可以类比为Python类。第二个是*Docker容器*，可以类比为相应Python类的实例。
- en: 'On a more technical level, you find the following definition for a *Docker
    image* in the [Docker glossary](https://docs.docker.com/engine/reference/glossary/):'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在更技术层面上，在[Docker术语表](https://docs.docker.com/engine/reference/glossary/)中找到了对*Docker镜像*的以下定义：
- en: Docker images are the basis of containers. An Image is an ordered collection
    of root filesystem changes and the corresponding execution parameters for use
    within a container runtime. An image typically contains a union of layered filesystems
    stacked on top of each other. An image does not have state and it never changes.
  id: totrans-125
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Docker镜像是容器的基础。一个镜像是一组有序的根文件系统更改和相应的执行参数，用于容器运行时。一个镜像通常包含叠加在彼此上面的分层文件系统的联合。镜像没有状态，永远不会改变。
- en: 'Similarly, you find the following definition for a *Docker container* in the
    [Docker glossary](https://docs.docker.com/engine/reference/glossary/) which makes
    the analogy to Python classes and instances of such classes transparent:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，您可以在[Docker术语表](https://docs.docker.com/engine/reference/glossary/)中找到对*Docker容器*的以下定义，它将类比为Python类和这些类的实例：
- en: 'A container is a runtime instance of a Docker image. A Docker container consists
    of: a Docker image, an execution environment and a standard set of instructions.'
  id: totrans-127
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 容器是Docker镜像的运行时实例。Docker容器包括：一个Docker镜像，一个执行环境和一组标准指令。
- en: Depending on the operating system, the installation of Docker is somewhat different.
    That is why this section does not go into the respective details. Detailed information
    is found on the [Install Docker Engine page](https://docs.docker.com/engine/installation/).
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 根据操作系统的不同，安装Docker的方式略有不同。这就是为什么本节不涉及相应细节的原因。详细信息请参阅[安装Docker引擎页面](https://docs.docker.com/engine/installation/)。
- en: Building an Ubuntu & Python Docker Image
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建一个Ubuntu和Python Docker镜像
- en: This sub-section illustrates the building of a Docker image based on the latest
    version of Ubuntu that includes Miniconda as well as a few important Python packages.
    In addition, it also does some Linux housekeeping by updating the Linux packages
    index, upgrading packages if required and installing certain, additional system
    tools. To this end, two scripts are needed. One is a `bash` script doing all the
    work on the Linux level.^([5](ch02.html#idm140277702354096)) The other is a so-called
    `Dockerfile` which controls the building procedure for the image itself.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 本小节说明了基于最新版本的Ubuntu构建Docker镜像的过程，该镜像包含Miniconda以及一些重要的Python包。此外，它还通过更新Linux软件包索引，必要时升级软件包，并安装某些额外的系统工具来进行一些Linux的维护工作。为此，需要两个脚本。一个是在Linux级别执行所有工作的`bash`脚本。^([5](ch02.html#idm140277702354096))另一个是所谓的`Dockerfile`，它控制镜像本身的构建过程。
- en: The `bash` script in [Example 2-1](#docker_install) which does the installing
    consists of three major parts. The first part handles the Linux housekeeping.
    The second part installs Miniconda while the third part installs optional Python
    packages. There are also more detailed comments inline.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 2-1](#docker_install) 中的 `bash` 脚本负责安装，由三个主要部分组成。第一部分处理 Linux 的基本事务。第二部分安装
    Miniconda，而第三部分安装可选的 Python 包。内联还有更详细的注释。'
- en: Example 2-1\. Script installing Python and optional packages
  id: totrans-132
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 2-1\. 安装 Python 和可选包的脚本
- en: '[PRE15]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The `Dockerfile` in [Example 2-2](#docker_file) uses the `bash` script in [Example 2-1](#docker_install)
    to build a new Docker image. It also has its major parts commented inline.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 2-2](#docker_file) 中的 `Dockerfile` 使用 [示例 2-1](#docker_install) 中的 `bash`
    脚本构建新的 Docker 镜像。它还将其主要部分作为注释内联。'
- en: Example 2-2\. Dockerfile to build the image
  id: totrans-135
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 2-2\. 构建镜像的 Dockerfile
- en: '[PRE16]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: If these two files are in a single folder and Docker is installed, then the
    building of the new Docker image is straightforward. Here, the tag `ubuntupython`
    is used for the image. This tag is needed to reference the image, for example,
    when running a container based on it.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这两个文件在同一个文件夹中，并且已安装 Docker，则构建新的 Docker 镜像就很简单。在这里，标签 `ubuntupython` 用于该镜像。这个标签在需要引用镜像时很重要，例如在基于它运行容器时。
- en: '[PRE17]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Existing Docker images can be listed via `docker images`. The new image should
    be on top of the list.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过 `docker images` 列出现有的 Docker 镜像。新镜像应该位于列表的顶部。
- en: '[PRE18]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Having built the `ubuntupython` image successfully allows to run a respective
    Docker container with `docker run`. The parameter combination `-ti` is needed
    for interactive processes running within a Docker container, like a shell process
    (see the [Docker Run Reference page](https://docs.docker.com/engine/reference/run/)).
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 成功构建 `ubuntupython` 镜像后，可以使用 `docker run` 运行相应的 Docker 容器。参数组合 `-ti` 用于在 Docker
    容器中运行交互式进程，比如 shell 进程（参见 [Docker Run 参考页](https://docs.docker.com/engine/reference/run/)）。
- en: '[PRE19]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Exiting `IPython` will exit the container as well since it is *the only* application
    run within the container. However, you can detach from a container via
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 退出 `IPython` 也将退出容器，因为它是容器中唯一运行的应用程序。然而，你可以通过
- en: '[PRE20]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'After having detached from the container, the `docker ps` command shows the
    running container (and maybe other currently running containers):'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 从容器中分离后，`docker ps` 命令显示运行的容器（可能还有其他当前正在运行的容器）：
- en: '[PRE21]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Attaching to the Docker container is accomplished by `docker attach $CONTAINER_ID`
    (notice that a few letters of the `CONTAINER ID` are enough):'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 `docker attach $CONTAINER_ID`（注意，容器 ID 的几个字母就足够了）连接到 Docker 容器：
- en: '[PRE22]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The `exit` command terminates `IPython` and therewith the Docker container as
    well. It can be removed by `docker rm`.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '`exit` 命令终止 `IPython`，从而终止 Docker 容器。它可以通过 `docker rm` 删除。'
- en: '[PRE23]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Similarly, the Docker image `ubuntupython` can be removed via `docker rmi` if
    not needed any longer. While containers are relatively light weight, single images
    might consume quite a bit of storage. In the case of the `py4fi:basic` image,
    the size is above 1 GB. That is why you might want to regularly clean up the list
    of Docker images.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，如果不再需要，可以通过 `docker rmi` 删除 Docker 镜像 `ubuntupython`。虽然容器相对轻量级，但单个镜像可能会消耗大量存储空间。在
    `py4fi:basic` 镜像的情况下，其大小超过 1 GB。这就是为什么你可能想定期清理 Docker 镜像列表的原因。
- en: '[PRE24]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Of course, there is much more to say about Docker containers and their benefits
    in certain application scenarios. For the purposes of this book and online training
    course, they provide a modern approach to deploy Python, to do Python development
    in a completely separated (containerized) environment and to ship codes for algorithmic
    trading.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，关于 Docker 容器及其在某些应用场景中的优势还有很多值得说的。对于本书和在线培训课程而言，它们提供了一种现代化的方法，用于部署 Python，在完全分离的（容器化）环境中进行
    Python 开发，并为算法交易提供代码。
- en: Tip
  id: totrans-154
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 提示
- en: If you are not yet using Docker containers, you should consider start using
    them. They provide a number of benefits when it comes to Python deployment and
    development efforts, not only when working locally but in particular when working
    with remote cloud instances and servers deploying code for algorithmic trading.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有使用 Docker 容器，应考虑开始使用它们。在 Python 部署和开发工作中，它们提供了许多好处，不仅在本地工作时，而且在使用远程云实例和服务器部署算法交易代码时尤其如此。
- en: Using Cloud Instances
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用云实例
- en: This section shows how to set up a full-fledged Python infrastructure on a [DigitalOcean](http://digitalocean.com)
    cloud instance. There are many other cloud providers out there, among them [Amazon
    Web Services](http://aws.amazon.com) (AWS) as the leading provider. However, DigitalOcean
    is well known for its simplicity and also its relatively low rates for their smaller
    cloud instances, which they call *droplet*. The smallest droplet, which is generally
    sufficient for exploration and development purposes, only costs 5 USD per month
    or 0.007 USD per hour. Users get only charged by the hour so that you can easily
    spin up a droplet for 2 hours, destroy it afterwards and get charged just 0.014
    USD. If you do not have an account yet, register for one on this [sign-up page](https://m.do.co/c/fbe512dd3dac)
    that secures you a starting credit of 10 USD.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: 'The goal of this section is to set up a droplet on DigitalOcean that has a
    Python 3.6 installation plus typically needed packages (e.g. `NumPy`, `pandas`)
    in combination with a password-protected and Secure Sockets Layer (SSL)-encrypted
    [Jupyter Notebook](http://jupyter.org) server installation. As a web-based tool
    suite, Jupyter Notebook provides three major tools that can be used via a regular
    browser:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: '**Jupyter Notebook**: this is the by now really popular interactive development
    environment that features a selection of different language kernels like for Python,
    R and Julia'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**terminal**: a system shell implementation accessible via the browser which
    allows for all typical system administration tasks but also for usage of such
    helpful tools like [`Vim`](http://www.vim.org/download.ph) or [`git`](https://git-scm.com/)'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**editor**: the third major tool is a browser-based file editor with syntax
    highlighting for many different programming languages and file types as well as
    typical editing capabilities'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Having Jupyter Notebook installed on a droplet allows to do Python development
    and deployment via the browser, circumventing the need to log in to the cloud
    instance via Secure Shell (SSH) access.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: To accomplish the goal of this section, a number of files is needed.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: '**server set-up script**: this script orchestrates all steps necessary, like
    for instance copying other files to the droplet and running them on the droplet'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Python and Jupyter installation script**: this installs Python, additional
    packages, Jupyter Notebook and starts the Jupyter Notebook server'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Jupyter Notebook configuration file**: this file is for the configuration
    of the Jupyter Notebook server, e.g. with respect to password protection'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**RSA public and private key files**: these two files are needed for the SSL
    encryption of the Jupyter Notebook server'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In what follows, we work backwards through this list of files.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: RSA Public and Private Keys
  id: totrans-169
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to accomplish a secure connection to the Jupyter Notebook server via
    an arbitrary browser, a SSL certificate consisting of RSA public and private keys
    (see [RSA Wikipedia page](https://en.wikipedia.org/wiki/RSA_(cryptosystem))) is
    needed. In general, one would expect that such a certificate comes from a so-called
    Certificate Authority (CA). For the purposes of this book, however, a self-generated
    certificate is "`good enough`“.^([6](ch02.html#idm140277702285376)) A popular
    tool to generate RSA key pairs is [`OpenSSL`](http://openssl.org). The brief interactive
    session to follow generates a certificate appropriate for use with a Jupyter Notebook
    server.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 为了通过任意浏览器安全连接到 Jupyter Notebook 服务器，需要一个由 RSA 公钥和私钥组成的 SSL 证书（参见[RSA 维基百科页面](https://zh.wikipedia.org/wiki/RSA%E5%8A%A0%E5%AF%86%E6%BC%94%E7%AE%97%E6%B3%95)）。一般来说，人们期望这样的证书来自所谓的证书颁发机构（CA）。然而，在本书的目的下，自动生成的证书已经“`足够好`“了。[^6]
    生成 RSA 密钥对的流行工具是[`OpenSSL`](http://openssl.org)。接下来的简要交互式会话生成了适用于 Jupyter Notebook
    服务器的证书。
- en: '[PRE25]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The two files `cert.key` and `cert.pem` need to be copied to the droplet and
    need to be referenced by the Jupyter Notebook configuration file. This file is
    presented next.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 两个文件 `cert.key` 和 `cert.pem` 需要复制到滴管上，并且需要被 Jupyter Notebook 配置文件引用。下面会介绍这个文件。
- en: Jupyter Notebook Configuration File
  id: totrans-173
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Jupyter Notebook 配置文件
- en: A public Jupyter Notebook server can be deployed securely as explained on the
    [Running a Notebook Server page](http://jupyter-notebook.readthedocs.io/en/latest/public_server.html).
    Among others, Jupyter Notebook shall be password protected. To this end, there
    is a password hash code-generating function called `passwd` available in `notebook.auth`
    sub-package. The code below generates a password hash code with `jupyter` being
    the password itself.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 可以按照[运行 Notebook 服务器页面](http://jupyter-notebook.readthedocs.io/en/latest/public_server.html)上的说明安全地部署一个公共
    Jupyter Notebook 服务器。其中，Jupyter Notebook 应该受到密码保护。为此，有一个叫做 `passwd` 的密码哈希生成函数，可在
    `notebook.auth` 子包中使用。下面的代码生成了一个以 `jupyter` 为密码的密码哈希代码。
- en: '[PRE26]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: This hash code needs to be placed in the Jupyter Notebook configuration file
    as presented in [Example 2-3](#jupyter_config_file). The code assumes that the
    RSA key files have been copied on the droplet to the `/root/.jupyter/` folder.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 此哈希代码需要放置在 Jupyter Notebook 配置文件中，如[示例 2-3](#jupyter_config_file) 所示。该代码假定 RSA
    密钥文件已复制到了滴管的 `/root/.jupyter/` 文件夹中。
- en: Example 2-3\. Jupyter Notebook configuration file
  id: totrans-177
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 2-3. Jupyter Notebook 配置文件
- en: '[PRE27]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Caution
  id: totrans-179
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Deploying Jupyter Notebook in the cloud principally leads to a number of security
    issues since it is a full-fledged development environment accessible via a web
    browser. It is therefore of paramount importance to use the security measures
    that a Jupyter Notebook server provides by default, like password protection and
    SSL encryption. But this is just the beginning and further security measures might
    be advised depending on what exactly is done on the cloud instance.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 将 Jupyter Notebook 部署在云中主要会引发一系列安全问题，因为它是一个通过 Web 浏览器可访问的完整的开发环境。因此，使用 Jupyter
    Notebook 服务器默认提供的安全措施（如密码保护和 SSL 加密）至关重要。但这只是开始，根据在云实例上具体做了什么，可能建议采取进一步的安全措施。
- en: The next step is to make sure that Python and Jupyter Notebook get installed
    on the droplet.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是确保 Python 和 Jupyter Notebook 在滴管上安装。
- en: Installation Script for Python and Jupyter Notebook
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python 和 Jupyter Notebook 的安装脚本
- en: The bash script to install Python and Jupyter Notebook is similar to the one
    presented in section [“Using Docker Containerization”](#docker_container) to install
    Python via Miniconda in a Docker container. However, the script here needs to
    start the Jupyter Notebook server as well. All major parts and lines of code are
    commented inline.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 用于安装 Python 和 Jupyter Notebook 的 bash 脚本类似于在[“使用 Docker 容器化”](#docker_container)一节中介绍的用于在
    Docker 容器中通过 Miniconda 安装 Python 的脚本。然而，这里的脚本还需要启动 Jupyter Notebook 服务器。所有主要部分和代码行都在内联注释中。
- en: Example 2-4\. Bash script to install Python and to run the Jupyter Notebook
    server
  id: totrans-184
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 2-4. 安装 Python 并运行 Jupyter Notebook 服务器的 bash 脚本
- en: '[PRE28]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: This script needs to be copied to the droplet and needs to be started by the
    orchestration script as described in the next sub-section.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 此脚本需要复制到滴管上，并且需要由下一小节中描述的编排脚本启动。
- en: Script to Orchestrate the Droplet Set-up
  id: totrans-187
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管理滴管设置的脚本
- en: The second bash script which sets up the droplet is the shortest one. It mainly
    copies all the other files to the droplet for which the respective IP address
    is expected as a parameter. In the final line, it starts the `install.sh` bash
    script which in turn does the installation itself and starts the Jupyter Notebook
    server.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 设置滴水筹的第二个bash脚本是最短的。它主要将所有其他文件复制到滴水筹中，其中预期的是相应的IP地址作为参数。在最后一行，它启动`install.sh`
    bash脚本，后者又会进行安装并启动Jupyter Notebook服务器。
- en: Example 2-5\. `bash` script to setup the droplet
  id: totrans-189
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 2-5\. 用于设置滴水筹的`bash`脚本
- en: '[PRE29]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Everything now is together to give the set-up code a try. On DigitalOcean,
    create a new droplet with options similar to these:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 现在一切都准备好尝试设置代码。在DigitalOcean上，创建一个新的滴水筹，并选择类似于以下选项：
- en: '**operating system**: Ubuntu 16.04.3 x64 (the default choice as of 04\. November
    2017)'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**操作系统**：Ubuntu 16.04.3 x64（截至2017年11月4日的默认选择）'
- en: '**size**: 1 core, 512 MB, 20GB SSD (smallest droplet)'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**规模**：1核心，512 MB，20GB SSD（最小的滴水筹）'
- en: '**data center region**: Frankfurt (since your author lives in Germany)'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据中心区域**：法兰克福（因为作者居住在德国）'
- en: '**SSH key**: add a (new) SSH key for password-less login ^([7](ch02.html#idm140277701971712))'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SSH密钥**：添加（新的）SSH密钥以实现无密码登录 ^（[7](ch02.html#idm140277701971712)）'
- en: '**droplet name**: you can go with the pre-specified name or can choose something
    like `py4fi`'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**滴水筹名称**：您可以选择预先指定的名称，也可以选择像`py4fi`这样的名称'
- en: 'Finally, clicking on the `Create` button initiates the droplet creation process
    which generally takes about one minute. The major outcome for proceeding with
    the set-up procedure is the IP address which might be, for instance, 46.101.156.199
    when you have chosen Frankfurt as your data center location. Setting up the droplet
    now is as easy as follows:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，点击`创建`按钮启动滴水筹建过程，通常需要约一分钟。进行设置过程的主要结果是IP地址，例如，当您选择法兰克福作为数据中心位置时，可能为46.101.156.199。现在设置滴水筹非常简单：
- en: '[PRE30]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'The resulting process, however, might take a couple of minutes. It is finished
    when there is a message from the Jupyter Notebook server saying something like:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 结果过程可能需要几分钟。当Jupyter Notebook服务器出现类似于以下消息时，过程结束：
- en: '[PRE31]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'In any current browser, visiting the following address accesses the running
    Jupyter Notebook (note the `https` protocol):'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何当前浏览器中，访问以下地址即可访问正在运行的Jupyter Notebook（注意`https`协议）：
- en: '[PRE32]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: After maybe adding a security exception, the Jupyter Notebook login screen prompting
    for a password (in our case `jupyter`) should appear. Everything is now ready
    to start Python development in the browser via Jupyter Notebook, `IPython` via
    a terminal window or the text file editor. Other file management capabilities
    like file upload, deletion of files or creation of folders are also available.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 可能需要添加安全例外，然后Jupyter Notebook登录屏幕会提示输入密码（在我们的情况下为`jupyter`）。现在一切准备就绪，可以通过Jupyter
    Notebook在浏览器中开始Python开发，通过终端窗口进行`IPython`或文本文件编辑器。还提供了其他文件管理功能，如文件上传，删除文件或创建文件夹。
- en: Tip
  id: totrans-204
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 小贴士
- en: Cloud instances like those from DigitalOcean and Jupyter Notebook are a powerful
    combination for the algorithmic trader to work on and make use of professional
    compute and storage infrastructure. Professional cloud and data center providers
    make sure that your (virtual) machines are physically secure and highly available.
    Using cloud instances also keeps the exploration and development phase at rather
    low costs since usage generally gets charged by the hour without the need to enter
    long term agreements.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 像DigitalOcean和Jupyter Notebook这样的云实例是算法交易员的强大组合，可以利用专业的计算和存储基础设施。专业的云和数据中心提供商确保您的（虚拟）机器在物理上安全且高度可用。使用云实例也可以使探索和开发阶段的成本相对较低，因为通常按小时收费，而无需签订长期协议。
- en: Conclusions
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: Python is the programming language and technology platform of choice for this
    book. However, Python deployment can be tricky at best and sometimes even tedious
    and nerve wrecking. Fortunately, technologies are available today — all younger
    than five years — that help with the deployment issue. The open source software
    `conda` helps with both Python package and virtual environment management. Docker
    containers go even further in that complete file systems and runtime environments
    can be easily created in a technically shielded "`sandbox`“, i.e. the container.
    Going even one step further, cloud providers like DigitalOcean offer compute and
    storage capacity in professionally managed and secured data centers within minutes
    and billed by the hour. This in combination with a Python 3.6 installation and
    a secured Jupyter Notebook server installation provides a professional environment
    for Python development and deployment in the context of algorithmic trading projects.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: Python是本书选择的编程语言和技术平台。然而，Python部署可能最多时甚至令人厌烦和心神不宁。幸运的是，今天有一些技术可用 — 都不到五年的时间 — 有助于解决部署问题。开源软件`conda`有助于Python包和虚拟环境的管理。Docker容器甚至可以进一步扩展，可以在一个技术上受到保护的"`沙箱`"中轻松创建完整的文件系统和运行时环境。更进一步，像DigitalOcean这样的云提供商在几分钟内提供由专业管理和安全的数据中心提供的计算和存储容量，并按小时计费。这与Python
    3.6安装和安全的Jupyter Notebook服务器安装结合在一起，为算法交易项目的Python开发和部署提供了专业的环境。
- en: Further Resources
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步资源
- en: 'For *Python package management*, consult the following resources:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 对于*Python包管理*，请参考以下资源：
- en: '[`pip` package manager page](https://pypi.python.org/pypi/pip)'
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`pip`包管理器页面](https://pypi.python.org/pypi/pip)'
- en: '[`conda` package manager page](http://conda.pydata.org)'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`conda`包管理器页面](http://conda.pydata.org)'
- en: '[official Installing Packages page](https://packaging.python.org/installing/)'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[官方安装包页面](https://packaging.python.org/installing/)'
- en: 'For *virtual environment management*, consult these resources:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 对于*虚拟环境管理*，请参阅以下资源：
- en: '[`virtualenv` environment manager page](https://pypi.python.org/pypi/virtualenv)'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`virtualenv`环境管理器页面](https://pypi.python.org/pypi/virtualenv)'
- en: '[`conda` Managing Environments page](http://conda.pydata.org/docs/using/envs.html)'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`conda`环境管理页面](http://conda.pydata.org/docs/using/envs.html)'
- en: 'Information about *Docker containers* is found here:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 关于*Docker容器*的信息请见此处：
- en: '[Docker home page](http://docker.com)'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Docker首页](http://docker.com)'
- en: 'Matthias, Karl and Sean Kane (2015): *Docker: Up and Running.* O’Reilly, Beijing
    et al.'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Matthias、Karl和Sean Kane (2015): *Docker: Up and Running.* O’Reilly, 北京等。'
- en: Robbins (2016) provides a concise introduction to and overview of the `bash`
    *scripting language*.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: Robbins (2016)提供了对`bash` *脚本语言*的简明介绍和概述。
- en: 'Robbins, Arnold (2016): *Bash Pocket Reference*. 2nd ed., O’Reilly, Beijing
    et al.'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Robbins, Arnold (2016): *Bash Pocket Reference*. 第2版，O’Reilly, 北京等。'
- en: How to run a *public Jupyter Notebook server securely* is explained under [Running
    a Notebook Server](http://jupyter-notebook.readthedocs.io/en/latest/public_server.html).
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 如何安全运行*公共Jupyter Notebook服务器*请参阅[运行笔记本服务器](http://jupyter-notebook.readthedocs.io/en/latest/public_server.html)。
- en: To sign up on DigitalOcean with a 10 USD starting credit in your new account
    visit this [sign-up page](https://m.do.co/c/fbe512dd3dac). This pays for two months
    of usage of the smallest droplet.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 要在DigitalOcean上注册一个新帐户并获得10美元的起始信用，请访问此[注册页面](https://m.do.co/c/fbe512dd3dac)。这可以支付最小水滴两个月的使用费。
- en: ^([1](ch02.html#idm140277702866800-marker)) At the time of this writing, Python
    3.7beta has just been released.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch02.html#idm140277702866800-marker))在撰写本文时，Python 3.7beta刚刚发布。
- en: ^([2](ch02.html#idm140277702388192-marker)) On Windows, the command to activate
    the new environment would only be `activate py27` — dropping the `source`.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: ^([2](ch02.html#idm140277702388192-marker))在Windows上，激活新环境的命令仅为`activate py27` — 省略了`source`。
- en: '^([3](ch02.html#idm140277702377552-marker)) In the official documentation you
    find the following explanation: "`Python ''Virtual Environments'' allow Python
    packages to be installed in an isolated location for a particular application,
    rather than being installed globally.`" See the [Creating Virtual Environments
    page](https://packaging.python.org/installing/#creating-virtual-environments).'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: ^([3](ch02.html#idm140277702377552-marker))在官方文档中，您会找到以下解释：“`Python '虚拟环境'允许将Python包安装在特定应用程序的隔离位置，而不是全局安装。`"参见[创建虚拟环境页面](https://packaging.python.org/installing/#creating-virtual-environments)。
- en: ^([4](ch02.html#idm140277702366912-marker)) See the book Matthias and Kane (2015)
    for a comprehensive introduction to the Docker technology.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: ^([4](ch02.html#idm140277702366912-marker)) 有关 Docker 技术的全面介绍，请参阅 Matthias 和
    Kane (2015) 的书籍。
- en: ^([5](ch02.html#idm140277702354096-marker)) For a concise introduction to and
    quick overview of `bash` scripting consult the book Robbins (2016).
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: ^([5](ch02.html#idm140277702354096-marker)) 要了解 `bash` 脚本的简明介绍和快速概述，请参考 Robbins
    (2016) 的书籍。
- en: ^([6](ch02.html#idm140277702285376-marker)) With such a self-generated certificate
    you might need to add a security exception when prompted by the browser.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: ^([6](ch02.html#idm140277702285376-marker)) 使用这样一个自行生成的证书时，可能需要在浏览器提示时添加安全异常。
- en: ^([7](ch02.html#idm140277701971712-marker)) If you need assistance, visit the
    [How To Use SSH Keys with DigitalOcean Droplets](https://www.digitalocean.com/community/tutorials/how-to-use-ssh-keys-with-digitalocean-droplets)
    or [How To Use SSH Keys with PuTTY on DigitalOcean Droplets (Windows users)](https://www.digitalocean.com/community/tutorials/how-to-use-ssh-keys-with-putty-on-digitalocean-droplets-windows-users).
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: ^([7](ch02.html#idm140277701971712-marker)) 如果需要帮助，请访问[如何在 DigitalOcean Droplets
    上使用 SSH 密钥](https://www.digitalocean.com/community/tutorials/how-to-use-ssh-keys-with-digitalocean-droplets)或[如何在
    DigitalOcean Droplets 上使用 PuTTY（Windows 用户）](https://www.digitalocean.com/community/tutorials/how-to-use-ssh-keys-with-putty-on-digitalocean-droplets-windows-users)。

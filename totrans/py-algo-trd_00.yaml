- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Dataism says that the universe consists of data flows, and the value of any
    phenomenon or entity is determined by its contribution to data processing….Dataism
    thereby collapses the barrier between animals [humans] and machines, and expects
    electronic algorithms to eventually decipher and outperform biochemical algorithms.^([1](preface01.html#idm45785411067784))
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Yuval Noah Harari
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Finding the right algorithm to automatically and successfully trade in financial
    markets is the holy grail in finance. Not too long ago, algorithmic trading was
    only available and possible for institutional players with deep pockets and lots
    of assets under management. Recent developments in the areas of open source, open
    data, cloud compute, and cloud storage, as well as online trading platforms, have
    leveled the playing field for smaller institutions and individual traders, making
    it possible to get started in this fascinating discipline while equipped only
    with a typical notebook or desktop computer and a reliable internet connection.
  prefs: []
  type: TYPE_NORMAL
- en: Nowadays, Python and its ecosystem of powerful packages is the technology platform
    of choice for algorithmic trading. Among other things, Python allows you to do
    *efficient* *data analytics* (with [`pandas`](http://pandas.pydata.org), for example),
    to apply *machine learning* to stock market prediction (with [`scikit-learn`](http://scikit-learn.org),
    for example), or even to make use of Google’s *deep learning* technology with
    [`TensorFlow`](http://tensorflow.org).
  prefs: []
  type: TYPE_NORMAL
- en: This is a book about Python *for* algorithmic trading, primarily in the context
    of *alpha generating strategies* (see [Chapter 1](ch01.html#algorithmic_trading)).
    Such a book at the intersection of two vast and exciting fields can hardly cover
    all topics of relevance. However, it can cover a range of important meta topics
    in depth.
  prefs: []
  type: TYPE_NORMAL
- en: 'These topics include:'
  prefs: []
  type: TYPE_NORMAL
- en: Financial data
  prefs: []
  type: TYPE_NORMAL
- en: Financial data is at the core of every algorithmic trading project. Python and
    packages like `NumPy` and `pandas` do a great job of handling and working with
    structured financial data of any kind (end-of-day, intraday, high frequency).
  prefs: []
  type: TYPE_NORMAL
- en: Backtesting
  prefs: []
  type: TYPE_NORMAL
- en: There should be no automated algorithmic trading without a rigorous testing
    of the trading strategy to be deployed. The book covers, among other things, trading
    strategies based on simple moving averages, momentum, mean-reversion, and machine/deep-learning
    based prediction.
  prefs: []
  type: TYPE_NORMAL
- en: Real-time data
  prefs: []
  type: TYPE_NORMAL
- en: Algorithmic trading requires dealing with real-time data, online algorithms
    based on it, and visualization in real time. The book provides an introduction
    to socket programming with `ZeroMQ` and streaming visualization.
  prefs: []
  type: TYPE_NORMAL
- en: Online platforms
  prefs: []
  type: TYPE_NORMAL
- en: 'No trading can take place without a trading platform. The book covers two popular
    electronic trading platforms: [Oanda](http://oanda.com) and [FXCM](http://fxcm.com).'
  prefs: []
  type: TYPE_NORMAL
- en: Automation
  prefs: []
  type: TYPE_NORMAL
- en: The beauty, as well as some major challenges, in algorithmic trading results
    from the automation of the trading operation. The book shows how to deploy Python
    in the cloud and how to set up an environment appropriate for automated algorithmic
    trading.
  prefs: []
  type: TYPE_NORMAL
- en: 'The book offers a unique learning experience with the following features and
    benefits:'
  prefs: []
  type: TYPE_NORMAL
- en: Coverage of relevant topics
  prefs: []
  type: TYPE_NORMAL
- en: This is the only book covering such a breadth and depth with regard to relevant
    topics in Python for algorithmic trading (see the following).
  prefs: []
  type: TYPE_NORMAL
- en: Self-contained code base
  prefs: []
  type: TYPE_NORMAL
- en: The book is accompanied by a Git repository with all codes in a self-contained,
    executable form. The repository is available on the [Quant Platform](http://py4at.pqp.io).
  prefs: []
  type: TYPE_NORMAL
- en: Real trading as the goal
  prefs: []
  type: TYPE_NORMAL
- en: The coverage of two different online trading platforms puts the reader in the
    position to start both paper and live trading efficiently. To this end, the book
    equips the reader with relevant, practical, and valuable background knowledge.
  prefs: []
  type: TYPE_NORMAL
- en: Do-it-yourself and self-paced approach
  prefs: []
  type: TYPE_NORMAL
- en: Since the material and the code are self-contained and only rely on standard
    Python packages, the reader has full knowledge of and full control over what is
    going on, how to use the code examples, how to change them, and so on. There is
    no need to rely on third-party platforms, for instance, to do the backtesting
    or to connect to the trading platforms. With this book, the reader can do all
    this on their own at a convenient pace and has every single line of code to do
    so.
  prefs: []
  type: TYPE_NORMAL
- en: User forum
  prefs: []
  type: TYPE_NORMAL
- en: Although the reader should be able to follow along seamlessly, the author and
    The Python Quants are there to help. The reader can post questions and comments
    in the user forum on the [Quant Platform](http://py4at.pqp.io) at any time (accounts
    are free).
  prefs: []
  type: TYPE_NORMAL
- en: Online/video training (paid subscription)
  prefs: []
  type: TYPE_NORMAL
- en: The Python Quants offer [comprehensive online training programs](https://oreil.ly/Qy90w)
    that make use of the contents presented in the book and that add additional content,
    covering important topics such as financial data science, artificial intelligence
    in finance, Python for Excel and databases, and additional Python tools and skills.
  prefs: []
  type: TYPE_NORMAL
- en: Contents and Structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here’s a quick overview of the topics and contents presented in each chapter.
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 1, *Python and Algorithmic Trading*](ch01.html#algorithmic_trading)'
  prefs: []
  type: TYPE_NORMAL
- en: The first chapter is an introduction to the topic of algorithmic trading—that
    is, the automated trading of financial instruments based on computer algorithms.
    It discusses fundamental notions in this context and also addresses, among other
    things, what the expected prerequisites for reading the book are.
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 2, *Python Infrastructure*](ch02.html#python_environment)'
  prefs: []
  type: TYPE_NORMAL
- en: This chapter lays the technical foundations for all subsequent chapters in that
    it shows how to set up a proper Python environment. This chapter mainly uses `conda`
    as a package and environment manager. It illustrates Python deployment via [Docker](http://docker.com)
    containers and in the cloud.
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3, *Working with Financial Data*](ch03.html#financial_data)'
  prefs: []
  type: TYPE_NORMAL
- en: Financial time series data is central to every algorithmic trading project.
    This chapter shows you how to retrieve financial data from different public data
    and proprietary data sources. It also demonstrates how to store financial time
    series data efficiently with Python.
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 4, *Mastering Vectorized Backtesting*](ch04.html#vectorized_backtesting)'
  prefs: []
  type: TYPE_NORMAL
- en: Vectorization is a powerful approach in numerical computation in general and
    for financial analytics in particular. This chapter introduces vectorization with
    `NumPy` and `pandas` and applies that approach to the backtesting of SMA-based,
    momentum, and mean-reversion strategies.
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 5, *Predicting Market Movements with Machine Learning*](ch05.html#machine_learning)'
  prefs: []
  type: TYPE_NORMAL
- en: This chapter is dedicated to generating market predictions by the use of machine
    learning and deep learning approaches. By mainly relying on past return observations
    as features, approaches are presented for predicting tomorrow’s market direction
    by using such Python packages as [`Keras`](https://keras.io) in combination with
    [`TensorFlow`](https://oreil.ly/B44Fb) and [`scikit-learn`](http://scikit-learn.org).
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 6, *Building Classes for Event-Based Backtesting*](ch06.html#event_based_backtesting)'
  prefs: []
  type: TYPE_NORMAL
- en: While vectorized backtesting has advantages when it comes to conciseness of
    code and performance, it’s limited with regard to the representation of certain
    market features of trading strategies. On the other hand, event-based backtesting,
    technically implemented by the use of object oriented programming, allows for
    a rather granular and more realistic modeling of such features. This chapter presents
    and explains in detail a base class as well as two classes for the backtesting
    of long-only and long-short trading strategies.
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 7, *Working with Real-Time Data and Sockets*](ch07.html#realtime_sockets)'
  prefs: []
  type: TYPE_NORMAL
- en: Needing to cope with real-time or streaming data is a reality even for the ambitious
    individual algorithmic trader. The tool of choice is socket programming, for which
    this chapter introduces [`ZeroMQ`](http://zeromq.org) as a lightweight and scalable
    technology. The chapter also illustrates how to make use of [Plotly](http://plot.ly)
    to create nice looking, interactive streaming plots.
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 8, *CFD Trading with Oanda*](ch08.html#trading_oanda)'
  prefs: []
  type: TYPE_NORMAL
- en: '[Oanda](http://oanda.com) is a foreign exchange (forex, FX) and Contracts for
    Difference (CFD) trading platform offering a broad set of tradable instruments,
    such as those based on foreign exchange pairs, stock indices, commodities, or
    rates instruments (benchmark bonds). This chapter provides guidance on how to
    implement automated algorithmic trading strategies with Oanda, making use of the
    Python wrapper package [`tpqoa`](http://github.com/yhilpisch/tpqoa).'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 9, *FX Trading with FXCM*](ch09.html#fxcm_platform)'
  prefs: []
  type: TYPE_NORMAL
- en: '[FXCM](http://fxcm.co.uk) is another forex and CFD trading platform that has
    recently released a modern RESTful API for algorithmic trading. Available instruments
    span multiple asset classes, such as forex, stock indices, or commodities. A Python
    wrapper package that makes algorithmic trading based on Python code rather convenient
    and efficient is available ([*http://fxcmpy.tpq.io*](http://fxcmpy.tpq.io)).'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 10, *Automating Trading Operations*](ch10.html#automated_trading)'
  prefs: []
  type: TYPE_NORMAL
- en: This chapter deals with capital management, risk analysis and management, as
    well as with typical tasks in the technical automation of algorithmic trading
    operations. It covers, for instance, the Kelly criterion for capital allocation
    and leverage in detail.
  prefs: []
  type: TYPE_NORMAL
- en: '[Appendix A, *Python, NumPy, matplotlib, pandas*](app01.html#python_numpy_pandas)'
  prefs: []
  type: TYPE_NORMAL
- en: The appendix provides a concise introduction to the most important Python, `NumPy`,
    and `pandas` topics in the context of the material presented in the main chapters.
    It represents a starting point from which one can add to one’s own Python knowledge
    over time.
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure P-1](#pyalgo_pyramid) shows the layers related to algorithmic trading
    that the chapters cover from the bottom to the top. It necessarily starts with
    the Python infrastructure ([Chapter 2](ch02.html#python_environment)), and adds
    financial data ([Chapter 3](ch03.html#financial_data)), strategy, and vectorized
    backtesting code (Chapters [4](ch04.html#vectorized_backtesting) and [5](ch05.html#machine_learning)).
    Until that point, data sets are used and manipulated as a whole. Event-based backtesting
    for the first time introduces the idea that data in the real world arrives incrementally
    ([Chapter 6](ch06.html#event_based_backtesting)). It is the bridge that leads
    to the connecting code layer that covers socket communication and real-time data
    handling ([Chapter 7](ch07.html#realtime_sockets)). On top of that, trading platforms
    and their APIs are required to be able to place orders (Chapters [8](ch08.html#trading_oanda)
    and [9](ch09.html#fxcm_platform)). Finally, important aspects of automation and
    deployment are covered ([Chapter 10](ch10.html#automated_trading)). In that sense,
    the main chapters of the book relate to the layers as seen in [Figure P-1](#pyalgo_pyramid),
    which provide a natural sequence for the topics to be covered.'
  prefs: []
  type: TYPE_NORMAL
- en: '![pfat 0001](assets/pfat_0001.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure P-1\. The layers of Python for algorithmic trading
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Who This Book Is For
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This book is for students, academics, and practitioners alike who want to apply
    Python in the fascinating field of algorithmic trading. The book assumes that
    the reader has, at least on a fundamental level, background knowledge in both
    Python programming and in financial trading. For reference and review, the [Appendix A](app01.html#python_numpy_pandas)
    introduces important Python, `NumPy`, `matplotlib`, and `pandas` topics. The following
    are good references to get a sound understanding of the Python topics important
    for this book. Most readers will benefit from having at least access to Hilpisch
    (2018) for reference. With regard to the machine and deep learning approaches
    applied to algorithmic trading, Hilpisch (2020) provides a wealth of background
    information and a larger number of specific examples. Background information about
    Python as applied to finance, financial data science, and artificial intelligence
    can be found in the following books:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hilpisch, Yves. 2018\. *Python for Finance: Mastering Data-Driven Finance*.
    2nd ed. Sebastopol: O’Reilly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '⸻. 2020\. *Artificial Intelligence in Finance: A Python-Based Guide*. Sebastopol:
    O’Reilly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'McKinney, Wes. 2017\. *Python for Data Analysis: Data Wrangling with Pandas,
    NumPy, and IPython*. 2nd ed. Sebastopol: O’Reilly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Ramalho, Luciano. 2021\. *Fluent Python: Clear, Concise, and Effective Programming*.
    2nd ed. Sebastopol: O’Reilly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'VanderPlas, Jake. 2016\. *Python Data Science Handbook: Essential Tools for
    Working with Data*. Sebastopol: O’Reilly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Background information about algorithmic trading can be found, for instance,
    in these books:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Chan, Ernest. 2009\. *Quantitative Trading: How to Build Your Own Algorithmic
    Trading Business*. Hoboken et al: John Wiley & Sons.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Chan, Ernest. 2013\. *Algorithmic Trading: Winning Strategies and Their Rationale*.
    Hoboken et al: John Wiley & Sons.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Kissel, Robert. 2013\. *The Science of Algorithmic Trading and Portfolio Management*.
    Amsterdam et al: Elsevier/Academic Press.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Narang, Rishi. 2013\. *Inside the Black Box: A Simple Guide to Quantitative
    and High Frequency Trading*. Hoboken et al: John Wiley & Sons.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enjoy your journey through the algorithmic trading world with Python and get
    in touch by emailing [py4at@tpq.io](mailto:py4at@tpq.io) if you have questions
    or comments.
  prefs: []
  type: TYPE_NORMAL
- en: Conventions Used in This Book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following typographical conventions are used in this book:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Italic*'
  prefs: []
  type: TYPE_NORMAL
- en: Indicates new terms, URLs, email addresses, filenames, and file extensions.
  prefs: []
  type: TYPE_NORMAL
- en: '`Constant width`'
  prefs: []
  type: TYPE_NORMAL
- en: Used for program listings, as well as within paragraphs, to refer to program
    elements such as variable or function names, databases, data types, environment
    variables, statements, and keywords.
  prefs: []
  type: TYPE_NORMAL
- en: '**`Constant width bold`**'
  prefs: []
  type: TYPE_NORMAL
- en: Shows commands or other text that should be typed literally by the user.
  prefs: []
  type: TYPE_NORMAL
- en: '*`Constant width italic`*'
  prefs: []
  type: TYPE_NORMAL
- en: Shows text that should be replaced with user-supplied values or by values determined
    by context.
  prefs: []
  type: TYPE_NORMAL
- en: This element signifies a tip or suggestion.
  prefs: []
  type: TYPE_NORMAL
- en: This element signifies a general note.
  prefs: []
  type: TYPE_NORMAL
- en: This element indicates a warning or caution.
  prefs: []
  type: TYPE_NORMAL
- en: Using Code Examples
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can access and execute the code that accompanies the book on the Quant Platform
    at [*https://py4at.pqp.io*](https://py4at.pqp.io), for which only a free registration
    is required.
  prefs: []
  type: TYPE_NORMAL
- en: If you have a technical question or a problem using the code examples, please
    email [*bookquestions@oreilly.com*](mailto:bookquestions@oreilly.com).
  prefs: []
  type: TYPE_NORMAL
- en: This book is here to help you get your job done. In general, if example code
    is offered with this book, you may use it in your programs and documentation.
    You do not need to contact us for permission unless you’re reproducing a significant
    portion of the code. For example, writing a program that uses several chunks of
    code from this book does not require permission. Selling or distributing examples
    from O’Reilly books does require permission. Answering a question by citing this
    book and quoting example code does not require permission. Incorporating a significant
    amount of example code from this book into your product’s documentation does require
    permission.
  prefs: []
  type: TYPE_NORMAL
- en: 'We appreciate, but generally do not require, attribution. An attribution usually
    includes the title, author, publisher, and ISBN. For example, this book may be
    attributed as: “*Python for Algorithmic Trading* by Yves Hilpisch (O’Reilly).
    Copyright 2021 Yves Hilpisch, 978-1-492-05335-4.”'
  prefs: []
  type: TYPE_NORMAL
- en: If you feel your use of code examples falls outside fair use or the permission
    given above, feel free to contact us at [*permissions@oreilly.com*](mailto:permissions@oreilly.com).
  prefs: []
  type: TYPE_NORMAL
- en: O’Reilly Online Learning
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For more than 40 years, [*O’Reilly Media*](http://oreilly.com) has provided
    technology and business training, knowledge, and insight to help companies succeed.
  prefs: []
  type: TYPE_NORMAL
- en: Our unique network of experts and innovators share their knowledge and expertise
    through books, articles, and our online learning platform. O’Reilly’s online learning
    platform gives you on-demand access to live training courses, in-depth learning
    paths, interactive coding environments, and a vast collection of text and video
    from O’Reilly and 200+ other publishers. For more information, visit [*http://oreilly.com*](http://oreilly.com).
  prefs: []
  type: TYPE_NORMAL
- en: How to Contact Us
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Please address comments and questions concerning this book to the publisher:'
  prefs: []
  type: TYPE_NORMAL
- en: O’Reilly Media, Inc.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1005 Gravenstein Highway North
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sebastopol, CA 95472
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 800-998-9938 (in the United States or Canada)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 707-829-0515 (international or local)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 707-829-0104 (fax)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have a web page for this book, where we list errata, examples, and any additional
    information. You can access this page at [*https://oreil.ly/py4at*](https://oreil.ly/py4at).
  prefs: []
  type: TYPE_NORMAL
- en: Email [*bookquestions@oreilly.com*](mailto:bookquestions@oreilly.com) to comment
    or ask technical questions about this book.
  prefs: []
  type: TYPE_NORMAL
- en: For news and information about our books and courses, visit [*http://oreilly.com*](http://oreilly.com).
  prefs: []
  type: TYPE_NORMAL
- en: 'Find us on Facebook: [*http://facebook.com/oreilly*](http://facebook.com/oreilly)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow us on Twitter: [*http://twitter.com/oreillymedia*](http://twitter.com/oreillymedia)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Watch us on YouTube: [*http://youtube.com/oreillymedia*](http://youtube.com/oreillymedia)'
  prefs: []
  type: TYPE_NORMAL
- en: Acknowledgments
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I want to thank the technical reviewers—Hugh Brown, McKlayne Marshall, Ramanathan
    Ramakrishnamoorthy, and Prem Jebaseelan—who provided helpful comments that led
    to many improvements of the book’s content.
  prefs: []
  type: TYPE_NORMAL
- en: As usual, a special thank you goes to Michael Schwed, who supports me in all
    technical matters, simple and highly complex, with his broad and in-depth technology
    know-how.
  prefs: []
  type: TYPE_NORMAL
- en: Delegates of the Certificate Programs in Python for Computational Finance and
    Algorithmic Trading also helped improve this book. Their ongoing feedback has
    enabled me to weed out errors and mistakes and refine the code and notebooks used
    in our online training classes and now, finally, in this book.
  prefs: []
  type: TYPE_NORMAL
- en: I would also like to thank the whole team at O’Reilly Media—especially Michelle
    Smith, Michele Cronin, Victoria DeRose, and Danny Elfanbaum—for making it all
    happen and helping me refine the book in so many ways.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, all remaining errors are mine alone.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, I would also like to thank the team at Refinitiv—in particular,
    Jason Ramchandani—for providing ongoing support and access to financial data.
    The major data files used throughout the book and made available to the readers
    were received in one way or another from Refinitiv’s data APIs.
  prefs: []
  type: TYPE_NORMAL
- en: To my family with love. I dedicate this book to my father Adolf whose support
    for me and our family now spans almost five decades.
  prefs: []
  type: TYPE_NORMAL
- en: '^([1](preface01.html#idm45785411067784-marker)) Harari, Yuval Noah. 2015\.
    *Homo Deus: A Brief History of Tomorrow*. London: Harvill Secker.'
  prefs: []
  type: TYPE_NORMAL

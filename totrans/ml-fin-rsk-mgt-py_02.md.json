["```py\nIn [1]: import statsmodels.api as sm\n        import numpy as np\n        import plotly.graph_objs as go\n        import matplotlib.pyplot as plt\n        import plotly\n        import warnings\n        warnings.filterwarnings('ignore')\n\nIn [2]: n_assets = 5 ![1](assets/1.png)\n        n_simulation = 500 ![2](assets/2.png)\n\nIn [3]: returns = np.random.randn(n_assets, n_simulation) ![3](assets/3.png)\n\nIn [4]: rand = np.random.rand(n_assets) ![4](assets/4.png)\n        weights = rand/sum(rand) ![5](assets/5.png)\n\n        def port_return(returns):\n            rets = np.mean(returns, axis=1)\n            cov = np.cov(rets.T, aweights=weights, ddof=1)\n            portfolio_returns = np.dot(weights, rets.T)\n            portfolio_std_dev = np.sqrt(np.dot(weights, np.dot(cov, weights)))\n            return portfolio_returns, portfolio_std_dev ![6](assets/6.png)\n\nIn [5]: portfolio_returns, portfolio_std_dev = port_return(returns) ![7](assets/7.png)\n\nIn [6]: print(portfolio_returns)\n        print(portfolio_std_dev) ![8](assets/8.png)\n\n        0.012968706503879782\n        0.023769932556585847\n\nIn [7]: portfolio = np.array([port_return(np.random.randn(n_assets, i))\n                              for i in range(1, 101)]) ![9](assets/9.png)\n\nIn [8]: best_fit = sm.OLS(portfolio[:, 1], sm.add_constant(portfolio[:, 0]))\\\n                   .fit().fittedvalues ![10](assets/10.png)\n\nIn [9]: fig = go.Figure()\n        fig.add_trace(go.Scatter(name='Risk-Return Relationship',\n                                 x=portfolio[:, 0],\n                                 y=portfolio[:, 1], mode='markers'))\n        fig.add_trace(go.Scatter(name='Best Fit Line',\n                                 x=portfolio[:, 0],\n                                 y=best_fit, mode='lines'))\n        fig.update_layout(xaxis_title = 'Return',\n                          yaxis_title = 'Standard Deviation',\n                          width=900, height=470)\n        fig.show() ![11](assets/11.png)\n```", "```py\nIn [10]: import matplotlib.pyplot as plt\n         import numpy as np\n         plt.style.use('seaborn')\n\nIn [11]: def utility(x):\n             return(np.exp(x ** gamma)) ![1](assets/1.png)\n\nIn [12]: pi = np.random.uniform(0,1,20)\n         pi = np.sort(pi) ![2](assets/2.png)\n\nIn [13]: print('The highest three probability of losses are {}'\n               .format(pi[-3:])) ![3](assets/3.png)\n         The highest three probability of losses are [0.834261   0.93542452\n          0.97721866]\n\nIn [14]: y = 2\n         c = 1.5\n         Q = 5\n         D = 0.01\n         gamma = 0.4\n\nIn [15]: def supply(Q):\n             return(np.mean(pi[-Q:]) * c) ![4](assets/4.png)\n\nIn [16]: def demand(D):\n             return(np.sum(utility(y - D) > pi * utility(y - c) + (1 - pi)\n                           * utility(y))) ![5](assets/5.png)\n\nIn [17]: plt.figure()\n         plt.plot([demand(i) for i in np.arange(0, 1.9, 0.02)],\n                  np.arange(0, 1.9, 0.02),\n                  'r', label='insurance demand')\n         plt.plot(range(1,21), [supply(j) for j in range(1,21)],\n                  'g', label='insurance supply')\n         plt.ylabel(\"Average Cost\")\n         plt.xlabel(\"Number of People\")\n         plt.legend()\n         plt.show()\n```"]
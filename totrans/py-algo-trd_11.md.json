["```py\nIn [1]: a = 3  ![1](assets/1.png)\n\nIn [2]: type(a)  ![2](assets/2.png)\nOut[2]: int\n\nIn [3]: a.bit_length()  ![3](assets/3.png)\nOut[3]: 2\n\nIn [4]: b = 5.  ![4](assets/4.png)\n\nIn [5]: type(b)\nOut[5]: float\n```", "```py\nIn [6]: c = 10 ** 100  ![1](assets/1.png)\n\nIn [7]: c\nOut[7]: 100000000000000000000000000000000000000000000000000000000000000000000000\n        00000000000000000000000000000\n\nIn [8]: c.bit_length()  ![2](assets/2.png)\nOut[8]: 333\n```", "```py\nIn [9]: 3 / 5.  ![1](assets/1.png)\nOut[9]: 0.6\n\nIn [10]: a * b  ![2](assets/2.png)\nOut[10]: 15.0\n\nIn [11]: a - b  ![3](assets/3.png)\nOut[11]: -2.0\n\nIn [12]: b + a  ![4](assets/4.png)\nOut[12]: 8.0\n\nIn [13]: a ** b  ![5](assets/5.png)\nOut[13]: 243.0\n```", "```py\nIn [14]: import math  ![1](assets/1.png)\n\nIn [15]: math.log(a)  ![2](assets/2.png)\nOut[15]: 1.0986122886681098\n\nIn [16]: math.exp(a)  ![3](assets/3.png)\nOut[16]: 20.085536923187668\n\nIn [17]: math.sin(b)  ![4](assets/4.png)\nOut[17]: -0.9589242746631385\n```", "```py\nIn [18]: s = 'Python for Algorithmic Trading.'  ![1](assets/1.png)\n\nIn [19]: type(s)\nOut[19]: str\n\nIn [20]: s.lower()  ![2](assets/2.png)\nOut[20]: 'python for algorithmic trading.'\n\nIn [21]: s.upper()  ![3](assets/3.png)\nOut[21]: 'PYTHON FOR ALGORITHMIC TRADING.'\n\nIn [22]: s[0:6]  ![4](assets/4.png)\nOut[22]: 'Python'\n```", "```py\nIn [23]: st = s[0:6] + s[-9:-1]  ![1](assets/1.png)\n\nIn [24]: print(st)  ![2](assets/2.png)\n         Python Trading\n```", "```py\nIn [25]: repl = 'My name is %s, I am %d years old and %4.2f m tall.'  ![1](assets/1.png)\n\nIn [26]: print(repl % ('Gordon Gekko', 43, 1.78))  ![2](assets/2.png)\n         My name is Gordon Gekko, I am 43 years old and 1.78 m tall.\n\nIn [27]: repl = 'My name is {:s}, I am {:d} years old and {:4.2f} m tall.' ![3](assets/3.png)\n\nIn [28]: print(repl.format('Gordon Gekko', 43, 1.78))  ![4](assets/4.png)\n         My name is Gordon Gekko, I am 43 years old and 1.78 m tall.\n\nIn [29]: name, age, height = 'Gordon Gekko', 43, 1.78 ![5](assets/5.png)\n\nIn [30]: print(f'My name is {name:s}, I am {age:d} years old and \\\n {height:4.2f}m tall.')  ![6](assets/6.png)\n         My name is Gordon Gekko, I am 43 years old and 1.78m tall.\n```", "```py\nIn [31]: t1 = (a, b, st)  ![1](assets/1.png)\n\nIn [32]: t1  ![2](assets/2.png)\nOut[32]: (3, 5.0, 'Python Trading')\n\nIn [33]: type(t1)\nOut[33]: tuple\n\nIn [34]: t2 = st, b, a  ![3](assets/3.png)\n\nIn [35]: t2\nOut[35]: ('Python Trading', 5.0, 3)\n\nIn [36]: type(t2)\nOut[36]: tuple\n```", "```py\nIn [37]: t = (t1, t2)  ![1](assets/1.png)\n\nIn [38]: t\nOut[38]: ((3, 5.0, 'Python Trading'), ('Python Trading', 5.0, 3))\n\nIn [39]: t[0][2]  ![2](assets/2.png)\nOut[39]: 'Python Trading'\n```", "```py\nIn [40]: l = [a, b, st]  ![1](assets/1.png)\n\nIn [41]: l\nOut[41]: [3, 5.0, 'Python Trading']\n\nIn [42]: type(l)\nOut[42]: list\n\nIn [43]: l.append(s.split()[3])  ![2](assets/2.png)\n\nIn [44]: l\nOut[44]: [3, 5.0, 'Python Trading', 'Trading.']\n```", "```py\nIn [45]: l = list(('Z', 'Q', 'D', 'J', 'E', 'H', '5.', 'a'))  ![1](assets/1.png)\n\nIn [46]: l\nOut[46]: ['Z', 'Q', 'D', 'J', 'E', 'H', '5.', 'a']\n\nIn [47]: l.sort()  ![2](assets/2.png)\n\nIn [48]: l\nOut[48]: ['5.', 'D', 'E', 'H', 'J', 'Q', 'Z', 'a']\n```", "```py\nIn [49]: d = {'int_obj': a, 'float_obj': b, 'string_obj': st}  ![1](assets/1.png)\n\nIn [50]: type(d)\nOut[50]: dict\n\nIn [51]: d\nOut[51]: {'int_obj': 3, 'float_obj': 5.0, 'string_obj': 'Python Trading'}\n\nIn [52]: d['float_obj']  ![2](assets/2.png)\nOut[52]: 5.0\n\nIn [53]: d['int_obj_long'] = 10 ** 20  ![3](assets/3.png)\n\nIn [54]: d\nOut[54]: {'int_obj': 3,\n          'float_obj': 5.0,\n          'string_obj': 'Python Trading',\n          'int_obj_long': 100000000000000000000}\n\nIn [55]: d.keys()  ![4](assets/4.png)\nOut[55]: dict_keys(['int_obj', 'float_obj', 'string_obj', 'int_obj_long'])\n\nIn [56]: d.values()  ![5](assets/5.png)\nOut[56]: dict_values([3, 5.0, 'Python Trading', 100000000000000000000])\n```", "```py\nIn [57]: range(5)  ![1](assets/1.png)\nOut[57]: range(0, 5)\n\nIn [58]: range(3, 15, 2)  ![2](assets/2.png)\nOut[58]: range(3, 15, 2)\n\nIn [59]: for i in range(5):  ![3](assets/3.png)\n             print(i ** 2, end=' ')  ![4](assets/4.png)\n         0 1 4 9 16\nIn [60]: for i in range(3, 15, 2):\n             print(i, end=' ')\n         3 5 7 9 11 13\nIn [61]: l = ['a', 'b', 'c', 'd', 'e']\n\nIn [62]: for _ in l:  ![5](assets/5.png)\n             print(_)\n         a\n         b\n         c\n         d\n         e\n\nIn [63]: s = 'Python Trading'\n\nIn [64]: for c in s:  ![6](assets/6.png)\n             print(c + '|', end='')\n         P|y|t|h|o|n| |T|r|a|d|i|n|g|\n```", "```py\nIn [65]: i = 0  ![1](assets/1.png)\n\nIn [66]: while i < 5:  ![2](assets/2.png)\n             print(i ** 0.5, end=' ')  ![3](assets/3.png)\n             i += 1  ![4](assets/4.png)\n         0.0 1.0 1.4142135623730951 1.7320508075688772 2.0\n```", "```py\nIn [67]: lc = [i ** 2 for i in range(10)]  ![1](assets/1.png)\n\nIn [68]: lc\nOut[68]: [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n\nIn [69]: type(lc)\nOut[69]: list\n```", "```py\nIn [70]: f = lambda x: math.cos(x)  ![1](assets/1.png)\n\nIn [71]: f(5)  ![2](assets/2.png)\nOut[71]: 0.2836621854632263\n\nIn [72]: list(map(lambda x: math.cos(x), range(10)))  ![3](assets/3.png)\nOut[72]: [1.0,\n          0.5403023058681398,\n          -0.4161468365471424,\n          -0.9899924966004454,\n          -0.6536436208636119,\n          0.2836621854632263,\n          0.9601702866503661,\n          0.7539022543433046,\n          -0.14550003380861354,\n          -0.9111302618846769]\n```", "```py\nIn [73]: def f(x):  ![1](assets/1.png)\n             return math.exp(x)  ![2](assets/2.png)\n\nIn [74]: f(5)\nOut[74]: 148.4131591025766\n\nIn [75]: def f(*args):  ![3](assets/3.png)\n             for arg in args:  ![4](assets/4.png)\n                 print(arg)  ![5](assets/5.png)\n             return None  ![6](assets/6.png)\n\nIn [76]: f(l)  ![7](assets/7.png)\n         ['a', 'b', 'c', 'd', 'e']\n```", "```py\nIn [77]: import random  ![1](assets/1.png)\n\nIn [78]: a = random.randint(0, 1000)  ![2](assets/2.png)\n\nIn [79]: print(f'Random number is {a}')  ![3](assets/3.png)\n         Random number is 188\n\nIn [80]: def number_decide(number):\n             if a < 10:  ![4](assets/4.png)\n                 return \"Number is single digit.\"\n             elif 10 <= a < 100:  ![5](assets/5.png)\n                 return \"Number is double digit.\"\n             else:  ![6](assets/6.png)\n                 return \"Number is triple digit.\"\n\nIn [81]: number_decide(a)  ![7](assets/7.png)\nOut[81]: 'Number is triple digit.'\n```", "```py\nIn [82]: import numpy as np  ![1](assets/1.png)\n\nIn [83]: a = np.array(range(24))  ![2](assets/2.png)\n\nIn [84]: a  ![3](assets/3.png)\nOut[84]: array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14,\n          15, 16,\n                17, 18, 19, 20, 21, 22, 23])\n\nIn [85]: b = a.reshape((4, 6))  ![4](assets/4.png)\n\nIn [86]: b  ![5](assets/5.png)\nOut[86]: array([[ 0,  1,  2,  3,  4,  5],\n                [ 6,  7,  8,  9, 10, 11],\n                [12, 13, 14, 15, 16, 17],\n                [18, 19, 20, 21, 22, 23]])\n\nIn [87]: c = a.reshape((2, 3, 4))  ![6](assets/6.png)\n\nIn [88]: c  ![7](assets/7.png)\nOut[88]: array([[[ 0,  1,  2,  3],\n                 [ 4,  5,  6,  7],\n                 [ 8,  9, 10, 11]],\n\n                [[12, 13, 14, 15],\n                 [16, 17, 18, 19],\n                 [20, 21, 22, 23]]])\n\nIn [89]: b = np.array(b, dtype=np.float)  ![8](assets/8.png)\n\nIn [90]: b  ![9](assets/9.png)\nOut[90]: array([[ 0.,  1.,  2.,  3.,  4.,  5.],\n                [ 6.,  7.,  8.,  9., 10., 11.],\n                [12., 13., 14., 15., 16., 17.],\n                [18., 19., 20., 21., 22., 23.]])\n```", "```py\nIn [91]: 2 * b  ![1](assets/1.png)\nOut[91]: array([[ 0.,  2.,  4.,  6.,  8., 10.],\n                [12., 14., 16., 18., 20., 22.],\n                [24., 26., 28., 30., 32., 34.],\n                [36., 38., 40., 42., 44., 46.]])\n\nIn [92]: b ** 2  ![2](assets/2.png)\nOut[92]: array([[  0.,   1.,   4.,   9.,  16.,  25.],\n                [ 36.,  49.,  64.,  81., 100., 121.],\n                [144., 169., 196., 225., 256., 289.],\n                [324., 361., 400., 441., 484., 529.]])\n\nIn [93]: f = lambda x: x ** 2 - 2 * x + 0.5  ![3](assets/3.png)\n\nIn [94]: f(a)  ![4](assets/4.png)\nOut[94]: array([  0.5,  -0.5,   0.5,   3.5,   8.5,  15.5,  24.5,  35.5,\n          48.5,\n         63.5,  80.5,  99.5, 120.5, 143.5, 168.5, 195.5, 224.5, 255.5,\n                288.5, 323.5, 360.5, 399.5, 440.5, 483.5])\n```", "```py\nIn [95]: a[2:6]  ![1](assets/1.png)\nOut[95]: array([2, 3, 4, 5])\n\nIn [96]: b[2, 4]  ![2](assets/2.png)\nOut[96]: 16.0\n\nIn [97]: b[1:3, 2:4]  ![3](assets/3.png)\nOut[97]: array([[ 8.,  9.],\n                [14., 15.]])\n```", "```py\nIn [98]: b > 10  ![1](assets/1.png)\nOut[98]: array([[False, False, False, False, False, False],\n                [False, False, False, False, False,  True],\n                [ True,  True,  True,  True,  True,  True],\n                [ True,  True,  True,  True,  True,  True]])\n\nIn [99]: b[b > 10]  ![2](assets/2.png)\nOut[99]: array([11., 12., 13., 14., 15., 16., 17., 18., 19., 20., 21., 22.,\n          23.])\n```", "```py\nIn [100]: a.sum()  ![1](assets/1.png)\nOut[100]: 276\n\nIn [101]: b.mean()  ![2](assets/2.png)\nOut[101]: 11.5\n\nIn [102]: b.mean(axis=0)  ![3](assets/3.png)\nOut[102]: array([ 9., 10., 11., 12., 13., 14.])\n\nIn [103]: b.mean(axis=1)  ![4](assets/4.png)\nOut[103]: array([ 2.5,  8.5, 14.5, 20.5])\n\nIn [104]: c.std()  ![5](assets/5.png)\nOut[104]: 6.922186552431729\n```", "```py\nIn [105]: np.sum(a)  ![1](assets/1.png)\nOut[105]: 276\n\nIn [106]: np.mean(b, axis=0)  ![2](assets/2.png)\nOut[106]: array([ 9., 10., 11., 12., 13., 14.])\n\nIn [107]: np.sin(b).round(2)  ![3](assets/3.png)\nOut[107]: array([[ 0.  ,  0.84,  0.91,  0.14, -0.76, -0.96],\n                 [-0.28,  0.66,  0.99,  0.41, -0.54, -1.  ],\n                 [-0.54,  0.42,  0.99,  0.65, -0.29, -0.96],\n                 [-0.75,  0.15,  0.91,  0.84, -0.01, -0.85]])\n\nIn [108]: np.sin(4.5)  ![4](assets/4.png)\nOut[108]: -0.977530117665097\n```", "```py\nIn [109]: %time l = [np.sin(x) for x in range(1000000)]  ![1](assets/1.png)\n          CPU times: user 1.21 s, sys: 22.9 ms, total: 1.24 s\n          Wall time: 1.24 s\n\nIn [110]: %time l = [math.sin(x) for x in range(1000000)]  ![2](assets/2.png)\n          CPU times: user 215 ms, sys: 22.9 ms, total: 238 ms\n          Wall time: 239 ms\n```", "```py\nIn [111]: %time a = np.sin(np.arange(1000000))  ![1](assets/1.png)\n          CPU times: user 20.7 ms, sys: 5.32 ms, total: 26 ms\n          Wall time: 24.6 ms\n\nIn [112]: import sys  ![2](assets/2.png)\n\nIn [113]: sys.getsizeof(a)  ![3](assets/3.png)\nOut[113]: 8000096\n\nIn [114]: a.nbytes  ![4](assets/4.png)\nOut[114]: 8000000\n```", "```py\nIn [115]: ai = np.arange(10)  ![1](assets/1.png)\n\nIn [116]: ai  ![2](assets/2.png)\nOut[116]: array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\nIn [117]: ai.dtype  ![3](assets/3.png)\nOut[117]: dtype('int64')\n\nIn [118]: af = np.arange(0.5, 9.5, 0.5)  ![4](assets/4.png)\n\nIn [119]: af  ![5](assets/5.png)\nOut[119]: array([0.5, 1. , 1.5, 2. , 2.5, 3. , 3.5, 4. , 4.5, 5. , 5.5, 6. ,\n           6.5,\n                 7. , 7.5, 8. , 8.5, 9. ])\n\nIn [120]: af.dtype  ![6](assets/6.png)\nOut[120]: dtype('float64')\n\nIn [121]: np.linspace(0, 10, 12)  ![7](assets/7.png)\nOut[121]: array([ 0.        ,  0.90909091,  1.81818182,  2.72727273,\n           3.63636364,\n          4.54545455,  5.45454545,  6.36363636,  7.27272727,  8.18181818,\n                  9.09090909, 10.        ])\n```", "```py\nIn [122]: np.random.standard_normal(10)   ![1](assets/1.png)\nOut[122]: array([-1.06384884, -0.22662171,  1.2615483 , -0.45626608,\n           -1.23231112,\n          -1.51309987,  1.23938439,  0.22411366, -0.84616512, -1.09923136])\n\nIn [123]: np.random.poisson(0.5, 10)  ![2](assets/2.png)\nOut[123]: array([0, 1, 1, 0, 0, 1, 0, 0, 2, 0])\n\nIn [124]: np.random.seed(1000)  ![3](assets/3.png)\n\nIn [125]: data = np.random.standard_normal((5, 100))  ![4](assets/4.png)\n\nIn [126]: data[:, :3]  ![5](assets/5.png)\nOut[126]: array([[-0.8044583 ,  0.32093155, -0.02548288],\n                 [-0.39031935, -0.58069634,  1.94898697],\n                 [-1.11573322, -1.34477121,  0.75334374],\n                 [ 0.42400699, -1.56680276,  0.76499895],\n                 [-1.74866738, -0.06913021,  1.52621653]])\n\nIn [127]: data.mean()  ![6](assets/6.png)\nOut[127]: -0.02714981205311327\n\nIn [128]: data.std()  ![7](assets/7.png)\nOut[128]: 1.0016799134894265\n\nIn [129]: data = data - data.mean()  ![8](assets/8.png)\n\nIn [130]: data.mean()  ![9](assets/9.png)\nOut[130]: 3.552713678800501e-18\n\nIn [131]: data = data / data.std()  ![10](assets/10.png)\n\nIn [132]: data.std()  ![11](assets/11.png)\nOut[132]: 1.0\n```", "```py\nIn [133]: import matplotlib.pyplot as plt  ![1](assets/1.png)\n\nIn [134]: plt.style.use('seaborn')  ![2](assets/2.png)\n\nIn [135]: import matplotlib as mpl  ![3](assets/3.png)\n\nIn [136]: mpl.rcParams['savefig.dpi'] = 300  ![4](assets/4.png)\n          mpl.rcParams['font.family'] = 'serif'  ![4](assets/4.png)\n          %matplotlib inline\n\nIn [137]: data = np.random.standard_normal((5, 100))  ![5](assets/5.png)\n\nIn [138]: plt.figure(figsize=(10, 6))  ![6](assets/6.png)\n          plt.plot(data.cumsum())  ![7](assets/7.png)\nOut[138]: [<matplotlib.lines.Line2D at 0x7faceaaeed30>]\n```", "```py\nIn [139]: plt.figure(figsize=(10, 6));  ![1](assets/1.png)\n          plt.plot(data.T.cumsum(axis=0), label='line')  ![2](assets/2.png)\n          plt.legend(loc=0);  ![3](assets/3.png)\n          plt.xlabel('data point')  ![4](assets/4.png)\n          plt.ylabel('value');  ![5](assets/5.png)\n          plt.title('random series');  ![6](assets/6.png)\n```", "```py\nIn [140]: plt.figure(figsize=(10, 6))\n          plt.hist(data.flatten(), bins=30);  ![1](assets/1.png)\n```", "```py\nIn [141]: plt.figure(figsize=(10, 6))\n          plt.bar(np.arange(1, 12) - 0.25,\n                  data[0, :11], width=0.5);  ![1](assets/1.png)\n```", "```py\nIn [142]: x = np.arange(len(data.cumsum()))  ![1](assets/1.png)\n\nIn [143]: y = 0.2 * data.cumsum() ** 2 ![2](assets/2.png)\n\nIn [144]: rg1 = np.polyfit(x, y, 1)  ![3](assets/3.png)\n\nIn [145]: rg3 = np.polyfit(x, y, 3)  ![4](assets/4.png)\n\nIn [146]: rg9 = np.polyfit(x, y, 9)  ![5](assets/5.png)\n\nIn [147]: plt.figure(figsize=(10, 6))  ![6](assets/6.png)\n          plt.plot(x, y, 'r', label='data')  ![7](assets/7.png)\n          plt.plot(x, np.polyval(rg1, x), 'b--', label='linear')  ![8](assets/8.png)\n          plt.plot(x, np.polyval(rg3, x), 'b-.', label='cubic')  ![8](assets/8.png)\n          plt.plot(x, np.polyval(rg9, x), 'b:', label='9th degree')  ![8](assets/8.png)\n          plt.legend(loc=0);  ![9](assets/9.png)\n```", "```py\nIn [148]: import pandas as pd  ![1](assets/1.png)\n\nIn [149]: np.random.seed(1000)  ![2](assets/2.png)\n\nIn [150]: raw = np.random.standard_normal((10, 3)).cumsum(axis=0)  ![3](assets/3.png)\n\nIn [151]: index = pd.date_range('2022-1-1', periods=len(raw), freq='M')  ![4](assets/4.png)\n\nIn [152]: columns = ['no1', 'no2', 'no3']  ![5](assets/5.png)\n\nIn [153]: df = pd.DataFrame(raw, index=index, columns=columns)  ![6](assets/6.png)\n\nIn [154]: df  ![7](assets/7.png)\nOut[154]:                  no1       no2       no3\n          2022-01-31 -0.804458  0.320932 -0.025483\n          2022-02-28 -0.160134  0.020135  0.363992\n          2022-03-31 -0.267572 -0.459848  0.959027\n          2022-04-30 -0.732239  0.207433  0.152912\n          2022-05-31 -1.928309 -0.198527 -0.029466\n          2022-06-30 -1.825116 -0.336949  0.676227\n          2022-07-31 -0.553321 -1.323696  0.341391\n          2022-08-31 -0.652803 -0.916504  1.260779\n          2022-09-30 -0.340685  0.616657  0.710605\n          2022-10-31 -0.723832 -0.206284  2.310688\n```", "```py\nIn [155]: df.head()  ![1](assets/1.png)\nOut[155]:                  no1       no2       no3\n          2022-01-31 -0.804458  0.320932 -0.025483\n          2022-02-28 -0.160134  0.020135  0.363992\n          2022-03-31 -0.267572 -0.459848  0.959027\n          2022-04-30 -0.732239  0.207433  0.152912\n          2022-05-31 -1.928309 -0.198527 -0.029466\n\nIn [156]: df.tail()  ![2](assets/2.png)\nOut[156]:                  no1       no2       no3\n          2022-06-30 -1.825116 -0.336949  0.676227\n          2022-07-31 -0.553321 -1.323696  0.341391\n          2022-08-31 -0.652803 -0.916504  1.260779\n          2022-09-30 -0.340685  0.616657  0.710605\n          2022-10-31 -0.723832 -0.206284  2.310688\n\nIn [157]: df.index  ![3](assets/3.png)\nOut[157]: DatetimeIndex(['2022-01-31', '2022-02-28', '2022-03-31',\n           '2022-04-30',\n          '2022-05-31', '2022-06-30', '2022-07-31', '2022-08-31',\n                         '2022-09-30', '2022-10-31'],\n                        dtype='datetime64[ns]', freq='M')\n\nIn [158]: df.columns  ![4](assets/4.png)\nOut[158]: Index(['no1', 'no2', 'no3'], dtype='object')\n\nIn [159]: df.info()  ![5](assets/5.png)\n          <class 'pandas.core.frame.DataFrame'>\n          DatetimeIndex: 10 entries, 2022-01-31 to 2022-10-31\n          Freq: M\n          Data columns (total 3 columns):\n           #   Column  Non-Null Count  Dtype\n          ---  ------  --------------  -----\n           0   no1     10 non-null     float64\n           1   no2     10 non-null     float64\n           2   no3     10 non-null     float64\n          dtypes: float64(3)\n          memory usage: 320.0 bytes\n\nIn [160]: df.describe()  ![6](assets/6.png)\nOut[160]:              no1        no2        no3\n          count  10.000000  10.000000  10.000000\n          mean   -0.798847  -0.227665   0.672067\n          std     0.607430   0.578071   0.712430\n          min    -1.928309  -1.323696  -0.029466\n          25%    -0.786404  -0.429123   0.200031\n          50%    -0.688317  -0.202406   0.520109\n          75%    -0.393844   0.160609   0.896922\n          max    -0.160134   0.616657   2.310688\n```", "```py\nIn [161]: print(df * 2)  ![1](assets/1.png)\n                           no1       no2       no3\n          2022-01-31 -1.608917  0.641863 -0.050966\n          2022-02-28 -0.320269  0.040270  0.727983\n          2022-03-31 -0.535144 -0.919696  1.918054\n          2022-04-30 -1.464479  0.414866  0.305823\n          2022-05-31 -3.856618 -0.397054 -0.058932\n          2022-06-30 -3.650232 -0.673898  1.352453\n          2022-07-31 -1.106642 -2.647393  0.682782\n          2022-08-31 -1.305605 -1.833009  2.521557\n          2022-09-30 -0.681369  1.233314  1.421210\n          2022-10-31 -1.447664 -0.412568  4.621376\n\nIn [162]: df.std()  ![2](assets/2.png)\nOut[162]: no1    0.607430\n          no2    0.578071\n          no3    0.712430\n          dtype: float64\n\nIn [163]: df.mean()  ![3](assets/3.png)\nOut[163]: no1   -0.798847\n          no2   -0.227665\n          no3    0.672067\n          dtype: float64\n\nIn [164]: df.mean(axis=1)  ![4](assets/4.png)\nOut[164]: 2022-01-31   -0.169670\n          2022-02-28    0.074664\n          2022-03-31    0.077202\n          2022-04-30   -0.123965\n          2022-05-31   -0.718767\n          2022-06-30   -0.495280\n          2022-07-31   -0.511875\n          2022-08-31   -0.102843\n          2022-09-30    0.328859\n          2022-10-31    0.460191\n          Freq: M, dtype: float64\n\nIn [165]: np.mean(df)  ![5](assets/5.png)\nOut[165]: no1   -0.798847\n          no2   -0.227665\n          no3    0.672067\n          dtype: float64\n```", "```py\nIn [166]: df['no2']  ![1](assets/1.png)\nOut[166]: 2022-01-31    0.320932\n          2022-02-28    0.020135\n          2022-03-31   -0.459848\n          2022-04-30    0.207433\n          2022-05-31   -0.198527\n          2022-06-30   -0.336949\n          2022-07-31   -1.323696\n          2022-08-31   -0.916504\n          2022-09-30    0.616657\n          2022-10-31   -0.206284\n          Freq: M, Name: no2, dtype: float64\n\nIn [167]: df.iloc[0]  ![2](assets/2.png)\nOut[167]: no1   -0.804458\n          no2    0.320932\n          no3   -0.025483\n          Name: 2022-01-31 00:00:00, dtype: float64\n\nIn [168]: df.iloc[2:4]  ![3](assets/3.png)\nOut[168]:                  no1       no2       no3\n          2022-03-31 -0.267572 -0.459848  0.959027\n          2022-04-30 -0.732239  0.207433  0.152912\n\nIn [169]: df.iloc[2:4, 1]  ![4](assets/4.png)\nOut[169]: 2022-03-31   -0.459848\n          2022-04-30    0.207433\n          Freq: M, Name: no2, dtype: float64\n\nIn [170]: df.no3.iloc[3:7]  ![5](assets/5.png)\nOut[170]: 2022-04-30    0.152912\n          2022-05-31   -0.029466\n          2022-06-30    0.676227\n          2022-07-31    0.341391\n          Freq: M, Name: no3, dtype: float64\n\nIn [171]: df.loc['2022-3-31']  ![6](assets/6.png)\nOut[171]: no1   -0.267572\n          no2   -0.459848\n          no3    0.959027\n          Name: 2022-03-31 00:00:00, dtype: float64\n\nIn [172]: df.loc['2022-5-31', 'no3']  ![7](assets/7.png)\nOut[172]: -0.02946577492329111\n\nIn [173]: df['no1'] + 3 * df['no3']  ![8](assets/8.png)\nOut[173]: 2022-01-31   -0.880907\n          2022-02-28    0.931841\n          2022-03-31    2.609510\n          2022-04-30   -0.273505\n          2022-05-31   -2.016706\n          2022-06-30    0.203564\n          2022-07-31    0.470852\n          2022-08-31    3.129533\n          2022-09-30    1.791130\n          2022-10-31    6.208233\n          Freq: M, dtype: float64\n```", "```py\nIn [174]: df['no3'] > 0.5  ![1](assets/1.png)\nOut[174]: 2022-01-31    False\n          2022-02-28    False\n          2022-03-31     True\n          2022-04-30    False\n          2022-05-31    False\n          2022-06-30     True\n          2022-07-31    False\n          2022-08-31     True\n          2022-09-30     True\n          2022-10-31     True\n          Freq: M, Name: no3, dtype: bool\n\nIn [175]: df[df['no3'] > 0.5]  ![2](assets/2.png)\nOut[175]:                  no1       no2       no3\n          2022-03-31 -0.267572 -0.459848  0.959027\n          2022-06-30 -1.825116 -0.336949  0.676227\n          2022-08-31 -0.652803 -0.916504  1.260779\n          2022-09-30 -0.340685  0.616657  0.710605\n          2022-10-31 -0.723832 -0.206284  2.310688\n\nIn [176]: df[(df.no3 > 0.5) & (df.no2 > -0.25)]  ![3](assets/3.png)\nOut[176]:                  no1       no2       no3\n          2022-09-30 -0.340685  0.616657  0.710605\n          2022-10-31 -0.723832 -0.206284  2.310688\n\nIn [177]: df[df.index > '2022-5-15']  ![4](assets/4.png)\nOut[177]:                  no1       no2       no3\n          2022-05-31 -1.928309 -0.198527 -0.029466\n          2022-06-30 -1.825116 -0.336949  0.676227\n          2022-07-31 -0.553321 -1.323696  0.341391\n          2022-08-31 -0.652803 -0.916504  1.260779\n          2022-09-30 -0.340685  0.616657  0.710605\n          2022-10-31 -0.723832 -0.206284  2.310688\n\nIn [178]: df.query('no2 > 0.1')  ![5](assets/5.png)\nOut[178]:                  no1       no2       no3\n          2022-01-31 -0.804458  0.320932 -0.025483\n          2022-04-30 -0.732239  0.207433  0.152912\n          2022-09-30 -0.340685  0.616657  0.710605\n\nIn [179]: a = -0.5  ![5](assets/5.png)\n\nIn [180]: df.query('no1 > @a')  ![5](assets/5.png)\nOut[180]:                  no1       no2       no3\n          2022-02-28 -0.160134  0.020135  0.363992\n          2022-03-31 -0.267572 -0.459848  0.959027\n          2022-09-30 -0.340685  0.616657  0.710605\n```", "```py\nIn [181]: df.plot(figsize=(10, 6));  ![1](assets/1.png)\n```", "```py\nIn [182]: index = ['2022-01-31', '2022-02-28', '2022-03-31', '2022-04-30',\n                   '2022-05-31', '2022-06-30', '2022-07-31', '2022-08-31',\n                   '2022-09-30', '2022-10-31']  ![1](assets/1.png)\n\nIn [183]: pd.DatetimeIndex(df.index)  ![2](assets/2.png)\nOut[183]: DatetimeIndex(['2022-01-31', '2022-02-28', '2022-03-31',\n           '2022-04-30',\n          '2022-05-31', '2022-06-30', '2022-07-31', '2022-08-31',\n                         '2022-09-30', '2022-10-31'],\n                        dtype='datetime64[ns]', freq='M')\n```", "```py\nIn [184]: df.hist(figsize=(10, 6));  ![1](assets/1.png)\n```", "```py\nIn [185]: df.to_csv('data.csv')  ![1](assets/1.png)\n\nIn [186]: with open('data.csv') as f:\n              for line in f.readlines():\n                  print(line, end='')  ![2](assets/2.png)\n          ,no1,no2,no3\n          2022-01-31,-0.8044583035248052,0.3209315470898572,\n          ,-0.025482880472072204\n          2022-02-28,-0.16013447509799061,0.020134874302836725,0.363991673815235\n          2022-03-31,-0.26757177678888727,-0.4598482010579319,0.9590271758917923\n          2022-04-30,-0.7322393029842283,0.2074331059300848,0.15291156544935125\n          2022-05-31,-1.9283091368170622,-0.19852705542997268,\n          ,-0.02946577492329111\n          2022-06-30,-1.8251162427820806,-0.33694904401573555,0.6762266000356951\n          2022-07-31,-0.5533209663746153,-1.3236963728130973,0.34139114682415433\n          2022-08-31,-0.6528026643843922,-0.9165042724715742,1.2607786860286034\n          2022-09-30,-0.34068465431802875,0.6166567928863607,0.7106048210003031\n          2022-10-31,-0.7238320652023266,-0.20628417055270565,2.310688189060956\n\nIn [187]: from_csv = pd.read_csv('data.csv',  ![3](assets/3.png)\n                                index_col=0,  ![4](assets/4.png)\n                                parse_dates=True)  ![5](assets/5.png)\n\nIn [188]: from_csv.head() # ![6](assets/6.png)\nOut[188]:                  no1       no2       no3\n          2022-01-31 -0.804458  0.320932 -0.025483\n          2022-02-28 -0.160134  0.020135  0.363992\n          2022-03-31 -0.267572 -0.459848  0.959027\n          2022-04-30 -0.732239  0.207433  0.152912\n          2022-05-31 -1.928309 -0.198527 -0.029466\n```", "```py\nIn [189]: h5 = pd.HDFStore('data.h5', 'w')  ![1](assets/1.png)\n\nIn [190]: h5['df'] = df  ![2](assets/2.png)\n\nIn [191]: h5  ![3](assets/3.png)\nOut[191]: <class 'pandas.io.pytables.HDFStore'>\n          File path: data.h5\n\nIn [192]: from_h5 = h5['df']  ![4](assets/4.png)\n\nIn [193]: h5.close()  ![5](assets/5.png)\n\nIn [194]: from_h5.tail()  ![6](assets/6.png)\nOut[194]:                  no1       no2       no3\n          2022-06-30 -1.825116 -0.336949  0.676227\n          2022-07-31 -0.553321 -1.323696  0.341391\n          2022-08-31 -0.652803 -0.916504  1.260779\n          2022-09-30 -0.340685  0.616657  0.710605\n          2022-10-31 -0.723832 -0.206284  2.310688\n\nIn [195]: !rm data.csv data.h5 ![7](assets/7.png)\n```", "```py\nIn [196]: raw = pd.read_csv('http://hilpisch.com/pyalgo_eikon_eod_data.csv',\n                           index_col=0, parse_dates=True).dropna()  ![1](assets/1.png)\n\nIn [197]: spx = pd.DataFrame(raw['.SPX'])  ![2](assets/2.png)\n\nIn [198]: spx.info()  ![3](assets/3.png)\n          <class 'pandas.core.frame.DataFrame'>\n          DatetimeIndex: 2516 entries, 2010-01-04 to 2019-12-31\n          Data columns (total 1 columns):\n           #   Column  Non-Null Count  Dtype\n          ---  ------  --------------  -----\n           0   .SPX    2516 non-null   float64\n          dtypes: float64(1)\n          memory usage: 39.3 KB\n\nIn [199]: vix = pd.DataFrame(raw['.VIX'])  ![4](assets/4.png)\n\nIn [200]: vix.info()  ![5](assets/5.png)\n          <class 'pandas.core.frame.DataFrame'>\n          DatetimeIndex: 2516 entries, 2010-01-04 to 2019-12-31\n          Data columns (total 1 columns):\n           #   Column  Non-Null Count  Dtype\n          ---  ------  --------------  -----\n           0   .VIX    2516 non-null   float64\n          dtypes: float64(1)\n          memory usage: 39.3 KB\n```", "```py\nIn [201]: spxvix = pd.DataFrame(spx).join(vix)  ![1](assets/1.png)\n\nIn [202]: spxvix.info()\n          <class 'pandas.core.frame.DataFrame'>\n          DatetimeIndex: 2516 entries, 2010-01-04 to 2019-12-31\n          Data columns (total 2 columns):\n           #   Column  Non-Null Count  Dtype\n          ---  ------  --------------  -----\n           0   .SPX    2516 non-null   float64\n           1   .VIX    2516 non-null   float64\n          dtypes: float64(2)\n          memory usage: 139.0 KB\n\nIn [203]: spxvix = pd.merge(spx, vix,\n                            left_index=True,  # merge on left index\n                            right_index=True,  # merge on right index\n                           )  ![2](assets/2.png)\n\nIn [204]: spxvix.info()\n          <class 'pandas.core.frame.DataFrame'>\n          DatetimeIndex: 2516 entries, 2010-01-04 to 2019-12-31\n          Data columns (total 2 columns):\n           #   Column  Non-Null Count  Dtype\n          ---  ------  --------------  -----\n           0   .SPX    2516 non-null   float64\n           1   .VIX    2516 non-null   float64\n          dtypes: float64(2)\n          memory usage: 139.0 KB\n\nIn [205]: spxvix = pd.DataFrame({'SPX': spx['.SPX'],\n                                 'VIX': vix['.VIX']},\n                                 index=spx.index)  ![3](assets/3.png)\n\nIn [206]: spxvix.info()\n          <class 'pandas.core.frame.DataFrame'>\n          DatetimeIndex: 2516 entries, 2010-01-04 to 2019-12-31\n          Data columns (total 2 columns):\n           #   Column  Non-Null Count  Dtype\n          ---  ------  --------------  -----\n           0   SPX     2516 non-null   float64\n           1   VIX     2516 non-null   float64\n          dtypes: float64(2)\n          memory usage: 139.0 KB\n```", "```py\nIn [207]: spxvix.plot(figsize=(10, 6), subplots=True);  ![1](assets/1.png)\n```", "```py\nIn [208]: rets = np.log(spxvix / spxvix.shift(1))  ![1](assets/1.png)\n\nIn [209]: rets = rets.dropna()  ![2](assets/2.png)\n\nIn [210]: rets.head()  ![3](assets/3.png)\nOut[210]:                  SPX       VIX\n          Date\n          2010-01-05  0.003111 -0.035038\n          2010-01-06  0.000545 -0.009868\n          2010-01-07  0.003993 -0.005233\n          2010-01-08  0.002878 -0.050024\n          2010-01-11  0.001745 -0.032514\n```", "```py\nIn [211]: rg = np.polyfit(rets['SPX'], rets['VIX'], 1)  ![1](assets/1.png)\n\nIn [212]: rets.plot(kind='scatter', x='SPX', y='VIX',\n                    style='.', figsize=(10, 6))  ![2](assets/2.png)\n          plt.plot(rets['SPX'], np.polyval(rg, rets['SPX']), 'r-');  ![3](assets/3.png)\n```", "```py\nIn [213]: ret = rets.mean() * 252  ![1](assets/1.png)\n\nIn [214]: ret\nOut[214]: SPX    0.104995\n          VIX   -0.037526\n          dtype: float64\n\nIn [215]: vol = rets.std() * math.sqrt(252)  ![2](assets/2.png)\n\nIn [216]: vol\nOut[216]: SPX    0.147902\n          VIX    1.229086\n          dtype: float64\n\nIn [217]: (ret - 0.01) / vol  ![3](assets/3.png)\nOut[217]: SPX    0.642279\n          VIX   -0.038667\n          dtype: float64\n```", "```py\nIn [218]: plt.figure(figsize=(10, 6))  ![1](assets/1.png)\n          spxvix['SPX'].plot(label='S&P 500')  ![2](assets/2.png)\n          spxvix['SPX'].cummax().plot(label='running maximum')  ![3](assets/3.png)\n          plt.legend(loc=0);  ![4](assets/4.png)\n```", "```py\nIn [219]: adrawdown = spxvix['SPX'].cummax() - spxvix['SPX']  ![1](assets/1.png)\n\nIn [220]: adrawdown.max()\nOut[220]: 579.6500000000001\n\nIn [221]: rdrawdown = ((spxvix['SPX'].cummax() - spxvix['SPX']) /\n                        spxvix['SPX'].cummax())  ![2](assets/2.png)\n\nIn [222]: rdrawdown.max()\nOut[222]: 0.1977821376780688\n```", "```py\nIn [223]: temp = adrawdown[adrawdown == 0]  ![1](assets/1.png)\n\nIn [224]: periods_spx = (temp.index[1:].to_pydatetime() -\n                         temp.index[:-1].to_pydatetime())  ![2](assets/2.png)\n\nIn [225]: periods_spx[50:60]  ![3](assets/3.png)\nOut[225]: array([datetime.timedelta(days=67), datetime.timedelta(days=1),\n                 datetime.timedelta(days=1), datetime.timedelta(days=1),\n                 datetime.timedelta(days=301), datetime.timedelta(days=3),\n                 datetime.timedelta(days=1), datetime.timedelta(days=2),\n                 datetime.timedelta(days=12), datetime.timedelta(days=2)],\n                dtype=object)\n\nIn [226]: max(periods_spx)  ![4](assets/4.png)\nOut[226]: datetime.timedelta(days=417)\n```"]
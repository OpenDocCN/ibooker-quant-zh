- en: Chapter 1\. Python and Algorithmic Trading
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一章\. Python 和算法交易
- en: At Goldman [Sachs] the number of people engaged in trading shares has fallen
    from a peak of 600 in 2000 to just two today.^([1](ch01.html#idm45785394843768))
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在高盛，从 2000 年的 600 人峰值下降到如今仅剩两人参与股票交易。^([1](ch01.html#idm45785394843768))
- en: ''
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*The Economist*'
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*《经济学家》*'
- en: This chapter provides background information for, and an overview of, the topics
    covered in this book. Although Python for algorithmic trading is a niche at the
    intersection of Python programming and finance, it is a fast-growing one that
    touches on such diverse topics as Python deployment, interactive financial analytics,
    machine and deep learning, object-oriented programming, socket communication,
    visualization of streaming data, and trading platforms.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章为本书涵盖的主题提供背景信息和概述。虽然 Python 用于算法交易是 Python 编程和金融交叉领域的一个利基，但它是一个快速增长的领域，涉及诸如
    Python 部署、交互式金融分析、机器和深度学习、面向对象编程、套接字通信、流数据可视化和交易平台等多样化的主题。
- en: For a quick refresher on important Python topics, read the [Appendix A](app01.html#python_numpy_pandas)
    first.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 为了快速复习重要的 Python 主题，请先阅读[附录 A](app01.html#python_numpy_pandas)。
- en: Python for Finance
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 金融 Python
- en: The Python programming language originated in 1991 with the first release by
    Guido van Rossum of a version labeled 0.9.0\. In 1994, version 1.0 followed. However,
    it took almost two decades for Python to establish itself as a major programming
    language and technology platform in the financial industry. Of course, there were
    early adopters, mainly hedge funds, but widespread adoption probably started only
    around 2011.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Python 编程语言起源于 1991 年，由 Guido van Rossum 发布了标记为 0.9.0 的第一个版本。1994 年发布了版本 1.0。然而，Python
    花了近二十年的时间才确立自己作为金融行业主要编程语言和技术平台。当然，早期采用者主要是对冲基金，但广泛应用可能直到大约 2011 年才开始。
- en: One major obstacle to the adoption of Python in the financial industry has been
    the fact that the default Python version, called CPython, is an interpreted, high-level
    language. Numerical algorithms in general and financial algorithms in particular
    are quite often implemented based on (nested) loop structures. While compiled,
    low-level languages like C or C++ are really fast at executing such loops, Python,
    which relies on interpretation instead of compilation, is generally quite slow
    at doing so. As a consequence, pure Python proved too slow for many real-world
    financial applications, such as option pricing or risk management.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 金融行业采用 Python 的一个主要障碍是默认的 Python 版本 CPython 是一种解释型的高级语言。一般而言，数值算法，特别是金融算法，往往基于（嵌套的）循环结构。而像
    C 或 C++ 这样的编译型低级语言在执行这些循环时非常快速，而 Python 则依赖解释而非编译，通常在执行上相当慢。因此，纯 Python 对于许多现实世界的金融应用，如期权定价或风险管理，速度过慢。
- en: Python Versus Pseudo-Code
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python 与伪代码对比
- en: Although Python was never specifically targeted towards the scientific and financial
    communities, many people from these fields nevertheless liked the beauty and conciseness
    of its syntax. Not too long ago, it was generally considered good tradition to
    explain a (financial) algorithm and at the same time present some pseudo-code
    as an intermediate step towards its proper technological implementation. Many
    felt that, with Python, the pseudo-code step would not be necessary anymore. And
    they were proven mostly correct.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管 Python 从未专门针对科学和金融社区，但许多人仍然喜欢其语法的美观和简洁性。不久之前，通常认为解释（金融）算法并同时呈现一些伪代码作为其适当技术实现的中间步骤是一个良好的传统。许多人觉得，使用
    Python，伪代码步骤将不再必要。他们大多数情况下是正确的。
- en: Consider, for instance, the Euler discretization of the geometric Brownian motion,
    as in [Equation 1-1](#euler_disc_intro).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑几何布朗运动的欧拉离散化，如[方程 1-1](#euler_disc_intro)所示。
- en: Equation 1-1\. Euler discretization of geometric Brownian motion
  id: totrans-12
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 方程 1-1\. 几何布朗运动的欧拉离散化
- en: <math alttext="upper S Subscript upper T Baseline equals upper S 0 exp left-parenthesis
    left-parenthesis r minus 0.5 sigma squared right-parenthesis upper T plus sigma
    z StartRoot upper T EndRoot right-parenthesis" display="block"><mrow><msub><mi>S</mi>
    <mi>T</mi></msub> <mo>=</mo> <msub><mi>S</mi> <mn>0</mn></msub> <mo form="prefix">exp</mo>
    <mrow><mo>(</mo> <mrow><mo>(</mo> <mi>r</mi> <mo>-</mo> <mn>0</mn> <mo>.</mo>
    <mn>5</mn> <msup><mi>σ</mi> <mn>2</mn></msup> <mo>)</mo></mrow> <mi>T</mi> <mo>+</mo>
    <mi>σ</mi> <mi>z</mi> <msqrt><mi>T</mi></msqrt> <mo>)</mo></mrow></mrow></math>
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: <math alttext="upper S Subscript upper T Baseline equals upper S 0 exp left-parenthesis
    left-parenthesis r minus 0.5 sigma squared right-parenthesis upper T plus sigma
    z StartRoot upper T EndRoot right-parenthesis" display="block"><mrow><msub><mi>S</mi>
    <mi>T</mi></msub> <mo>=</mo> <msub><mi>S</mi> <mn>0</mn></msub> <mo form="prefix">exp</mo>
    <mrow><mo>(</mo> <mrow><mo>(</mo> <mi>r</mi> <mo>-</mo> <mn>0</mn> <mo>.</mo>
    <mn>5</mn> <msup><mi>σ</mi> <mn>2</mn></msup> <mo>)</mo></mrow> <mi>T</mi> <mo>+</mo>
    <mi>σ</mi> <mi>z</mi> <msqrt><mi>T</mi></msqrt> <mo>)</mo></mrow></mrow></math>
- en: 'For decades, the LaTeX markup language and compiler have been the gold standard
    for authoring scientific documents containing mathematical formulae. In many ways,
    Latex syntax is similar to or already like pseudo-code when, for example, laying
    out equations, as in [Equation 1-1](#euler_disc_intro). In this particular case,
    the Latex version looks like this:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 几十年来，LaTeX 标记语言和编译器一直是编写包含数学公式的科学文档的黄金标准。在许多方面，当例如布置方程式时，LaTeX 语法与伪代码相似或已经像伪代码。在这种特定情况下，LaTeX
    版本如下所示：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In Python, this translates to executable code, given respective variable definitions,
    that is also really close to the financial formula as well as to the Latex representation:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，这意味着在给定相应变量定义的情况下转换为可执行代码，它也非常接近金融公式以及Latex表示：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: However, the speed issue remains. Such a difference equation, as a numerical
    approximation of the respective stochastic differential equation, is generally
    used to price derivatives by Monte Carlo simulation or to do risk analysis and
    management based on simulation.^([2](ch01.html#idm45785394872712)) These tasks
    in turn can require millions of simulations that need to be finished in due time,
    often in almost real-time or at least near-time. Python, as an interpreted high-level
    programming language, was never designed to be fast enough to tackle such computationally
    demanding tasks.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，速度问题仍然存在。作为相应随机微分方程的数值近似，这种差分方程通常用于通过蒙特卡洛模拟定价衍生品或基于模拟进行风险分析和管理。^([2](ch01.html#idm45785394872712))
    这些任务反过来可能需要完成数百万次模拟，通常需要在准实时或至少接近实时的时间内完成。作为解释型高级编程语言，Python从未被设计成足够快速以处理这类计算要求极高的任务。
- en: NumPy and Vectorization
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: NumPy和向量化
- en: In 2006, version 1.0 of the [`NumPy` Python package](http://numpy.org) was released
    by Travis Oliphant. `NumPy` stands for *numerical Python*, suggesting that it
    targets scenarios that are numerically demanding. The base Python interpreter
    tries to be as general as possible in many areas, which often leads to quite a
    bit of overhead at run-time.^([3](ch01.html#idm45785393485592)) `NumPy`, on the
    other hand, uses specialization as its major approach to avoid overhead and to
    be as good and as fast as possible in certain application scenarios.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 2006年，由Travis Oliphant发布了[`NumPy` Python包](http://numpy.org)的1.0版本。`NumPy`代表*numerical
    Python*，表明其针对数值要求严格的场景。Python基本解释器在许多领域试图尽可能通用，这往往导致运行时开销相当大。^([3](ch01.html#idm45785393485592))
    另一方面，`NumPy`采用专门化作为其主要方法，以避免开销并在特定应用场景中表现得尽可能出色和快速。
- en: The major class of `NumPy` is the regular array object, called `ndarray` object
    for *n-dimensional array*. It is immutable, which means that it cannot be changed
    in size, and can only accommodate a single data type, called `dtype`. This specialization
    allows for the implementation of concise and fast code. One central approach in
    this context is *vectorization*. Basically, this approach avoids looping on the
    Python level and delegates the looping to specialized `NumPy` code, generally
    implemented in C and therefore rather fast.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`NumPy`的主要类是常规数组对象，称为*n维数组*对象的`ndarray`对象。它是不可变的，这意味着大小不能更改，只能容纳一种称为`dtype`的单一数据类型。这种专门化允许实现简洁快速的代码。在这种背景下的一个核心方法是*向量化*。基本上，该方法避免了在Python级别上的循环，并将循环委托给专门的`NumPy`代码，通常用C实现，因此速度相当快。'
- en: 'Consider the simulation of 1,000,000 end of period values <math alttext="upper
    S Subscript upper T"><msub><mi>S</mi> <mi>T</mi></msub></math> according to [Equation
    1-1](#euler_disc_intro) with pure Python. The major part of the following code
    is a `for` loop with 1,000,000 iterations:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑按照[Equation 1-1](#euler_disc_intro)用纯Python模拟1,000,000个期末值<math alttext="upper
    S Subscript upper T"><msub><mi>S</mi> <mi>T</mi></msub></math>。以下代码的主要部分是具有1,000,000次迭代的`for`循环：
- en: '[PRE2]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[![1](assets/1.png)](#co_python_and_algorithmic_trading_CO1-1)'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_python_and_algorithmic_trading_CO1-1)'
- en: The initial index level.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 初始指数水平。
- en: '[![2](assets/2.png)](#co_python_and_algorithmic_trading_CO1-2)'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_python_and_algorithmic_trading_CO1-2)'
- en: The constant short rate.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 常数短期利率。
- en: '[![3](assets/3.png)](#co_python_and_algorithmic_trading_CO1-3)'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_python_and_algorithmic_trading_CO1-3)'
- en: The time horizon in year fractions.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 年份的时间跨度。
- en: '[![4](assets/4.png)](#co_python_and_algorithmic_trading_CO1-4)'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_python_and_algorithmic_trading_CO1-4)'
- en: The constant volatility factor.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 常数波动率因子。
- en: '[![5](assets/5.png)](#co_python_and_algorithmic_trading_CO1-5)'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](assets/5.png)](#co_python_and_algorithmic_trading_CO1-5)'
- en: An empty `list` object to collect simulated values.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 用于收集模拟值的空`list`对象。
- en: '[![6](assets/6.png)](#co_python_and_algorithmic_trading_CO1-6)'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '[![6](assets/6.png)](#co_python_and_algorithmic_trading_CO1-6)'
- en: The main `for` loop.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 主要的`for`循环。
- en: '[![7](assets/7.png)](#co_python_and_algorithmic_trading_CO1-7)'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '[![7](assets/7.png)](#co_python_and_algorithmic_trading_CO1-7)'
- en: The simulation of a *single* end-of-period value.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 单期末值的模拟。
- en: '[![8](assets/8.png)](#co_python_and_algorithmic_trading_CO1-8)'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '[![8](assets/8.png)](#co_python_and_algorithmic_trading_CO1-8)'
- en: Appends the simulated value to the `list` object.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 将模拟值附加到`list`对象上。
- en: 'With `NumPy`, you can avoid looping on the Python level completely by the use
    of vectorization. The code is much more concise, more readable, and faster by
    a factor of about eight:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`NumPy`，你完全可以通过向量化避免在Python层面上进行循环。代码更为简洁、易读，并且速度大约快了8倍：
- en: '[PRE3]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[![1](assets/1.png)](#co_python_and_algorithmic_trading_CO2-1)'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_python_and_algorithmic_trading_CO2-1)'
- en: This single line of `NumPy` code simulates all the values and stores them in
    an `ndarray` object.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这一行`NumPy`代码模拟所有值并将它们存储在一个`ndarray`对象中。
- en: Vectorization is a powerful concept for writing concise, easy-to-read, and easy-to-maintain
    code in finance and algorithmic trading. With `NumPy`, vectorized code does not
    only make code more concise, but it also can speed up code execution considerably
    (by a factor of about eight in the Monte Carlo simulation, for example).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 向量化是金融和算法交易中编写简洁、易读、易维护代码的强大概念。使用`NumPy`，向量化代码不仅使代码更简洁，而且可以显著加快代码执行速度（例如，在蒙特卡洛模拟中可以提高约8倍）。
- en: It’s safe to say that `NumPy` has significantly contributed to the success of
    Python in science and finance. Many other popular Python packages from the so-called
    *scientific Python stack* build on `NumPy` as an efficient, performing data structure
    to store and handle numerical data. In fact, `NumPy` is an outgrowth of the `SciPy`
    package project, which provides a wealth of functionality frequently needed in
    science. The `SciPy` project recognized the need for a more powerful numerical
    data structure and consolidated older projects like `Numeric` and `NumArray` in
    this area into a new, unifying one in the form of `NumPy`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 可以说，`NumPy`在科学和金融领域中的成功有很大贡献。许多其他流行的Python包来自所谓的*科学Python堆栈*，构建在`NumPy`上作为高效的、执行数据结构来存储和处理数值数据。事实上，`NumPy`是`SciPy`包项目的一个延伸，提供科学中经常需要的丰富功能。`SciPy`项目意识到需要一个更强大的数值数据结构，将以前的项目如`Numeric`和`NumArray`整合成了一个新的统一形式，即`NumPy`。
- en: In algorithmic trading, a Monte Carlo simulation might not be the most important
    use case for a programming language. However, if you enter the algorithmic trading
    space, the management of larger, or even big, financial time series data sets
    is a very important use case. Just think of the backtesting of (intraday) trading
    strategies or the processing of tick data streams during trading hours. This is
    where the [`pandas` data analysis package](http://pandas.pydata.org) comes into
    play.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在算法交易中，蒙特卡洛模拟可能不是编程语言的最重要用例。然而，如果涉足算法交易领域，管理更大或者说非常大的金融时间序列数据集是非常重要的用例。想象一下（股市内部的）交易策略的回测，或者在交易时间内处理tick数据流。这正是[`pandas`数据分析包](http://pandas.pydata.org)发挥作用的地方。
- en: pandas and the DataFrame Class
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: pandas和DataFrame类
- en: Development of `pandas` began in 2008 by Wes McKinney, who back then was working
    at AQR Capital Management, a big hedge fund operating out of Greenwich, Connecticut.
    As with for any other hedge fund, working with time series data is of paramount
    importance for AQR Capital Management, but back then Python did not provide any
    kind of appealing support for this type of data. Wes’s idea was to create a package
    that mimics the capabilities of the R statistical language ([*http://r-project.org*](http://r-project.org))
    in this area. This is reflected, for example, in naming the major class `DataFrame`,
    whose counterpart in R is called `data.frame`. Not being considered close enough
    to the core business of money management, AQR Capital Management open sourced
    the `pandas` project in 2009, which marks the beginning of a major success story
    in open source–based data and financial analytics.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`pandas`的开发始于2008年，由当时在康涅狄格州格林尼治工作的AQR资本管理公司的Wes McKinney发起。与其他对冲基金一样，处理时间序列数据对AQR资本管理公司至关重要，但当时Python并没有提供对这类数据的吸引力支持。Wes的想法是创建一个类似于R统计语言（[*http://r-project.org*](http://r-project.org)）在此领域功能的软件包。例如，这体现在主要类名`DataFrame`，其在R中的对应称为`data.frame`。由于未被认为与金融管理核心业务足够接近，AQR资本管理公司于2009年开源了`pandas`项目，这标志着基于开源的数据和金融分析取得了重大成功。'
- en: 'Partly due to `pandas`, Python has become a major force in data and financial
    analytics. Many people who adopt Python, coming from diverse other languages,
    cite `pandas` as a major reason for their decision. In combination with open data
    sources like [Quandl](http://quandl.com), `pandas` even allows students to do
    sophisticated financial analytics with the lowest barriers of entry ever: a regular
    notebook computer with an internet connection suffices.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 部分原因是因为`pandas`，Python已经成为数据和金融分析的主要力量。许多从其他语言转向Python的人都将`pandas`列为其决定的主要原因。与像[Quandl](http://quandl.com)这样的开放数据源相结合，`pandas`甚至允许学生使用最低的准入门槛进行复杂的金融分析：只需一台带有互联网连接的普通笔记本电脑即可。
- en: 'Assume an algorithmic trader is interested in trading Bitcoin, the cryptocurrency
    with the largest market capitalization. A first step might be to retrieve data
    about the historical exchange rate in USD. Using Quandl data and `pandas`, such
    a task is accomplished in less than a minute. [Figure 1-1](#bitcoin_xr) shows
    the plot that results from the following Python code, which is (omitting some
    plotting style related parameterizations) only four lines. Although `pandas` is
    not explicitly imported, the Quandl Python wrapper package by default returns
    a `DataFrame` object that is then used to add a simple moving average (SMA) of
    100 days, as well as to visualize the raw data alongside the SMA:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 假设一个算法交易员对交易比特币感兴趣，比特币是市值最高的加密货币。第一步可能是检索有关历史兑美元汇率的数据。使用Quandl数据和`pandas`，这样的任务在不到一分钟内就可以完成。[图 1-1](#bitcoin_xr)
    展示了以下Python代码的结果图，该代码（省略了一些与绘图样式相关的参数设置）仅有四行。虽然没有明确导入`pandas`，但是Quandl Python包默认返回一个`DataFrame`对象，然后用于添加100天的简单移动平均线（SMA），以及可视化原始数据和SMA：
- en: '[PRE4]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[![1](assets/1.png)](#co_python_and_algorithmic_trading_CO3-1)'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](assets/1.png)](#co_python_and_algorithmic_trading_CO3-1)'
- en: Imports and configures the plotting package.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 导入并配置绘图包。
- en: '[![2](assets/2.png)](#co_python_and_algorithmic_trading_CO3-5)'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](assets/2.png)](#co_python_and_algorithmic_trading_CO3-5)'
- en: Imports the `configparser` module and reads credentials.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 导入`configparser`模块并读取凭据。
- en: '[![3](assets/3.png)](#co_python_and_algorithmic_trading_CO3-8)'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](assets/3.png)](#co_python_and_algorithmic_trading_CO3-8)'
- en: Imports the Quandl Python wrapper package and provides the API key.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 导入Quandl Python包装器包并提供API密钥。
- en: '[![4](assets/4.png)](#co_python_and_algorithmic_trading_CO3-10)'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](assets/4.png)](#co_python_and_algorithmic_trading_CO3-10)'
- en: Retrieves daily data for the Bitcoin exchange rate and returns a `pandas` `DataFrame`
    object with a single column.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 检索比特币兑美元汇率的每日数据，并返回具有单列的`pandas` `DataFrame`对象。
- en: '[![5](assets/5.png)](#co_python_and_algorithmic_trading_CO3-11)'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](assets/5.png)](#co_python_and_algorithmic_trading_CO3-11)'
- en: Calculates the SMA for 100 days in vectorized fashion.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 以向量化方式计算100天的SMA。
- en: '[![6](assets/6.png)](#co_python_and_algorithmic_trading_CO3-12)'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '[![6](assets/6.png)](#co_python_and_algorithmic_trading_CO3-12)'
- en: Selects data from the 1st of January 2013 on and plots it.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 从2013年1月1日开始选择数据并绘制。
- en: Obviously, `NumPy` and `pandas` measurably contribute to the success of Python
    in finance. However, the Python ecosystem has much more to offer in the form of
    additional Python packages that solve rather fundamental problems and sometimes
    specialized ones. This book will make use of packages for data retrieval and storage
    (for example, `PyTables`, `TsTables`, `SQLite`) and for machine and deep learning
    (for example, `scikit-learn`, `TensorFlow`), to name just two categories. Along
    the way, we will also implement classes and modules that will make any algorithmic
    trading project more efficient. However, the main packages used throughout will
    be `NumPy` and `pandas`.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，`NumPy` 和 `pandas` 在金融中显著促进了Python的成功。然而，Python生态系统在解决基本问题和有时是专门问题的附加Python包方面还有很多可提供的。本书将使用用于数据检索和存储（例如，`PyTables`，`TsTables`，`SQLite`）以及用于机器和深度学习（例如，`scikit-learn`，`TensorFlow`）的包，仅举两个类别。在此过程中，我们还将实现类和模块，使任何算法交易项目更高效。但是，整个过程中主要使用的包将是`NumPy`和`pandas`。
- en: '![pfat 0101](assets/pfat_0101.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![pfat 0101](assets/pfat_0101.png)'
- en: Figure 1-1\. Historical Bitcoin exchange rate in USD from the beginning of 2013
    until mid-2020
  id: totrans-66
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 1-1\. 从2013年初到2020年中期的比特币兑美元历史汇率
- en: While `NumPy` provides the basic data structure to store numerical data and
    work with it, `pandas` brings powerful time series management capabilities to
    the table. It also does a great job of wrapping functionality from other packages
    into an easy-to-use API. The Bitcoin example just described shows that a single
    method call on a `DataFrame` object is enough to generate a plot with two financial
    time series visualized. Like `NumPy`, `pandas` allows for rather concise, vectorized
    code that is also generally executed quite fast due to heavy use of compiled code
    under the hood.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然`NumPy`提供了存储数值数据和处理数据的基本数据结构，`pandas`则为时间序列管理带来了强大的能力。它还将其他包的功能封装成易于使用的API。刚才描述的比特币示例显示，仅需在`DataFrame`对象上调用一个方法即可生成可视化显示两个金融时间序列的图表。与`NumPy`类似，`pandas`允许编写相当简洁的向量化代码，由于在底层大量使用编译代码，因此通常执行速度也非常快。
- en: Algorithmic Trading
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 算法交易
- en: The term *algorithmic trading* is neither uniquely nor universally defined.
    On a rather basic level, it refers to the trading of financial instruments based
    on some formal algorithm. An *algorithm* is a set of operations (mathematical,
    technical) to be conducted in a certain sequence to achieve a certain goal. For
    example, there are mathematical algorithms to solve a Rubik’s Cube.^([4](ch01.html#idm45785397477592))
    Such an algorithm can solve the problem at hand via a step-by-step procedure,
    often perfectly. Another example is algorithms for finding the root(s) of an equation
    if it (they) exist(s) at all. In that sense, the objective of a mathematical algorithm
    is often well specified and an optimal solution is often expected.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 术语*算法交易*既不是唯一的也不是普遍定义的。在相当基本的层面上，它指的是基于某种正式算法进行金融工具交易。*算法*是一组操作（数学的、技术性的），按照一定顺序进行以达到特定目标。例如，有数学算法来解决魔方问题。^([4](ch01.html#idm45785397477592))
    这样的算法可以通过逐步过程解决手头的问题，通常表现优异。另一个例子是用于寻找方程根的算法，如果根存在的话。在这种意义上，数学算法的目标通常是明确定义的，并且通常期望找到最优解。
- en: 'But what about the objective of financial trading algorithms? This question
    is not that easy to answer in general. It might help to step back for a moment
    and consider general motives for trading. In Dorn et al. (2008) write:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 但是财务交易算法的目标是什么呢？这个问题通常并不容易回答。暂时退后一步，考虑交易的一般动机可能有所帮助。在Dorn等人（2008）的文章中写道：
- en: Trading in financial markets is an important economic activity. Trades are necessary
    to get into and out of the market, to put unneeded cash into the market, and to
    convert back into cash when the money is wanted. They are also needed to move
    money around within the market, to exchange one asset for another, to manage risk,
    and to exploit information about future price movements.
  id: totrans-71
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在金融市场中进行交易是一项重要的经济活动。交易是必要的，以进入和退出市场，将不需要的现金投入市场，并在需要时转换回现金。它们还需要在市场内移动资金，将一个资产交换为另一个资产，管理风险并利用关于未来价格变动的信息。
- en: 'The view expressed here is more technical than economic in nature, focusing
    mainly on the process itself and only partly on why people initiate trades in
    the first place. For our purposes, a nonexhaustive list of financial trading motives
    of people and financial institutions managing money of their own or for others
    includes the following:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这里表达的观点更多地是技术性而非经济性质，主要集中在过程本身，而只有部分涉及为什么人们首先发起交易。对于我们的目的，个人和金融机构管理自己或他人资金的非详尽列表中包括以下财务交易动机：
- en: Beta trading
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 贝塔交易
- en: Earning market risk premia by investing in, for instance, exchange traded funds
    (ETFs) that replicate the performance of the S&P 500.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 通过投资于例如复制标准普尔500指数表现的交易所交易基金（ETF）来赚取市场风险溢价。
- en: Alpha generation
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: Alpha生成
- en: Earning risk premia independent of the market by, for example, selling short
    stocks listed in the S&P 500 or ETFs on the S&P 500.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 通过例如卖空标准普尔500指数上的股票或ETF来赚取与市场无关的风险溢价。
- en: Static hedging
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 静态对冲
- en: Hedging against market risks by buying, for example, out-of-the-money put options
    on the S&P 500.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 通过购买例如标准普尔500指数的平值以外的看跌期权对冲市场风险。
- en: Dynamic hedging
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 动态对冲
- en: Hedging against market risks affecting options on the S&P 500 by, for example,
    dynamically trading futures on the S&P 500 and appropriate cash, money market,
    or rate instruments.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 通过例如动态交易标准普尔500指数期货和适当的现金、货币市场或利率工具对冲影响标准普尔500指数期权的市场风险。
- en: Asset-liability management
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 资产负债管理
- en: Trading S&P 500 stocks and ETFs to be able to cover liabilities resulting from,
    for example, writing life insurance policies.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 通过交易标准普尔500股票和ETF来覆盖因编写寿险政策而产生的责任。
- en: Market making
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 做市商
- en: Providing, for example, liquidity to options on the S&P 500 by buying and selling
    options at different bid and ask prices.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，通过以不同买入和卖出价格买卖标准普尔500的期权来为期权提供流动性。
- en: 'All these types of trades can be implemented by a discretionary approach, with
    human traders making decisions mainly on their own, as well as based on algorithms
    supporting the human trader or even replacing them completely in the decision-making
    process. In this context, computerization of financial trading of course plays
    an important role. While in the beginning of financial trading, floor trading
    with a large group of people shouting at each other (“open outcry”) was the only
    way of executing trades, computerization and the advent of the internet and web
    technologies have revolutionized trading in the financial industry. The quotation
    at the beginning of this chapter illustrates this impressively in terms of the
    number of people actively engaged in trading shares at Goldman Sachs in 2000 and
    in 2016\. It is a trend that was foreseen 25 years ago, as Solomon and Corso (1991)
    point out:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些类型的交易可以通过自主方法实施，由人类交易员主要基于自身决策，同时也基于支持人类交易员或完全取代其决策过程的算法。在这种情况下，金融交易的计算机化当然起着重要作用。金融交易的开始阶段，通过大群人员在交易地点大声喊叫（“公开竞价”）进行交易是唯一的执行方式，但计算机化以及互联网和网络技术的出现彻底改变了金融行业的交易方式。本章开头的引文生动地说明了高盛在2000年和2016年参与股票交易活跃人数的变化。这是一个25年前就已经预见到的趋势，正如Solomon和Corso（1991）所指出的：
- en: Computers have revolutionized the trading of securities and the stock market
    is currently in the midst of a dynamic transformation. It is clear that the market
    of the future will not resemble the markets of the past.
  id: totrans-86
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 计算机已经彻底改变了证券交易，股票市场目前正在进行动态转型。很明显，未来的市场将不再像过去的市场。
- en: ''
  id: totrans-87
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Technology has made it possible for information regarding stock prices to be
    sent all over the world in seconds. Presently, computers route orders and execute
    small trades directly from the brokerage firm’s terminal to the exchange. Computers
    now link together various stock exchanges, a practice which is helping to create
    a single global market for the trading of securities. The continuing improvements
    in technology will make it possible to execute trades globally by electronic trading
    systems.
  id: totrans-88
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 技术使得股票价格信息可以在几秒钟内传送到全球各地。目前，计算机将订单路由并直接从券商终端到交易所执行小额交易。计算机现在连接各种股票交易所，这种做法有助于创建证券交易的全球单一市场。技术的持续改进将使得通过电子交易系统全球执行交易成为可能。
- en: Interestingly, one of the oldest and most widely used algorithms is found in
    dynamic hedging of options. Already with the publication of the seminal papers
    about the pricing of European options by Black and Scholes (1973) and Merton (1973),
    the algorithm, called *delta hedging*, was made available long before computerized
    and electronic trading even started. Delta hedging as a trading algorithm shows
    how to hedge away all market risks in a simplified, perfect, continuous model
    world. In the real world, with transaction costs, discrete trading, imperfectly
    liquid markets, and other frictions (“imperfections”), the algorithm has proven,
    somewhat surprisingly maybe, its usefulness and robustness, as well. It might
    not allow one to perfectly hedge away market risks affecting options, but it is
    useful in getting close to the ideal and is therefore still used on a large scale
    in the financial industry.^([5](ch01.html#idm45785397451960))
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，动态对冲期权中使用的最古老和广泛使用的算法之一可以追溯到欧式期权定价的开创性论文由Black和Scholes（1973）以及Merton（1973）发表之时。这个算法被称为*delta对冲*，甚至在计算机化和电子交易开始之前就已经存在。作为一个交易算法，delta对冲展示了如何在一个简化的、完美的连续模型世界中对冲所有市场风险。在现实世界中，由于交易成本、离散交易、市场不完全流动性以及其他摩擦（“不完美性”），这个算法证明了其意想不到的有用性和稳健性。也许不能完美地消除影响期权的市场风险，但它在接近理想状态方面非常有用，并因此仍然大规模应用于金融行业。^([5](ch01.html#idm45785397451960))
- en: This book focuses on algorithmic trading in the context of *alpha generating
    strategies*. Although there are more sophisticated definitions for alpha, for
    the purposes of this book, alpha is seen as the difference between a trading strategy’s
    return over some period of time and the return of the benchmark (single stock,
    index, cryptocurrency, etc.). For example, if the S&P 500 returns 10% in 2018
    and an algorithmic strategy returns 12%, then alpha is +2% points. If the strategy
    returns 7%, then alpha is -3% points. In general, such numbers are not adjusted
    for risk, and other risk characteristics, such as maximal drawdown (period), are
    usually considered to be of second order importance, if at all.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 本书侧重于阿尔法生成策略的算法交易。尽管阿尔法有更复杂的定义，但在本书的目的下，阿尔法被视为一段时间内交易策略的回报与基准（单一股票、指数、加密货币等）回报之间的差异。例如，如果标准普尔500在2018年的回报为10%，而算法策略的回报为12%，那么阿尔法为+2个百分点。如果策略回报为7%，那么阿尔法为-3个百分点。一般来说，这些数字不会根据风险进行调整，其他风险特征，如最大回撤（期间），通常被认为是二阶重要，如果有的话。
- en: This book focuses on alpha-generating strategies, or strategies that try to
    generate positive returns (above a benchmark) independent of the market’s performance.
    Alpha is defined in this book (in the simplest way) as the excess return of a
    strategy over the benchmark financial instrument’s performance.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 本书侧重于生成阿尔法的策略，即试图在市场表现独立之上（超过基准）生成正收益的策略。在本书中，阿尔法被定义为一种策略相对于基准金融工具表现的超额收益。
- en: There are other areas where trading-related algorithms play an important role.
    One is the *high frequency trading* (HFT) space, where speed is typically the
    discipline in which players compete.^([6](ch01.html#idm45785397446152)) The motives
    for HFT are diverse, but market making and alpha generation probably play a prominent
    role. Another one is *trade execution*, where algorithms are deployed to optimally
    execute certain nonstandard trades. Motives in this area might include the execution
    (at best possible prices) of large orders or the execution of an order with as
    little market and price impact as possible. A more subtle motive might be to disguise
    an order by executing it on a number of different exchanges.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 交易相关算法发挥重要作用的其他领域还有一些。其中之一是*高频交易*（HFT）领域，速度通常是参与者竞争的重点。^([6](ch01.html#idm45785397446152))
    HFT的动机多种多样，但市场做市和阿尔法生成可能是主要角色。另一个领域是*交易执行*，在这个领域中，算法被部署以优化执行某些非标准交易。这个领域的动机可能包括以尽可能最佳价格执行大额订单，或者尽可能减少市场和价格冲击执行订单。更微妙的动机可能是通过在多个不同交易所执行订单来掩盖订单。
- en: 'An important question remains to be addressed: is there any advantage to using
    algorithms for trading instead of human research, experience, and discretion?
    This question can hardly be answered in any generality. For sure, there are human
    traders and portfolio managers who have earned, on average, more than their benchmark
    for investors over longer periods of time. The paramount example in this regard
    is Warren Buffett. On the other hand, statistical analyses show that the majority
    of active portfolio managers rarely beat relevant benchmarks consistently. Referring
    to the year 2015, Adam Shell writes:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 一个重要的问题仍有待解答：使用算法进行交易是否比人类研究、经验和自主性具有优势？这个问题很难以普遍性回答。确实，有些人类交易员和投资组合经理长期以来的平均表现超过了他们的投资者基准。在这方面的杰出例子是沃伦·巴菲特。另一方面，统计分析显示，大多数活跃投资组合经理很少连续击败相关基准。亚当·谢尔提到2015年时写道：
- en: Last year, for example, when the Standard & Poor’s 500-stock index posted a
    paltry total return of 1.4% with dividends included, 66% of “actively managed”
    large-company stock funds posted smaller returns than the index…The longer-term
    outlook is just as gloomy, with 84% of large-cap funds generating lower returns
    than the S&P 500 in the latest five year period and 82% falling shy in the past
    10 years, the study found.^([7](ch01.html#idm45785397441432))
  id: totrans-94
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 例如，去年，标准普尔500股票指数包括股息在内的总回报仅为1.4%，而66%的“主动管理”的大公司股票基金的回报低于该指数...从更长期来看，前景同样黯淡，84%的大市值基金在最近五年期间的回报低于标准普尔500指数，而82%在过去十年中未能达到，该研究发现。^([7](ch01.html#idm45785397441432))
- en: 'In an empirical study published in December 2016, Harvey et al. write:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在2016年12月发表的一项实证研究中，Harvey等人写道：
- en: We analyze and contrast the performance of discretionary and systematic hedge
    funds. Systematic funds use strategies that are rules‐based, with little or no
    daily intervention by humans….We find that, for the period 1996‐2014, systematic
    equity managers underperform their discretionary counterparts in terms of unadjusted
    (raw) returns, but that after adjusting for exposures to well‐known risk factors,
    the risk‐adjusted performance is similar. In the case of macro, systematic funds
    outperform discretionary funds, both on an unadjusted and risk‐adjusted basis.
  id: totrans-96
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 我们分析并对比自主和系统化对冲基金的表现。系统化基金使用基于规则的策略，几乎没有或没有人类日常干预……我们发现，在1996年至2014年期间，系统化股票基金在未调整（原始）回报方面表现不及其自主对冲基金对手，但在调整为知名风险因子的情况下，风险调整后的表现类似。在宏观领域，系统化基金在未调整和风险调整的基础上均胜过自主基金。
- en: '[Table 1-0](#hedge_fund_performance) reproduces the major quantitative findings
    of the study by Harvey et al. (2016).^([8](ch01.html#idm45785397437656)) In the
    table, *factors* include traditional ones (equity, bonds, etc.), dynamic ones
    (value, momentum, etc.), and volatility (buying at-the-money puts and calls).
    The *adjusted return appraisal ratio* divides alpha by the adjusted return volatility.
    For more details and background, see the original study.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '[表格 1-0](#hedge_fund_performance) 复制了 Harvey 等人（2016）研究的主要定量发现。[^8] 在表格中，*因子*
    包括传统因子（股票、债券等）、动态因子（价值、动量等）以及波动性（买入平价看涨和看跌期权）。*调整后的回报评估比* 将 alpha 除以调整后的回报波动率。有关更多详细信息和背景，请参阅原始研究。'
- en: The study’s results illustrate that systematic (“algorithmic”) macro hedge funds
    perform best as a category, both in unadjusted and risk-adjusted terms. They generate
    an annualized alpha of 4.85% points over the period studied. These are hedge funds
    implementing strategies that are typically global, are cross-asset, and often
    involve political and macroeconomic elements. Systematic equity hedge funds only
    beat their discretionary counterparts on the basis of the adjusted return appraisal
    ratio (0.35 versus 0.25).
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 研究结果表明，系统化（“算法化”）宏观对冲基金在未调整和风险调整的条件下表现最佳。它们在研究期间实现了年化 alpha 为4.85%。这些是实施通常为全球性、跨资产、常涉及政治和宏观经济因素的策略的对冲基金。在调整后的回报评估比方面，系统化股票对冲基金仅击败了其自主对冲基金对手（0.35对0.25）。
- en: '|  | Systematic macro | Discretionary macro | Systematic equity | Discretionary
    equity |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '|  | 系统宏观 | 自主宏观 | 系统股票 | 自主股票 |'
- en: '| --- | --- | --- | --- | --- |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- |'
- en: '| Return average | 5.01% | 2.86% | 2.88% | 4.09% |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| 平均回报 | 5.01% | 2.86% | 2.88% | 4.09% |'
- en: '| Return attributed to factors | 0.15% | 1.28% | 1.77% | 2.86% |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| 因子归因回报 | 0.15% | 1.28% | 1.77% | 2.86% |'
- en: '| Adj. return average (alpha) | 4.85% | 1.57% | 1.11% | 1.22% |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| 平均调整回报率（alpha） | 4.85% | 1.57% | 1.11% | 1.22% |'
- en: '| Adj. return volatility | 0.93% | 5.10% | 3.18% | 4.79% |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| 调整后的回报波动率 | 0.93% | 5.10% | 3.18% | 4.79% |'
- en: '| Adj. return appraisal ratio | 0.44 | 0.31 | 0.35 | 0.25 |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| 调整后的回报评估比 | 0.44 | 0.31 | 0.35 | 0.25 |'
- en: Compared to the S&P 500, hedge fund performance overall was quite meager for
    the year 2017\. While the S&P 500 index returned 21.8%, hedge funds only returned
    8.5% to investors (see this [article](https://oreil.ly/N59Hf) in *Investopedia*).
    This illustrates how hard it is, even with multimillion dollar budgets for research
    and technology, to generate alpha.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 与标准普尔500指数相比，2017年对冲基金的整体表现相当疲弱。虽然标准普尔500指数回报率为21.8%，但对冲基金仅为投资者带来了8.5%的回报（参见
    *Investopedia* 上的这篇[文章](https://oreil.ly/N59Hf)）。这说明即使拥有数百万美元的研究和技术预算，要生成 alpha
    也是多么困难。
- en: Python for Algorithmic Trading
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 用于算法交易
- en: 'Python is used in many corners of the financial industry but has become particularly
    popular in the algorithmic trading space. There are a few good reasons for this:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: Python 在金融行业的许多领域中被广泛使用，但在算法交易领域尤其受欢迎。这其中有几个很好的原因：
- en: Data analytics capabilities
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 数据分析能力
- en: A major requirement for every algorithmic trading project is the ability to
    manage and process financial data efficiently. Python, in combination with packages
    like `NumPy` and `pandas`, makes life easier in this regard for every algorithmic
    trader than most other programming languages do.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 每个算法交易项目的主要要求之一是能够有效管理和处理金融数据。Python，结合像 `NumPy` 和 `pandas` 这样的包，对每个算法交易员而言比大多数其他编程语言更加便利。
- en: Handling of modern APIs
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 处理现代 API
- en: Modern online trading platforms like the ones from [FXCM](http://fxcm.co.uk)
    and [Oanda](http://oanda.com) offer RESTful application programming interfaces
    (APIs) and socket (streaming) APIs to access historical and live data. Python
    is in general well suited to efficiently interact with such APIs.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现代在线交易平台，如 [FXCM](http://fxcm.co.uk) 和 [Oanda](http://oanda.com) 提供 RESTful
    应用程序编程接口 (API) 和套接字 (流式) API 来访问历史和实时数据。Python 通常非常适合与这些 API 有效地交互。
- en: Dedicated packages
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 专用软件包
- en: In addition to the standard data analytics packages, there are multiple packages
    available that are dedicated to the algorithmic trading space, such as [`PyAlgoTrade`](https://oreil.ly/IpIt1)
    and [`Zipline`](https://oreil.ly/2cSKR) for the backtesting of trading strategies
    and [`Pyfolio`](https://oreil.ly/KT7V8) for performing portfolio and risk analysis.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 除了标准的数据分析软件包外，还有多个专用于算法交易领域的软件包可用，例如用于交易策略回测的 [`PyAlgoTrade`](https://oreil.ly/IpIt1)
    和 [`Zipline`](https://oreil.ly/2cSKR)，以及用于执行组合和风险分析的 [`Pyfolio`](https://oreil.ly/KT7V8)。
- en: Vendor sponsored packages
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 供应商赞助的软件包
- en: More and more vendors in the space release open source Python packages to facilitate
    access to their offerings. Among them are online trading platforms like Oanda,
    as well as the leading data providers like [Bloomberg](https://oreil.ly/oSxei)
    and [Refinitiv](https://oreil.ly/1SNBN).
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 越来越多的供应商在该领域发布开源 Python 软件包，以便更容易地访问它们的产品。其中包括像 Oanda 这样的在线交易平台，以及像 [彭博](https://oreil.ly/oSxei)
    和 [Refinitiv](https://oreil.ly/1SNBN) 这样的领先数据提供商。
- en: Dedicated platforms
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 专用平台
- en: '[Quantopian](http://quantopian.com), for example, offers a standardized backtesting
    environment as a Web-based platform where the language of choice is Python and
    where people can exchange ideas with like-minded others via different social network
    features. From its founding until 2020, Quantopian has attracted more than 300,000
    users.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，Quantopian 提供了一个标准化的基于 Web 的回测环境作为一个平台，人们可以在该平台上使用 Python 语言交换想法，并通过不同的社交网络功能与志同道合的人交流。从其成立到
    2020 年，Quantopian 已经吸引了超过 30 万用户。
- en: Buy- and sell-side adoption
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 买方和卖方的采用
- en: More and more institutional players have adopted Python to streamline development
    efforts in their trading departments. This, in turn, requires more and more staff
    proficient in Python, which makes learning Python a worthwhile investment.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 越来越多的机构参与者已经采用 Python 来简化他们交易部门的开发工作。这反过来又需要越来越多精通 Python 的员工，这使得学习 Python 成为一项值得的投资。
- en: Education, training, and books
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 教育、培训和书籍
- en: Prerequisites for the widespread adoption of a technology or programming language
    are academic and professional education and training programs in combination with
    specialized books and other resources. The Python ecosystem has seen a tremendous
    growth in such offerings recently, educating and training more and more people
    in the use of Python for finance. This can be expected to reinforce the trend
    of Python adoption in the algorithmic trading space.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 技术或编程语言的广泛采用的先决条件是学术和专业教育以及培训计划，结合专业书籍和其他资源。Python 生态系统最近在这些方面的提供上有了巨大的增长，教育和培训越来越多的人使用
    Python 进行金融领域的工作。这有望强化 Python 在算法交易领域的采用趋势。
- en: In summary, it is rather safe to say that Python plays an important role in
    algorithmic trading already and seems to have strong momentum to become even more
    important in the future. It is therefore a good choice for anyone trying to enter
    the space, be it as an ambitious “retail” trader or as a professional employed
    by a leading financial institution engaged in systematic trading.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 综上所述，可以相当肯定地说 Python 已经在算法交易中扮演着重要的角色，并且似乎有强劲的势头在未来变得更加重要。因此，对于任何试图进入这一领域的人来说，无论是作为雄心勃勃的“零售”交易员还是作为从事系统化交易的领先金融机构的专业人士，选择
    Python 都是一个不错的选择。
- en: Focus and Prerequisites
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 焦点和先决条件
- en: The focus of this book is on Python as a programming language for algorithmic
    trading. The book assumes that the reader already has some experience with Python
    and popular Python packages used for data analytics. Good introductory books are,
    for example, Hilpisch (2018), McKinney (2017), and VanderPlas (2016), which all
    can be consulted to build a solid foundation in Python for data analysis and finance.
    The reader is also expected to have some experience with typical tools used for
    interactive analytics with Python, such as `IPython`, to which VanderPlas (2016)
    also provides an introduction.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的重点是将 Python 作为算法交易的编程语言。本书假设读者已经具有一些 Python 和用于数据分析的流行 Python 包的经验。好的入门书籍包括
    Hilpisch（2018）、McKinney（2017）和 VanderPlas（2016），这些都可以用来建立 Python 在数据分析和金融领域的扎实基础。读者也应具有一些使用
    Python 进行交互式分析的典型工具的经验，例如 `IPython`，VanderPlas（2016）也对其进行了介绍。
- en: This book presents and explains Python code that is applied to the topics at
    hand, like backtesting trading strategies or working with streaming data. It cannot
    provide a thorough introduction to all packages used in different places. It tries,
    however, to highlight those capabilities of the packages that are central to the
    exposition (such as vectorization with `NumPy`).
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 本书呈现并解释了应用于所讨论主题的 Python 代码，例如回测交易策略或处理流数据。它不能对不同地方使用的所有包提供全面的介绍。但它尝试着突出这些包的那些对于表达（例如
    `NumPy` 的向量化）的核心能力。
- en: The book also cannot provide a thorough introduction and overview of all financial
    and operational aspects relevant for algorithmic trading. The approach instead
    focuses on the use of Python to build the necessary infrastructure for automated
    algorithmic trading systems. Of course, the majority of examples used are taken
    from the algorithmic trading space. However, when dealing with, say, momentum
    or mean-reversion strategies, they are more or less simply used without providing
    (statistical) verification or an in-depth discussion of their intricacies. Whenever
    it seems appropriate, references are given that point the reader to sources that
    address issues left open during the exposition.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 本书也无法对算法交易相关的所有财务和运营方面进行全面介绍和概述。相反，该方法侧重于使用 Python 构建自动算法交易系统所需的基础设施。当然，大多数例子都来自算法交易领域。然而，当涉及动量或均值回归策略时，它们更多地被简单地使用，而没有提供（统计）验证或对其复杂性的深入讨论。每当适当时，都会提供参考资料，指向解决在表达过程中留下的问题的来源。
- en: All in all, this book is written for readers who have some experience with both
    Python and (algorithmic) trading. For such a reader, the book is a practical guide
    to the creation of automated trading systems using Python and additional packages.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，本书是为那些既有 Python 又有（算法）交易经验的读者编写的。对于这样的读者，本书是使用 Python 和其他包构建自动化交易系统的实用指南。
- en: This book uses a number of Python programming approaches (for example, object
    oriented programming) and packages (for example, `scikit-learn`) that cannot be
    explained in detail. The focus is on applying these approaches and packages to
    different steps in an algorithmic trading process. It is therefore recommended
    that those who do not yet have enough Python (for finance) experience additionally
    consult more introductory Python texts.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 本书采用了许多 Python 编程方法（例如，面向对象编程）和包（例如，`scikit-learn`），这些方法和包无法详细解释。重点是将这些方法和包应用于算法交易过程的不同步骤。因此，建议那些尚未具有足够
    Python（金融）经验的人额外查阅更多入门 Python 文本。
- en: Trading Strategies
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 交易策略
- en: Throughout this book, four different algorithmic trading strategies are used
    as examples. They are introduced briefly in the following sections and in some
    more detail in [Chapter 4](ch04.html#vectorized_backtesting). All these trading
    strategies can be classified as mainly *alpha seeking* *strategies*, since their
    main objective is to generate positive, above-market returns independent of the
    market direction. Canonical examples throughout the book, when it comes to financial
    instruments traded, are a *stock index*, a *single stock*, or a *cryptocurrency*
    (denominated in a fiat currency). The book does not cover strategies involving
    multiple financial instruments at the same time (pair trading strategies, strategies
    based on baskets, etc.). It also covers only strategies whose trading signals
    are derived from structured, financial time series data and not, for instance,
    from unstructured data sources like news or social media feeds. This keeps the
    discussions and the Python implementations concise and easier to understand, in
    line with the approach (discussed earlier) of focusing on Python for algorithmic
    trading.^([9](ch01.html#idm45785393679512))
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中介绍了四种不同的算法交易策略作为示例。它们在以下各节中简要介绍，在[第四章](ch04.html#vectorized_backtesting)中有更详细的介绍。所有这些交易策略主要可以归类为*alpha
    seeking* *strategies*，因为它们的主要目标是产生正的，超出市场的回报，与市场方向无关。本书中的规范示例，涉及的金融工具交易，是*股票指数*、*单只股票*或*加密货币*（以法定货币计价）。本书不涵盖涉及多个金融工具同时进行的策略（配对交易策略、基于篮子的策略等）。它也仅涵盖其交易信号源自结构化的金融时间序列数据，而不是来自非结构化数据源如新闻或社交媒体资讯的策略。这使得讨论和Python实现更简洁易懂，符合（前面讨论过的）专注于Python算法交易的方法。^([9](ch01.html#idm45785393679512))
- en: The remainder of this chapter gives a quick overview of the four trading strategies
    used in this book.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的剩余部分快速概述了本书中使用的四种交易策略。
- en: Simple Moving Averages
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 简单移动平均线
- en: The first type of trading strategy relies on simple moving averages (SMAs) to
    generate trading signals and market positionings. These trading strategies have
    been popularized by so-called technical analysts or chartists. The basic idea
    is that a shorter-term SMA being higher in value than a longer term SMA signals
    a long market position and the opposite scenario signals a neutral or short market
    position.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 第一类交易策略依赖于简单移动平均线（SMAs）来生成交易信号和市场定位。这些交易策略被所谓的技术分析师或图表分析师广泛推广。其基本思想是，较短期的简单移动平均线高于较长期的简单移动平均线，信号长期市场定位，而相反情况信号中立或空头市场定位。
- en: Momentum
  id: totrans-135
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 动量
- en: The basic idea behind momentum strategies is that a financial instrument is
    assumed to perform in accordance with its recent performance for some additional
    time. For example, when a stock index has seen a negative return on average over
    the last five days, it is assumed that its performance will be negative tomorrow,
    as well.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 动量策略背后的基本思想是，金融工具被假设会按照其最近的表现继续表现一段时间。例如，当股票指数在过去五天内平均表现为负回报时，假定其明天的表现也将是负的。
- en: Mean Reversion
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 均值回归
- en: In mean-reversion strategies, a financial instrument is assumed to revert to
    some mean or trend level if it is currently far enough away from such a level.
    For example, assume that a stock trades 10 USD under its 200 days SMA level of
    100\. It is then expected that the stock price will return to its SMA level sometime
    soon.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在均值回归策略中，假设金融工具将在当前远离某个均值或趋势水平时恢复到该均值或趋势水平。例如，假设一支股票交易比其100天简单移动平均线低10美元。然后可以预期该股价将很快回归到其简单移动平均线水平。
- en: Machine and Deep Learning
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 机器学习和深度学习
- en: With machine and deep learning algorithms, one generally takes a more black
    box approach to predicting market movements. For simplicity and reproducibility,
    the examples in this book mainly rely on historical return observations as features
    to train machine and deep learning algorithms to predict stock market movements.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 使用机器学习和深度学习算法时，一般采用更黑箱的方法来预测市场走势。为了简单和可重复性起见，本书中的示例主要依赖历史回报观察作为特征，训练机器学习和深度学习算法来预测股票市场走势。
- en: This book does not introduce algorithmic trading in a systematic fashion. Since
    the focus lies on applying Python in this fascinating field, readers not familiar
    with algorithmic trading should consult dedicated resources on the topic, some
    of which are cited in this chapter and the chapters that follow. But be aware
    of the fact that the algorithmic trading world in general is secretive and that
    almost everyone who is successful is naturally reluctant to share their secrets
    in order to protect their sources of success (that is, their alpha).
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 本书不以系统方式介绍算法交易。由于重点在于将 Python 应用于这一引人入胜的领域，对算法交易不熟悉的读者应查阅专门的资源。本章及后续章节中引用的某些资源是相关的。但请注意，算法交易世界总体上是秘密的，几乎每个成功的人都自然而然地不愿分享他们的成功秘诀，以保护他们的成功来源（即他们的
    alpha）。
- en: Conclusions
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: Python is already a force in finance in general and is on its way to becoming
    a major force in algorithmic trading. There are a number of good reasons to use
    Python for algorithmic trading, among them the powerful ecosystem of packages
    that allows for efficient data analysis or the handling of modern APIs. There
    are also a number of good reasons to learn Python for algorithmic trading, chief
    among them the fact that some of the biggest buy- and sell-side institutions make
    heavy use of Python in their trading operations and constantly look for seasoned
    Python professionals.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: Python 在金融领域已经成为一股力量，并正朝着成为算法交易的主要力量迈进。使用 Python 进行算法交易有许多好处，其中包括强大的包生态系统，可实现高效的数据分析或处理现代
    API 的能力。学习 Python 进行算法交易的原因也有很多，尤其是因为一些最大的买方和卖方机构在其交易操作中广泛使用 Python，并不断寻找经验丰富的
    Python 专业人员。
- en: This book focuses on applying Python to the different disciplines in algorithmic
    trading, like backtesting trading strategies or interacting with online trading
    platforms. It cannot replace a thorough introduction to Python itself nor to trading
    in general. However, it systematically combines these two fascinating worlds to
    provide a valuable source for the generation of alpha in today’s competitive financial
    and cryptocurrency markets.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 本书侧重于将 Python 应用于算法交易的不同学科，如回测交易策略或与在线交易平台互动。它不能取代对 Python 本身或交易总体的彻底介绍。然而，它系统地结合了这两个引人入胜的世界，为当今竞争激烈的金融和加密货币市场中的
    alpha 生成提供了宝贵的资源。
- en: References and Further Resources
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考文献与进一步资源
- en: 'Books and papers cited in this chapter:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 本章引用的书籍和论文：
- en: 'Black, Fischer, and Myron Scholes. 1973\. “The Pricing of Options and Corporate
    Liabilities.” *Journal of Political Economy* 81 (3): 638-659.'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Black, Fischer, and Myron Scholes. 1973\. “The Pricing of Options and Corporate
    Liabilities.” *《政治经济学杂志》* 81 (3): 638-659.'
- en: 'Chan, Ernest. 2013\. *Algorithmic Trading: Winning Strategies and Their Rationale*.
    Hoboken et al: John Wiley & Sons.'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Chan, Ernest. 2013\. *《算法交易：获胜策略及其原理》*. Hoboken et al: John Wiley & Sons.'
- en: 'Dorn, Anne, Daniel Dorn, and Paul Sengmueller. 2008\. “Why Do People Trade?”
    *Journal of Applied Finance* (Fall/Winter): 37-50.'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Dorn, Anne, Daniel Dorn, and Paul Sengmueller. 2008\. “Why Do People Trade?”
    *《应用金融杂志》* (秋/冬): 37-50.'
- en: 'Harvey, Campbell, Sandy Rattray, Andrew Sinclair, and Otto Van Hemert. 2016\.
    “Man vs. Machine: Comparing Discretionary and Systematic Hedge Fund Performance.”
    *The Journal of Portfolio Management* White Paper, Man Group.'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Harvey, Campbell, Sandy Rattray, Andrew Sinclair, and Otto Van Hemert. 2016\.
    “Man vs. Machine: Comparing Discretionary and Systematic Hedge Fund Performance.”
    *《投资组合管理杂志》* 白皮书, Man Group.'
- en: 'Hilpisch, Yves. 2015\. *Derivatives Analytics with Python: Data Analysis, Models,
    Simulation, Calibration and Hedging*. Wiley Finance. Resources under [*http://dawp.tpq.io*](http://dawp.tpq.io).'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Hilpisch, Yves. 2015\. *《Python 金融衍生品分析：数据分析，模型，仿真，校准和套期保值》*. Wiley Finance.
    资源位于 [*http://dawp.tpq.io*](http://dawp.tpq.io).
- en: '⸻. 2018\. *Python for Finance: Mastering Data-Driven Finance*. 2nd ed. Sebastopol:
    O’Reilly. Resources under [*https://py4fi.pqp.io*](https://py4fi.pqp.io).'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '⸻. 2018\. *《Python 金融分析：掌握数据驱动金融》*. 第二版. Sebastopol: O’Reilly. 资源位于 [*https://py4fi.pqp.io*](https://py4fi.pqp.io).'
- en: '⸻. 2020\. *Artificial Intelligence in Finance: A Python-Based Guide*. Sebastopol:
    O’Reilly. Resources under [*https://aiif.pqp.io*](https://aiif.pqp.io).'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '⸻. 2020\. *《金融中的人工智能：基于 Python 的指南》*. Sebastopol: O’Reilly. 资源位于 [*https://aiif.pqp.io*](https://aiif.pqp.io).'
- en: 'Kissel, Robert. 2013\. *The Science of Algorithmic Trading and Portfolio Management*.
    Amsterdam et al: Elsevier/Academic Press.'
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Kissel, Robert. 2013\. *《算法交易与投资组合管理的科学》*. Amsterdam et al: Elsevier/Academic
    Press.'
- en: 'Lewis, Michael. 2015\. *Flash Boys: Cracking the Money Code*. New York, London:
    W.W. Norton & Company.'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Lewis, Michael. 2015\. *《闪电少年：破解金融密码》*. 纽约，伦敦: W.W. Norton & Company.'
- en: 'McKinney, Wes. 2017\. *Python for Data Analysis: Data Wrangling with Pandas,
    NumPy, and IPython*. 2nd ed. Sebastopol: O’Reilly.'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: McKinney, Wes. 2017\. *Python数据分析：使用 Pandas、NumPy 和 IPython 进行数据整理*。第二版。Sebastopol：O’Reilly。
- en: 'Merton, Robert. 1973\. “Theory of Rational Option Pricing.” *Bell Journal of
    Economics and Management Science* 4: 141-183.'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Merton, Robert. 1973\. “理性期权定价理论。” *贝尔经济与管理科学杂志* 4: 141-183。'
- en: 'Narang, Rishi. 2013\. *Inside the Black Box: A Simple Guide to Quantitative
    and High Frequency Trading*. Hoboken et al: John Wiley & Sons.'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Narang, Rishi. 2013\. *黑盒子内部：量化和高频交易的简易指南*。Hoboken 等地：John Wiley & Sons。
- en: 'Solomon, Lewis, and Louise Corso. 1991\. “The Impact of Technology on the Trading
    of Securities: The Emerging Global Market and the Implications for Regulation.”
    *The John Marshall Law Review* 24 (2): 299-338.'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Solomon, Lewis, 和 Louise Corso. 1991\. “技术对证券交易的影响：新兴的全球市场及其对监管的影响。” *约翰·马歇尔法学评论*
    24 (2): 299-338。'
- en: 'VanderPlas, Jake. 2016\. *Python Data Science Handbook: Essential Tools for
    Working with Data*. Sebastopol: O’Reilly.'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VanderPlas, Jake. 2016\. *Python数据科学手册：处理数据的基本工具*。Sebastopol：O’Reilly。
- en: ^([1](ch01.html#idm45785394843768-marker)) “Too Squid to Fail.” *The Economist*,
    29\. October 2016.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch01.html#idm45785394843768-marker)) “太蒸发无法失败。” *经济学人*，2016年10月29日。
- en: ^([2](ch01.html#idm45785394872712-marker)) For details, see Hilpisch (2018,
    ch. 12).
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: ^([2](ch01.html#idm45785394872712-marker)) 详见 Hilpisch (2018, ch. 12)。
- en: ^([3](ch01.html#idm45785393485592-marker)) For example, `list` objects are not
    only mutable, which means that they can be changed in size, but they can also
    contain almost any other kind of Python object, like `int`, `float`, `tuple` objects
    or `list` objects themselves.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: ^([3](ch01.html#idm45785393485592-marker)) 例如，`list` 对象不仅是可变的（这意味着它们的大小可以改变），而且可以包含几乎任何其他类型的
    Python 对象，如 `int`、`float`、`tuple` 对象或 `list` 对象本身。
- en: ^([4](ch01.html#idm45785397477592-marker)) See [The Mathematics of the Rubik’s
    Cube](https://oreil.ly/16pIA) or [Algorithms for Solving Rubik’s Cube.](https://oreil.ly/XM0ZP)
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: ^([4](ch01.html#idm45785397477592-marker)) 参见 [魔方的数学](https://oreil.ly/16pIA)
    或 [解决魔方的算法](https://oreil.ly/XM0ZP)。
- en: ^([5](ch01.html#idm45785397451960-marker)) See Hilpisch (2015) for a detailed
    analysis of delta hedging strategies for European and American options using Python.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: ^([5](ch01.html#idm45785397451960-marker)) 详见 Hilpisch (2015)，详细分析使用 Python
    进行欧式和美式期权的对冲策略。
- en: ^([6](ch01.html#idm45785397446152-marker)) See the book by Lewis (2015) for
    a non-technical introduction to HFT.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: ^([6](ch01.html#idm45785397446152-marker)) 参见 Lewis (2015) 的书籍，非技术性介绍高频交易。
- en: '^([7](ch01.html#idm45785397441432-marker)) Source: “66% of Fund Managers Can’t
    Match S&P Results.” *USA Today*, March 14, 2016.'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: ^([7](ch01.html#idm45785397441432-marker)) 资料来源：“66%的基金经理无法匹配标准普尔500指数的成绩。”
    *今日美国*，2016年3月14日。
- en: ^([8](ch01.html#idm45785397437656-marker)) Annualized performance (above the
    short-term interest rate) and risk measures for hedge fund categories comprising
    a total of 9,000 hedge funds over the period from June 1996 to December 2014.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: ^([8](ch01.html#idm45785397437656-marker)) 年化表现（超过短期利率）和对包括从1996年6月到2014年12月期间的9,000只对冲基金的风险度量的总体基金类别的风险度量。
- en: ^([9](ch01.html#idm45785393679512-marker)) See the book by Kissel (2013) for
    an overview of topics related to algorithmic trading, the book by Chan (2013)
    for an in-depth discussion of momentum and mean-reversion strategies, or the book
    by Narang (2013) for a coverage of quantitative and HFT trading in general.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: ^([9](ch01.html#idm45785393679512-marker)) 参见 Kissel (2013) 的书籍，概述与算法交易相关的主题，参见
    Chan (2013) 的书籍，深入讨论动量和均值回归策略，或参见 Narang (2013) 的书籍，全面覆盖量化和高频交易。

["```py\n`# Importing the necessary charting library`\nimport matplotlib.pyplot as plt\n\n`# The syntax to plot a line chart`\nplt.plot(my_data, color = 'black', label = 'EURUSD')\n\n`# The syntax to add the label created above`\nplt.legend()\n\n`# The syntax to add a grid`\nplt.grid()\n\n```", "```py\ndef ohlc_plot_candles(data, window):\n\n    sample = data[-window:, ]\n\n    for i in range(len(sample)):\n\n        plt.vlines(x = i, ymin = sample[i, 2], ymax = sample[i, 1], \n                   color = 'black', linewidth = 1)  \n\n        if sample[i, 3] > sample[i, 0]:\n\n            plt.vlines(x = i, ymin = sample[i, 0], ymax = sample[i, 3], \n                       color = 'green', linewidth = 3)  \n\n        if sample[i, 3] < sample[i, 0]:\n\n            plt.vlines(x = i, ymin = sample[i, 3], ymax = sample[i, 0], \n                       color = 'red', linewidth = 3)  \n\n        if sample[i, 3] == sample[i, 0]:\n\n            plt.vlines(x = i, ymin = sample[i, 3], ymax = sample[i, 0] + \n                       0.00003, color = 'black', linewidth = 1.00)  \n\n    plt.grid()\n\n```", "```py\nohlc_plot_candles(my_data, window = 100)\n```", "```py\ndef ohlc_plot_candles(data, window):\n\n    sample = data[-window:, ]\n\n    for i in range(len(sample)):\n\n        plt.vlines(x = i, ymin = sample[i, 2], ymax = sample[i, 1],\n                   color = 'black', linewidth = 1)  \n\n        if sample[i, 3] > sample[i, 0]:\n\n            plt.vlines(x = i, ymin = sample[i, 0], ymax = sample[i, 3],\n                       color = 'grey', linewidth = 3)  \n\n        if sample[i, 3] < sample[i, 0]:\n\n            plt.vlines(x = i, ymin = sample[i, 3], ymax = sample[i, 0],\n                       color = 'black', linewidth = 3)  \n\n        if sample[i, 3] == sample[i, 0]:\n\n            plt.vlines(x = i, ymin = sample[i, 3], ymax = sample[i, 0] +\n                       0.00003, color = 'black', linewidth = 1.00)  \n\n    plt.grid()\n```", "```py\ndef ma(data, lookback, close, position): \n\n    data = add_column(data, 1)\n\n    for i in range(len(data)):\n\n            try:\n\n                data[i, position] = (data[i - lookback + 1:i + 1, \n                                     close].mean())\n\n            except IndexError:\n\n                pass\n\n    data = delete_row(data, lookback)\n\n    return data\n```", "```py\n`# Setting the lookback period`\nlookback = 30\n\n`# Setting the index of the close price column`\nclose_column = 3\n\n`# Setting the index of the moving average column`\nma_column = 4\n\n`# Calling the moving average function`\nmy_data = ma(my_data, lookback, close_column, ma_column)\n```", "```py\ndef smoothed_ma(data, alpha, lookback, close, position):\n\n    lookback = (2 * lookback) - 1\n\n    alpha = alpha / (lookback + 1.0)\n\n    beta  = 1 - alpha\n\n    data = ma(data, lookback, close, position)\n\n    data[lookback + 1, position] = (data[lookback + 1, close] * alpha) + \n                                   (data[lookback, position] * beta)\n\n    for i in range(lookback + 2, len(data)):\n\n            try:\n\n                data[i, position] = (data[i, close] * alpha) + \n                                    (data[i - 1, position] * beta)\n\n            except IndexError:\n\n                pass\n\n    return data\n\n```", "```py\ndef rsi(data, lookback, close, position):\n\n    data = add_column(data, 5)\n\n    for i in range(len(data)):\n\n        data[i, position] = data[i, close] - data[i - 1, close]\n\n    for i in range(len(data)):\n\n        if data[i, position] > 0:\n\n            data[i, position + 1] = data[i, position]\n\n        elif data[i, position] < 0:\n\n            data[i, position + 2] = abs(data[i, position])\n\n    data = smoothed_ma(data, 2, lookback, position + 1, position + 3)\n    data = smoothed_ma(data, 2, lookback, position + 2, position + 4)\n\n    data[:, position + 5] = data[:, position + 3] / data[:, position + 4]\n\n    data[:, position + 6] = (100 - (100 / (1 + data[:, position + 5])))\n\n    data = delete_column(data, position, 6)\n    data = delete_row(data, lookback)\n\n    return data\n\n```"]
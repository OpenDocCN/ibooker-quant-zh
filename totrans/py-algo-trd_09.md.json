["```py\npip install fxcmpy\n```", "```py\nimport fxcmpy\napi = fxcmpy.fxcmpy(access_token=YOUR_FXCM_API_TOKEN, log_level='error')\n```", "```py\n[FXCM]\nlog_level = error\nlog_file = PATH_TO_AND_NAME_OF_LOG_FILE\naccess_token = YOUR_FXCM_API_TOKEN\n```", "```py\nimport fxcmpy\napi = fxcmpy.fxcmpy(config_file='pyalgo.cfg')\n```", "```py\napi = fxcmpy.fxcmpy(config_file='pyalgo.cfg', server='demo')  ![1](assets/1.png)\napi = fxcmpy.fxcmpy(config_file='pyalgo.cfg', server='real')  ![2](assets/2.png)\n```", "```py\nIn [1]: import time\n        import numpy as np\n        import pandas as pd\n        import datetime as dt\n        from pylab import mpl, plt\n        plt.style.use('seaborn')\n        mpl.rcParams['savefig.dpi'] = 300\n        mpl.rcParams['font.family'] = 'serif'\n```", "```py\nIn [2]: from fxcmpy import fxcmpy_tick_data_reader as tdr\n\nIn [3]: print(tdr.get_available_symbols())\n        ('AUDCAD', 'AUDCHF', 'AUDJPY', 'AUDNZD', 'CADCHF', 'EURAUD', 'EURCHF',\n         'EURGBP', 'EURJPY', 'EURUSD', 'GBPCHF', 'GBPJPY', 'GBPNZD', 'GBPUSD',\n         'GBPCHF', 'GBPJPY', 'GBPNZD', 'NZDCAD', 'NZDCHF', 'NZDJPY', 'NZDUSD',\n         'USDCAD', 'USDCHF', 'USDJPY')\n```", "```py\nIn [4]: start = dt.datetime(2020, 3, 25)  ![1](assets/1.png)\n        stop = dt.datetime(2020, 3, 30)  ![1](assets/1.png)\n\nIn [5]: td = tdr('EURUSD', start, stop)  ![1](assets/1.png)\n\nIn [6]: td.get_raw_data().info()  ![2](assets/2.png)\n        <class 'pandas.core.frame.DataFrame'>\n        Index: 4504288 entries, 03/22/2020 21:12:02.256 to 03/27/2020\n         20:59:00.022\n        Data columns (total 2 columns):\n         #   Column  Dtype\n        ---  ------  -----\n         0   Bid     float64\n         1   Ask     float64\n        dtypes: float64(2)\n        memory usage: 103.1+ MB\n\nIn [7]: td.get_data().info()  ![3](assets/3.png)\n        <class 'pandas.core.frame.DataFrame'>\n        DatetimeIndex: 4504288 entries, 2020-03-22 21:12:02.256000 to\n         2020-03-27 20:59:00.022000\n        Data columns (total 2 columns):\n         #   Column  Dtype\n        ---  ------  -----\n         0   Bid     float64\n         1   Ask     float64\n        dtypes: float64(2)\n        memory usage: 103.1 MB\n\nIn [8]: td.get_data().head()\nOut[8]:                              Bid      Ask\n        2020-03-22 21:12:02.256  1.07006  1.07050\n        2020-03-22 21:12:02.258  1.07002  1.07050\n        2020-03-22 21:12:02.259  1.07003  1.07033\n        2020-03-22 21:12:02.653  1.07003  1.07034\n        2020-03-22 21:12:02.749  1.07000  1.07034\n```", "```py\nIn [9]: sub = td.get_data(start='2020-03-25 12:00:00',\n                          end='2020-03-25 12:15:00')  ![1](assets/1.png)\n\nIn [10]: sub.head()\nOut[10]:                              Bid     Ask\n         2020-03-25 12:00:00.067  1.08109  1.0811\n         2020-03-25 12:00:00.072  1.08110  1.0811\n         2020-03-25 12:00:00.074  1.08109  1.0811\n         2020-03-25 12:00:00.078  1.08111  1.0811\n         2020-03-25 12:00:00.121  1.08112  1.0811\n\nIn [11]: sub['Mid'] = sub.mean(axis=1)  ![2](assets/2.png)\n\nIn [12]: sub['SMA'] = sub['Mid'].rolling(1000).mean()  ![3](assets/3.png)\n\nIn [13]: sub[['Mid', 'SMA']].plot(figsize=(10, 6), lw=1.5);\n```", "```py\nIn [14]: from fxcmpy import fxcmpy_candles_data_reader as cdr\n\nIn [15]: print(cdr.get_available_symbols())\n         ('AUDCAD', 'AUDCHF', 'AUDJPY', 'AUDNZD', 'CADCHF', 'EURAUD', 'EURCHF',\n          'EURGBP', 'EURJPY', 'EURUSD', 'GBPCHF', 'GBPJPY', 'GBPNZD', 'GBPUSD',\n          'GBPCHF', 'GBPJPY', 'GBPNZD', 'NZDCAD', 'NZDCHF', 'NZDJPY', 'NZDUSD',\n          'USDCAD', 'USDCHF', 'USDJPY')\n```", "```py\nIn [16]: start = dt.datetime(2020, 4, 1)\n         stop = dt.datetime(2020, 5, 1)\n\nIn [17]: period = 'H1'  ![1](assets/1.png)\n\nIn [18]: candles = cdr('EURUSD', start, stop, period)\n\nIn [19]: data = candles.get_data()\n\nIn [20]: data.info()\n         <class 'pandas.core.frame.DataFrame'>\n         DatetimeIndex: 600 entries, 2020-03-29 21:00:00 to 2020-05-01 20:00:00\n         Data columns (total 8 columns):\n          #   Column    Non-Null Count  Dtype\n         ---  ------    --------------  -----\n          0   BidOpen   600 non-null    float64\n          1   BidHigh   600 non-null    float64\n          2   BidLow    600 non-null    float64\n          3   BidClose  600 non-null    float64\n          4   AskOpen   600 non-null    float64\n          5   AskHigh   600 non-null    float64\n          6   AskLow    600 non-null    float64\n          7   AskClose  600 non-null    float64\n         dtypes: float64(8)\n         memory usage: 42.2 KB\n\nIn [21]: data[data.columns[:4]].tail()  ![2](assets/2.png)\nOut[21]:                      BidOpen  BidHigh   BidLow  BidClose\n         2020-05-01 16:00:00  1.09976  1.09996  1.09850   1.09874\n         2020-05-01 17:00:00  1.09874  1.09888  1.09785   1.09818\n         2020-05-01 18:00:00  1.09818  1.09820  1.09757   1.09766\n         2020-05-01 19:00:00  1.09766  1.09816  1.09747   1.09793\n         2020-05-01 20:00:00  1.09793  1.09812  1.09730   1.09788\n\nIn [22]: data[data.columns[4:]].tail()  ![3](assets/3.png)\nOut[22]:                      AskOpen  AskHigh   AskLow  AskClose\n         2020-05-01 16:00:00  1.09980  1.09998  1.09853   1.09876\n         2020-05-01 17:00:00  1.09876  1.09891  1.09786   1.09818\n         2020-05-01 18:00:00  1.09818  1.09822  1.09758   1.09768\n         2020-05-01 19:00:00  1.09768  1.09818  1.09748   1.09795\n         2020-05-01 20:00:00  1.09795  1.09856  1.09733   1.09841\n```", "```py\nIn [23]: data['MidClose'] = data[['BidClose', 'AskClose']].mean(axis=1)  ![1](assets/1.png)\n\nIn [24]: data['SMA1'] = data['MidClose'].rolling(30).mean()  ![2](assets/2.png)\n         data['SMA2'] = data['MidClose'].rolling(100).mean()  ![2](assets/2.png)\n\nIn [25]: data[['MidClose', 'SMA1', 'SMA2']].plot(figsize=(10, 6));\n```", "```py\nIn [26]: import fxcmpy\n\nIn [27]: fxcmpy.__version__\nOut[27]: '1.2.6'\n\nIn [28]: api = fxcmpy.fxcmpy(config_file='../pyalgo.cfg')  ![1](assets/1.png)\n\nIn [29]: instruments = api.get_instruments()\n\nIn [30]: print(instruments)\n         ['EUR/USD', 'USD/JPY', 'GBP/USD', 'USD/CHF', 'EUR/CHF', 'AUD/USD',\n          'USD/CAD', 'NZD/USD', 'EUR/GBP', 'EUR/JPY', 'GBP/JPY', 'CHF/JPY',\n          'GBP/CHF', 'EUR/AUD', 'EUR/CAD', 'AUD/CAD', 'AUD/JPY', 'CAD/JPY',\n          'NZD/JPY', 'GBP/CAD', 'GBP/NZD', 'GBP/AUD', 'AUD/NZD', 'USD/SEK',\n          'EUR/SEK', 'EUR/NOK', 'USD/NOK', 'USD/MXN', 'AUD/CHF', 'EUR/NZD',\n          'USD/ZAR', 'USD/HKD', 'ZAR/JPY', 'USD/TRY', 'EUR/TRY', 'NZD/CHF',\n          'CAD/CHF', 'NZD/CAD', 'TRY/JPY', 'USD/ILS', 'USD/CNH', 'AUS200',\n          'ESP35', 'FRA40', 'GER30', 'HKG33', 'JPN225', 'NAS100', 'SPX500',\n          'UK100', 'US30', 'Copper', 'CHN50', 'EUSTX50', 'USDOLLAR', 'US2000',\n          'USOil', 'UKOil', 'SOYF', 'NGAS', 'USOilSpot', 'UKOilSpot', 'WHEATF',\n          'CORNF', 'Bund', 'XAU/USD', 'XAG/USD', 'EMBasket', 'JPYBasket',\n          'BTC/USD', 'BCH/USD', 'ETH/USD', 'LTC/USD', 'XRP/USD', 'CryptoMajor',\n          'EOS/USD', 'XLM/USD', 'ESPORTS', 'BIOTECH', 'CANNABIS', 'FAANG',\n          'CHN.TECH', 'CHN.ECOMM', 'USEquities']\n```", "```py\nIn [31]: candles = api.get_candles('USD/JPY', period='D1', number=10)  ![1](assets/1.png)\n\nIn [32]: candles[candles.columns[:4]]  ![1](assets/1.png)\nOut[32]:                      bidopen  bidclose  bidhigh   bidlow\n         date\n         2020-08-07 21:00:00  105.538   105.898  106.051  105.452\n         2020-08-09 21:00:00  105.871   105.846  105.871  105.844\n         2020-08-10 21:00:00  105.846   105.914  106.197  105.702\n         2020-08-11 21:00:00  105.914   106.466  106.679  105.870\n         2020-08-12 21:00:00  106.466   106.848  107.009  106.434\n         2020-08-13 21:00:00  106.848   106.893  107.044  106.560\n         2020-08-14 21:00:00  106.893   106.535  107.033  106.429\n         2020-08-17 21:00:00  106.559   105.960  106.648  105.937\n         2020-08-18 21:00:00  105.960   105.378  106.046  105.277\n         2020-08-19 21:00:00  105.378   105.528  105.599  105.097\n\nIn [33]: candles[candles.columns[4:]]  ![1](assets/1.png)\nOut[33]:                      askopen  askclose  askhigh   asklow  tickqty\n         date\n         2020-08-07 21:00:00  105.557   105.969  106.062  105.484   253759\n         2020-08-09 21:00:00  105.983   105.952  105.989  105.925       20\n         2020-08-10 21:00:00  105.952   105.986  106.209  105.715   161841\n         2020-08-11 21:00:00  105.986   106.541  106.689  105.929   243813\n         2020-08-12 21:00:00  106.541   106.950  107.022  106.447   248989\n         2020-08-13 21:00:00  106.950   106.983  107.056  106.572   214735\n         2020-08-14 21:00:00  106.983   106.646  107.044  106.442   164244\n         2020-08-17 21:00:00  106.680   106.047  106.711  105.948   163629\n         2020-08-18 21:00:00  106.047   105.431  106.101  105.290   215574\n         2020-08-19 21:00:00  105.431   105.542  105.612  105.109   151255\n\nIn [34]: start = dt.datetime(2019, 1, 1)  ![2](assets/2.png)\n         end = dt.datetime(2020, 6, 1)  ![2](assets/2.png)\n\nIn [35]: candles = api.get_candles('EUR/GBP', period='D1',\n                                   start=start, stop=end)  ![2](assets/2.png)\n\nIn [36]: candles.info()  ![2](assets/2.png)\n         <class 'pandas.core.frame.DataFrame'>\n         DatetimeIndex: 438 entries, 2019-01-02 22:00:00 to 2020-06-01 21:00:00\n         Data columns (total 9 columns):\n          #   Column    Non-Null Count  Dtype\n         ---  ------    --------------  -----\n          0   bidopen   438 non-null    float64\n          1   bidclose  438 non-null    float64\n          2   bidhigh   438 non-null    float64\n          3   bidlow    438 non-null    float64\n          4   askopen   438 non-null    float64\n          5   askclose  438 non-null    float64\n          6   askhigh   438 non-null    float64\n          7   asklow    438 non-null    float64\n          8   tickqty   438 non-null    int64\n         dtypes: float64(8), int64(1)\n         memory usage: 34.2 KB\n\nIn [37]: candles = api.get_candles('EUR/USD', period='m1', number=250)  ![3](assets/3.png)\n\nIn [38]: candles['askclose'].plot(figsize=(10, 6))\n```", "```py\nIn [39]: def output(data, dataframe):\n             print('%3d | %s | %s | %6.5f, %6.5f'\n                   % (len(dataframe), data['Symbol'],\n                      pd.to_datetime(int(data['Updated']), unit='ms'),\n                      data['Rates'][0], data['Rates'][1]))  ![1](assets/1.png)\n\nIn [40]: api.subscribe_market_data('EUR/USD', (output,))  ![2](assets/2.png)\n           2 | EUR/USD | 2020-08-19 14:32:36.204000 | 1.19319, 1.19331\n           3 | EUR/USD | 2020-08-19 14:32:37.005000 | 1.19320, 1.19331\n           4 | EUR/USD | 2020-08-19 14:32:37.940000 | 1.19323, 1.19333\n           5 | EUR/USD | 2020-08-19 14:32:38.429000 | 1.19321, 1.19332\n           6 | EUR/USD | 2020-08-19 14:32:38.915000 | 1.19323, 1.19334\n           7 | EUR/USD | 2020-08-19 14:32:39.436000 | 1.19321, 1.19332\n           8 | EUR/USD | 2020-08-19 14:32:39.883000 | 1.19317, 1.19328\n           9 | EUR/USD | 2020-08-19 14:32:40.437000 | 1.19317, 1.19328\n          10 | EUR/USD | 2020-08-19 14:32:40.810000 | 1.19318, 1.19329\n\nIn [41]: api.get_last_price('EUR/USD')  ![3](assets/3.png)\nOut[41]: Bid     1.19318\n         Ask     1.19329\n         High    1.19534\n         Low     1.19217\n         Name: 2020-08-19 14:32:40.810000, dtype: float64\n\n          11 | EUR/USD | 2020-08-19 14:32:41.410000 | 1.19319, 1.19329\n\nIn [42]: api.unsubscribe_market_data('EUR/USD')  ![4](assets/4.png)\n```", "```py\nIn [43]: api.get_open_positions()  ![1](assets/1.png)\nOut[43]: Empty DataFrame\n         Columns: []\n         Index: []\n\nIn [44]: order = api.create_market_buy_order('EUR/USD', 100)  ![2](assets/2.png)\n\nIn [45]: sel = ['tradeId', 'amountK', 'currency',\n                'grossPL', 'isBuy']  ![3](assets/3.png)\n\nIn [46]: api.get_open_positions()[sel]  ![3](assets/3.png)\nOut[46]:      tradeId  amountK currency  grossPL  isBuy\n         0  169122817      100  EUR/USD -9.21945   True\n\nIn [47]: order = api.create_market_buy_order('EUR/GBP', 50)  ![4](assets/4.png)\n\nIn [48]: api.get_open_positions()[sel]\nOut[48]:      tradeId  amountK currency  grossPL  isBuy\n         0  169122817      100  EUR/USD -8.38125   True\n         1  169122819       50  EUR/GBP -9.40900   True\n```", "```py\nIn [49]: order = api.create_market_sell_order('EUR/USD', 25)  ![1](assets/1.png)\n\nIn [50]: order = api.create_market_buy_order('EUR/GBP', 50)  ![2](assets/2.png)\n\nIn [51]: api.get_open_positions()[sel]  ![3](assets/3.png)\nOut[51]:      tradeId  amountK currency   grossPL  isBuy\n         0  169122817      100  EUR/USD  -7.54306   True\n         1  169122819       50  EUR/GBP -11.62340   True\n         2  169122834       25  EUR/USD  -2.30463  False\n         3  169122835       50  EUR/GBP  -9.96292   True\n\nIn [52]: api.close_all_for_symbol('EUR/GBP')  ![4](assets/4.png)\n\nIn [53]: api.get_open_positions()[sel]\nOut[53]:      tradeId  amountK currency  grossPL  isBuy\n         0  169122817      100  EUR/USD -5.02858   True\n         1  169122834       25  EUR/USD -3.14257  False\n\nIn [54]: api.close_all()  ![5](assets/5.png)\n\nIn [55]: api.get_open_positions()\nOut[55]: Empty DataFrame\n         Columns: []\n         Index: []\n```", "```py\nIn [56]: api.get_default_account()  ![1](assets/1.png)\nOut[56]: 1233279\n\nIn [57]: api.get_accounts().T  ![2](assets/2.png)\nOut[57]:                           0\n         t                         6\n         ratePrecision             0\n         accountId           1233279\n         balance             47555.2\n         usdMr                     0\n         mc                        N\n         mcDate\n         accountName        01233279\n         usdMr3                    0\n         hedging                   Y\n         usableMargin3       47555.2\n         usableMarginPerc        100\n         usableMargin3Perc       100\n         equity              47555.2\n         usableMargin        47555.2\n         bus                    1000\n         dayPL                653.16\n         grossPL                   0\n```"]
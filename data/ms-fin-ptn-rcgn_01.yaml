- en: Chapter 1\. Importing and Processing Financial Data in Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 1 章\. 在 Python 中导入和处理金融数据
- en: This chapter is dedicated to laying the foundation needed to analyze financial
    data through coding. This requires some preparation, such as downloading the right
    software and creating an algorithm that fetches historical data automatically.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章专门讨论通过编码分析金融数据所需的基础工作。这需要一些准备工作，如下载合适的软件和创建一个自动获取历史数据的算法。
- en: By the end of the chapter, you should know how to automatically import historical
    financial data using Python, a skill that should save you time. So let’s get started.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你应该知道如何使用 Python 自动导入历史金融数据，这个技能应该能为你节省时间。那么，让我们开始吧。
- en: Installing the Environment
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装环境
- en: 'The first step is to prepare the environment and everything else necessary
    for the success of the algorithms. For this, you need two programs:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是准备环境和算法成功所需的其他一切。为此，你需要两个程序：
- en: A Python interpreter that you use to write and execute code
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你用来编写和执行代码的 Python 解释器
- en: Charting and financial software that you use as a database
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你用作数据库的图表和金融软件
- en: Let’s start with the Python interpreter. I use a software called SPYDER. Some
    people may be more familiar with other software such as Jupyter and PyCharm, but
    the process is the same. You can download SPYDER from the [official website](https://www.spyder-ide.org) or,
    even better, download it as part of a bigger package called [Anaconda](https://oreil.ly/nI8Ed),
    which facilitates installation and offers more tools. Note that it is open source,
    free-to-use software.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从 Python 解释器开始。我使用一个名为 SPYDER 的软件。有些人可能更熟悉其他软件，如 Jupyter 和 PyCharm，但过程是相同的。你可以从[官方网站](https://www.spyder-ide.org)下载
    SPYDER，或者更好地，作为一个名为[Anaconda](https://oreil.ly/nI8Ed)的大包的一部分下载它，这样安装更方便并提供更多工具。注意它是开源、免费的软件。
- en: SPYDER’s interface is split into three windows, as you can see in [Figure 1-1](#figure1-1). The
    window on the left is used to write the code that is later executed (the algorithm
    is told to run and apply the code). Typically, you will see multiple lines of
    code in that area.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: SPYDER 的界面分为三个窗口，如你在[图 1-1](#figure1-1)中所见。左侧的窗口用于编写稍后执行的代码（告诉算法运行并应用代码）。通常，你会在那个区域看到多行代码。
- en: The window on the upper right is the variable explorer. Every time a variable
    is stored, you can see it there. The window on the lower right is the console
    that shows the result of the code, whether it is an error or an output.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 右上角的窗口是变量资源管理器。每次存储变量时，你都可以在那里看到它。右下角的窗口是控制台，显示代码的结果，无论是错误还是输出。
- en: '![](assets/mfpr_0101.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/mfpr_0101.png)'
- en: Figure 1-1\. SPYDER’s interface
  id: totrans-11
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 1-1\. SPYDER 的界面
- en: 'The types of data that you can define and use in the code are classified into
    several categories:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在代码中定义和使用的数据类型分为几类：
- en: Integers
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 整数
- en: These are whole numbers, which can be either positive or negative. Examples
    are −8 and 745\. They are, however, limited to between −2147483648 and 2147483647\.
    Any number falling outside this range is considered a different data type called
    a *long*. The difference between data types has to do with memory. Integers are
    32 bits in width, whereas longs are 64 bits in width.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是整数，可以是正数也可以是负数。例如 −8 和 745。然而，它们限制在 −2147483648 到 2147483647 之间。任何超出此范围的数字被认为是一个不同的数据类型，称为*长整型*。数据类型之间的区别与内存有关。整数的宽度为
    32 位，而长整型为 64 位。
- en: Floats
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 浮点数
- en: These are real numbers with decimal points such as 18.54 and 311.52.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是带有小数点的实数，例如 18.54 和 311.52。
- en: Strings
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串
- en: These are words stored in a variable. More scientifically, they are a set of
    structured characters (text). In Python, you write strings between single or double
    quotes.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是存储在变量中的单词。更科学地说，它们是一组结构化字符（文本）。在 Python 中，你可以用单引号或双引号之间写字符串。
- en: In line 1 of the code in [Figure 1-1](#figure1-1), I have defined a variable
    called `age` and set it to 13\. When you run this code, you should see the creation
    of `age` in the variable explorer with type `int` (integer) and a value of 13\.
    In line 3, I have executed the code that defines the `height` variable set to
    184.50 (therefore, a float data type).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在[图 1-1](#figure1-1)的代码第 1 行中，我定义了一个名为`age`的变量，并将其设置为 13。当你运行此代码时，你应该在变量资源管理器中看到`age`的创建，类型为`int`（整数），值为
    13。在第 3 行，我执行了定义`height`变量并设置为 184.50 的代码（因此是浮点数数据类型）。
- en: Notice that next to the definition of the variable, I have written the phrase
    `in centimeters`, preceded by a hashmark. This is called a *comment*. Comments
    are very important in Python for explaining the code. Therefore, anything preceded
    by `#` will not be executed. In the variable explorer, you can see the `height`
    variable with the `float` type. Line 5 defines a string, which in the variable
    explorer is shown as `str` type (string). In the console, you can see that the
    code has been successfully executed because there are no errors, which would be
    shown in red.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，变量定义旁边我写了`in centimeters`这个短语，前面加了井号。这叫做*注释*。在Python中，注释对于解释代码非常重要。因此，任何以`#`开头的内容都不会被执行。在变量资源管理器中，您可以看到`height`变量的`float`类型。第5行定义了一个字符串，在控制台中显示为`str`类型（字符串）。您可以看到代码已成功执行，因为没有显示为红色的错误。
- en: 'The next step in preparing the environment is to install the charting software
    that allows you to import historical data into SPYDER. Throughout the book, I
    use MetaTrader 5, a benchmark charting program used by many traders around the
    globe. Follow these steps:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 准备环境的下一步是安装图表软件，以便您可以将历史数据导入到SPYDER中。在整本书中，我使用MetaTrader 5，这是许多全球交易员使用的基准图表程序。按照以下步骤进行操作：
- en: Download SPYDER and familiarize yourself with how it works.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载SPYDER并熟悉其工作方式。
- en: Download the MetaTrader 5 software.
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载MetaTrader 5软件。
- en: Use SPYDER to import historical prices from MetaTrader 5.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用SPYDER从MetaTrader 5导入历史价格。
- en: From the [official website](https://www.metatrader5.com/en), download and install
    MetaTrader 5\. You need to create a demo account, which is simply a virtual account
    with imaginary money. The word *demo* does not refer to a limited duration of
    use but to the fact that it is not using real money.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 从[官方网站](https://www.metatrader5.com/en)下载并安装MetaTrader 5。您需要创建一个演示账户，这只是一个带有虚拟货币的虚拟账户。单词*demo*不是指使用的时间有限，而是指它不使用真实货币。
- en: To open an account, select File > Open an Account, choose MetaQuotes Software
    Corp, and then click Next. Next, choose the first option to open a demo account;
    this will let you trade virtual money. Finally, enter some basic information such
    as name, email, and account type. You will not receive a verification request
    or any type of confirmation as the demo should launch directly, allowing you to
    see the charts.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 要开设账户，请选择文件 > 打开账户，选择MetaQuotes Software Corp，然后点击下一步。接下来，选择第一个选项以开设演示账户；这将让您交易虚拟货币。最后，输入一些基本信息，如姓名、电子邮件和账户类型。您将不会收到验证请求或任何类型的确认，因为演示应直接启动，允许您查看图表。
- en: '[Figure 1-2](#figure1-2) shows the platform’s interface. By default, MetaTrader
    5 does not show all the markets it covers, so you need to make them accessible
    for import and visualization if necessary. Click View, click Market Watch, and
    then right-click any of the symbols shown in the new tab and choose Show All.
    This way you can see the extended list with more markets.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '[图1-2](#figure1-2)显示了平台的界面。默认情况下，MetaTrader 5不显示其涵盖的所有市场，因此如果需要，您需要使其可访问以进行导入和可视化。单击查看，单击市场观察，然后右键单击新选项卡中显示的任何符号，并选择显示所有。这样，您可以看到扩展列表，其中包含更多市场。'
- en: '![](assets/mfpr_0102.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/mfpr_0102.png)'
- en: Figure 1-2\. MetaTrader 5’s interface
  id: totrans-29
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图1-2\. MetaTrader 5的界面。
- en: Creating the Importing Algorithm
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建导入算法。
- en: Being able to automatically summon historical data of any time frame is a wonderful
    time-saver as it allows you to focus on research and analysis instead of wasting
    valuable time acquiring and cleaning the data. Let’s create a set of functions
    that import the historical data of a selected asset almost instantaneously.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 能够自动调用任何时间段的历史数据是一种非常节省时间的方法，因为它使您能够专注于研究和分析，而不是浪费宝贵的时间获取和清理数据。让我们创建一组函数，几乎可以即时导入所选资产的历史数据。
- en: Before proceeding to the coding part, you need to install the MetaTrader 5 Python
    integration library so you can use it later in SPYDER. This is easy and requires
    one step. Open the Anaconda prompt and type in `pip install Metatrader5`, as shown
    in [Figure 1-3](#figure1-3).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行编码之前，您需要安装MetaTrader 5 Python集成库，以便稍后在SPYDER中使用它。这很简单，只需一步。打开Anaconda提示符并输入`pip
    install Metatrader5`，如[图1-3](#figure1-3)所示。
- en: '![](assets/mfpr_0103.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/mfpr_0103.png)'
- en: Figure 1-3\. Anaconda prompt showing the command to install the MetaTrader 5
    library
  id: totrans-34
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图1-3\. Anaconda提示显示安装MetaTrader 5库的命令。
- en: Installation is the bridge that allows you to use Python libraries designed
    for MetaTrader 5 in the interpreter.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 安装是允许您在解释器中使用为MetaTrader 5设计的Python库的桥梁。
- en: 'The following code block uses the `import` built-in statement, which calls
    for internal (self-created) or external (created by third parties) libraries.
    A library is a store of functions, and thus, you need to import the libraries
    that are pertinent to what you want to do. For demonstration purposes, import
    the following modules, packages, and libraries:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码块使用了内置的`import`语句，调用了内部（自行创建的）或外部（第三方创建的）库。库是函数的存储库，因此，你需要导入与你想要做的事情相关的库。为了演示目的，导入以下模块、包和库：
- en: '[PRE0]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The `datetime` module gives tools for manipulating the dates and times, the
    `pytz` library offers cross-platform time zone calculations that are needed for
    the import, and the `pandas` and `numpy` libraries are used for data manipulation
    and analysis.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`datetime`模块提供了操作日期和时间的工具，`pytz`库提供了跨平台的时区计算，这些对导入是必需的，而`pandas`和`numpy`库用于数据处理和分析。'
- en: Note
  id: totrans-39
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: You mainly use `numpy` for most calculations and data manipulation.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 你主要使用`numpy`进行大多数计算和数据处理。
- en: The MetaTrader 5 library imports the functions relating to the software’s module
    and is the key library that will allow you to import the financial historical
    data.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: MetaTrader 5库导入与软件模块相关的函数，是允许你导入金融历史数据的关键库。
- en: Note that the three last lines of code contain the `as` statement. This is used
    to give a custom name to the library when you want to use it frequently and save
    writing space. In other words, Python recognizes the MetaTrader 5 library as mt5
    from now on.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，代码的最后三行包含`as`语句。这用于在你经常使用它并希望节省写作空间时，给库命名自定义名称。换句话说，从现在起，Python将认识MetaTrader
    5库为mt5。
- en: Note
  id: totrans-43
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: '*Modules* are files that contain functions and variables. A *package* is a
    collection of modules; it needs to have an *init.py* file. A library is simply
    a collection of packages.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '*模块*是包含函数和变量的文件。*包*是模块的集合；它需要一个*init.py*文件。库只是包的集合。'
- en: Executing the `import` statements means that Python now recognizes the functions
    inside them and will allow you to use them in future code if you decide to call
    them. You must run them every time you open a new session, which is why the `import`
    statements are usually found at the beginning of the code.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 执行`import`语句意味着Python现在识别其中的函数，并允许你在未来的代码中使用它们（如果你决定调用它们）。你必须在每次打开新会话时运行它们，这就是为什么`import`语句通常位于代码的开头。
- en: 'The next step is to create the universe of the time frames that you will be
    able to import. Even though I will be showing you how to analyze and back-test
    hourly data, you can define a wider universe, as shown in the following code snippet:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是创建你将能够导入的时间框架的宇宙。即使我将向你展示如何分析和回测每小时数据，你可以定义一个更广泛的宇宙，如下面的代码片段所示：
- en: '[PRE1]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'A *time frame* is the frequency with which you record the prices. With hourly
    data, you will record the last price printed every hour. This means that in a
    day, you can have up to 24 hourly prices. This allows you to see the intraday
    evolution of the price. However, the close price is just one of the things that
    you want to import. During a time period (whether hourly or daily), you will see
    the following:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '*时间框架*是你记录价格频率的频率。使用小时数据，你将每小时记录最后打印的价格。这意味着一天内，你可以有最多24个小时价格。这允许你看到价格的日内演变。然而，收盘价格只是你想要导入的事物之一。在一个时间段内（无论是每小时还是每日），你将看到以下内容：'
- en: The first price of the time period, which is called the *open price*.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 时间段的第一个价格，称为*开盘价格*。
- en: The highest price printed during the time period, which is called the *high
    price*.
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打印在时间段内的最高价格，称为*高价格*。
- en: The lowest price printed during the time period, which is called the *low price*.
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 打印在时间段内的最低价格，称为*低价格*。
- en: The last price seen before starting a new time period, which is referred to
    as the *close price*.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在开始新的时间段之前所看到的最后价格，被称为*收盘价格*。
- en: Altogether these are called the OHLC^([1](ch01.xhtml#idm46762873126720)) data,
    which are generally ordered as written.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 总体而言，这些被称为OHLC^([1](ch01.xhtml#idm46762873126720))数据，通常按照写入的顺序排列。
- en: 'The following code defines the current time, which is used so that the algorithm
    has a reference point when importing the data. Basically, you are creating a variable
    that stores the current time and date:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码定义了当前时间，这用于算法在导入数据时有一个参考点。基本上，你正在创建一个变量，用于存储当前的时间和日期：
- en: '[PRE2]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Let’s now proceed to defining the universe of the assets you want to back-test.
    I do a mix of four asset classes: currencies, cryptocurrencies, commodities, and
    equity indices:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们继续定义您要进行回测的资产范围。我涉及四种资产类别：货币、加密货币、大宗商品和股票指数：
- en: '*Currencies* (also known as *forex*, an abbreviation for foreign exchange market)
    form the biggest financial market in terms of daily volume. Currencies are quoted
    in pairs, meaning that you cannot just buy USD in absolute terms; you have to
    buy it using another currency. Therefore, the EURUSD pair refers to the price
    of 1 EUR in terms of USD. The back-testing universe comprises EURUSD, USDCHF,
    GBPUSD, and USDCAD.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*货币*（也称为*外汇*，是外汇市场的缩写）是按日交易量计算的最大金融市场。货币以货币对的形式报价，这意味着您不能仅仅用美元购买美元；您必须使用另一种货币购买。因此，EURUSD货币对指的是1欧元相当于多少美元。回测范围包括EURUSD、USDCHF、GBPUSD和USDCAD。'
- en: Note
  id: totrans-58
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: USD is an abbreviation for the United States dollar, EUR is an abbreviation
    for the euro currency, CHF is an abbreviation for the Swiss franc, GBP is an abbreviation
    for Great Britain’s pound, and CAD is an abbreviation for the Canadian dollar.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: USD是美元的缩写，EUR是欧元货币的缩写，CHF是瑞士法郎的缩写，GBP是英镑的缩写，CAD是加拿大元的缩写。
- en: '*Cryptocurrencies* (also known as *cryptos*) are a new, disruptive asset class
    characterized by severe volatility. The most well-known cryptocurrency is Bitcoin,
    followed by Ethereum. Note that both are expressed in terms of USD; this is why
    they are labeled as BTCUSD and ETHUSD.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*加密货币*（也称为*加密货币*）是一种新型、具有颠覆性的资产类别，其特点是严重的波动性。最知名的加密货币是比特币，其次是以太坊。请注意，两者都以美元计价；这就是为什么它们被标记为BTCUSD和ETHUSD的原因。'
- en: Note
  id: totrans-61
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Notice that Bitcoin (BTC) and Ethereum (ETH) are quoted versus USD. They are
    generally considered the most liquid cryptocurrency pairs.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，比特币（BTC）和以太坊（ETH）是相对于美元报价的。它们通常被认为是最流动的加密货币对。
- en: '*Commodities* are physical assets such as gold, silver, and copper. They are
    divided into many categories such as energy (crude oil, Brent oil, etc.) and industrial
    metals (copper, zinc, etc.). In the universe of assets, I stick to gold and silver.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*大宗商品*是金、银、铜等实物资产。它们被划分为许多类别，如能源（原油、布伦特原油等）和工业金属（铜、锌等）。在资产范围内，我只关注黄金和白银。'
- en: '*Equity indices* are weighted calculations of a select basket of a country’s
    stocks. They are used to analyze the overall stock market health of a nation.
    In this book, I cover the S&P 500, a proxy for US stocks, and the FTSE 100, a
    proxy for UK stocks:'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*股票指数*是对一个国家股票精选篮子的加权计算。它们用于分析一个国家整体股票市场的健康状况。在这本书中，我涵盖了标普500指数，作为美国股票的代理，以及富时100指数，作为英国股票的代理：'
- en: '[PRE3]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now that you have your time and asset variables ready, all you need is to create
    the structure of the importing algorithm. The `get_quotes()` function does this:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 现在您已经准备好了时间和资产变量，您所需的只是创建导入算法的结构。`get_quotes()`函数就是这样做的：
- en: '[PRE4]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Notice that in the `get_quotes()` function, you finally use the `pytz` and
    `pandas` libraries. The function starts by defining the Olson time zone, which
    you can set yourself. Here is a brief, nonexhaustive list of what you can enter
    depending on your time zone:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在`get_quotes()`函数中，您最终使用了`pytz`和`pandas`库。该函数首先通过定义奥尔森时区来开始，您可以自行设置。以下是一个简要的、不详尽的列表，根据您的时区可以输入的内容：
- en: '[PRE5]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Afterward, I define two variables called `time_from` and `time_to`:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，我定义了两个变量，分别称为`time_from`和`time_to`：
- en: The `time_from` variable contains the datetime referring to the beginning of
    the import date (e.g., 01-01-2020).
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变量`time_from`包含了指向导入日期开始的日期时间（例如，2020年01月01日）。
- en: The `time_to` variable contains the datetime referring to the end of the import
    date (e.g., 12-31-2020).
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 变量`time_to`包含了指向导入日期结束的日期时间（例如，2020年12月31日）。
- en: The next step is to create a variable that imports the financial data using
    the time periods you have specified. This is done through the `rates` variable
    using the `mt5.copy_rates_range()` function. Finally, using `pandas`, transform
    the data into a data frame.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是创建一个变量，使用您指定的时间段导入财务数据。这通过`rates`变量使用`mt5.copy_rates_range()`函数来完成。最后，使用`pandas`将数据转换为数据框。
- en: Note
  id: totrans-74
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Throughout the book you will be dealing with arrays and not data frames; however,
    the function `get_quotes()` first imports the values as a data frame due to compatibility,
    and then you will transform it into an array. At any rate, the main difference
    between a data frame and an array is the type of data you can keep inside and
    the structure of the axes.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在整本书中，您将处理数组而不是数据框；不过，`get_quotes()`函数首先将值导入为数据框以保持兼容性，然后将其转换为数组。无论如何，数据框和数组之间的主要区别在于可以保存的数据类型及轴的结构。
- en: 'The final function required for the importing process is the `mass_import()`
    function. It lets you choose the time frame using the variable and then uses the
    `get_quotes()` function to import the data and format it to an array. The following
    code snippet defines the `mass_import()` function:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 导入过程所需的最终函数是`mass_import()`函数。它允许您使用变量选择时间框架，然后使用`get_quotes()`函数导入数据并格式化为数组。以下代码段定义了`mass_import()`函数：
- en: '[PRE6]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `mass_import()` function automatically converts the data frame into an array,
    so you do not have to worry about conversion when using the automatic import.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`mass_import()`函数会自动将数据框转换为数组，因此在使用自动导入时不必担心转换问题。'
- en: Note
  id: totrans-79
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: The algorithm imports a number of historical data limited by MetaTrader 5\.
    Although that number is high, in time you may need to adjust the year argument
    higher in order to get the data. For instance, if you get an empty array using
    the `mass_import()` function, try putting a more recent year in the `get_quotes()`
    function (“2014” instead of “2013,” as shown in the preceding example).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 算法导入了由MetaTrader 5限制的大量历史数据。虽然该数量很大，但是随着时间的推移，您可能需要调整年份参数以获取数据。例如，如果使用`mass_import()`函数返回一个空数组，请尝试在`get_quotes()`函数中放入一个更新的年份（如前面示例中的“2014”而不是“2013”）。
- en: Even though there is a MAC version of MetaTrader 5, the Python library only
    works on Windows. It requires an emulator on a Mac. For Mac users, you may also
    try the manual import method shown later in the chapter.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管MetaTrader 5有MAC版本，但Python库仅适用于Windows。在Mac上需要模拟器。对于Mac用户，您也可以尝试本章后面介绍的手动导入方法。
- en: Putting It All Together
  id: totrans-82
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 把一切放在一起
- en: 'Let’s now see a full example of data import. Remember that the full importing
    code can be found in the GitHub repository of the book. Normally I am dealing
    only with hourly data in the book because traders use it heavily, which creates
    interesting signals; however, let’s try applying a couple of examples of importing
    after having defined the functions seen in this chapter:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看一个完整的数据导入示例。请记住，完整的导入代码可以在本书的GitHub仓库中找到。通常，本书中只处理每小时数据，因为交易者大量使用它，这会产生有趣的信号；不过，让我们尝试在定义了本章中所见函数之后应用几个导入示例：
- en: 'To import the daily ETHUSD data, type the following code:'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要导入每日ETHUSD数据，请输入以下代码：
- en: '[PRE7]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'To import the hourly GBPUSD data, type the following code:'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要导入每小时GBPUSD数据，请输入以下代码：
- en: '[PRE8]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: There are many ways to import data into Python; some are automatic, and some
    are manual. You have just seen the first way of using code to communicate with
    a charting platform and to download the data. The manual way is to have an Excel
    file with OHLC data that you have downloaded from a third party. In this case,
    you can use the `pandas` library to import it and transform it into an array.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多方法可以将数据导入Python；一些是自动的，一些是手动的。您刚刚看到了使用代码与图表平台通信并下载数据的第一种方式。手动方式是使用从第三方下载的包含OHLC数据的Excel文件。在这种情况下，您可以使用`pandas`库将其导入并转换为数组。
- en: Suppose that the Excel filename is *my_data* and the file is stored on your
    desktop. You have to make sure that the SPYDER directory is in the same place
    as the file. In layperson’s terms, SPYDER must search the desktop for the Excel
    file. To choose the right directory, you must click the folder button next to
    the arrow, as shown in [Figure 1-4](#figure1-4).
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 假设Excel文件名为*my_data*，并且文件存储在您的桌面上。您必须确保SPYDER目录与文件存放在同一位置。用通俗的话说，SPYDER必须在桌面上搜索Excel文件。要选择正确的目录，您必须单击箭头旁边的文件夹按钮，如[图 1-4](#figure1-4)所示。
- en: '![](assets/mfpr_0104.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/mfpr_0104.png)'
- en: Figure 1-4\. Directory tab
  id: totrans-91
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 1-4\. 目录选项卡
- en: You should get a separate window where you can choose the desktop location and
    then validate the choice. Having done this, the tab should look like [Figure 1-5](#figure1-5).
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 应该打开一个单独的窗口，您可以在其中选择桌面位置，然后验证选择。完成这些步骤后，选项卡应该看起来像[图 1-5](#figure1-5)。
- en: '![](assets/mfpr_0105.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](assets/mfpr_0105.png)'
- en: Figure 1-5\. Directory tab
  id: totrans-94
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 1-5\. 目录选项卡
- en: 'You must use the `read_excel()` function to get the values inside the Excel
    file. Follow this syntax:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 你必须使用`read_excel()`函数来获取Excel文件中的值。按照以下语法操作：
- en: '[PRE9]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Right about now, you have a data frame called `my_data` with four different
    columns representing open, high, low, and close prices. You generally have to
    enter the library’s name before using a function that belongs to it; this is why
    `read_excel()` is preceded by `pd`.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 此时，你有一个名为`my_data`的数据框，其中有四列，表示开盘价、最高价、最低价和收盘价。通常，在使用属于某个库的函数之前，你必须输入该库的名称；这就是为什么`read_excel()`之前要加上`pd`的原因。
- en: Note
  id: totrans-98
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: Remember that `pd` is the shortcut used to refer to `pandas`. In parallel, `np`
    is the shortcut used to refer to `numpy`.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，`pd`是用来引用`pandas`的快捷方式。同时，`np`是用来引用`numpy`的快捷方式。
- en: The following syntax shows how to convert structured elements from a data frame
    to an array to facilitate manipulation. The array library I use is called `numpy`,
    which is the main library used in this book.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的语法显示了如何将数据框中的结构化元素转换为数组，以便于操作。我使用的数组库称为`numpy`，这是本书中主要使用的库。
- en: Note
  id: totrans-101
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 注意
- en: I recommend using the automatic way for Windows users and the manual way for
    macOS users due to compatibility issues.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议Windows用户使用自动方式，而macOS用户使用手动方式，因为兼容性问题。
- en: 'In your opinion, what should you do before using the functions of `numpy`?
    If your answer is import the library, then you are correct. The following code
    snippet imports `numpy` and converts `my_data` into an array so that it is ready
    for analysis:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在你使用`numpy`函数之前，你认为应该做什么？如果你的答案是导入库，那么你是正确的。以下代码片段导入`numpy`并将`my_data`转换为数组，以便进行分析：
- en: '[PRE10]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Alternatively, you can do all of this in one line by just adding `.values` to
    `pd.​read_excel('my_data.xlsx')`, thus becoming `pd.read_excel('my_data.xlsx').​values`
    and resulting in an array instead of a data frame.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，你可以通过在`pd.​read_excel('my_data.xlsx')`后添加`.values`，从而变为`pd.read_excel('my_data.xlsx').​values`，得到一个数组而不是数据框，这样就可以一行搞定所有操作。
- en: Summary
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'The research and trading framework is composed of four different algorithms
    that are discussed in detail in the next chapter. They can be summarized as follows:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 研究和交易框架由四种不同的算法组成，这些算法将在下一章节详细讨论。它们可以总结如下：
- en: Import algorithm
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 导入算法
- en: This is the algorithm shown in this chapter that deals with importing and preparing
    the historical OHLC data to be analyzed or back-tested. I believe that at this
    stage you can easily do this automatically and manually.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这是本章展示的算法，处理导入和准备历史OHLC数据以供分析或回测。我相信在这个阶段，你可以轻松地自动和手动完成这一操作。
- en: Signal algorithm
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 信号算法
- en: This algorithm, which you will see in [Chapter 2](ch02.xhtml#chapter2), will
    be responsible for generating the buy and sell orders. In essence, it is the set
    of conditions that gives the green light that a pattern has appeared and a trade
    can take place.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这个算法，你将在[第2章](ch02.xhtml#chapter2)中看到，将负责生成买入和卖出订单。本质上，它是一组条件，给出了绿灯，表明出现了某种模式，可以进行交易。
- en: Charting algorithm
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 绘图算法
- en: This is the simplest algorithm. You will use it to chart the signals on the
    price chart. Its purpose is to visually analyze the buy and sell signals on the
    chart. You will also learn about this in [Chapter 2](ch02.xhtml#chapter2).
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这是最简单的算法。你将用它来绘制价格图上的信号。其目的是在图表上视觉分析买入和卖出信号。你将在[第2章](ch02.xhtml#chapter2)中也学习到这一点。
- en: Performance algorithm
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 性能算法
- en: This algorithm is used to calculate and analyze the results acquired from the
    signal algorithm. Basically, it calculates performance metrics on the signals
    generated following the patterns’ conditions. You will also learn about this in [Chapter 2](ch02.xhtml#chapter2).
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这个算法用于计算和分析从信号算法获取的结果。基本上，它计算了在符合条件的模式生成的信号上的性能指标。你也将在[第2章](ch02.xhtml#chapter2)中学习到这一点。
- en: It is important that you know how to automatically import and prepare financial
    data that you will later analyze. Python offers strong and rapid tools to do so;
    hence, make sure you master this technique so that you supersize your research
    capabilities.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 你必须知道如何自动导入和准备以后要分析的金融数据。Python提供了强大而快速的工具来做到这一点；因此，请确保掌握这项技术，以便扩展你的研究能力。
- en: ^([1](ch01.xhtml#idm46762873126720-marker)) An abbreviation for *open*, *high*,
    *low*, *and* *close*.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch01.xhtml#idm46762873126720-marker)) *开盘*、*最高*、*最低*和*收盘*的缩写。

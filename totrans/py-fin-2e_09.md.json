["```py\nIn [1]: from pylab import plt, mpl\n        plt.style.use('seaborn')\n        mpl.rcParams['font.family'] = 'serif'\n        %matplotlib inline\n```", "```py\nIn [2]: import pickle  ![1](images/1.png)\n        import numpy as np\n        from random import gauss  ![2](images/2.png)\n\nIn [3]: a = [gauss(1.5, 2) for i in range(1000000)]  ![3](images/3.png)\n\nIn [4]: path = '/Users/yves/Documents/Temp/data/'  ![4](images/4.png)\n\nIn [5]: pkl_file = open(path + 'data.pkl', 'wb')  ![5](images/5.png)\n```", "```py\nIn [6]: %time pickle.dump(a, pkl_file)  ![1](images/1.png)\n\n        CPU times: user 23.4 ms, sys: 10.1 ms, total: 33.5 ms\n        Wall time: 31.9 ms\n\nIn [7]: pkl_file.close()  ![2](images/2.png)\n\nIn [8]: ll $path*  ![3](images/3.png)\n\n        -rw-r--r--  1 yves  staff    9002006 Jan 18 10:05 /Users/yves/Documents/Temp/data/data.pkl\n        -rw-r--r--  1 yves  staff  163328824 Jan 18 10:05 /Users/yves/Documents/Temp/data/tstb.h5\n\nIn [9]: pkl_file = open(path + 'data.pkl', 'rb')  ![4](images/4.png)\n\nIn [10]: %time b = pickle.load(pkl_file)  ![5](images/5.png)\n\n         CPU times: user 28.7 ms, sys: 15.2 ms, total: 43.9 ms\n         Wall time: 41.9 ms\n\nIn [11]: a[:3]\nOut[11]: [3.0804166128701134, -0.6586387748854099, 3.3266248354210206]\n\nIn [12]: b[:3]\nOut[12]: [3.0804166128701134, -0.6586387748854099, 3.3266248354210206]\n\nIn [13]: np.allclose(np.array(a), np.array(b))  ![6](images/6.png)\nOut[13]: True\n```", "```py\nIn [14]: pkl_file = open(path + 'data.pkl', 'wb')\n\nIn [15]: %time pickle.dump(np.array(a), pkl_file)  ![1](images/1.png)\n\n         CPU times: user 26.6 ms, sys: 11.5 ms, total: 38.1 ms\n         Wall time: 36.3 ms\n\nIn [16]: %time pickle.dump(np.array(a) ** 2, pkl_file)  ![2](images/2.png)\n\n         CPU times: user 35.3 ms, sys: 12.7 ms, total: 48 ms\n         Wall time: 46.8 ms\n\nIn [17]: pkl_file.close()\n\nIn [18]: ll $path*  ![3](images/3.png)\n\n         -rw-r--r--  1 yves  staff   16000322 Jan 18 10:05 /Users/yves/Documents/Temp/data/data.pkl\n         -rw-r--r--  1 yves  staff  163328824 Jan 18 10:05 /Users/yves/Documents/Temp/data/tstb.h5\n```", "```py\nIn [19]: pkl_file = open(path + 'data.pkl', 'rb')\n\nIn [20]: x = pickle.load(pkl_file)  ![1](images/1.png)\n         x[:4]\nOut[20]: array([ 3.08041661, -0.65863877,  3.32662484,  0.77225328])\n\nIn [21]: y = pickle.load(pkl_file)  ![2](images/2.png)\n         y[:4]\nOut[21]: array([  9.48896651,   0.43380504,  11.0664328 ,   0.59637513])\n\nIn [22]: pkl_file.close()\n```", "```py\nIn [23]: pkl_file = open(path + 'data.pkl', 'wb')\n         pickle.dump({'x': x, 'y': y}, pkl_file)  ![1](images/1.png)\n         pkl_file.close()\n\nIn [24]: pkl_file = open(path + 'data.pkl', 'rb')\n         data = pickle.load(pkl_file)  ![2](images/2.png)\n         pkl_file.close()\n         for key in data.keys():\n             print(key, data[key][:4])\n\n         x [ 3.08041661 -0.65863877  3.32662484  0.77225328]\n         y [  9.48896651   0.43380504  11.0664328    0.59637513]\n\nIn [25]: !rm -f $path*\n```", "```py\nIn [26]: import pandas as pd\n\nIn [27]: rows = 5000  ![1](images/1.png)\n         a = np.random.standard_normal((rows, 5)).round(4)  ![2](images/2.png)\n\nIn [28]: a  ![2](images/2.png)\nOut[28]: array([[-0.9627,  0.1326, -2.012 , -0.299 , -1.4554],\n                [ 0.8918,  0.8904, -0.3396, -2.3485,  2.0913],\n                [-0.1899, -0.9574,  1.0258,  0.6206, -2.4693],\n                ...,\n                [ 1.4688, -1.268 , -0.4778,  1.4315, -1.4689],\n                [ 1.1162,  0.152 , -0.9363, -0.7869, -0.1147],\n                [-0.699 ,  0.3206,  0.3659, -1.0282, -0.4151]])\n\nIn [29]: t = pd.date_range(start='2019/1/1', periods=rows, freq='H')  ![3](images/3.png)\n\nIn [30]: t  ![3](images/3.png)\nOut[30]: DatetimeIndex(['2019-01-01 00:00:00', '2019-01-01 01:00:00',\n                        '2019-01-01 02:00:00', '2019-01-01 03:00:00',\n                        '2019-01-01 04:00:00', '2019-01-01 05:00:00',\n                        '2019-01-01 06:00:00', '2019-01-01 07:00:00',\n                        '2019-01-01 08:00:00', '2019-01-01 09:00:00',\n                        ...\n                        '2019-07-27 22:00:00', '2019-07-27 23:00:00',\n                        '2019-07-28 00:00:00', '2019-07-28 01:00:00',\n                        '2019-07-28 02:00:00', '2019-07-28 03:00:00',\n                        '2019-07-28 04:00:00', '2019-07-28 05:00:00',\n                        '2019-07-28 06:00:00', '2019-07-28 07:00:00'],\n                       dtype='datetime64[ns]', length=5000, freq='H')\n\nIn [31]: csv_file = open(path + 'data.csv', 'w')  ![4](images/4.png)\n\nIn [32]: header = 'date,no1,no2,no3,no4,no5\\n'  ![5](images/5.png)\n\nIn [33]: csv_file.write(header)  ![5](images/5.png)\nOut[33]: 25\n\nIn [34]: for t_, (no1, no2, no3, no4, no5) in zip(t, a):  ![6](images/6.png)\n             s = '{},{},{},{},{},{}\\n'.format(t_, no1, no2, no3, no4, no5)  ![7](images/7.png)\n             csv_file.write(s)  ![8](images/8.png)\n\nIn [35]: csv_file.close()\n\nIn [36]: ll $path*\n\n         -rw-r--r--  1 yves  staff  284621 Jan 18 10:05 /Users/yves/Documents/Temp/data/data.csv\n```", "```py\nIn [37]: csv_file = open(path + 'data.csv', 'r')  ![1](images/1.png)\n\nIn [38]: for i in range(5):\n             print(csv_file.readline(), end='')  ![2](images/2.png)\n\n         date,no1,no2,no3,no4,no5\n         2019-01-01 00:00:00,-0.9627,0.1326,-2.012,-0.299,-1.4554\n         2019-01-01 01:00:00,0.8918,0.8904,-0.3396,-2.3485,2.0913\n         2019-01-01 02:00:00,-0.1899,-0.9574,1.0258,0.6206,-2.4693\n         2019-01-01 03:00:00,-0.0217,-0.7168,1.7875,1.6226,-0.4857\n\nIn [39]: csv_file.close()\n\nIn [40]: csv_file = open(path + 'data.csv', 'r')  ![1](images/1.png)\n\nIn [41]: content = csv_file.readlines()  ![3](images/3.png)\n\nIn [42]: content[:5]  ![4](images/4.png)\nOut[42]: ['date,no1,no2,no3,no4,no5\\n',\n          '2019-01-01 00:00:00,-0.9627,0.1326,-2.012,-0.299,-1.4554\\n',\n          '2019-01-01 01:00:00,0.8918,0.8904,-0.3396,-2.3485,2.0913\\n',\n          '2019-01-01 02:00:00,-0.1899,-0.9574,1.0258,0.6206,-2.4693\\n',\n          '2019-01-01 03:00:00,-0.0217,-0.7168,1.7875,1.6226,-0.4857\\n']\n\nIn [43]: csv_file.close()\n```", "```py\nIn [44]: import csv\n\nIn [45]: with open(path + 'data.csv', 'r') as f:\n             csv_reader = csv.reader(f)  ![1](images/1.png)\n             lines = [line for line in csv_reader]\n\nIn [46]: lines[:5]  ![1](images/1.png)\nOut[46]: [['date', 'no1', 'no2', 'no3', 'no4', 'no5'],\n          ['2019-01-01 00:00:00', '-0.9627', '0.1326', '-2.012', '-0.299', '-1.4554'],\n          ['2019-01-01 01:00:00', '0.8918', '0.8904', '-0.3396', '-2.3485', '2.0913'],\n          ['2019-01-01 02:00:00', '-0.1899', '-0.9574', '1.0258', '0.6206', '-2.4693'],\n          ['2019-01-01 03:00:00', '-0.0217', '-0.7168', '1.7875', '1.6226', '-0.4857']]\n\nIn [47]: with open(path + 'data.csv', 'r') as f:\n             csv_reader = csv.DictReader(f)  ![2](images/2.png)\n             lines = [line for line in csv_reader]\n\nIn [48]: lines[:3]  ![2](images/2.png)\nOut[48]: [OrderedDict([('date', '2019-01-01 00:00:00'),\n                       ('no1', '-0.9627'),\n                       ('no2', '0.1326'),\n                       ('no3', '-2.012'),\n                       ('no4', '-0.299'),\n                       ('no5', '-1.4554')]),\n          OrderedDict([('date', '2019-01-01 01:00:00'),\n                       ('no1', '0.8918'),\n                       ('no2', '0.8904'),\n                       ('no3', '-0.3396'),\n                       ('no4', '-2.3485'),\n                       ('no5', '2.0913')]),\n          OrderedDict([('date', '2019-01-01 02:00:00'),\n                       ('no1', '-0.1899'),\n                       ('no2', '-0.9574'),\n                       ('no3', '1.0258'),\n                       ('no4', '0.6206'),\n                       ('no5', '-2.4693')])]\n\nIn [49]: !rm -f $path*\n```", "```py\nIn [50]: import sqlite3 as sq3\n\nIn [51]: con = sq3.connect(path + 'numbs.db')  ![1](images/1.png)\n\nIn [52]: query = 'CREATE TABLE numbs (Date date, No1 real, No2 real)'  ![2](images/2.png)\n\nIn [53]: con.execute(query)  ![3](images/3.png)\nOut[53]: <sqlite3.Cursor at 0x1054efb20>\n\nIn [54]: con.commit()  ![4](images/4.png)\n\nIn [55]: q = con.execute  ![5](images/5.png)\n\nIn [56]: q('SELECT * FROM sqlite_master').fetchall()  ![6](images/6.png)\nOut[56]: [('table',\n           'numbs',\n           'numbs',\n           2,\n           'CREATE TABLE numbs (Date date, No1 real, No2 real)')]\n```", "```py\nIn [57]: import datetime\n\nIn [58]: now = datetime.datetime.now()\n         q('INSERT INTO numbs VALUES(?, ?, ?)', (now, 0.12, 7.3))  ![1](images/1.png)\nOut[58]: <sqlite3.Cursor at 0x1054efc70>\n\nIn [59]: np.random.seed(100)\n\nIn [60]: data = np.random.standard_normal((10000, 2)).round(4)  ![2](images/2.png)\n\nIn [61]: %%time\n         for row in data:  ![3](images/3.png)\n             now = datetime.datetime.now()\n             q('INSERT INTO numbs VALUES(?, ?, ?)', (now, row[0], row[1]))\n         con.commit()\n\n         CPU times: user 111 ms, sys: 3.22 ms, total: 115 ms\n         Wall time: 116 ms\n\nIn [62]: q('SELECT * FROM numbs').fetchmany(4)  ![4](images/4.png)\nOut[62]: [('2018-01-18 10:05:24.043286', 0.12, 7.3),\n          ('2018-01-18 10:05:24.071921', -1.7498, 0.3427),\n          ('2018-01-18 10:05:24.072110', 1.153, -0.2524),\n          ('2018-01-18 10:05:24.072160', 0.9813, 0.5142)]\n\nIn [63]: q('SELECT * FROM numbs WHERE no1 > 0.5').fetchmany(4)  ![5](images/5.png)\nOut[63]: [('2018-01-18 10:05:24.072110', 1.153, -0.2524),\n          ('2018-01-18 10:05:24.072160', 0.9813, 0.5142),\n          ('2018-01-18 10:05:24.072257', 0.6727, -0.1044),\n          ('2018-01-18 10:05:24.072319', 1.619, 1.5416)]\n\nIn [64]: pointer = q('SELECT * FROM numbs')  ![6](images/6.png)\n\nIn [65]: for i in range(3):\n             print(pointer.fetchone())  ![7](images/7.png)\n\n         ('2018-01-18 10:05:24.043286', 0.12, 7.3)\n         ('2018-01-18 10:05:24.071921', -1.7498, 0.3427)\n         ('2018-01-18 10:05:24.072110', 1.153, -0.2524)\n\nIn [66]: rows = pointer.fetchall()  ![8](images/8.png)\n         rows[:3]\nOut[66]: [('2018-01-18 10:05:24.072160', 0.9813, 0.5142),\n          ('2018-01-18 10:05:24.072184', 0.2212, -1.07),\n          ('2018-01-18 10:05:24.072202', -0.1895, 0.255)]\n```", "```py\nIn [67]: q('DROP TABLE IF EXISTS numbs')  ![1](images/1.png)\nOut[67]: <sqlite3.Cursor at 0x1054eff80>\n\nIn [68]: q('SELECT * FROM sqlite_master').fetchall()  ![2](images/2.png)\nOut[68]: []\n\nIn [69]: con.close()  ![3](images/3.png)\n\nIn [70]: !rm -f $path*  ![4](images/4.png)\n```", "```py\nIn [71]: dtimes = np.arange('2019-01-01 10:00:00', '2025-12-31 22:00:00',\n                           dtype='datetime64[m]')  ![1](images/1.png)\n\nIn [72]: len(dtimes)\nOut[72]: 3681360\n\nIn [73]: dty = np.dtype([('Date', 'datetime64[m]'),\n                         ('No1', 'f'), ('No2', 'f')])  ![2](images/2.png)\n\nIn [74]: data = np.zeros(len(dtimes), dtype=dty)  ![3](images/3.png)\n\nIn [75]: data['Date'] = dtimes  ![4](images/4.png)\n\nIn [76]: a = np.random.standard_normal((len(dtimes), 2)).round(4)  ![5](images/5.png)\n\nIn [77]: data['No1'] = a[:, 0]  ![6](images/6.png)\n         data['No2'] = a[:, 1]  ![6](images/6.png)\n\nIn [78]: data.nbytes  ![7](images/7.png)\nOut[78]: 58901760\n```", "```py\nIn [79]: %time np.save(path + 'array', data)  ![1](images/1.png)\n\n         CPU times: user 4.06 ms, sys: 99.3 ms, total: 103 ms\n         Wall time: 107 ms\n\nIn [80]: ll $path*  ![2](images/2.png)\n\n         -rw-r--r--  1 yves  staff  58901888 Jan 18 10:05 /Users/yves/Documents/Temp/data/array.npy\n\nIn [81]: %time np.load(path + 'array.npy')  ![3](images/3.png)\n\n         CPU times: user 1.81 ms, sys: 47.4 ms, total: 49.2 ms\n         Wall time: 46.7 ms\n\nOut[81]: array([('2019-01-01T10:00',  1.51310003,  0.69730002),\n                ('2019-01-01T10:01', -1.722     , -0.4815    ),\n                ('2019-01-01T10:02',  0.8251    ,  0.3019    ), ...,\n                ('2025-12-31T21:57',  1.37199998,  0.64459997),\n                ('2025-12-31T21:58', -1.25419998,  0.1612    ),\n                ('2025-12-31T21:59', -1.1997    , -1.097     )],\n               dtype=[('Date', '<M8[m]'), ('No1', '<f4'), ('No2', '<f4')])\n\nIn [82]: %time data = np.random.standard_normal((10000, 6000)).round(4)  ![4](images/4.png)\n\n         CPU times: user 2.81 s, sys: 354 ms, total: 3.17 s\n         Wall time: 3.23 s\n\nIn [83]: data.nbytes  ![4](images/4.png)\nOut[83]: 480000000\n\nIn [84]: %time np.save(path + 'array', data)  ![4](images/4.png)\n\n         CPU times: user 23.9 ms, sys: 878 ms, total: 902 ms\n         Wall time: 964 ms\n\nIn [85]: ll $path*  ![4](images/4.png)\n\n         -rw-r--r--  1 yves  staff  480000080 Jan 18 10:05 /Users/yves/Documents/Temp/data/array.npy\n\nIn [86]: %time np.load(path + 'array.npy')  ![4](images/4.png)\n\n         CPU times: user 1.95 ms, sys: 441 ms, total: 443 ms\n         Wall time: 441 ms\n\nOut[86]: array([[ 0.3066,  0.5951,  0.5826, ...,  1.6773,  0.4294, -0.2216],\n                [ 0.8769,  0.7292, -0.9557, ...,  0.5084,  0.9635, -0.4443],\n                [-1.2202, -2.5509, -0.0575, ..., -1.6128,  0.4662, -1.3645],\n                ...,\n                [-0.5598,  0.2393, -2.3716, ...,  1.7669,  0.2462,  1.035 ],\n                [ 0.273 ,  0.8216, -0.0749, ..., -0.0552, -0.8396,  0.3077],\n                [-0.6305,  0.8331,  1.3702, ...,  0.3493,  0.1981,  0.2037]])\n\nIn [87]: !rm -f $path*\n```", "```py\nIn [88]: data = np.random.standard_normal((1000000, 5)).round(4)\n\nIn [89]: data[:3]\nOut[89]: array([[ 0.4918,  1.3707,  0.137 ,  0.3981, -1.0059],\n                [ 0.4516,  1.4445,  0.0555, -0.0397,  0.44  ],\n                [ 0.1629, -0.8473, -0.8223, -0.4621, -0.5137]])\n```", "```py\nIn [90]: filename = path + 'numbers'\n\nIn [91]: con = sq3.Connection(filename + '.db')\n\nIn [92]: query = 'CREATE TABLE numbers (No1 real, No2 real,\\\n No3 real, No4 real, No5 real)'  ![1](images/1.png)\n\nIn [93]: q = con.execute\n         qm = con.executemany\n\nIn [94]: q(query)\nOut[94]: <sqlite3.Cursor at 0x1054e2260>\n```", "```py\nIn [95]: %%time\n         qm('INSERT INTO numbers VALUES (?, ?, ?, ?, ?)', data)  ![1](images/1.png)\n         con.commit()\n\n         CPU times: user 7.16 s, sys: 147 ms, total: 7.3 s\n         Wall time: 7.39 s\n\nIn [96]: ll $path*\n\n         -rw-r--r--  1 yves  staff  52633600 Jan 18 10:05 /Users/yves/Documents/Temp/data/numbers.db\n\nIn [97]: %%time\n         temp = q('SELECT * FROM numbers').fetchall()  ![2](images/2.png)\n         print(temp[:3])\n\n         [(0.4918, 1.3707, 0.137, 0.3981, -1.0059), (0.4516, 1.4445, 0.0555, -0.0397, 0.44), (0.1629, -0.8473, -0.8223, -0.4621, -0.5137)]\n         CPU times: user 1.86 s, sys: 138 ms, total: 2 s\n         Wall time: 2.07 s\n\nIn [98]: %%time\n         query = 'SELECT * FROM numbers WHERE No1 > 0 AND No2 < 0'\n         res = np.array(q(query).fetchall()).round(3)  ![3](images/3.png)\n\n         CPU times: user 770 ms, sys: 73.9 ms, total: 844 ms\n         Wall time: 854 ms\n\nIn [99]: res = res[::100]  ![4](images/4.png)\n         plt.figure(figsize=(10, 6))\n         plt.plot(res[:, 0], res[:, 1], 'ro')  ![4](images/4.png)\n         plt.savefig('../../images/ch09/io_01.png');\n```", "```py\nIn [100]: %time data = pd.read_sql('SELECT * FROM numbers', con)  ![1](images/1.png)\n\n          CPU times: user 2.11 s, sys: 175 ms, total: 2.29 s\n          Wall time: 2.33 s\n\nIn [101]: data.head()\nOut[101]:       No1     No2     No3     No4     No5\n          0  0.4918  1.3707  0.1370  0.3981 -1.0059\n          1  0.4516  1.4445  0.0555 -0.0397  0.4400\n          2  0.1629 -0.8473 -0.8223 -0.4621 -0.5137\n          3  1.3064  0.9125  0.5142 -0.7868 -0.3398\n          4 -0.1148 -1.5215 -0.7045 -1.0042 -0.0600\n```", "```py\nIn [102]: %time data[(data['No1'] > 0) & (data['No2'] < 0)].head()  ![1](images/1.png)\n\n          CPU times: user 19.4 ms, sys: 9.56 ms, total: 28.9 ms\n          Wall time: 27.5 ms\n\nOut[102]:        No1     No2     No3     No4     No5\n          2   0.1629 -0.8473 -0.8223 -0.4621 -0.5137\n          5   0.1893 -0.0207 -0.2104  0.9419  0.2551\n          8   1.4784 -0.3333 -0.7050  0.3586 -0.3937\n          10  0.8092 -0.9899  1.0364 -1.0453  0.0579\n          11  0.9065 -0.7757 -0.9267  0.7797  0.0863\n\nIn [103]: %%time\n          res = data[['No1', 'No2']][((data['No1'] > 0.5) | (data['No1'] < -0.5))\n                               & ((data['No2'] < -1) | (data['No2'] > 1))]  ![2](images/2.png)\n\n          CPU times: user 20.6 ms, sys: 9.18 ms, total: 29.8 ms\n          Wall time: 28 ms\n\nIn [104]: plt.figure(figsize=(10, 6))\n          plt.plot(res['No1'], res['No2'], 'ro');\n          plt.savefig('../../images/ch09/io_02.png');\n```", "```py\nIn [105]: h5s = pd.HDFStore(filename + '.h5s', 'w')  ![1](images/1.png)\n\nIn [106]: %time h5s['data'] = data  ![2](images/2.png)\n\n          CPU times: user 33 ms, sys: 43.3 ms, total: 76.3 ms\n          Wall time: 85.8 ms\n\nIn [107]: h5s  ![3](images/3.png)\nOut[107]: <class 'pandas.io.pytables.HDFStore'>\n          File path: /Users/yves/Documents/Temp/data/numbers.h5s\n\nIn [108]: h5s.close()  ![4](images/4.png)\n```", "```py\nIn [109]: %%time\n          h5s = pd.HDFStore(filename + '.h5s', 'r')  ![1](images/1.png)\n          data_ = h5s['data']  ![2](images/2.png)\n          h5s.close()  ![3](images/3.png)\n\n          CPU times: user 8.24 ms, sys: 21.2 ms, total: 29.4 ms\n          Wall time: 28.5 ms\n\nIn [110]: data_ is data  ![4](images/4.png)\nOut[110]: False\n\nIn [111]: (data_ == data).all()  ![5](images/5.png)\nOut[111]: No1    True\n          No2    True\n          No3    True\n          No4    True\n          No5    True\n          dtype: bool\n\nIn [112]: np.allclose(data_, data)  ![5](images/5.png)\nOut[112]: True\n\nIn [113]: ll $path*  ![6](images/6.png)\n\n          -rw-r--r--  1 yves  staff  52633600 Jan 18 10:05 /Users/yves/Documents/Temp/data/numbers.db\n          -rw-r--r--  1 yves  staff  48007192 Jan 18 10:05 /Users/yves/Documents/Temp/data/numbers.h5s\n```", "```py\nIn [114]: %time data.to_csv(filename + '.csv')  ![1](images/1.png)\n\n          CPU times: user 6.82 s, sys: 277 ms, total: 7.1 s\n          Wall time: 7.54 s\n\nIn [115]: ll $path\n\n          total 282184\n          -rw-r--r--  1 yves  staff  43834157 Jan 18 10:05 numbers.csv\n          -rw-r--r--  1 yves  staff  52633600 Jan 18 10:05 numbers.db\n          -rw-r--r--  1 yves  staff  48007192 Jan 18 10:05 numbers.h5s\n\nIn [116]: %time df = pd.read_csv(filename + '.csv')  ![2](images/2.png)\n\n          CPU times: user 1.4 s, sys: 124 ms, total: 1.53 s\n          Wall time: 1.58 s\n\nIn [117]: df[['No1', 'No2', 'No3', 'No4']].hist(bins=20, figsize=(10, 6));\n          plt.savefig('../../images/ch09/io_03.png');\n```", "```py\nIn [118]: %time data[:100000].to_excel(filename + '.xlsx')  ![1](images/1.png)\n\n          CPU times: user 23.2 s, sys: 498 ms, total: 23.7 s\n          Wall time: 23.9 s\n\nIn [119]: %time df = pd.read_excel(filename + '.xlsx', 'Sheet1')  ![2](images/2.png)\n\n          CPU times: user 5.47 s, sys: 74.7 ms, total: 5.54 s\n          Wall time: 5.57 s\n\nIn [120]: df.cumsum().plot(figsize=(10, 6));\n          plt.savefig('../../images/ch09/io_04.png');\nIn [121]: ll $path*\n\n          -rw-r--r--  1 yves  staff  43834157 Jan 18 10:05 /Users/yves/Documents/Temp/data/numbers.csv\n          -rw-r--r--  1 yves  staff  52633600 Jan 18 10:05 /Users/yves/Documents/Temp/data/numbers.db\n          -rw-r--r--  1 yves  staff  48007192 Jan 18 10:05 /Users/yves/Documents/Temp/data/numbers.h5s\n          -rw-r--r--  1 yves  staff   4032639 Jan 18 10:06 /Users/yves/Documents/Temp/data/numbers.xlsx\n\nIn [122]: rm -f $path*\n```", "```py\nIn [123]: import tables as tb  ![1](images/1.png)\n          import datetime as dt\n```", "```py\nIn [124]: filename = path + 'pytab.h5'\n\nIn [125]: h5 = tb.open_file(filename, 'w')  ![1](images/1.png)\n\nIn [126]: row_des = {\n              'Date': tb.StringCol(26, pos=1),  ![2](images/2.png)\n              'No1': tb.IntCol(pos=2),  ![3](images/3.png)\n              'No2': tb.IntCol(pos=3),  ![3](images/3.png)\n              'No3': tb.Float64Col(pos=4),  ![4](images/4.png)\n              'No4': tb.Float64Col(pos=5)  ![4](images/4.png)\n              }\n\nIn [127]: rows = 2000000\n\nIn [128]: filters = tb.Filters(complevel=0)  ![5](images/5.png)\n\nIn [129]: tab = h5.create_table('/', 'ints_floats',  ![6](images/6.png)\n                                row_des,  ![7](images/7.png)\n                                title='Integers and Floats',  ![8](images/8.png)\n                                expectedrows=rows,  ![9](images/9.png)\n                                filters=filters)  ![10](images/10.png)\n\nIn [130]: type(tab)\nOut[130]: tables.table.Table\n\nIn [131]: tab\nOut[131]: /ints_floats (Table(0,)) 'Integers and Floats'\n            description := {\n            \"Date\": StringCol(itemsize=26, shape=(), dflt=b'', pos=0),\n            \"No1\": Int32Col(shape=(), dflt=0, pos=1),\n            \"No2\": Int32Col(shape=(), dflt=0, pos=2),\n            \"No3\": Float64Col(shape=(), dflt=0.0, pos=3),\n            \"No4\": Float64Col(shape=(), dflt=0.0, pos=4)}\n            byteorder := 'little'\n            chunkshape := (2621,)\n```", "```py\nIn [132]: pointer = tab.row  ![1](images/1.png)\n\nIn [133]: ran_int = np.random.randint(0, 10000, size=(rows, 2))  ![2](images/2.png)\n\nIn [134]: ran_flo = np.random.standard_normal((rows, 2)).round(4)  ![3](images/3.png)\n\nIn [135]: %%time\n          for i in range(rows):\n              pointer['Date'] = dt.datetime.now()  ![4](images/4.png)\n              pointer['No1'] = ran_int[i, 0]  ![4](images/4.png)\n              pointer['No2'] = ran_int[i, 1]  ![4](images/4.png)\n              pointer['No3'] = ran_flo[i, 0]  ![4](images/4.png)\n              pointer['No4'] = ran_flo[i, 1]  ![4](images/4.png)\n              pointer.append()  ![5](images/5.png)\n          tab.flush()  ![6](images/6.png)\n\n          CPU times: user 8.36 s, sys: 136 ms, total: 8.49 s\n          Wall time: 8.92 s\n\nIn [136]: tab  ![7](images/7.png)\nOut[136]: /ints_floats (Table(2000000,)) 'Integers and Floats'\n            description := {\n            \"Date\": StringCol(itemsize=26, shape=(), dflt=b'', pos=0),\n            \"No1\": Int32Col(shape=(), dflt=0, pos=1),\n            \"No2\": Int32Col(shape=(), dflt=0, pos=2),\n            \"No3\": Float64Col(shape=(), dflt=0.0, pos=3),\n            \"No4\": Float64Col(shape=(), dflt=0.0, pos=4)}\n            byteorder := 'little'\n            chunkshape := (2621,)\n\nIn [137]: ll $path*\n\n          -rw-r--r--  1 yves  staff  100156248 Jan 18 10:06 /Users/yves/Documents/Temp/data/pytab.h5\n```", "```py\nIn [138]: dty = np.dtype([('Date', 'S26'), ('No1', '<i4'), ('No2', '<i4'),\n                                           ('No3', '<f8'), ('No4', '<f8')])  ![1](images/1.png)\n\nIn [139]: sarray = np.zeros(len(ran_int), dtype=dty)  ![2](images/2.png)\n\nIn [140]: sarray[:4]  ![3](images/3.png)\nOut[140]: array([(b'', 0, 0,  0.,  0.), (b'', 0, 0,  0.,  0.), (b'', 0, 0,  0.,  0.),\n                 (b'', 0, 0,  0.,  0.)],\n                dtype=[('Date', 'S26'), ('No1', '<i4'), ('No2', '<i4'), ('No3', '<f8'), ('No4', '<f8')])\n\nIn [141]: %%time\n          sarray['Date'] = dt.datetime.now()  ![4](images/4.png)\n          sarray['No1'] = ran_int[:, 0]  ![4](images/4.png)\n          sarray['No2'] = ran_int[:, 1]  ![4](images/4.png)\n          sarray['No3'] = ran_flo[:, 0]  ![4](images/4.png)\n          sarray['No4'] = ran_flo[:, 1]  ![4](images/4.png)\n\n          CPU times: user 82.7 ms, sys: 37.9 ms, total: 121 ms\n          Wall time: 133 ms\n\nIn [142]: %%time\n          h5.create_table('/', 'ints_floats_from_array', sarray,\n                                title='Integers and Floats',\n                                expectedrows=rows, filters=filters)  ![5](images/5.png)\n\n          CPU times: user 39 ms, sys: 61 ms, total: 100 ms\n          Wall time: 123 ms\n\nOut[142]: /ints_floats_from_array (Table(2000000,)) 'Integers and Floats'\n            description := {\n            \"Date\": StringCol(itemsize=26, shape=(), dflt=b'', pos=0),\n            \"No1\": Int32Col(shape=(), dflt=0, pos=1),\n            \"No2\": Int32Col(shape=(), dflt=0, pos=2),\n            \"No3\": Float64Col(shape=(), dflt=0.0, pos=3),\n            \"No4\": Float64Col(shape=(), dflt=0.0, pos=4)}\n            byteorder := 'little'\n            chunkshape := (2621,)\n```", "```py\nIn [143]: type(h5)\nOut[143]: tables.file.File\n\nIn [144]: h5  ![1](images/1.png)\nOut[144]: File(filename=/Users/yves/Documents/Temp/data/pytab.h5, title='', mode='w', root_uep='/', filters=Filters(complevel=0, shuffle=False, bitshuffle=False, fletcher32=False, least_significant_digit=None))\n          / (RootGroup) ''\n          /ints_floats (Table(2000000,)) 'Integers and Floats'\n            description := {\n            \"Date\": StringCol(itemsize=26, shape=(), dflt=b'', pos=0),\n            \"No1\": Int32Col(shape=(), dflt=0, pos=1),\n            \"No2\": Int32Col(shape=(), dflt=0, pos=2),\n            \"No3\": Float64Col(shape=(), dflt=0.0, pos=3),\n            \"No4\": Float64Col(shape=(), dflt=0.0, pos=4)}\n            byteorder := 'little'\n            chunkshape := (2621,)\n          /ints_floats_from_array (Table(2000000,)) 'Integers and Floats'\n            description := {\n            \"Date\": StringCol(itemsize=26, shape=(), dflt=b'', pos=0),\n            \"No1\": Int32Col(shape=(), dflt=0, pos=1),\n            \"No2\": Int32Col(shape=(), dflt=0, pos=2),\n            \"No3\": Float64Col(shape=(), dflt=0.0, pos=3),\n            \"No4\": Float64Col(shape=(), dflt=0.0, pos=4)}\n            byteorder := 'little'\n            chunkshape := (2621,)\n\nIn [145]: h5.remove_node('/', 'ints_floats_from_array')  ![2](images/2.png)\n```", "```py\nIn [146]: tab[:3]  ![1](images/1.png)\nOut[146]: array([(b'2018-01-18 10:06:28.516235', 8576, 5991, -0.0528,  0.2468),\n                 (b'2018-01-18 10:06:28.516332', 2990, 9310, -0.0261,  0.3932),\n                 (b'2018-01-18 10:06:28.516344', 4400, 4823,  0.9133,  0.2579)],\n                dtype=[('Date', 'S26'), ('No1', '<i4'), ('No2', '<i4'), ('No3', '<f8'), ('No4', '<f8')])\n\nIn [147]: tab[:4]['No4']  ![2](images/2.png)\nOut[147]: array([ 0.2468,  0.3932,  0.2579, -0.5582])\n\nIn [148]: %time np.sum(tab[:]['No3'])  ![3](images/3.png)\n\n          CPU times: user 64.5 ms, sys: 97.1 ms, total: 162 ms\n          Wall time: 165 ms\n\nOut[148]: 88.854299999999697\n\nIn [149]: %time np.sum(np.sqrt(tab[:]['No1']))  ![3](images/3.png)\n\n          CPU times: user 59.3 ms, sys: 69.4 ms, total: 129 ms\n          Wall time: 130 ms\n\nOut[149]: 133349920.36892509\n\nIn [150]: %%time\n          plt.figure(figsize=(10, 6))\n          plt.hist(tab[:]['No3'], bins=30);  ![4](images/4.png)\n          plt.savefig('../../images/ch09/io_05.png');\n\n          CPU times: user 244 ms, sys: 67.6 ms, total: 312 ms\n          Wall time: 340 ms\n```", "```py\nIn [151]: query = '((No3 < -0.5) | (No3 > 0.5)) & ((No4 < -1) | (No4 > 1))'  ![1](images/1.png)\n\nIn [152]: iterator = tab.where(query)  ![2](images/2.png)\n\nIn [153]: %time res = [(row['No3'], row['No4']) for row in iterator]  ![3](images/3.png)\n\n          CPU times: user 487 ms, sys: 128 ms, total: 615 ms\n          Wall time: 637 ms\n\nIn [154]: res = np.array(res)  ![4](images/4.png)\n          res[:3]\nOut[154]: array([[ 0.7694,  1.4866],\n                 [ 0.9201,  1.3346],\n                 [ 1.4701,  1.8776]])\n\nIn [155]: plt.figure(figsize=(10, 6))\n          plt.plot(res.T[0], res.T[1], 'ro');\n          plt.savefig('../../images/ch09/io_06.png');\n```", "```py\nIn [156]: %%time\n          values = tab[:]['No3']\n          print('Max %18.3f' % values.max())\n          print('Ave %18.3f' % values.mean())\n          print('Min %18.3f' % values.min())\n          print('Std %18.3f' % values.std())\n\n          Max              5.224\n          Ave              0.000\n          Min             -5.649\n          Std              1.000\n          CPU times: user 88.9 ms, sys: 70 ms, total: 159 ms\n          Wall time: 156 ms\n\nIn [157]: %%time\n          res = [(row['No1'], row['No2']) for row in\n                  tab.where('((No1 > 9800) | (No1 < 200)) \\\n & ((No2 > 4500) & (No2 < 5500))')]\n\n          CPU times: user 78.4 ms, sys: 38.9 ms, total: 117 ms\n          Wall time: 80.9 ms\n\nIn [158]: for r in res[:4]:\n              print(r)\n\n          (91, 4870)\n          (9803, 5026)\n          (9846, 4859)\n          (9823, 5069)\n\nIn [159]: %%time\n          res = [(row['No1'], row['No2']) for row in\n                  tab.where('(No1 == 1234) & (No2 > 9776)')]\n\n          CPU times: user 58.9 ms, sys: 40.1 ms, total: 99 ms\n          Wall time: 133 ms\n\nIn [160]: for r in res:\n              print(r)\n\n          (1234, 9841)\n          (1234, 9821)\n          (1234, 9867)\n          (1234, 9987)\n          (1234, 9849)\n          (1234, 9800)\n```", "```py\nIn [161]: filename = path + 'pytabc.h5'\n\nIn [162]: h5c = tb.open_file(filename, 'w')\n\nIn [163]: filters = tb.Filters(complevel=5,  ![1](images/1.png)\n                               complib='blosc')  ![2](images/2.png)\n\nIn [164]: tabc = h5c.create_table('/', 'ints_floats', sarray,\n                                  title='Integers and Floats',\n                                  expectedrows=rows, filters=filters)\n\nIn [165]: query = '((No3 < -0.5) | (No3 > 0.5)) & ((No4 < -1) | (No4 > 1))'\n\nIn [166]: iteratorc = tabc.where(query)  ![3](images/3.png)\n\nIn [167]: %time res = [(row['No3'], row['No4']) for row in iteratorc]  ![4](images/4.png)\n\n          CPU times: user 362 ms, sys: 55.3 ms, total: 418 ms\n          Wall time: 445 ms\n\nIn [168]: res = np.array(res)\n          res[:3]\nOut[168]: array([[ 0.7694,  1.4866],\n                 [ 0.9201,  1.3346],\n                 [ 1.4701,  1.8776]])\n```", "```py\nIn [169]: %time arr_non = tab.read()  ![1](images/1.png)\n\n          CPU times: user 42.9 ms, sys: 69.9 ms, total: 113 ms\n          Wall time: 117 ms\n\nIn [170]: tab.size_on_disk\nOut[170]: 100122200\n\nIn [171]: arr_non.nbytes\nOut[171]: 100000000\n\nIn [172]: %time arr_com = tabc.read()  ![2](images/2.png)\n\n          CPU times: user 123 ms, sys: 60.5 ms, total: 184 ms\n          Wall time: 191 ms\n\nIn [173]: tabc.size_on_disk\nOut[173]: 40612465\n\nIn [174]: arr_com.nbytes\nOut[174]: 100000000\n\nIn [175]: ll $path*  ![3](images/3.png)\n\n          -rw-r--r--  1 yves  staff  200312336 Jan 18 10:06 /Users/yves/Documents/Temp/data/pytab.h5\n          -rw-r--r--  1 yves  staff   40647761 Jan 18 10:06 /Users/yves/Documents/Temp/data/pytabc.h5\n\nIn [176]: h5c.close()  ![4](images/4.png)\n```", "```py\nIn [177]: %%time\n          arr_int = h5.create_array('/', 'integers', ran_int)  ![1](images/1.png)\n          arr_flo = h5.create_array('/', 'floats', ran_flo)  ![2](images/2.png)\n\n          CPU times: user 3.24 ms, sys: 33.1 ms, total: 36.3 ms\n          Wall time: 41.6 ms\n\nIn [178]: h5  ![3](images/3.png)\nOut[178]: File(filename=/Users/yves/Documents/Temp/data/pytab.h5, title='', mode='w', root_uep='/', filters=Filters(complevel=0, shuffle=False, bitshuffle=False, fletcher32=False, least_significant_digit=None))\n          / (RootGroup) ''\n          /floats (Array(2000000, 2)) ''\n            atom := Float64Atom(shape=(), dflt=0.0)\n            maindim := 0\n            flavor := 'numpy'\n            byteorder := 'little'\n            chunkshape := None\n          /integers (Array(2000000, 2)) ''\n            atom := Int64Atom(shape=(), dflt=0)\n            maindim := 0\n            flavor := 'numpy'\n            byteorder := 'little'\n            chunkshape := None\n          /ints_floats (Table(2000000,)) 'Integers and Floats'\n            description := {\n            \"Date\": StringCol(itemsize=26, shape=(), dflt=b'', pos=0),\n            \"No1\": Int32Col(shape=(), dflt=0, pos=1),\n            \"No2\": Int32Col(shape=(), dflt=0, pos=2),\n            \"No3\": Float64Col(shape=(), dflt=0.0, pos=3),\n            \"No4\": Float64Col(shape=(), dflt=0.0, pos=4)}\n            byteorder := 'little'\n            chunkshape := (2621,)\n\nIn [179]: ll $path*\n\n          -rw-r--r--  1 yves  staff  262344490 Jan 18 10:06 /Users/yves/Documents/Temp/data/pytab.h5\n          -rw-r--r--  1 yves  staff   40647761 Jan 18 10:06 /Users/yves/Documents/Temp/data/pytabc.h5\n\nIn [180]: h5.close()\n\nIn [181]: !rm -f $path*\n```", "```py\nIn [182]: filename = path + 'earray.h5'\n\nIn [183]: h5 = tb.open_file(filename, 'w')\n\nIn [184]: n = 500  ![1](images/1.png)\n\nIn [185]: ear = h5.create_earray('/', 'ear',  ![2](images/2.png)\n                                atom=tb.Float64Atom(),  ![3](images/3.png)\n                                shape=(0, n))  ![4](images/4.png)\n\nIn [186]: type(ear)\nOut[186]: tables.earray.EArray\n\nIn [187]: rand = np.random.standard_normal((n, n))  ![5](images/5.png)\n          rand[:4, :4]\nOut[187]: array([[-1.25983231,  1.11420699,  0.1667485 ,  0.7345676 ],\n                 [-0.13785424,  1.22232417,  1.36303097,  0.13521042],\n                 [ 1.45487119, -1.47784078,  0.15027672,  0.86755989],\n                 [-0.63519366,  0.1516327 , -0.64939447, -0.45010975]])\n\nIn [188]: %%time\n          for _ in range(750):\n              ear.append(rand)  ![6](images/6.png)\n          ear.flush()\n\n          CPU times: user 728 ms, sys: 1.11 s, total: 1.84 s\n          Wall time: 2.03 s\n\nIn [189]: ear\nOut[189]: /ear (EArray(375000, 500)) ''\n            atom := Float64Atom(shape=(), dflt=0.0)\n            maindim := 0\n            flavor := 'numpy'\n            byteorder := 'little'\n            chunkshape := (16, 500)\n\nIn [190]: ear.size_on_disk\nOut[190]: 1500032000\n```", "```py\nIn [191]: out = h5.create_earray('/', 'out',\n                                atom=tb.Float64Atom(),\n                                shape=(0, n))\n\nIn [192]: out.size_on_disk\nOut[192]: 0\n\nIn [193]: expr = tb.Expr('3 * sin(ear) + sqrt(abs(ear))')  ![1](images/1.png)\n\nIn [194]: expr.set_output(out, append_mode=True)  ![2](images/2.png)\n\nIn [195]: %time expr.eval()  ![3](images/3.png)\n\n          CPU times: user 2.98 s, sys: 1.38 s, total: 4.36 s\n          Wall time: 3.28 s\n\nOut[195]: /out (EArray(375000, 500)) ''\n            atom := Float64Atom(shape=(), dflt=0.0)\n            maindim := 0\n            flavor := 'numpy'\n            byteorder := 'little'\n            chunkshape := (16, 500)\n\nIn [196]: out.size_on_disk\nOut[196]: 1500032000\n\nIn [197]: out[0, :10]\nOut[197]: array([-1.73369462,  3.74824436,  0.90627898,  2.86786818,  1.75424957,\n                 -0.91108973, -1.68313885,  1.29073295, -1.68665599, -1.71345309])\n\nIn [198]: %time out_ = out.read()  ![4](images/4.png)\n\n          CPU times: user 879 ms, sys: 1.11 s, total: 1.99 s\n          Wall time: 2.18 s\n\nIn [199]: out_[0, :10]\nOut[199]: array([-1.73369462,  3.74824436,  0.90627898,  2.86786818,  1.75424957,\n                 -0.91108973, -1.68313885,  1.29073295, -1.68665599, -1.71345309])\n```", "```py\nIn [200]: import numexpr as ne  ![1](images/1.png)\n\nIn [201]: expr = '3 * sin(out_) + sqrt(abs(out_))'  ![2](images/2.png)\n\nIn [202]: ne.set_num_threads(1)  ![3](images/3.png)\nOut[202]: 4\n\nIn [203]: %time ne.evaluate(expr)[0, :10]  ![4](images/4.png)\n\n          CPU times: user 1.72 s, sys: 529 ms, total: 2.25 s\n          Wall time: 2.38 s\n\nOut[203]: array([-1.64358578,  0.22567882,  3.31363043,  2.50443549,  4.27413965,\n                 -1.41600606, -1.68373023,  4.01921805, -1.68117412, -1.66053597])\n\nIn [204]: ne.set_num_threads(4)  ![5](images/5.png)\nOut[204]: 1\n\nIn [205]: %time ne.evaluate(expr)[0, :10]  ![6](images/6.png)\n\n          CPU times: user 2.29 s, sys: 804 ms, total: 3.09 s\n          Wall time: 1.56 s\n\nOut[205]: array([-1.64358578,  0.22567882,  3.31363043,  2.50443549,  4.27413965,\n                 -1.41600606, -1.68373023,  4.01921805, -1.68117412, -1.66053597])\n\nIn [206]: h5.close()\n\nIn [207]: !rm -f $path*\n```", "```py\nIn [208]: no = 5000000  ![1](images/1.png)\n          co = 3  ![2](images/2.png)\n          interval = 1. / (12 * 30 * 24 * 60)  ![3](images/3.png)\n          vol = 0.2  ![4](images/4.png)\n\nIn [209]: %%time\n          rn = np.random.standard_normal((no, co))  ![5](images/5.png)\n          rn[0] = 0.0  ![6](images/6.png)\n          paths = 100 * np.exp(np.cumsum(-0.5 * vol ** 2 * interval +\n                  vol * np.sqrt(interval) * rn, axis=0))  ![7](images/7.png)\n          paths[0] = 100  ![8](images/8.png)\n\n          CPU times: user 932 ms, sys: 204 ms, total: 1.14 s\n          Wall time: 1.2 s\n```", "```py\nIn [210]: dr = pd.date_range('2019-1-1', periods=no, freq='1s')\n\nIn [211]: dr[-6:]\nOut[211]: DatetimeIndex(['2019-02-27 20:53:14', '2019-02-27 20:53:15',\n                         '2019-02-27 20:53:16', '2019-02-27 20:53:17',\n                         '2019-02-27 20:53:18', '2019-02-27 20:53:19'],\n                        dtype='datetime64[ns]', freq='S')\n\nIn [212]: df = pd.DataFrame(paths, index=dr, columns=['ts1', 'ts2', 'ts3'])\n\nIn [213]: df.info()\n\n          <class 'pandas.core.frame.DataFrame'>\n          DatetimeIndex: 5000000 entries, 2019-01-01 00:00:00 to 2019-02-27 20:53:19\n          Freq: S\n          Data columns (total 3 columns):\n          ts1    float64\n          ts2    float64\n          ts3    float64\n          dtypes: float64(3)\n          memory usage: 152.6 MB\n\nIn [214]: df.head()\nOut[214]:                             ts1         ts2         ts3\n          2019-01-01 00:00:00  100.000000  100.000000  100.000000\n          2019-01-01 00:00:01  100.018443   99.966644   99.998255\n          2019-01-01 00:00:02  100.069023  100.004420   99.986646\n          2019-01-01 00:00:03  100.086757  100.000246   99.992042\n          2019-01-01 00:00:04  100.105448  100.036033   99.950618\n\nIn [215]: df[::100000].plot(figsize=(10, 6));\n          plt.savefig('../../images/ch09/io_07.png')\n```", "```py\nIn [216]: import tstables as tstab\n\nIn [217]: class ts_desc(tb.IsDescription):\n              timestamp = tb.Int64Col(pos=0)  ![1](images/1.png)\n              ts1 = tb.Float64Col(pos=1)  ![2](images/2.png)\n              ts2 = tb.Float64Col(pos=2)  ![2](images/2.png)\n              ts3 = tb.Float64Col(pos=3)  ![2](images/2.png)\n\nIn [218]: h5 = tb.open_file(path + 'tstab.h5', 'w')  ![3](images/3.png)\n\nIn [219]: ts = h5.create_ts('/', 'ts', ts_desc)  ![4](images/4.png)\n\nIn [220]: %time ts.append(df)  ![5](images/5.png)\n\n          CPU times: user 692 ms, sys: 403 ms, total: 1.1 s\n          Wall time: 1.12 s\n\nIn [221]: type(ts)\nOut[221]: tstables.tstable.TsTable\n\nIn [222]: ls -n $path\n\n          total 306720\n          -rw-r--r--  1 501  20  157037368 Jan 18 10:07 tstab.h5\n```", "```py\nIn [223]: read_start_dt = dt.datetime(2019, 2, 1, 0, 0)  ![1](images/1.png)\n          read_end_dt = dt.datetime(2019, 2, 5, 23, 59)  ![2](images/2.png)\n\nIn [224]: %time rows = ts.read_range(read_start_dt, read_end_dt)  ![3](images/3.png)\n\n          CPU times: user 80.5 ms, sys: 36.2 ms, total: 117 ms\n          Wall time: 116 ms\n\nIn [225]: rows.info()  ![4](images/4.png)\n\n          <class 'pandas.core.frame.DataFrame'>\n          DatetimeIndex: 431941 entries, 2019-02-01 00:00:00 to 2019-02-05 23:59:00\n          Data columns (total 3 columns):\n          ts1    431941 non-null float64\n          ts2    431941 non-null float64\n          ts3    431941 non-null float64\n          dtypes: float64(3)\n          memory usage: 13.2 MB\n\nIn [226]: rows.head()  ![4](images/4.png)\nOut[226]:                            ts1        ts2         ts3\n          2019-02-01 00:00:00  52.063640  40.474580  217.324713\n          2019-02-01 00:00:01  52.087455  40.471911  217.250070\n          2019-02-01 00:00:02  52.084808  40.458013  217.228712\n          2019-02-01 00:00:03  52.073536  40.451408  217.302912\n          2019-02-01 00:00:04  52.056133  40.450951  217.207481\n\nIn [227]: h5.close()\n\nIn [228]: (rows[::500] / rows.iloc[0]).plot(figsize=(10, 6));\n          plt.savefig('../../images/ch09/io_08.png')\n```", "```py\nIn [229]: import random\n\nIn [230]: h5 = tb.open_file(path + 'tstab.h5', 'r')\n\nIn [231]: ts = h5.root.ts._f_get_timeseries()  ![1](images/1.png)\n\nIn [235]: %%time\n          for _ in range(100):  ![2](images/2.png)\n              d = random.randint(1, 24)  ![3](images/3.png)\n              read_start_dt = dt.datetime(2019, 2, d, 0, 0, 0)\n              read_end_dt = dt.datetime(2019, 2, d + 3, 23, 59, 59)\n              rows = ts.read_range(read_start_dt, read_end_dt)\n\n          CPU times: user 3.51 s, sys: 1.03 s, total: 4.55 s\n          Wall time: 4.62 s\n\nIn [233]: rows.info()  ![4](images/4.png)\n\n          <class 'pandas.core.frame.DataFrame'>\n          DatetimeIndex: 431941 entries, 2019-02-01 00:00:00 to 2019-02-05 23:59:00\n          Data columns (total 3 columns):\n          ts1    431941 non-null float64\n          ts2    431941 non-null float64\n          ts3    431941 non-null float64\n          dtypes: float64(3)\n          memory usage: 13.2 MB\n\nIn [234]: !rm $path/tstab.h5\n```"]
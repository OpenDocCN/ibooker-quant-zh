["```py\ndef signal(data, open_column, high_column, low_column, close_column, \n           atr_column, rsi_column, buy_column, sell_column):\n\n    data = add_column(data, 5)    \n\n    for i in range(len(data)):  \n\n       try:\n\n           `# Bullish setup`\n           if data[i, close_column] > data[i, open_column] and \\               data[i, close_column] > data[i - 1, close_column] and \\               data[i - 1, close_column] > data[i - 1, open_column] and \\               data[i, high_column] - data[i, low_column] > \\               (2 * data[i - 1, atr_column]) and \\               data[i, close_column] - data[i, open_column] > \\               data[i - 1, close_column] - data[i - 1, open_column] and \\               data[i, buy_column] == 0 and \\               data[i, rsi_column] > 50:\n\n                    data[i + 1, buy_column] = 1 \n\n        `# Bearish setup`\n           elif data[i, close_column] < data[i, open_column] and \\               data[i, close_column] < data[i - 1, close_column] and \\               data[i - 1, close_column] < data[i - 1, open_column] and \\               data[i, high_column] - data[i, low_column] > \\               (2 * data[i - 1, atr_column]) and \\               data[i, open_column] - data[i, close_column] > \\               data[i - 1, open_column] - data[i - 1, close_column] and \\               data[i, sell_column] == 0 and \\               data[i, rsi_column] < 50:\n\n                    data[i + 1, sell_column] = -1 \n\n       except IndexError:\n\n            pass\n\n    return data\n\n```", "```py\ndef signal(data, open_column, close_column, ma_column, buy_column, \n           sell_column):\n\n    data = add_column(data, 10)\n\n    for i in range(len(data)):\n\n       try:\n\n        `# Bullish setup`\n           if data[i, close_column] - data[i, open_column] > body and \\               data[i - 1, close_column] - data[i - 1, open_column] > \\               body and data[i - 2, close_column] - \\ \n              data[i - 2, open_column] > body and data[i, close_column] \\               > data[i - 1, close_column] and data[i - 1, close_column] \\               > data[i - 2, close_column] and data[i - 2, close_column] \\               > data[i - 3, close_column] and data[i, close_column] > \\               data[i, ma_column] and data[i, buy_column] == 0:\n\n                    data[i + 1, buy_column] = 1\n\n           `# Bearish setup`\n           elif data[i, open_column] - data[i, close_column] > body and \\                 data[i - 1, open_column] - data[i - 1, close_column] > body \\                 and data[i - 2, open_column] - data[i - 2, close_column] \\                 > body and data[i, close_column] < \\                 data[i - 1, close_column] and data[i - 1, close_column] \\                 < data[i - 2, close_column] and data[i - 2, close_column] \\                 < data[i - 3, close_column] and data[i, close_column] < \\                 data[i, ma_column] and data[i, sell_column] == 0:\n\n                    data[i + 1, sell_column] = -1\n\n       except IndexError:\n\n            pass\n\n    return data\n\n```", "```py\ndef stochastic_oscillator(data, \n                             lookback, \n                             high, \n                             low, \n                             close, \n                             position, \n                             slowing = False, \n                             smoothing = False, \n                             slowing_period = 1, \n                             smoothing_period = 1):\n\n    data = add_column(data, 1)\n\n    for i in range(len(data)):\n\n        try:\n\n            data[i, position] = (data[i, close] - min(data[i - lookback \\\n                                + 1:i + 1, low])) / (max(data[i - lookback\\\n                                + 1:i + 1, high]) - min(data[i - lookback \\\n                                + 1:i + 1, low]))\n\n        except ValueError:\n\n            pass\n\n    data[:, position] = data[:, position] * 100  \n\n    if slowing == True and smoothing == False:\n\n        data = ma(data, slowing_period, position, position + 1)\n\n    if smoothing == True and slowing == False:\n\n        data = ma(data, smoothing_period, position, position + 1)\n\n    if smoothing == True and slowing == True:\n\n        data = ma(data, slowing_period, position,   position + 1)\n\n        data = ma(data, smoothing_period, position + 1, position + 2)        \n\n    data = delete_row(data, lookback)\n\n    return data\n\n```", "```py\ndef signal(data, open_column, high_column, low_column, close_column, \n           stochastic_column, signal_column, buy_column, sell_column):\n\n    data = add_column(data, 5)    \n\n    for i in range(len(data)):  \n\n       try:\n  `# Bullish setup`\n           if data[i, close_column] > data[i, open_column] and \\               data[i, open_column] == data[i, low_column] and \\               data[i - 1, close_column] > data[i - 1, open_column] and \\               data[i, open_column] < data[i - 1, close_column] and \\               data[i, stochastic_column] > data[i, signal_column] and \\               data[i, buy_column] == 0:\n\n                    data[i + 1, buy_column] = 1 \n\n           `# Bearish setup`\n           elif data[i, close_column] < data[i, open_column] and \\                 data[i, open_column] == data[i, high_column] and \\                 data[i - 1, close_column] < data[i - 1, open_column] and \\                 data[i, open_column] > data[i - 1, close_column] and \\                 data[i, stochastic_column] > data[i, signal_column] and \\                 data[i, sell_column] == 0:\n\n                    data[i + 1, sell_column] = -1 \n\n       except IndexError:\n\n            pass\n\n    return data\n\n```", "```py\n`# Defining the standard deviation function`\ndef volatility(data, lookback, close, position):\n\n    data = add_column(data, 1)\n\n    for i in range(len(data)):\n\n        try:\n\n            data[i, position] = (data[i -lookback + 1:i + 1, close].std())\n\n        except IndexError:\n\n            pass\n\n    data = delete_row(data, lookback)    \n\n    return data\n\ndef k_volatility_band(data, lookback, multiplier, high, low, close, \n                      position):\n\n    data = add_column(data, 6)\n\n    `# Calculating the median line`\n    for i in range(len(data)):\n\n        try:\n\n            data[i, position] = max(data[i - lookback + 1:i + 1, high]) \n            data[i, position + 1] = min(data[i - lookback + 1:i + 1, low]) \n            data[i, position + 2] = (data[i, position] + data[i, position \\                                     + 1]) \\/ 2\n\n        except ValueError:\n\n            pass\n\n    data = delete_column(data, position, 2)\n\n    `# Calculating maximum volatility`\n    data = volatility(data, lookback, close, position + 1)\n\n    for i in range(len(data)):\n\n        try:\n\n            data[i, position + 2] = max(data[i - lookback + 1:i + 1, \\                                     position + 1]) \n\n        except ValueError:\n\n            pass   \n\n    data = delete_column(data, position + 1, 1)\n\n  `# Calculating the bands`\n    data[:, position + 2] = data[:, position] + (multiplier * data[:, \\                             position + 1])    \n    data[:, position + 3] = data[:, position] - (multiplier * data[:, \\                             position + 1])\n\n    data = delete_column(data, position + 1, 1)    \n\n    return data\n\n```", "```py\ndef signal(data, open_column, high_column, low_column, close_column, \n           middle_band, buy_column, sell_column):\n\n    data = add_column(data, 5)    \n\n    for i in range(len(data)):  \n\n       try:\n\n           `# Bullish setup`\n           if data[i, close_column] > data[i, open_column] and \\               data[i, high_column] == data[i, close_column] and \\               data[i, low_column] == data[i, open_column] and \\               data[i, close_column] < data[i, middle_band] and \\               data[i, buy_column] == 0:\n\n                    data[i + 1, buy_column] = 1 \n        `# Bearish setup`\n           elif data[i, close_column] < data[i, open_column] and \\                 data[i, high_column] == data[i, open_column] and \\                 data[i, low_column] == data[i, close_column] and \\                 data[i, close_column] > data[i, middle_band] and \\                 data[i, sell_column] == 0:\n\n                    data[i + 1, sell_column] = -1 \n\n       except IndexError:\n\n            pass\n\n    return data\n```", "```py\ndef trend_intensity_indicator(data, lookback, close_column, position):\n\n    data = add_column(data, 5)\n\n    `# Calculating the moving average`\n    data = ma(data, lookback, close_column, position)\n\n    `# Deviations`\n    for i in range(len(data)):\n\n        if data[i, close_column] > data[i, position]:\n           data[i, position + 1] = data[i, close_column] - \\            data[i, position]\n\n        if data[i, close_column] < data[i, position]:\n           data[i, position + 2] = data[i, position] - \\            data[i, close_column]\n\n    `# Trend intensity index`\n    for i in range(len(data)):\n\n        data[i, position + 3] = np.count_nonzero(data[i - lookback + 1:i \\                                 + 1, position + 1])\n\n    for i in range(len(data)):\n\n        data[i, position + 4] = np.count_nonzero(data[i - lookback + 1:i \\                                 + 1, position + 2])\n\n    for i in range(len(data)):\n\n        data[i, position + 5] = ((data[i, position + 3]) / (data[i, \\                                 position + 3] + data[i, position + 4])) \\                                 * 100\n\n    data = delete_column(data, position, 5)\n\n    return data\n\n```", "```py\ndef signal(data, open_column, high_column, low_column, close_column, \n           tii_column, buy_column, sell_column):\n\n    data = add_column(data, 5)    \n\n    data = rounding(data, 4) `# Put 0 instead of 4 as of pair 4`\n\n    for i in range(len(data)):  \n\n       try:\n\n           `# Bullish setup`\n           if data[i, close_column] > data[i, open_column] and \\               data[i, close_column] > data[i - 1, close_column] and \\               data[i, low_column] > data[i - 1, low_column] and \\               data[i - 1, close_column] == data[i - 1, open_column] and \\               data[i - 2, close_column] > data[i - 2, open_column] and \\               data[i - 2, high_column] < data[i - 1, high_column] and \\               data[i, tii_column] > 50:\n\n                    data[i + 1, buy_column] = 1 \n\n           `# Bearish setup`\n           elif data[i, close_column] < data[i, open_column] and \\                 data[i, close_column] < data[i - 1, close_column] and \\                 data[i, low_column] < data[i - 1, low_column] and \\                 data[i - 1, close_column] == data[i - 1, open_column] and \\                 data[i - 2, close_column] < data[i - 2, open_column] and \\                 data[i - 2, low_column] > data[i - 1, low_column] and \\                 data[i, tii_column] < 50:\n\n                    data[i + 1, sell_column] = -1 \n\n       except IndexError:\n\n            pass\n\n    return data\n\n```"]
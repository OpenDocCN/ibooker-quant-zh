["```py\nimport random\nimport matplotlib.pyplot as plt\n\n# Number of iterations in the simulation\nnumber_of_iterations = [10, 100, 1000, 10000]\n\nfig, axs = plt.subplots(nrows=2, ncols=2, figsize=(8, 6))\n\nfor i, number_of_iterations in enumerate(number_of_iterations):\n    # List to store results of all iterations\n    stay_results = []\n    switch_results = []\n\n    # For loop for collecting results\n    for j in range(number_of_iterations):\n        doors = ['door 1', 'door 2', 'door 3']\n\n        # Random selection of door to place the car\n        car_door = random.choice(doors)\n        # You select a door at random\n        your_door = random.choice(doors)\n\n        # Monty can only select the door that does not have the car and one \n        # that you have not chosen\n        monty_door = list(set(doors) - set([car_door, your_door]))[0]\n        # The door that Monty does not open and the one you have \n        # not chosen initially\n        switch_door = list(set(doors) - set([monty_door, your_door]))[0]\n\n        # Result if you stay with your original choice and it has the \n        # car behind it\n        stay_results.append(your_door == car_door)\n        # Result if you switch doors and it has the car behind it\n        switch_results.append(switch_door == car_door)\n\n    # Probability of winning the car if you stay with your original\n    # choice of door\n    probability_staying = sum(stay_results) / number_of_iterations\n    # Probability of winning the car if you switch doors\n    probability_switching = sum(switch_results) / number_of_iterations\n\n    ax = axs[i // 2, i % 2]\n\n    # Plot the probabilities as a bar graph\n    ax.bar(['stay', 'switch'], [probability_staying, probability_switching],\n    color=['blue', 'green'], alpha=0.7)\n    ax.set_xlabel('Strategy')\n    ax.set_ylabel('Probability of Winning')\n    ax.set_title('After {} Simulations'.format(number_of_iterations))\n    ax.set_ylim([0, 1])\n\n    # Add probability values on the bars\n    ax.text(-0.05, probability_staying + 0.05, '{:.2f}'\n    .format(probability_staying), ha='left', va='center', fontsize=10)\n    ax.text(0.95, probability_switching + 0.05, '{:.2f}'\n    .format(probability_switching), ha='right', va='center', fontsize=10)\n\nplt.tight_layout()\nplt.show()\n```"]
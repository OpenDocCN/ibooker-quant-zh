["```py\nlower_barrier = 20\nupper_barrier = 80\n\ndef signal(data, open_column, close_column, indicator_column, \n           buy_column, sell_column):\n\n    data = add_column(data, 5)    \n\n    data = rounding(data, 0)  \n\n    for i in range(len(data)):  \n\n       try:\n\n        `# Bullish setup`\n           if data[i, close_column] == data[i, open_column] and \\               data[i, indicator_column] < lower_barrier:\n\n                    data[i + 1, buy_column] = 1 \n\n           `# Bearish setup`\n           elif data[i, close_column] == data[i, open_column] and \\                 data[i, indicator_column] > upper_barrier:\n\n                    data[i + 1, sell_column] = -1 \n\n       except IndexError:\n\n            pass\n\n    return data\n\n```", "```py\ndef signal(data, open_column, close_column, upper_band_column, \n           lower_band_column, buy_column, sell_column):\n\n    data = add_column(data, 5)    \n\n    for i in range(len(data)):  \n\n       try:\n\n           `# Bullish setup`\n           if data[i, close_column] > data[i, open_column] and \\               data[i, open_column] < data[i - 1, close_column] and \\               data[i, close_column] > data[i - 1, open_column] and \\               data[i - 1, close_column] < data[i - 1, open_column] and \\               data[i - 2, close_column] < data[i - 2, open_column] and \\               data[i, close_column] < data[i, lower_band_column]:\n\n                    data[i + 1, buy_column] = 1 \n\n          `# Bearish setup`\n           elif data[i, close_column] < data[i, open_column] and \\                 data[i, open_column] > data[i - 1, close_column] and \\                 data[i, close_column] < data[i - 1, open_column] and \\                 data[i - 1, close_column] > data[i - 1, open_column] and \\                 data[i - 2, close_column] > data[i - 2, open_column] and \\                 data[i, close_column] > data[i, upper_band_column]:\n\n                    data[i + 1, sell_column] = -1 \n\n       except IndexError:\n\n            pass\n\n    return data\n\n```", "```py\ndef bollinger_bands(data, lookback, standard_deviation, close, position):\n\n    data = add_column(data, 2)\n  `# Calculating the moving average`\n    data = ma(data, lookback, close, position)\n\n    `# Calculating the standard deviation`\n    data = volatility(data, lookback, close, position + 1)\n\n    data[:, position + 2] = data[:, position] + (standard_deviation * \n                            data[:, position + 1])\n    data[:, position + 3] = data[:, position] - (standard_deviation * \n                            data[:, position + 1])\n\n    data = delete_row(data, lookback)\n\n    data = delete_column(data, position + 1, 1)\n\n    return data\n\n```", "```py\nlower_barrier = 20\nupper_barrier = 80\n\ndef signal(data, open_column, close_column, indicator_column, \n           buy_column, sell_column):\n\n    data = add_column(data, 5)    \n\n    for i in range(len(data)):  \n\n       try:\n\n           `# Bullish setup`\n           if data[i, close_column] > data[i, open_column] and \\               data[i, close_column] < data[i - 1, open_column] and \\               data[i, close_column] > data[i - 1, close_column] and \\               data[i, open_column] < data[i - 1, close_column] and \\               data[i - 1, close_column] < data[i - 1, open_column] and \\               data[i - 2, close_column] < data[i - 2, open_column] and \\               data[i, indicator_column] < lower_barrier:\n\n                    data[i + 1, buy_column] = 1 \n\n           `# Bearish setup`\n           elif data[i, close_column] < data[i, open_column] and \\                 data[i, close_column] > data[i - 1, open_column] and \\                 data[i, close_column] < data[i - 1, close_column] and \\                 data[i, open_column] > data[i - 1, close_column] and \\                 data[i - 1, close_column] > data[i - 1, open_column] and \\                 data[i - 2, close_column] > data[i - 2, open_column] and \\                 data[i, indicator_column] > upper_barrier:\n\n                    data[i + 1, sell_column] = -1 \n\n       except IndexError:\n\n            pass\n\n    return data\n\n```", "```py\ndef k_envelopes(data, lookback, high, low, position):\n\n    `# Calculating the upper moving average`\n    data = ma(data, lookback, high, position)\n\n    `# Calculating the lower moving average`\n    data = ma(data, lookback, low, position + 1)    \n\n    return data\n```", "```py\ndef signal(data, open_column, close_column, upper_k_envelope, \n           lower_k_envelope, buy_column, sell_column):\n\n    data = add_column(data, 5)  \n\n    data = rounding(data, 4) # Put 0 instead of 4 as of pair 4\n\n    for i in range(len(data)):  \n\n       try:\n      `# Bullish setup`\n           if data[i, open_column] > data[i, close_column] and \\               data[i - 1, open_column] > data[i - 1, close_column] and \\               data[i - 2, open_column] > data[i - 2, close_column] and \\               data[i, close_column] < data[i - 1, close_column] and \\               data[i - 1, close_column] < data[i - 2, close_column] and \\               (data[i, open_column] - data[i, close_column]) > (data[i - 1,\n              open_column] - data[i - 1, close_column]) and \\               (data[i - 1, open_column] - data[i - 1, close_column]) > \n              (data[i - 2, open_column] - data[i - 2, close_column]) and \\               data[i, close_column] > data[i, lower_k_envelope] and \\               data[i, close_column] < data[i, upper_k_envelope]: \n\n                    data[i + 1, buy_column] = 1 \n\n        `# Bearish setup`\n           elif data[i, open_column] < data[i, close_column] and \\                 data[i - 1, open_column] < data[i - 1, close_column] and \\                 data[i - 2, open_column] < data[i - 2, close_column] and \\                 data[i, close_column] > data[i - 1, close_column] and \\                 data[i - 1, close_column] > data[i - 2, close_column] and \\                 (data[i, open_column] - data[i, close_column]) > (data[i \\                 - 1, open_column] - data[i - 1, close_column]) and \\                 (data[i - 1, open_column] - data[i - 1, close_column]) > \\                 (data[i - 2, open_column] - data[i - 2, close_column]) and \\                 data[i, close_column] > data[i, lower_k_envelope] and \\                 data[i, close_column] < data[i, upper_k_envelope]: \n\n                    data[i + 1, sell_column] = -1 \n\n       except IndexError:\n\n            pass\n\n    return data\n\n```", "```py\ndef rsi_atr(data, lookback_rsi, lookback_atr, lookback_rsi_atr, high, \n            low, close, position):\n\n    data = rsi(data, lookback_rsi, close, position)\n\n    data = atr(data, lookback_atr, high, low, close, position + 1)\n\n    data = add_column(data, 1)\n\n    data[:, position + 2] = data[:, position] / data[:, position + 1]\n\n    data = rsi(data, lookback_rsi_atr, position + 2, position + 3)\n\n    data = delete_column(data, position, 3)\n\n    return data\n\n```", "```py\ndef signal(data, open_column, close_column, indicator_column, \n           buy_column, sell_column):\n\n    data = add_column(data, 5)    \n\n    for i in range(len(data)):  \n\n       try:\n\n           `# Bullish setup`\n           if data[i, close_column] > data[i, open_column] and \\               data[i, close_column] < data[i - 1, open_column] and \\               data[i, close_column] > data[i - 1, close_column] and \\               data[i, open_column] < data[i - 1, close_column] and \\               data[i - 1, close_column] < data[i - 1, open_column] and \\               data[i - 2, close_column] < data[i - 2, open_column] and \\               data[i, indicator_column] < lower_barrier:\n\n                    data[i + 1, buy_column] = 1 \n\n  `# Bearish setup`\n           elif data[i, close_column] < data[i, open_column] and \\                 data[i, close_column] > data[i - 1, open_column] and \\                 data[i, close_column] < data[i - 1, close_column] and \\                 data[i, open_column] > data[i - 1, close_column] and \\                 data[i - 1, close_column] > data[i - 1, open_column] and \\                 data[i - 2, close_column] > data[i - 2, open_column]  and \\                 data[i, indicator_column] > upper_barrier:\n\n                    data[i + 1, sell_column] = -1 \n\n       except IndexError:\n\n            pass\n\n    return data\n\n```"]
["```py\nIn [1]: import numpy as np\n        from numpy.random import default_rng\n        np.set_printoptions(precision=5, suppress=True)\n\nIn [2]: rng = default_rng(100)\n\nIn [3]: B = (10, np.array((11, 11, 11)))\n\nIn [4]: S = (10, np.array((20, 10, 5)))\n\nIn [5]: n = 1000  ![1](Images/1.png)\n\nIn [6]: b = rng.random(n)  ![2](Images/2.png)\n\nIn [7]: b[:5]  ![2](Images/2.png)\nOut[7]: array([0.83498, 0.59655, 0.28886, 0.04295, 0.97365])\n\nIn [8]: s = rng.random(n)  ![3](Images/3.png)\n\nIn [9]: A = [b[i] * B[1] + s[i] * S[1] for i in range(n)]  ![4](Images/4.png)\n\nIn [10]: A = np.array(A)  ![4](Images/4.png)\n\nIn [11]: A[:3]  ![4](Images/4.png)\nOut[11]: array([[19.86232, 14.52356, 11.85418],\n                [26.35796, 16.46003, 11.51106],\n                [11.64939,  7.41344,  5.29547]])\n\nIn [12]: from pylab import mpl, plt   ![5](Images/5.png)\n         plt.style.use('seaborn')\n         mpl.rcParams['savefig.dpi'] = 300\n         mpl.rcParams['font.family'] = 'serif'\n         from mpl_toolkits.mplot3d import Axes3D  ![6](Images/6.png)\n\nIn [13]: fig = plt.figure(figsize=(10, 6))  ![7](Images/7.png)\n         ax = fig.add_subplot(111, projection='3d')  ![8](Images/8.png)\n         ax.scatter(A[:, 0], A[:, 1], A[:, 2], c='r', marker='.');  ![9](Images/9.png)\n```", "```py\nIn [14]: Q = np.array((0.3, 0.3, 0.4))\n\nIn [15]: np.dot(Q, S[1])\nOut[15]: 11.0\n```", "```py\nIn [16]: C1 = np.array((1, 0, 0))  ![1](Images/1.png)\n\nIn [17]: 1 / B[1][0] * B[1] >= C1  ![2](Images/2.png)\nOut[17]: array([ True,  True,  True])\n\nIn [18]: 1 / B[1][0] * B[0]  ![3](Images/3.png)\nOut[18]: 0.9090909090909092\n\nIn [19]: def V(phi, t):  ![4](Images/4.png)\n             return phi[0] * B[t] + phi[1] * S[t]\n\nIn [20]: phi = np.array((0.04, 0.03))  ![5](Images/5.png)\n\nIn [21]: V(phi, 0)  ![6](Images/6.png)\nOut[21]: 0.7\n\nIn [22]: V(phi, 1)  ![7](Images/7.png)\nOut[22]: array([1.04, 0.74, 0.59])\n```", "```py\nIn [23]: from scipy.optimize import minimize  ![1](Images/1.png)\n\nIn [24]: cons = ({'type': 'ineq', 'fun': lambda phi: V(phi, 1) - C1})  ![2](Images/2.png)\n\nIn [25]: res = minimize(lambda phi: V(phi, 0),  ![3](Images/3.png)\n                        (0.01, 0.01),  ![4](Images/4.png)\n                        method='SLSQP',  ![5](Images/5.png)\n                        constraints=cons)  ![6](Images/6.png)\n\nIn [26]: res  ![7](Images/7.png)\nOut[26]:      fun: 0.3636363636310989\n              jac: array([10., 10.])\n          message: 'Optimization terminated successfully'\n             nfev: 6\n              nit: 2\n             njev: 2\n           status: 0\n          success: True\n                x: array([-0.0303 ,  0.06667])\n\nIn [27]: V(res['x'], 0)  ![8](Images/8.png)\nOut[27]: 0.3636363636310989\n\nIn [28]: V(res['x'], 1)  ![9](Images/9.png)\nOut[28]: array([ 1.     ,  0.33333, -0.     ])\n```", "```py\nIn [29]: M = np.array((B[1], S[1])).T  ![1](Images/1.png)\n\nIn [30]: M  ![1](Images/1.png)\nOut[30]: array([[11, 20],\n                [11, 10],\n                [11,  5]])\n\nIn [31]: reg = np.linalg.lstsq(M, C1, rcond=-1)  ![2](Images/2.png)\n\nIn [32]: reg\n         # (array, ![3](Images/3.png)\n         #  array, ![4](Images/4.png)\n         #  int, ![5](Images/5.png)\n         #  array) ![6](Images/6.png)\nOut[32]: (array([-0.04545,  0.07143]), array([0.07143]), 2, array([28.93836,\n          7.11136]))\n\nIn [33]: V(reg[0], 0)  ![7](Images/7.png)\nOut[33]: 0.2597402597402598\n\nIn [34]: V(reg[0], 1)  ![8](Images/8.png)\nOut[34]: array([ 0.92857,  0.21429, -0.14286])\n\nIn [35]: V(reg[0], 1) - C1  ![9](Images/9.png)\nOut[35]: array([-0.07143,  0.21429, -0.14286])\n\nIn [36]: np.mean((V(reg[0], 1) - C1) ** 2)  ![10](Images/10.png)\nOut[36]: 0.02380952380952381\n```", "```py\nIn [37]: mu_S = 7 / 6 - 1  ![1](Images/1.png)\n\nIn [38]: mu_S  ![1](Images/1.png)\nOut[38]: 0.16666666666666674\n\nIn [39]: sigma_S = (S[1] / S[0]).std()  ![2](Images/2.png)\n\nIn [40]: sigma_S  ![2](Images/2.png)\nOut[40]: 0.6236095644623235\n```", "```py\nIn [41]: s = np.linspace(-2, 2, 25)  ![1](Images/1.png)\n\nIn [42]: b = (1 - s)  ![2](Images/2.png)\n\nIn [43]: i = 0.1  ![3](Images/3.png)\n\nIn [44]: mu = b * i + s * mu_S  ![4](Images/4.png)\n\nIn [45]: sigma = np.abs(s * sigma_S)  ![5](Images/5.png)\n\nIn [46]: plt.figure(figsize=(10, 6))\n         plt.plot(sigma, mu)  ![6](Images/6.png)\n         plt.xlabel('$\\sigma$')\n         plt.ylabel('$\\mu$');\n```", "```py\nIn [47]: beta = np.linspace(0, 2, 25)  ![1](Images/1.png)\n\nIn [48]: mu = i + beta * (mu_S - i)  ![2](Images/2.png)\n\nIn [49]: plt.figure(figsize=(10, 6))\n         plt.plot(beta, mu, label='security market line')  ![3](Images/3.png)\n         plt.xlabel('$\\\\beta$')\n         plt.ylabel('$\\mu$')\n         plt.ylim(0, 0.25)  ![4](Images/4.png)\n         plt.plot(1, mu_S, 'ro', label='market portfolio')  ![5](Images/5.png)\n         plt.legend(loc=0);\n```"]
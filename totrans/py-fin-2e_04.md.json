["```py\nIn [1]: v = [0.5, 0.75, 1.0, 1.5, 2.0]  ![1](images/1.png)\n```", "```py\nIn [2]: m = [v, v, v]  ![1](images/1.png)\n        m  ![2](images/2.png)\nOut[2]: [[0.5, 0.75, 1.0, 1.5, 2.0],\n         [0.5, 0.75, 1.0, 1.5, 2.0],\n         [0.5, 0.75, 1.0, 1.5, 2.0]]\n```", "```py\nIn [3]: m[1]\nOut[3]: [0.5, 0.75, 1.0, 1.5, 2.0]\n\nIn [4]: m[1][0]\nOut[4]: 0.5\n```", "```py\nIn [5]: v1 = [0.5, 1.5]\n        v2 = [1, 2]\n        m = [v1, v2]\n        c = [m, m]  ![1](images/1.png)\n        c\nOut[5]: [[[0.5, 1.5], [1, 2]], [[0.5, 1.5], [1, 2]]]\n\nIn [6]: c[1][1][0]\nOut[6]: 1\n```", "```py\nIn [7]: v = [0.5, 0.75, 1.0, 1.5, 2.0]\n        m = [v, v, v]\n        m\nOut[7]: [[0.5, 0.75, 1.0, 1.5, 2.0],\n         [0.5, 0.75, 1.0, 1.5, 2.0],\n         [0.5, 0.75, 1.0, 1.5, 2.0]]\n```", "```py\nIn [8]: v[0] = 'Python'\n        m\nOut[8]: [['Python', 0.75, 1.0, 1.5, 2.0],\n         ['Python', 0.75, 1.0, 1.5, 2.0],\n         ['Python', 0.75, 1.0, 1.5, 2.0]]\n```", "```py\nIn [9]: from copy import deepcopy\n        v = [0.5, 0.75, 1.0, 1.5, 2.0]\n        m = 3 * [deepcopy(v), ]  ![1](images/1.png)\n        m\nOut[9]: [[0.5, 0.75, 1.0, 1.5, 2.0],\n         [0.5, 0.75, 1.0, 1.5, 2.0],\n         [0.5, 0.75, 1.0, 1.5, 2.0]]\n\nIn [10]: v[0] = 'Python'  ![2](images/2.png)\n         m  ![3](images/3.png)\nOut[10]: [[0.5, 0.75, 1.0, 1.5, 2.0],\n          [0.5, 0.75, 1.0, 1.5, 2.0],\n          [0.5, 0.75, 1.0, 1.5, 2.0]]\n```", "```py\nIn [11]: v = [0.5, 0.75, 1.0, 1.5, 2.0]\n\nIn [12]: import array\n\nIn [13]: a = array.array('f', v)  ![1](images/1.png)\n         a\nOut[13]: array('f', [0.5, 0.75, 1.0, 1.5, 2.0])\n\nIn [14]: a.append(0.5)  ![2](images/2.png)\n         a\nOut[14]: array('f', [0.5, 0.75, 1.0, 1.5, 2.0, 0.5])\n\nIn [15]: a.extend([5.0, 6.75])  ![2](images/2.png)\n         a\nOut[15]: array('f', [0.5, 0.75, 1.0, 1.5, 2.0, 0.5, 5.0, 6.75])\n\nIn [16]: 2 * a  ![3](images/3.png)\nOut[16]: array('f', [0.5, 0.75, 1.0, 1.5, 2.0, 0.5, 5.0, 6.75, 0.5, 0.75, 1.0, 1.5, 2.0, 0.5, 5.0, 6.75])\n```", "```py\nIn [17]: # a.append('string') ![1](images/1.png)\n\nIn [18]: a.tolist()  ![2](images/2.png)\nOut[18]: [0.5, 0.75, 1.0, 1.5, 2.0, 0.5, 5.0, 6.75]\n```", "```py\nIn [19]: f = open('array.apy', 'wb')  ![1](images/1.png)\n         a.tofile(f)  ![2](images/2.png)\n         f.close()  ![3](images/3.png)\n\nIn [20]: with open('array.apy', 'wb') as f:  ![4](images/4.png)\n             a.tofile(f)  ![4](images/4.png)\n\nIn [21]: !ls -n arr*  ![5](images/5.png)\n\n         -rw-r--r--@ 1 503  20  32 29 Dez 17:08 array.apy\n```", "```py\nIn [22]: b = array.array('f')  ![1](images/1.png)\n\nIn [23]: with open('array.apy', 'rb') as f:  ![2](images/2.png)\n             b.fromfile(f, 5)  ![3](images/3.png)\n\nIn [24]: b  ![4](images/4.png)\nOut[24]: array('f', [0.5, 0.75, 1.0, 1.5, 2.0])\n\nIn [25]: b = array.array('d')  ![5](images/5.png)\n\nIn [26]: with open('array.apy', 'rb') as f:\n             b.fromfile(f, 2)  ![6](images/6.png)\n\nIn [27]: b  ![7](images/7.png)\nOut[27]: array('d', [0.0004882813645963324, 0.12500002956949174])\n```", "```py\nIn [28]: import numpy as np  ![1](images/1.png)\n\nIn [29]: a = np.array([0, 0.5, 1.0, 1.5, 2.0])  ![2](images/2.png)\n         a\nOut[29]: array([ 0. ,  0.5,  1. ,  1.5,  2. ])\n\nIn [30]: type(a)  ![2](images/2.png)\nOut[30]: numpy.ndarray\n\nIn [31]: a = np.array(['a', 'b', 'c'])  ![3](images/3.png)\n         a\nOut[31]: array(['a', 'b', 'c'],\n               dtype='<U1')\n\nIn [32]: a = np.arange(2, 20, 2)  ![4](images/4.png)\n         a\nOut[32]: array([ 2,  4,  6,  8, 10, 12, 14, 16, 18])\n\nIn [33]: a = np.arange(8, dtype=np.float)  ![5](images/5.png)\n         a\nOut[33]: array([ 0.,  1.,  2.,  3.,  4.,  5.,  6.,  7.])\n\nIn [34]: a[5:]  ![6](images/6.png)\nOut[34]: array([ 5.,  6.,  7.])\n\nIn [35]: a[:2]  ![6](images/6.png)\nOut[35]: array([ 0.,  1.])\n```", "```py\nIn [36]: a.sum()  ![1](images/1.png)\nOut[36]: 28.0\n\nIn [37]: a.std()  ![2](images/2.png)\nOut[37]: 2.2912878474779199\n\nIn [38]: a.cumsum()  ![3](images/3.png)\nOut[38]: array([  0.,   1.,   3.,   6.,  10.,  15.,  21.,  28.])\n```", "```py\nIn [39]: l = [0., 0.5, 1.5, 3., 5.]\n         2 * l  ![1](images/1.png)\nOut[39]: [0.0, 0.5, 1.5, 3.0, 5.0, 0.0, 0.5, 1.5, 3.0, 5.0]\n\nIn [40]: a\nOut[40]: array([ 0.,  1.,  2.,  3.,  4.,  5.,  6.,  7.])\n\nIn [41]: 2 * a  ![2](images/2.png)\nOut[41]: array([  0.,   2.,   4.,   6.,   8.,  10.,  12.,  14.])\n\nIn [42]: a ** 2  ![3](images/3.png)\nOut[42]: array([  0.,   1.,   4.,   9.,  16.,  25.,  36.,  49.])\n\nIn [43]: 2 ** a  ![4](images/4.png)\nOut[43]: array([   1.,    2.,    4.,    8.,   16.,   32.,   64.,  128.])\n\nIn [44]: a ** a  ![5](images/5.png)\nOut[44]: array([  1.00000000e+00,   1.00000000e+00,   4.00000000e+00,\n                  2.70000000e+01,   2.56000000e+02,   3.12500000e+03,\n                  4.66560000e+04,   8.23543000e+05])\n```", "```py\nIn [45]: np.exp(a)  ![1](images/1.png)\nOut[45]: array([  1.00000000e+00,   2.71828183e+00,   7.38905610e+00,\n                  2.00855369e+01,   5.45981500e+01,   1.48413159e+02,\n                  4.03428793e+02,   1.09663316e+03])\n\nIn [46]: np.sqrt(a)  ![2](images/2.png)\nOut[46]: array([ 0.        ,  1.        ,  1.41421356,  1.73205081,  2.        ,\n                 2.23606798,  2.44948974,  2.64575131])\n\nIn [47]: np.sqrt(2.5)  ![3](images/3.png)\nOut[47]: 1.5811388300841898\n\nIn [48]: import math  ![4](images/4.png)\n\nIn [49]: math.sqrt(2.5)  ![4](images/4.png)\nOut[49]: 1.5811388300841898\n\nIn [50]: # math.sqrt(a) ![5](images/5.png)\n\nIn [51]: %timeit np.sqrt(2.5)  ![6](images/6.png)\n\n         703 ns ± 17.9 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)\n\nIn [52]: %timeit math.sqrt(2.5)  ![7](images/7.png)\n\n         107 ns ± 1.48 ns per loop (mean ± std. dev. of 7 runs, 10000000 loops each)\n```", "```py\nIn [53]: b = np.array([a, a * 2])  ![1](images/1.png)\n         b\nOut[53]: array([[  0.,   1.,   2.,   3.,   4.,   5.,   6.,   7.],\n                [  0.,   2.,   4.,   6.,   8.,  10.,  12.,  14.]])\n\nIn [54]: b[0]  ![2](images/2.png)\nOut[54]: array([ 0.,  1.,  2.,  3.,  4.,  5.,  6.,  7.])\n\nIn [55]: b[0, 2]  ![3](images/3.png)\nOut[55]: 2.0\n\nIn [56]: b[:, 1]  ![4](images/4.png)\nOut[56]: array([ 1.,  2.])\n\nIn [57]: b.sum()  ![5](images/5.png)\nOut[57]: 84.0\n\nIn [58]: b.sum(axis=0)  ![6](images/6.png)\nOut[58]: array([  0.,   3.,   6.,   9.,  12.,  15.,  18.,  21.])\n\nIn [59]: b.sum(axis=1)  ![7](images/7.png)\nOut[59]: array([ 28.,  56.])\n```", "```py\nIn [60]: c = np.zeros((2, 3), dtype='i', order='C')  ![1](images/1.png)\n         c\nOut[60]: array([[0, 0, 0],\n                [0, 0, 0]], dtype=int32)\n\nIn [61]: c = np.ones((2, 3, 4), dtype='i', order='C')  ![2](images/2.png)\n         c\nOut[61]: array([[[1, 1, 1, 1],\n                 [1, 1, 1, 1],\n                 [1, 1, 1, 1]],\n\n                [[1, 1, 1, 1],\n                 [1, 1, 1, 1],\n                 [1, 1, 1, 1]]], dtype=int32)\n\nIn [62]: d = np.zeros_like(c, dtype='f16', order='C')  ![3](images/3.png)\n         d\nOut[62]: array([[[ 0.0,  0.0,  0.0,  0.0],\n                 [ 0.0,  0.0,  0.0,  0.0],\n                 [ 0.0,  0.0,  0.0,  0.0]],\n\n                [[ 0.0,  0.0,  0.0,  0.0],\n                 [ 0.0,  0.0,  0.0,  0.0],\n                 [ 0.0,  0.0,  0.0,  0.0]]], dtype=float128)\n\nIn [63]: d = np.ones_like(c, dtype='f16', order='C')  ![3](images/3.png)\n         d\nOut[63]: array([[[ 1.0,  1.0,  1.0,  1.0],\n                 [ 1.0,  1.0,  1.0,  1.0],\n                 [ 1.0,  1.0,  1.0,  1.0]],\n\n                [[ 1.0,  1.0,  1.0,  1.0],\n                 [ 1.0,  1.0,  1.0,  1.0],\n                 [ 1.0,  1.0,  1.0,  1.0]]], dtype=float128)\n\nIn [64]: e = np.empty((2, 3, 2))  ![4](images/4.png)\n         e\nOut[64]: array([[[  0.00000000e+000,  -4.34540174e-311],\n                 [  2.96439388e-323,   0.00000000e+000],\n                 [  0.00000000e+000,   1.16095484e-028]],\n\n                [[  2.03147708e-110,   9.67661175e-144],\n                 [  9.80058441e+252,   1.23971686e+224],\n                 [  4.00695466e+252,   8.34404939e-309]]])\n\nIn [65]: f = np.empty_like(c)  ![4](images/4.png)\n         f\nOut[65]: array([[[0, 0, 0, 0],\n                 [9, 0, 0, 0],\n                 [0, 0, 0, 0]],\n\n                [[0, 0, 0, 0],\n                 [0, 0, 0, 0],\n                 [0, 0, 0, 0]]], dtype=int32)\n\nIn [66]: np.eye(5)  ![5](images/5.png)\nOut[66]: array([[ 1.,  0.,  0.,  0.,  0.],\n                [ 0.,  1.,  0.,  0.,  0.],\n                [ 0.,  0.,  1.,  0.,  0.],\n                [ 0.,  0.,  0.,  1.,  0.],\n                [ 0.,  0.,  0.,  0.,  1.]])\n\nIn [67]: g = np.linspace(5, 15, 15) ![6](images/6.png)\n         g\nOut[67]: array([  5.        ,   5.71428571,   6.42857143,   7.14285714,\n                  7.85714286,   8.57142857,   9.28571429,  10.        ,\n                 10.71428571,  11.42857143,  12.14285714,  12.85714286,\n                 13.57142857,  14.28571429,  15.        ])\n```", "```py\nIn [68]: g.size  ![1](images/1.png)\nOut[68]: 15\n\nIn [69]: g.itemsize  ![2](images/2.png)\nOut[69]: 8\n\nIn [70]: g.ndim  ![3](images/3.png)\nOut[70]: 1\n\nIn [71]: g.shape  ![4](images/4.png)\nOut[71]: (15,)\n\nIn [72]: g.dtype  ![5](images/5.png)\nOut[72]: dtype('float64')\n\nIn [73]: g.nbytes  ![6](images/6.png)\nOut[73]: 120\n```", "```py\nIn [74]: g = np.arange(15)\n\nIn [75]: g\nOut[75]: array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14])\n\nIn [76]: g.shape  ![1](images/1.png)\nOut[76]: (15,)\n\nIn [77]: np.shape(g) ![1](images/1.png)\nOut[77]: (15,)\n\nIn [78]: g.reshape((3, 5))  ![2](images/2.png)\nOut[78]: array([[ 0,  1,  2,  3,  4],\n                [ 5,  6,  7,  8,  9],\n                [10, 11, 12, 13, 14]])\n\nIn [79]: h = g.reshape((5, 3))  ![3](images/3.png)\n         h\nOut[79]: array([[ 0,  1,  2],\n                [ 3,  4,  5],\n                [ 6,  7,  8],\n                [ 9, 10, 11],\n                [12, 13, 14]])\n\nIn [80]: h.T  ![4](images/4.png)\nOut[80]: array([[ 0,  3,  6,  9, 12],\n                [ 1,  4,  7, 10, 13],\n                [ 2,  5,  8, 11, 14]])\n\nIn [81]: h.transpose()  ![4](images/4.png)\nOut[81]: array([[ 0,  3,  6,  9, 12],\n                [ 1,  4,  7, 10, 13],\n                [ 2,  5,  8, 11, 14]])\n```", "```py\nIn [82]: g\nOut[82]: array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14])\n\nIn [83]: np.resize(g, (3, 1))  ![1](images/1.png)\nOut[83]: array([[0],\n                [1],\n                [2]])\n\nIn [84]: np.resize(g, (1, 5))  ![1](images/1.png)\nOut[84]: array([[0, 1, 2, 3, 4]])\n\nIn [85]: np.resize(g, (2, 5))  ![1](images/1.png)\nOut[85]: array([[0, 1, 2, 3, 4],\n                [5, 6, 7, 8, 9]])\n\nIn [86]: n = np.resize(g, (5, 4))  ![2](images/2.png)\n         n\nOut[86]: array([[ 0,  1,  2,  3],\n                [ 4,  5,  6,  7],\n                [ 8,  9, 10, 11],\n                [12, 13, 14,  0],\n                [ 1,  2,  3,  4]])\n```", "```py\nIn [87]: h\nOut[87]: array([[ 0,  1,  2],\n                [ 3,  4,  5],\n                [ 6,  7,  8],\n                [ 9, 10, 11],\n                [12, 13, 14]])\n\nIn [88]: np.hstack((h, 2 * h))  ![1](images/1.png)\nOut[88]: array([[ 0,  1,  2,  0,  2,  4],\n                [ 3,  4,  5,  6,  8, 10],\n                [ 6,  7,  8, 12, 14, 16],\n                [ 9, 10, 11, 18, 20, 22],\n                [12, 13, 14, 24, 26, 28]])\n\nIn [89]: np.vstack((h, 0.5 * h))  ![2](images/2.png)\nOut[89]: array([[  0. ,   1. ,   2. ],\n                [  3. ,   4. ,   5. ],\n                [  6. ,   7. ,   8. ],\n                [  9. ,  10. ,  11. ],\n                [ 12. ,  13. ,  14. ],\n                [  0. ,   0.5,   1. ],\n                [  1.5,   2. ,   2.5],\n                [  3. ,   3.5,   4. ],\n                [  4.5,   5. ,   5.5],\n                [  6. ,   6.5,   7. ]])\n```", "```py\nIn [90]: h\nOut[90]: array([[ 0,  1,  2],\n                [ 3,  4,  5],\n                [ 6,  7,  8],\n                [ 9, 10, 11],\n                [12, 13, 14]])\n\nIn [91]: h.flatten()  ![1](images/1.png)\nOut[91]: array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14])\n\nIn [92]: h.flatten(order='C')  ![1](images/1.png)\nOut[92]: array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14])\n\nIn [93]: h.flatten(order='F')  ![2](images/2.png)\nOut[93]: array([ 0,  3,  6,  9, 12,  1,  4,  7, 10, 13,  2,  5,  8, 11, 14])\n\nIn [94]: for i in h.flat:  ![3](images/3.png)\n             print(i, end=',')\n\n         0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,\n\nIn [95]: for i in h.ravel(order='C'):  ![4](images/4.png)\n             print(i, end=',')\n\n         0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,\n\nIn [96]: for i in h.ravel(order='F'):  ![4](images/4.png)\n             print(i, end=',')\n\n         0,3,6,9,12,1,4,7,10,13,2,5,8,11,14,\n```", "```py\nIn [164]: h\nOut[164]: array([[ 0,  1,  2],\n                 [ 3,  4,  5],\n                 [ 6,  7,  8],\n                 [ 9, 10, 11],\n                 [12, 13, 14]])\n\nIn [150]: h > 8  ![1](images/1.png)\nOut[150]: array([[False, False, False],\n                 [False, False, False],\n                 [False, False, False],\n                 [ True,  True,  True],\n                 [ True,  True,  True]], dtype=bool)\n\nIn [151]: h <= 7  ![2](images/2.png)\nOut[151]: array([[ True,  True,  True],\n                 [ True,  True,  True],\n                 [ True,  True, False],\n                 [False, False, False],\n                 [False, False, False]], dtype=bool)\n\nIn [152]: h == 5  ![3](images/3.png)\nOut[152]: array([[False, False, False],\n                 [False, False,  True],\n                 [False, False, False],\n                 [False, False, False],\n                 [False, False, False]], dtype=bool)\n\nIn [158]: (h == 5).astype(int)  ![4](images/4.png)\nOut[158]: array([[0, 0, 0],\n                 [0, 0, 1],\n                 [0, 0, 0],\n                 [0, 0, 0],\n                 [0, 0, 0]])\n\nIn [165]: (h > 4) & (h <= 12)  ![5](images/5.png)\nOut[165]: array([[False, False, False],\n                 [False, False,  True],\n                 [ True,  True,  True],\n                 [ True,  True,  True],\n                 [ True, False, False]], dtype=bool)\n```", "```py\nIn [153]: h[h > 8]  ![1](images/1.png)\nOut[153]: array([ 9, 10, 11, 12, 13, 14])\n\nIn [155]: h[(h > 4) & (h <= 12)]  ![2](images/2.png)\nOut[155]: array([ 5,  6,  7,  8,  9, 10, 11, 12])\n\nIn [157]: h[(h < 4) | (h >= 12)]  ![3](images/3.png)\nOut[157]: array([ 0,  1,  2,  3, 12, 13, 14])\n```", "```py\nIn [159]: np.where(h > 7, 1, 0)  ![1](images/1.png)\nOut[159]: array([[0, 0, 0],\n                 [0, 0, 0],\n                 [0, 0, 1],\n                 [1, 1, 1],\n                 [1, 1, 1]])\n\nIn [160]: np.where(h % 2 == 0, 'even', 'odd')  ![2](images/2.png)\nOut[160]: array([['even', 'odd', 'even'],\n                 ['odd', 'even', 'odd'],\n                 ['even', 'odd', 'even'],\n                 ['odd', 'even', 'odd'],\n                 ['even', 'odd', 'even']],\n                dtype='<U4')\n\nIn [163]: np.where(h <= 7, h * 2, h / 2)  ![3](images/3.png)\nOut[163]: array([[  0. ,   2. ,   4. ],\n                 [  6. ,   8. ,  10. ],\n                 [ 12. ,  14. ,   4. ],\n                 [  4.5,   5. ,   5.5],\n                 [  6. ,   6.5,   7. ]])\n```", "```py\nIn [97]: import random\n         I = 5000\n\nIn [98]: %time mat = [[random.gauss(0, 1) for j in range(I)] \\\n                      for i in range(I)]  ![1](images/1.png)\n\n         CPU times: user 20.9 s, sys: 372 ms, total: 21.3 s\n         Wall time: 21.3 s\n\nIn [99]: mat[0][:5]  ![2](images/2.png)\nOut[99]: [0.02023704728430644,\n          -0.5773300286314157,\n          -0.5034574089604074,\n          -0.07769332062744054,\n          -0.4264012594572326]\n\nIn [100]: %time sum([sum(l) for l in mat])  ![3](images/3.png)\n\n          CPU times: user 156 ms, sys: 1.93 ms, total: 158 ms\n          Wall time: 158 ms\n\nOut[100]: 681.9120404070142\n\nIn [101]: import sys\n          sum([sys.getsizeof(l) for l in mat])  ![4](images/4.png)\nOut[101]: 215200000\n```", "```py\nIn [102]: %time mat = np.random.standard_normal((I, I))  ![1](images/1.png)\n\n          CPU times: user 1.14 s, sys: 170 ms, total: 1.31 s\n          Wall time: 1.32 s\n\nIn [103]: %time mat.sum()  ![2](images/2.png)\n\n          CPU times: user 29.5 ms, sys: 1.32 ms, total: 30.8 ms\n          Wall time: 29.7 ms\n\nOut[103]: 2643.0006104377485\n\nIn [104]: mat.nbytes  ![3](images/3.png)\nOut[104]: 200000000\n\nIn [105]: sys.getsizeof(mat)  ![3](images/3.png)\nOut[105]: 200000112\n```", "```py\nIn [106]: dt = np.dtype([('Name', 'S10'), ('Age', 'i4'),\n                         ('Height', 'f'), ('Children/Pets', 'i4', 2)])  ![1](images/1.png)\n\nIn [107]: dt  ![1](images/1.png)\nOut[107]: dtype([('Name', 'S10'), ('Age', '<i4'), ('Height', '<f4'), ('Children/Pets', '<i4', (2,))])\n\nIn [108]: dt = np.dtype({'names': ['Name', 'Age', 'Height', 'Children/Pets'],\n                       'formats':'O int float int,int'.split()})  ![2](images/2.png)\n\nIn [109]: dt  ![2](images/2.png)\nOut[109]: dtype([('Name', 'O'), ('Age', '<i8'), ('Height', '<f8'), ('Children/Pets', [('f0', '<i8'), ('f1', '<i8')])])\n\nIn [110]: s = np.array([('Smith', 45, 1.83, (0, 1)),\n                        ('Jones', 53, 1.72, (2, 2))], dtype=dt)  ![3](images/3.png)\n\nIn [111]: s  ![3](images/3.png)\nOut[111]: array([('Smith', 45,  1.83, (0, 1)), ('Jones', 53,  1.72, (2, 2))],\n                dtype=[('Name', 'O'), ('Age', '<i8'), ('Height', '<f8'), ('Children/Pets', [('f0', '<i8'), ('f1', '<i8')])])\n\nIn [112]: type(s)  ![4](images/4.png)\nOut[112]: numpy.ndarray\n```", "```py\nIn [113]: s['Name']  ![1](images/1.png)\nOut[113]: array(['Smith', 'Jones'], dtype=object)\n\nIn [114]: s['Height'].mean()  ![2](images/2.png)\nOut[114]: 1.7749999999999999\n\nIn [115]: s[0]  ![3](images/3.png)\nOut[115]: ('Smith', 45,  1.83, (0, 1))\n\nIn [116]: s[1]['Age']  ![4](images/4.png)\nOut[116]: 53\n```", "```py\nIn [117]: np.random.seed(100)\n          r = np.arange(12).reshape((4, 3))  ![1](images/1.png)\n          s = np.arange(12).reshape((4, 3)) * 0.5  ![2](images/2.png)\n\nIn [118]: r  ![1](images/1.png)\nOut[118]: array([[ 0,  1,  2],\n                 [ 3,  4,  5],\n                 [ 6,  7,  8],\n                 [ 9, 10, 11]])\n\nIn [119]: s  ![2](images/2.png)\nOut[119]: array([[ 0. ,  0.5,  1. ],\n                 [ 1.5,  2. ,  2.5],\n                 [ 3. ,  3.5,  4. ],\n                 [ 4.5,  5. ,  5.5]])\n\nIn [120]: r + s  ![3](images/3.png)\nOut[120]: array([[  0. ,   1.5,   3. ],\n                 [  4.5,   6. ,   7.5],\n                 [  9. ,  10.5,  12. ],\n                 [ 13.5,  15. ,  16.5]])\n```", "```py\nIn [121]: r + 3  ![1](images/1.png)\nOut[121]: array([[ 3,  4,  5],\n                 [ 6,  7,  8],\n                 [ 9, 10, 11],\n                 [12, 13, 14]])\n\nIn [122]: 2 * r  ![2](images/2.png)\nOut[122]: array([[ 0,  2,  4],\n                 [ 6,  8, 10],\n                 [12, 14, 16],\n                 [18, 20, 22]])\n\nIn [123]: 2 * r + 3  ![3](images/3.png)\nOut[123]: array([[ 3,  5,  7],\n                 [ 9, 11, 13],\n                 [15, 17, 19],\n                 [21, 23, 25]])\n```", "```py\nIn [124]: r\nOut[124]: array([[ 0,  1,  2],\n                 [ 3,  4,  5],\n                 [ 6,  7,  8],\n                 [ 9, 10, 11]])\n\nIn [125]: r.shape\nOut[125]: (4, 3)\n\nIn [126]: s = np.arange(0, 12, 4)  ![1](images/1.png)\n          s  ![1](images/1.png)\nOut[126]: array([0, 4, 8])\n\nIn [127]: r + s  ![2](images/2.png)\nOut[127]: array([[ 0,  5, 10],\n                 [ 3,  8, 13],\n                 [ 6, 11, 16],\n                 [ 9, 14, 19]])\n\nIn [128]: s = np.arange(0, 12, 3)  ![3](images/3.png)\n          s  ![3](images/3.png)\nOut[128]: array([0, 3, 6, 9])\n\nIn [129]: # r + s ![4](images/4.png)\n\nIn [130]: r.transpose() + s  ![5](images/5.png)\nOut[130]: array([[ 0,  6, 12, 18],\n                 [ 1,  7, 13, 19],\n                 [ 2,  8, 14, 20]])\n\nIn [131]: sr = s.reshape(-1, 1)  ![6](images/6.png)\n          sr\nOut[131]: array([[0],\n                 [3],\n                 [6],\n                 [9]])\n\nIn [132]: sr.shape  ![6](images/6.png)\nOut[132]: (4, 1)\n\nIn [133]: r + s.reshape(-1, 1)  ![6](images/6.png)\nOut[133]: array([[ 0,  1,  2],\n                 [ 6,  7,  8],\n                 [12, 13, 14],\n                 [18, 19, 20]])\n```", "```py\nIn [134]: def f(x):\n              return 3 * x + 5  ![1](images/1.png)\n\nIn [135]: f(0.5)  ![2](images/2.png)\nOut[135]: 6.5\n\nIn [136]: f(r)  ![3](images/3.png)\nOut[136]: array([[ 5,  8, 11],\n                 [14, 17, 20],\n                 [23, 26, 29],\n                 [32, 35, 38]])\n```", "```py\nIn [137]: x = np.random.standard_normal((1000000, 5))  ![1](images/1.png)\n\nIn [138]: y = 2 * x + 3  ![2](images/2.png)\n\nIn [139]: C = np.array((x, y), order='C')  ![3](images/3.png)\n\nIn [140]: F = np.array((x, y), order='F')  ![4](images/4.png)\n\nIn [141]: x = 0.0; y = 0.0  ![5](images/5.png)\n\nIn [142]: C[:2].round(2)  ![6](images/6.png)\nOut[142]: array([[[-1.75,  0.34,  1.15, -0.25,  0.98],\n                  [ 0.51,  0.22, -1.07, -0.19,  0.26],\n                  [-0.46,  0.44, -0.58,  0.82,  0.67],\n                  ...,\n                  [-0.05,  0.14,  0.17,  0.33,  1.39],\n                  [ 1.02,  0.3 , -1.23, -0.68, -0.87],\n                  [ 0.83, -0.73,  1.03,  0.34, -0.46]],\n\n                 [[-0.5 ,  3.69,  5.31,  2.5 ,  4.96],\n                  [ 4.03,  3.44,  0.86,  2.62,  3.51],\n                  [ 2.08,  3.87,  1.83,  4.63,  4.35],\n                  ...,\n                  [ 2.9 ,  3.28,  3.33,  3.67,  5.78],\n                  [ 5.04,  3.6 ,  0.54,  1.65,  1.26],\n                  [ 4.67,  1.54,  5.06,  3.69,  2.07]]])\n```", "```py\nIn [143]: %timeit C.sum()  ![1](images/1.png)\n\n          4.65 ms ± 73.3 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)\n\nIn [144]: %timeit F.sum()  ![1](images/1.png)\n\n          4.56 ms ± 105 µs per loop (mean ± std. dev. of 7 runs, 100 loops each)\n\nIn [145]: %timeit C.sum(axis=0)  ![2](images/2.png)\n\n          20.9 ms ± 358 µs per loop (mean ± std. dev. of 7 runs, 10 loops each)\n\nIn [146]: %timeit C.sum(axis=1)  ![3](images/3.png)\n\n          38.5 ms ± 1.1 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)\n\nIn [147]: %timeit F.sum(axis=0)  ![2](images/2.png)\n\n          87.5 ms ± 1.37 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)\n\nIn [148]: %timeit F.sum(axis=1)  ![3](images/3.png)\n\n          81.6 ms ± 1.66 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)\n\nIn [149]: F = 0.0; C = 0.0\n```"]
["```py\nimport zmq  ![1](assets/1.png)\nimport math\nimport time\nimport random\n\ncontext = zmq.Context()  ![2](assets/2.png)\nsocket = context.socket(zmq.PUB)  ![3](assets/3.png)\nsocket.bind('tcp://0.0.0.0:5555')  ![4](assets/4.png)\n```", "```py\nclass InstrumentPrice(object):\n    def __init__(self):\n        self.symbol = 'SYMBOL'\n        self.t = time.time()  ![1](assets/1.png)\n        self.value = 100.\n        self.sigma = 0.4\n        self.r = 0.01\n\n    def simulate_value(self):\n        ''' Generates a new, random stock price.\n        '''\n        t = time.time()  ![2](assets/2.png)\n        dt = (t - self.t) / (252 * 8 * 60 * 60)  ![3](assets/3.png)\n        dt *= 500  ![4](assets/4.png)\n        self.t = t  ![5](assets/5.png)\n        self.value *= math.exp((self.r - 0.5 * self.sigma ** 2) * dt +\n                               self.sigma * math.sqrt(dt) * random.gauss(0, 1))  ![6](assets/6.png)\n        return self.value\n```", "```py\nip = InstrumentPrice()  ![1](assets/1.png)\n\nwhile True:  ![2](assets/2.png)\n    msg = '{} {:.2f}'.format(ip.symbol, ip.simulate_value())  ![3](assets/3.png)\n    print(msg)  ![4](assets/4.png)\n    socket.send_string(msg)  ![5](assets/5.png)\n    time.sleep(random.random() * 2)  ![6](assets/6.png)\n```", "```py\n(base) pro:ch07 yves$ Python TickServer.py\nSYMBOL 100.00\nSYMBOL 99.65\nSYMBOL 99.28\nSYMBOL 99.09\nSYMBOL 98.76\nSYMBOL 98.83\nSYMBOL 98.82\nSYMBOL 98.92\nSYMBOL 98.57\nSYMBOL 98.81\nSYMBOL 98.79\nSYMBOL 98.80\n```", "```py\nimport zmq  ![1](assets/1.png)\n\ncontext = zmq.Context()  ![2](assets/2.png)\nsocket = context.socket(zmq.SUB)  ![3](assets/3.png)\nsocket.connect('tcp://0.0.0.0:5555')  ![4](assets/4.png)\nsocket.setsockopt_string(zmq.SUBSCRIBE, 'SYMBOL')  ![5](assets/5.png)\n```", "```py\nwhile True:  ![1](assets/1.png)\n    data = socket.recv_string()  ![2](assets/2.png)\n    print(data)  ![3](assets/3.png)\n```", "```py\n(base) pro:ch07 yves$ Python TickClient.py\nSYMBOL 100.00\nSYMBOL 99.65\nSYMBOL 99.28\nSYMBOL 99.09\nSYMBOL 98.76\nSYMBOL 98.83\nSYMBOL 98.82\nSYMBOL 98.92\nSYMBOL 98.57\nSYMBOL 98.81\nSYMBOL 98.79\nSYMBOL 98.80\n```", "```py\ndf = pd.DataFrame()  ![1](assets/1.png)\nmom = 3  ![2](assets/2.png)\nmin_length = mom + 1  ![3](assets/3.png)\n\nwhile True:\n    data = socket.recv_string()  ![4](assets/4.png)\n    t = datetime.datetime.now()  ![5](assets/5.png)\n    sym, value = data.split()  ![6](assets/6.png)\n    df = df.append(pd.DataFrame({sym: float(value)}, index=[t]))  ![7](assets/7.png)\n```", "```py\n    dr = df.resample('5s', label='right').last()  ![1](assets/1.png)\n    dr['returns'] = np.log(dr / dr.shift(1))  ![2](assets/2.png)\n    if len(dr) > min_length:\n        min_length += 1  ![3](assets/3.png)\n        dr['momentum'] = np.sign(dr['returns'].rolling(mom).mean())  ![4](assets/4.png)\n        print('\\n' + '=' * 51)\n        print('NEW SIGNAL | {}'.format(datetime.datetime.now()))\n        print('=' * 51)\n        print(dr.iloc[:-1].tail())  ![5](assets/5.png)\n        if dr['momentum'].iloc[-2] == 1.0:  ![6](assets/6.png)\n            print('\\nLong market position.')\n            # take some action (e.g., place buy order)\n        elif dr['momentum'].iloc[-2] == -1.0:  ![7](assets/7.png)\n            print('\\nShort market position.')\n            # take some action (e.g., place sell order)\n```", "```py\n(base) yves@pro ch07 $ python OnlineAlgorithm.py\n\n===================================================\nNEW SIGNAL | 2020-05-23 11:33:31.233606\n===================================================\n                     SYMBOL  ...  momentum\n2020-05-23 11:33:15   98.65  ...       NaN\n2020-05-23 11:33:20   98.53  ...       NaN\n2020-05-23 11:33:25   98.83  ...       NaN\n2020-05-23 11:33:30   99.33  ...       1.0\n\n[4 rows x 3 columns]\n\nLong market position.\n\n===================================================\nNEW SIGNAL | 2020-05-23 11:33:36.185453\n===================================================\n                     SYMBOL  ...  momentum\n2020-05-23 11:33:15   98.65  ...       NaN\n2020-05-23 11:33:20   98.53  ...       NaN\n2020-05-23 11:33:25   98.83  ...       NaN\n2020-05-23 11:33:30   99.33  ...       1.0\n2020-05-23 11:33:35   97.76  ...      -1.0\n\n[5 rows x 3 columns]\n\nShort market position.\n\n===================================================\nNEW SIGNAL | 2020-05-23 11:33:40.077869\n===================================================\n                     SYMBOL  ...  momentum\n2020-05-23 11:33:20   98.53  ...       NaN\n2020-05-23 11:33:25   98.83  ...       NaN\n2020-05-23 11:33:30   99.33  ...       1.0\n2020-05-23 11:33:35   97.76  ...      -1.0\n2020-05-23 11:33:40   98.51  ...      -1.0\n\n[5 rows x 3 columns]\n\nShort market position.\n```", "```py\nconda install plotly ipywidgets\njupyter labextension install jupyterlab-plotly\njupyter labextension install @jupyter-widgets/jupyterlab-manager\njupyter labextension install plotlywidget\n```", "```py\nIn [1]: import zmq\n        from datetime import datetime\n        import plotly.graph_objects as go  ![1](assets/1.png)\n\nIn [2]: symbol = 'SYMBOL'\n\nIn [3]: fig = go.FigureWidget()  ![2](assets/2.png)\n        fig.add_scatter()  ![2](assets/2.png)\n        fig  ![2](assets/2.png)\nOut[3]: FigureWidget({\n       'data': [{'type': 'scatter', 'uid':\n        'e1a65f25-287d-4021-a210-c2f41f32426a'}], 'layout': {'t…\n```", "```py\nIn [4]: context = zmq.Context()\n\nIn [5]: socket = context.socket(zmq.SUB)\n\nIn [6]: socket.connect('tcp://0.0.0.0:5555')\n\nIn [7]: socket.setsockopt_string(zmq.SUBSCRIBE, 'SYMBOL')\n\nIn [8]: times = list()  ![1](assets/1.png)\n        prices = list()  ![2](assets/2.png)\n\nIn [9]: for _ in range(50):\n            msg = socket.recv_string()\n            t = datetime.now()  ![3](assets/3.png)\n            times.append(t)  ![3](assets/3.png)\n            _, price = msg.split()\n            prices.append(float(price))\n            fig.data[0].x = times  ![4](assets/4.png)\n            fig.data[0].y = prices  ![4](assets/4.png)\n```", "```py\nIn [10]: fig = go.FigureWidget()\n         fig.add_scatter(name='SYMBOL')\n         fig.add_scatter(name='SMA1', line=dict(width=1, dash='dot'),\n                         mode='lines+markers')\n         fig.add_scatter(name='SMA2', line=dict(width=1, dash='dash'),\n                         mode='lines+markers')\n         fig\nOut[10]: FigureWidget({\n        'data': [{'name': 'SYMBOL', 'type': 'scatter', 'uid':\n        'bcf83157-f015-411b-a834-d5fd6ac509ba…\n\nIn [11]: import pandas as pd\n\nIn [12]: df = pd.DataFrame()  ![1](assets/1.png)\n\nIn [13]: for _ in range(75):\n             msg = socket.recv_string()\n             t = datetime.now()\n             sym, price = msg.split()\n             df = df.append(pd.DataFrame({sym: float(price)}, index=[t]))  ![1](assets/1.png)\n             df['SMA1'] = df[sym].rolling(5).mean()  ![2](assets/2.png)\n             df['SMA2'] = df[sym].rolling(10).mean()  ![2](assets/2.png)\n             fig.data[0].x = df.index\n             fig.data[1].x = df.index\n             fig.data[2].x = df.index\n             fig.data[0].y = df[sym]\n             fig.data[1].y = df['SMA1']\n             fig.data[2].y = df['SMA2']\n```", "```py\nIn [14]: from plotly.subplots import make_subplots\n\nIn [15]: f = make_subplots(rows=3, cols=1, shared_xaxes=True)  ![1](assets/1.png)\n         f.append_trace(go.Scatter(name='SYMBOL'), row=1, col=1)  ![2](assets/2.png)\n         f.append_trace(go.Scatter(name='RETURN', line=dict(width=1, dash='dot'),\n                  mode='lines+markers', marker={'symbol': 'triangle-up'}),\n                  row=2, col=1)  ![3](assets/3.png)\n         f.append_trace(go.Scatter(name='MOMENTUM', line=dict(width=1, dash='dash'),\n                  mode='lines+markers', marker={'symbol': 'x'}), row=3, col=1)  ![4](assets/4.png)\n         # f.update_layout(height=600) ![5](assets/5.png)\n\nIn [16]: fig = go.FigureWidget(f)\n\nIn [17]: fig\nOut[17]: FigureWidget({\n           'data': [{'name': 'SYMBOL',\n                     'type': 'scatter',\n                     'uid': 'c8db0cac…\n\nIn [18]: import numpy as np\n\nIn [19]: df = pd.DataFrame()\n\nIn [20]: for _ in range(75):\n             msg = socket.recv_string()\n             t = datetime.now()\n             sym, price = msg.split()\n             df = df.append(pd.DataFrame({sym: float(price)}, index=[t]))\n             df['RET'] = np.log(df[sym] / df[sym].shift(1))\n             df['MOM'] = df['RET'].rolling(10).mean()\n             fig.data[0].x = df.index\n             fig.data[1].x = df.index\n             fig.data[2].x = df.index\n             fig.data[0].y = df[sym]\n             fig.data[1].y = df['RET']\n             fig.data[2].y = df['MOM']\n```", "```py\nIn [21]: socket = context.socket(zmq.SUB)\n\nIn [22]: socket.connect('tcp://0.0.0.0:5556')\n\nIn [23]: socket.setsockopt_string(zmq.SUBSCRIBE, '')\n\nIn [24]: for _ in range(5):\n             msg = socket.recv_string()\n             print(msg)\n         60.361 53.504 67.782 64.165 35.046 94.227 20.221 54.716\n         79.508 48.210 84.163 73.430 53.288 38.673 4.962 78.920\n         53.316 80.139 73.733 55.549 21.015 20.556 49.090 29.630\n         86.664 93.919 33.762 82.095 3.108 92.122 84.194 36.666\n         37.192 85.305 48.397 36.903 81.835 98.691 61.818 87.121\n\nIn [25]: fig = go.FigureWidget()\n         fig.add_bar()\n         fig\nOut[25]: FigureWidget({\n        'data': [{'type': 'bar', 'uid':\n        '51c6069f-4924-458d-a1ae-c5b5b5f3b07f'}], 'layout': {'templ…\n\nIn [26]: x = list('abcdefgh')\n         fig.data[0].x = x\n         for _ in range(25):\n             msg = socket.recv_string()\n             y = msg.split()\n             y = [float(n) for n in y]\n             fig.data[0].y = y\n```", "```py\n#\n# Python Script to Simulate a\n# Financial Tick Data Server\n#\n# Python for Algorithmic Trading\n# (c) Dr. Yves J. Hilpisch\n# The Python Quants GmbH\n#\nimport zmq\nimport math\nimport time\nimport random\n\ncontext = zmq.Context()\nsocket = context.socket(zmq.PUB)\nsocket.bind('tcp://0.0.0.0:5555')\n\nclass InstrumentPrice(object):\n    def __init__(self):\n        self.symbol = 'SYMBOL'\n        self.t = time.time()\n        self.value = 100.\n        self.sigma = 0.4\n        self.r = 0.01\n\n    def simulate_value(self):\n        ''' Generates a new, random stock price.\n '''\n        t = time.time()\n        dt = (t - self.t) / (252 * 8 * 60 * 60)\n        dt *= 500\n        self.t = t\n        self.value *= math.exp((self.r - 0.5 * self.sigma ** 2) * dt +\n                               self.sigma * math.sqrt(dt) * random.gauss(0, 1))\n        return self.value\n\nip = InstrumentPrice()\n\nwhile True:\n    msg = '{} {:.2f}'.format(ip.symbol, ip.simulate_value())\n    print(msg)\n    socket.send_string(msg)\n    time.sleep(random.random() * 2)\n```", "```py\n#\n# Python Script\n# with Tick Data Client\n#\n# Python for Algorithmic Trading\n# (c) Dr. Yves J. Hilpisch\n# The Python Quants GmbH\n#\nimport zmq\n\ncontext = zmq.Context()\nsocket = context.socket(zmq.SUB)\nsocket.connect('tcp://0.0.0.0:5555')\nsocket.setsockopt_string(zmq.SUBSCRIBE, 'SYMBOL')\n\nwhile True:\n    data = socket.recv_string()\n    print(data)\n```", "```py\n#\n# Python Script\n# with Online Trading Algorithm\n#\n# Python for Algorithmic Trading\n# (c) Dr. Yves J. Hilpisch\n# The Python Quants GmbH\n#\nimport zmq\nimport datetime\nimport numpy as np\nimport pandas as pd\n\ncontext = zmq.Context()\nsocket = context.socket(zmq.SUB)\nsocket.connect('tcp://0.0.0.0:5555')\nsocket.setsockopt_string(zmq.SUBSCRIBE, 'SYMBOL')\n\ndf = pd.DataFrame()\nmom = 3\nmin_length = mom + 1\n\nwhile True:\n    data = socket.recv_string()\n    t = datetime.datetime.now()\n    sym, value = data.split()\n    df = df.append(pd.DataFrame({sym: float(value)}, index=[t]))\n    dr = df.resample('5s', label='right').last()\n    dr['returns'] = np.log(dr / dr.shift(1))\n    if len(dr) > min_length:\n        min_length += 1\n        dr['momentum'] = np.sign(dr['returns'].rolling(mom).mean())\n        print('\\n' + '=' * 51)\n        print('NEW SIGNAL | {}'.format(datetime.datetime.now()))\n        print('=' * 51)\n        print(dr.iloc[:-1].tail())\n        if dr['momentum'].iloc[-2] == 1.0:\n            print('\\nLong market position.')\n            # take some action (e.g., place buy order)\n        elif dr['momentum'].iloc[-2] == -1.0:\n            print('\\nShort market position.')\n            # take some action (e.g., place sell order)\n```", "```py\n#\n# Python Script to Serve\n# Random Bars Data\n#\n# Python for Algorithmic Trading\n# (c) Dr. Yves J. Hilpisch\n# The Python Quants GmbH\n#\nimport zmq\nimport math\nimport time\nimport random\n\ncontext = zmq.Context()\nsocket = context.socket(zmq.PUB)\nsocket.bind('tcp://0.0.0.0:5556')\n\nwhile True:\n    bars = [random.random() * 100 for _ in range(8)]\n    msg = ' '.join([f'{bar:.3f}' for bar in bars])\n    print(msg)\n    socket.send_string(msg)\n    time.sleep(random.random() * 2)\n```"]
- en: Chapter 2\. Python Infrastructure
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第2章。Python基础设施
- en: In building a house, there is the problem of the selection of wood.
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在建造房屋时，木材的选择是一个问题。
- en: ''
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: It is essential that the carpenter’s aim be to carry equipment that will cut
    well and, when he has time, to sharpen that equipment.
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 重要的是，木匠的目标是携带能够良好切割的设备，并在有时间时磨刀。
- en: ''
  id: totrans-4
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Miyamoto Musashi (*The Book of Five Rings*)
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 宫本武藏（*《五轮书》*）
- en: For someone new to Python, Python deployment might seem all but straightforward.
    The same holds true for the wealth of libraries and packages that can be installed
    optionally. First of all, there is not only one Python. Python comes in many different
    flavors, like CPython, Jython, IronPython, or PyPy. Then there is still the divide
    between Python 2.7 and the 3.x world. This chapter focuses on *CPython*, the most
    popular version of the Python programming language, and on version 3.8.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 对于新手来说，Python部署可能看起来一切都不那么简单。对于可以选择安装的大量库和包，情况也是如此。首先，Python不只有一种。Python有许多不同的变体，如CPython、Jython、IronPython或PyPy。然后还存在Python
    2.7和3.x世界之间的分歧。本章重点介绍*CPython*，这是最流行的Python编程语言版本，以及版本3.8。
- en: 'Even when focusing on CPython 3.8 (henceforth just “Python”), deployment is
    made difficult due to a number of reasons:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 即使专注于CPython 3.8（以下简称“Python”），由于多种原因，部署也变得困难：
- en: The interpreter (a standard CPython installation) only comes with the so-called
    *standard library* (e.g. covering typical mathematical functions).
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解释器（标准CPython安装）只带有所谓的*标准库*（例如，包括典型的数学函数）。
- en: Optional Python packages need to be installed separately, and there are hundreds
    of them.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可选的Python包需要单独安装，而且有数百个这样的包。
- en: Compiling (“building”) such non-standard packages on your own can be tricky
    due to dependencies and operating system–specific requirements.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编译（“构建”）这些非标准包可能会因为依赖关系和特定操作系统的要求而变得棘手。
- en: Taking care of such dependencies and of version consistency over time (maintenance)
    is often tedious and time consuming.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 处理这些依赖关系和长期版本一致性（维护）通常是乏味且耗时的。
- en: Updates and upgrades for certain packages might cause the need for recompiling
    a multitude of other packages.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 特定包的更新和升级可能会导致需要重新编译大量其他包。
- en: Changing or replacing one package might cause trouble in (many) other places.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改或替换一个包可能会在（许多）其他地方引起麻烦。
- en: Migrating from one Python version to another one at some later point might amplify
    all the preceding issues.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在稍后的某个时间点从一个Python版本迁移到另一个版本可能会放大所有前述问题。
- en: 'Fortunately, there are tools and strategies available that help with the Python
    deployment issue. This chapter covers the following types of technologies that
    help with Python deployment:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，有可用的工具和策略可以帮助解决Python部署问题。本章涵盖了以下几种技术类型，这些技术有助于Python部署：
- en: Package manager
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 包管理器
- en: Package managers like [`pip`](https://oreil.ly/5vKCa) or [`conda`](https://oreil.ly/uTZRn)
    help with the installing, updating, and removing of Python packages. They also
    help with version consistency of different packages.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 像[`pip`](https://oreil.ly/5vKCa)或[`conda`](https://oreil.ly/uTZRn)这样的包管理器帮助安装、更新和删除Python包。它们还有助于不同包的版本一致性。
- en: Virtual environment manager
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟环境管理器
- en: A virtual environment manager like [`virtualenv`](https://oreil.ly/xMnlC) or
    `conda` allows one to manage multiple Python installations in parallel (for example,
    to have both a Python 2.7 and 3.8 installation on a single machine or to test
    the most recent development version of a fancy Python package without risk).^([1](ch02.html#idm45785393599784))
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 像[`virtualenv`](https://oreil.ly/xMnlC)或`conda`这样的虚拟环境管理器可以让你并行管理多个Python安装（例如，在单台机器上同时安装Python
    2.7和3.8，或者测试最新的Python包的开发版本而不会有风险）^([1](ch02.html#idm45785393599784))。
- en: Container
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 容器
- en: '[Docker](http://docker.com) containers represent complete file systems containing
    all pieces of a system needed to run a certain software, such as code, runtime,
    or system tools. For example, you can run a Ubuntu 20.04 operating system with
    a Python 3.8 installation and the respective Python codes in a Docker container
    hosted on a machine running Mac OS or Windows 10\. Such a containerized environment
    can then also be deployed later in the cloud without any major changes.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[Docker](http://docker.com)容器代表了包含运行特定软件所需的所有部件的完整文件系统，例如代码、运行时或系统工具。例如，您可以在运行Mac
    OS或Windows 10的机器上的Docker容器中运行一个带有Python 3.8安装和相应Python代码的Ubuntu 20.04操作系统。这样的容器化环境随后也可以在云中部署而无需进行任何重大更改。'
- en: Cloud instance
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 云实例
- en: Deploying Python code for financial applications generally requires high availability,
    security, and performance. These requirements can typically be met only by the
    use of professional compute and storage infrastructure that is nowadays available
    at attractive conditions in the form of fairly small to really large and powerful
    cloud instances. One benefit of a cloud instance (virtual server) compared to
    a dedicated server rented longer term is that users generally get charged only
    for the hours of actual usage. Another advantage is that such cloud instances
    are available literally in a minute or two if needed, which helps with agile development
    and scalability.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 部署用于金融应用的Python代码通常需要高可用性、安全性和性能。这些要求通常只能通过专业的计算和存储基础设施来满足，现在这些基础设施以非常有吸引力的条件提供，从相对小型到非常大型和强大的云实例都有。云实例（虚拟服务器）相对于长期租用的专用服务器的一个优势是，用户通常只需支付实际使用时间的费用。另一个优势是，这些云实例如果需要的话，可以在一两分钟内即可获得，这有助于敏捷开发和可伸缩性。
- en: The structure of this chapter is as follows. [“Conda as a Package Manager”](#conda_package)
    introduces `conda` as a package manager for Python. [“Conda as a Virtual Environment
    Manager”](#conda_environment) focuses on `conda` capabilities for virtual environment
    management. [“Using Docker Containers”](#docker_container) gives a brief overview
    of Docker as a containerization technology and focuses on the building of a Ubuntu-based
    container with Python 3.8 installation. [“Using Cloud Instances”](#cloud_instance)
    shows how to deploy Python and [`Jupyter Lab`](https://oreil.ly/4LqUS), a powerful,
    browser-based tool suite for Python development and deployment in the cloud.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的结构如下。[“包管理器 Conda”](#conda_package)介绍了`conda`作为Python包管理器。[“虚拟环境管理器 Conda”](#conda_environment)专注于`conda`在虚拟环境管理方面的功能。[“使用Docker容器”](#docker_container)简要介绍了作为容器化技术的Docker，并侧重于构建一个基于Ubuntu的容器并安装Python
    3.8。[“使用云实例”](#cloud_instance)展示了如何在云中部署Python和[`Jupyter Lab`](https://oreil.ly/4LqUS)，这是一个强大的基于浏览器的Python开发和部署工具套件。
- en: The goal of this chapter is to have a proper Python installation with the most
    important tools, as well as numerical, data analysis, and visualization packages,
    available on a professional infrastructure. This combination then serves as the
    backbone for implementing and deploying the Python codes in later chapters, be
    it interactive financial analytics code or code in the form of scripts and modules.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的目标是通过专业的基础设施，安装适用于Python的各种工具，以及数值分析和可视化包，来完成正确的Python安装。这一组合随后将作为后续章节中Python代码实施和部署的基础，无论是交互式金融分析代码还是脚本和模块形式的代码。
- en: Conda as a Package Manager
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[包管理器 Conda](https://oreil.ly/-Z_6H)'
- en: Although `conda` can be installed alone, an efficient way of doing it is via
    *Miniconda*, a minimal Python distribution that includes `conda` as a package
    and virtual environment manager.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然`conda`可以单独安装，但更高效的方法是通过*Miniconda*，一个包含`conda`作为包和虚拟环境管理器的最小Python发行版。
- en: Installing Miniconda
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Miniconda
- en: You can download the different versions of Miniconda on the [Miniconda page](https://oreil.ly/-Z_6H).
    In what follows, the Python 3.8 64-bit version is assumed, which is available
    for Linux, Windows, and Mac OS. The main example in this sub-section is a session
    in an Ubuntu-based Docker container, which downloads the Linux 64-bit installer
    via `wget` and then installs Miniconda. The code as shown should work (with maybe
    minor modifications) on any other Linux-based or Mac OS–based machine, as well:^([2](ch02.html#idm45785395838952))
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[Miniconda页面](https://oreil.ly/-Z_6H)下载不同版本的Miniconda。以下假设为Python 3.8的64位版本，适用于Linux、Windows和Mac
    OS。本小节的主要示例是在基于Ubuntu的Docker容器中进行的会话，该容器通过`wget`下载Linux 64位安装程序，然后安装Miniconda。如所示的代码应该可以（也许需要进行轻微修改）在任何其他基于Linux或Mac
    OS的机器上运行：^([2](ch02.html#idm45785395838952))
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Simply pressing the `ENTER` key starts the installation process. After reviewing
    the license agreement, approve the terms by answering `yes`:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 只需按下`ENTER`键即可开始安装过程。在查看许可协议后，通过回答`yes`来同意条款：
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'After you have agreed to the licensing terms and have confirmed the install
    location, you should allow Miniconda to prepend the new Miniconda install location
    to the `PATH` environment variable by answering `yes` once again:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 当您同意许可条款并确认安装位置后，您应该再次回答`yes`来允许Miniconda将新的Miniconda安装位置添加到`PATH`环境变量中：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'After that, you might want to update `conda` since the Miniconda installer
    is in general not as regularly updated as `conda` itself:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，您可能希望更新`conda`，因为Miniconda安装程序通常不像`conda`本身那样定期更新：
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'After this rather simple installation procedure, there are now both a basic
    Python installation and `conda` available. The basic Python installation comes
    already with some nice batteries included, like the [`SQLite3`](https://sqlite.org)
    database engine. You might try out whether you can start Python in a *new shell
    instance* or after *appending the relevant path* to the respective environment
    variable (as done in the preceding example):'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个相对简单的安装过程之后，现在既有基本的Python安装，也有`conda`可用。基本的Python安装已经包含了一些不错的预装功能，比如[`SQLite3`](https://sqlite.org)数据库引擎。您可以尝试在*新的Shell实例*中启动Python，或者在*附加相关路径*到相应环境变量后（如前面的例子中所做的）启动Python：
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Basic Operations with Conda
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Conda的基本操作
- en: '`conda` can be used to efficiently handle, among other things, the installation,
    updating, and removal of Python packages. The following list provides an overview
    of the major functions:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`conda`可以高效地处理，包括安装、更新和删除Python包。以下列表提供了主要功能的概述：'
- en: Installing Python x.x
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Python x.x
- en: '`conda install python=x.x`'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`conda install python=x.x`'
- en: Updating Python
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 更新Python
- en: '`conda update python`'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`conda update python`'
- en: Installing a package
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 安装一个包
- en: '`conda install $PACKAGE_NAME`'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`conda install $PACKAGE_NAME`'
- en: Updating a package
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 更新一个包
- en: '`conda update $PACKAGE_NAME`'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '`conda update $PACKAGE_NAME`'
- en: Removing a package
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 移除一个包
- en: '`conda remove $PACKAGE_NAME`'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`conda remove $PACKAGE_NAME`'
- en: Updating conda itself
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 更新conda本身
- en: '`conda update conda`'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`conda update conda`'
- en: Searching for packages
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 搜索包
- en: '`conda search $SEARCH_TERM`'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`conda search $SEARCH_TERM`'
- en: Listing installed packages
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 列出已安装的包
- en: '`conda list`'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`conda list`'
- en: Given these capabilities, installing, for example, `NumPy` (as one of the most
    important packages of the so-called *scientific stack*) is a single command only.
    When the installation takes place on a machine with an Intel processor, the procedure
    automatically installs the [Intel Math Kernel Library `mkl`](https://oreil.ly/Tca2C),
    which speeds up numerical operations not only for `NumPy` on Intel machines but
    also for a few other scientific Python packages:^([3](ch02.html#idm45785395802712))
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些功能，例如安装`NumPy`（作为所谓的*科学堆栈*中最重要的包之一）只需要一个命令。当在装有Intel处理器的机器上安装时，该过程会自动安装[Intel数学核心库`mkl`](https://oreil.ly/Tca2C)，它不仅加速了`NumPy`在Intel机器上的数值运算，也为其他几个科学Python包提速：^([3](ch02.html#idm45785395802712))
- en: '[PRE5]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Multiple packages can also be installed at once. The `-y` flag indicates that
    all (potential) questions shall be answered with `yes`:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 多个包也可以一次性安装。`-y`标志表示所有（可能的）问题都将回答为`yes`：
- en: '[PRE6]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'After the resulting installation procedure, some of the most important libraries
    for financial analytics are available in addition to the standard ones:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 安装程序生成后，一些最重要的用于金融分析的库除了标准库外还可以使用：
- en: '[IPython](http://ipython.org)'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '[IPython](http://ipython.org)'
- en: An improved interactive Python shell
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 改进的交互式Python Shell
- en: '[matplotlib](http://matplotlib.org)'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '[matplotlib](http://matplotlib.org)'
- en: The standard plotting library for Python
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Python的标准绘图库
- en: '[NumPy](http://numpy.org)'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '[NumPy](http://numpy.org)'
- en: Efficient handling of numerical arrays
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 高效处理数值数组
- en: '[pandas](http://pandas.pydata.org)'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '[pandas](http://pandas.pydata.org)'
- en: Management of tabular data, like financial time series data
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 管理表格数据，如金融时间序列数据
- en: '[PyTables](http://pytables.org)'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '[PyTables](http://pytables.org)'
- en: A Python wrapper for the [HDF5](http://hdfgroup.org) library
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: Python对[HDF5](http://hdfgroup.org)库的封装
- en: '[scikit-learn](http://scikit-learn.org)'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '[scikit-learn](http://scikit-learn.org)'
- en: A package for machine learning and related tasks
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 用于机器学习及相关任务的包
- en: '[SciPy](http://scipy.org)'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '[SciPy](http://scipy.org)'
- en: A collection of scientific classes and functions
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 一组科学类和函数
- en: 'This provides a basic tool set for data analysis in general and financial analytics
    in particular. The next example uses `IPython` and draws a set of pseudo-random
    numbers with `NumPy`:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这为一般数据分析和特别是金融分析提供了基本工具集。下一个例子使用`IPython`并使用`NumPy`生成一组伪随机数：
- en: '[PRE7]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Executing `conda list` shows which packages are installed:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 执行`conda list`可以显示已安装的包：
- en: '[PRE8]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In case a package is not needed anymore, it is efficiently removed with `conda
    remove`:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不再需要某个包，可以使用`conda remove`高效移除：
- en: '[PRE9]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '`conda` as a package manager is already quite useful. However, its full power
    only becomes evident when adding virtual environment management to the mix.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个包管理器，`conda`已经非常有用。然而，只有在将虚拟环境管理添加到混合中时，其全部力量才会显现出来。
- en: '`conda` as a package manager makes installing, updating, and removing Python
    packages a pleasant experience. There is no need to take care of building and
    compiling packages on your own, which can be tricky sometimes given the list of
    dependencies a package specifies and given the specifics to be considered on different
    operating systems.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个包管理器，`conda`使得安装、更新和移除Python包变得愉快。不需要自行处理构建和编译包，这有时可能会很棘手，因为一个包指定的依赖列表和不同操作系统上需要考虑的细节。
- en: Conda as a Virtual Environment Manager
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Conda作为虚拟环境管理器
- en: 'Having installed Miniconda with `conda` included provides a default Python
    installation depending on what version of Miniconda has been chosen. The virtual
    environment management capabilities of `conda` allow one, for example, to add
    to a Python 3.8 default installation a completely separated installation of Python
    2.7.x. To this end, `conda` offers the following functionality:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 安装了包括`conda`的Miniconda后，会根据所选择的Miniconda版本提供一个默认的Python安装。`conda`的虚拟环境管理功能允许用户在Python
    3.8的默认安装基础上完全分离地安装Python 2.7.x。为此，`conda`提供以下功能：
- en: Creating a virtual environment
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个虚拟环境
- en: '`conda create --name $ENVIRONMENT_NAME`'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`conda create --name $ENVIRONMENT_NAME`'
- en: Activating an environment
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 激活一个环境
- en: '`conda activate $ENVIRONMENT_NAME`'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`conda activate $ENVIRONMENT_NAME`'
- en: Deactivating an environment
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 停用一个环境
- en: '`conda deactivate $ENVIRONMENT_NAME`'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`conda deactivate $ENVIRONMENT_NAME`'
- en: Removing an environment
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 移除一个环境
- en: '`conda env remove --name $ENVIRONMENT_NAME`'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`conda env remove --name $ENVIRONMENT_NAME`'
- en: Exporting to an environment file
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 导出到环境文件
- en: '`conda env export > $FILE_NAME`'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`conda env export > $FILE_NAME`'
- en: Creating an environment from a file
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 从文件创建一个环境
- en: '`conda env create -f $FILE_NAME`'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`conda env create -f $FILE_NAME`'
- en: Listing all environments
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 列出所有环境
- en: '`conda info --envs`'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`conda info --envs`'
- en: 'As a simple illustration, the example code that follows creates an environment
    called `py27`, installs `IPython`, and executes a line of Python 2.7.x code. Although
    the support for Python 2.7 has ended, the example illustrates how legacy Python
    2.7 code can easily be executed and tested:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个简单的示例，接下来的示例代码创建了一个名为`py27`的环境，安装了`IPython`，并执行了一行Python 2.7.x的代码。尽管Python
    2.7的支持已经结束，但这个示例说明了如何轻松执行和测试遗留的Python 2.7代码：
- en: '[PRE10]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Notice how the prompt changes to include `(py27)` after the environment is
    activated:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 注意环境激活后提示符的变化，包含`(py27)`：
- en: '[PRE11]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Finally, this allows one to use `IPython` with Python 2.7 syntax:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，这使得用户可以使用`IPython`并使用Python 2.7语法：
- en: '[PRE12]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'As this example demonstrates, `conda` as a virtual environment manager allows
    one to install different Python versions alongside each other. It also allows
    one to install different versions of certain packages. The default Python installation
    is not influenced by such a procedure, nor are other environments that might exist
    on the same machine. All available environments can be shown via `conda info --envs`:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 正如这个示例所展示的，`conda`作为一个虚拟环境管理器，允许用户在同一台机器上安装不同的Python版本。它还允许用户安装不同版本的特定包。默认的Python安装不会受到这样的操作的影响，也不会影响同一机器上可能存在的其他环境。可以通过`conda
    info --envs`命令显示所有可用的环境：
- en: '[PRE13]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Sometimes it is necessary to share environment information with others or to
    use environment information on multiple machines, for instance. To this end, one
    can export the installed packages list to a file with `conda env export`. However,
    this only works properly by default for the same operating system since the build
    versions are specified in the resulting `yaml` file. However, they can be deleted
    to only specify the package version via the `--no-builds` flag:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 有时需要与他人共享环境信息或在多台机器上使用环境信息。为此，可以通过`conda env export`将已安装的包列表导出到文件中。然而，默认情况下，这仅适用于相同的操作系统，因为生成的`yaml`文件中指定了构建版本。可以通过`--no-builds`标志删除它们，只指定包的版本：
- en: '[PRE14]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Often, virtual environments, which are technically not that much more than
    a certain (sub-)folder structure, are created to do some quick tests.^([4](ch02.html#idm45785399695288))
    In such a case, an environment is easily removed (after deactivation) via `conda
    env remove`:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，虚拟环境仅仅是一个特定的（子）文件夹结构，用于进行一些快速测试。在这种情况下，环境可以通过`conda env remove`命令轻松地（在停用后）移除：
- en: '[PRE15]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This concludes the overview of `conda` as a virtual environment manager.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这就完成了`conda`作为虚拟环境管理器的概述。
- en: '`conda` not only helps with managing packages, but it is also a virtual environment
    manager for Python. It simplifies the creation of different Python environments,
    allowing one to have multiple versions of Python and optional packages available
    on the same machine without them influencing each other in any way. `conda` also
    allows one to export environment information to easily replicate it on multiple
    machines or to share it with others.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '`conda` 不仅帮助管理软件包，还是 Python 的虚拟环境管理器。它简化了创建不同 Python 环境的过程，允许在同一台机器上拥有多个 Python
    版本和可选包，而彼此之间不会相互影响。`conda` 还允许将环境信息导出，以便在多台机器上轻松复制或与他人分享。'
- en: Using Docker Containers
  id: totrans-114
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Docker 容器
- en: Docker containers have taken the IT world by storm (see [Docker](http://docker.com)).
    Although the technology is still relatively young, it has established itself as
    one of the benchmarks for the efficient development and deployment of almost any
    kind of software application.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: Docker 容器已经在 IT 领域掀起了风暴（参见[Docker](http://docker.com)）。尽管技术还相对年轻，但已经确立了作为几乎任何软件应用高效开发和部署的标准之一。
- en: For our purposes, it suffices to think of a Docker container as a separated
    (“containerized”) file system that includes an operating system (for example,
    Ubuntu 20.04 LTS for server), a (Python) runtime, additional system and development
    tools, and further (Python) libraries and packages as needed. Such a Docker container
    might run on a local machine with Windows 10 Professional 64 Bit or on a cloud
    instance with a Linux operating system, for instance.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的目的，可以将 Docker 容器简单地理解为一个独立的文件系统，其中包括操作系统（例如，用于服务器的 Ubuntu 20.04 LTS）、一个（Python）运行时、额外的系统和开发工具，以及根据需要的其他（Python）库和包。这样的
    Docker 容器可以在本地运行的 Windows 10 专业版 64 位机器上，也可以在带有 Linux 操作系统的云实例上运行。
- en: This section goes into the exciting details of Docker containers. It is a concise
    illustration of what the Docker technology can do in the context of Python deployment.^([5](ch02.html#idm45785399679560))
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 本节详细介绍了 Docker 容器的精彩细节。它简要说明了 Docker 技术在 Python 部署背景下的应用[^5]。
- en: Docker Images and Containers
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Docker 镜像和容器
- en: Before moving on to the illustration, two fundamental terms need to be distinguished
    when talking about Docker. The first is a *Docker image*, which can be compared
    to a Python class. The second is a *Docker container*, which can be compared to
    an instance of the respective Python class.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在进入说明之前，谈论 Docker 时需要区分两个基本术语。第一个是*Docker 镜像*，可以类比为 Python 类。第二个是*Docker 容器*，可以类比为相应
    Python 类的实例。
- en: 'On a more technical level, you will find the following definition for a *Docker
    image* in the [Docker glossary](https://oreil.ly/NNUiB):'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在更技术层面上，您将在[Docker 术语表](https://oreil.ly/NNUiB)中找到*Docker 镜像*的以下定义：
- en: Docker images are the basis of containers. An image is an ordered collection
    of root filesystem changes and the corresponding execution parameters for use
    within a container runtime. An image typically contains a union of layered filesystems
    stacked on top of each other. An image does not have state and it never changes.
  id: totrans-121
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Docker 镜像是容器的基础。镜像是一组有序的根文件系统更改及其在容器运行时使用的执行参数。镜像通常包含一组层式文件系统的联合，依次堆叠在一起。镜像没有状态，永远不会改变。
- en: 'Similarly, you will find the following definition for a *Docker container*
    in the [Docker glossary](https://oreil.ly/NNUiB), which makes the analogy to Python
    classes and instances of such classes transparent:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，在[Docker 术语表](https://oreil.ly/NNUiB)中，您将找到*Docker 容器*的以下定义，这使得它与 Python
    类和这些类的实例之间的类比更加透明：
- en: A container is a runtime instance of a Docker image.
  id: totrans-123
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 容器是 Docker 镜像的运行时实例。
- en: ''
  id: totrans-124
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A Docker container consists of
  id: totrans-125
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Docker 容器包括
- en: ''
  id: totrans-126
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A Docker image
  id: totrans-127
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 Docker 镜像
- en: ''
  id: totrans-128
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-129
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: An execution environment
  id: totrans-130
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个执行环境
- en: ''
  id: totrans-131
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-132
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: A standard set of instructions
  id: totrans-133
  prefs:
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一组标准指令
- en: ''
  id: totrans-134
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-135
  prefs:
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-136
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The concept is borrowed from Shipping Containers, which define a standard to
    ship goods globally. Docker defines a standard to ship software.
  id: totrans-137
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 这个概念借鉴了集装箱运输，它定义了全球货物运输的标准。Docker 定义了软件运输的标准。
- en: Depending on the operating system, the installation of Docker is somewhat different.
    That is why this section does not go into the respective details. More information
    and further links are found on the [Get Docker page](https://oreil.ly/hGgxs).
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 根据操作系统的不同，安装 Docker 也有所不同。因此，本节不涉及各自的详细信息。有关更多信息和进一步链接，请参阅[获取 Docker 页面](https://oreil.ly/hGgxs)。
- en: Building a Ubuntu and Python Docker Image
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建 Ubuntu 和 Python Docker 镜像
- en: This sub-section illustrates the building of a Docker image based on the latest
    version of Ubuntu that includes Miniconda, as well as a few important Python packages.
    In addition, it does some Linux housekeeping by updating the Linux packages index,
    upgrading packages if required and installing certain additional system tools.
    To this end, two scripts are needed. One is a `Bash` script doing all the work
    on the Linux level.^([6](ch02.html#idm45785399656040)) The other is a so-called
    *Dockerfile*, which controls the building procedure for the image itself.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这个小节展示了基于最新版本的 Ubuntu 构建 Docker 镜像的过程，包括 Miniconda 和一些重要的 Python 包。此外，它通过更新
    Linux 软件包索引、根据需要升级软件包并安装某些额外的系统工具来进行一些 Linux 基础工作。为此，需要两个脚本。一个是在 Linux 级别上执行所有工作的
    `Bash` 脚本。另一个是所谓的 *Dockerfile*，控制镜像本身的构建过程。
- en: 'The Bash script in [Example 2-1](#docker_install), which does the installing,
    consists of three major parts. The first part handles the Linux housekeeping.
    The second part installs Miniconda, while the third part installs optional Python
    packages. There are also more detailed comments inline:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 2-1](#docker_install) 中的 `Bash` 脚本负责安装，它包括三个主要部分。第一部分处理 Linux 的基础工作。第二部分安装
    Miniconda，而第三部分安装可选的 Python 包。还有更详细的内联注释：'
- en: Example 2-1\. Script installing Python and optional packages
  id: totrans-142
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 2-1\. 安装 Python 和可选包的脚本
- en: '[PRE16]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The `Dockerfile` in [Example 2-2](#docker_file) uses the `Bash` script in [Example 2-1](#docker_install)
    to build a new Docker image. It also has its major parts commented inline:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '[示例 2-2](#docker_file) 中的 `Dockerfile` 使用 [示例 2-1](#docker_install) 中的 `Bash`
    脚本来构建新的 Docker 镜像。它还在内联中注释了其主要部分：'
- en: Example 2-2\. Dockerfile to build the image
  id: totrans-145
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 2-2\. Dockerfile 用于构建镜像
- en: '[PRE17]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'If these two files are in a single folder and Docker is installed, then the
    building of the new Docker image is straightforward. Here, the tag `pyalgo:basic`
    is used for the image. This tag is needed to reference the image, for example,
    when running a container based on it:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这两个文件位于同一个文件夹中，并且已安装 Docker，则构建新的 Docker 镜像非常简单。在这里，标签 `pyalgo:basic` 用于这个镜像的引用。例如，在基于它运行容器时需要这个标签：
- en: '[PRE18]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Existing Docker images can be listed via `docker images`. The new image should
    be on top of the list:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 现有的 Docker 镜像可以通过 `docker images` 命令列出。新镜像应该位于列表的顶部：
- en: '[PRE19]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Having built the `pyalgo:basic` image successfully allows one to run a respective
    Docker container with `docker run`. The parameter combination `-ti` is needed
    for interactive processes running within a Docker container, like a shell process
    of `IPython` (see the [Docker Run Reference page](https://oreil.ly/s0_hn)):'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 成功构建了 `pyalgo:basic` 镜像后，可以使用 `docker run` 命令来运行相应的 Docker 容器。参数组合 `-ti` 对于在
    Docker 容器内运行交互式进程（比如 `IPython` 的 shell 进程）是必需的（参见 [Docker Run 参考页面](https://oreil.ly/s0_hn)）：
- en: '[PRE20]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Exiting `IPython` will exit the container as well, since it is the only application
    running within the container. However, you can detach from a container via the
    following:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 退出 `IPython` 将同时退出容器，因为它是容器内唯一运行的应用程序。但是，您可以通过以下方式从容器分离：
- en: '[PRE21]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'After having detached from the container, the `docker ps` command shows the
    running container (and maybe other currently running containers):'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在从容器分离后，`docker ps` 命令显示运行中的容器（以及可能的其他当前运行容器）：
- en: '[PRE22]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Attaching to the Docker container is accomplished by `docker attach $CONTAINER_ID`.
    Notice that a few letters of the `CONTAINER ID` are enough:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 通过 `docker attach $CONTAINER_ID` 来附加到 Docker 容器。请注意，`CONTAINER ID` 的几个字母就足够了：
- en: '[PRE23]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The `exit` command terminates `IPython` and therewith stops the Docker container,
    as well. It can be removed by `docker rm`:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '`exit` 命令终止 `IPython` 并因此停止 Docker 容器。可以通过 `docker rm` 命令移除它：'
- en: '[PRE24]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Similarly, the Docker image `pyalgo:basic` can be removed via `docker rmi`
    if not needed any longer. While containers are relatively lightweight, single
    images might consume quite a bit of storage. In the case of the `pyalgo:basic`
    image, the size is close to 2 GB. That is why you might want to regularly clean
    up the list of Docker images:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，如果不再需要，可以通过 `docker rmi` 移除 Docker 镜像 `pyalgo:basic`。虽然容器比较轻量级，但单个镜像可能会占用大量存储空间。对于
    `pyalgo:basic` 镜像，其大小接近 2 GB。因此，您可能希望定期清理 Docker 镜像列表：
- en: '[PRE25]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Of course, there is much more to say about Docker containers and their benefits
    in certain application scenarios. For the purposes of this book, they provide
    a modern approach to deploying Python, to doing Python development in a completely
    separated (containerized) environment, and to shipping codes for algorithmic trading.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，在某些应用场景中，关于 Docker 容器及其优势还有很多可以说的。在本书中，它们提供了一种现代化的方法来部署 Python，以在完全分离的（容器化）环境中进行
    Python 开发，并为算法交易提供代码发布的途径。
- en: If you are not yet using Docker containers, you should consider starting to
    use them. They provide a number of benefits when it comes to Python deployment
    and development efforts, not only when working locally but also in particular
    when working with remote cloud instances and servers deploying code for algorithmic
    trading.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您尚未使用 Docker 容器，应考虑开始使用它们。在处理 Python 部署和开发工作时，它们提供了许多好处，不仅在本地工作时，特别是在与远程云实例和服务器部署算法交易代码时。
- en: Using Cloud Instances
  id: totrans-165
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用云实例
- en: This section shows how to set up a full-fledged Python infrastructure on a [DigitalOcean](http://digitalocean.com)
    cloud instance. There are many other cloud providers out there, among them [Amazon
    Web Services](http://aws.amazon.com) (AWS) as the leading provider. However, DigitalOcean
    is well known for its simplicity and relatively low rates for smaller cloud instances,
    which it calls *Droplet*. The smallest Droplet, which is generally sufficient
    for exploration and development purposes, only costs 5 USD per month or 0.007
    USD per hour. Usage is charged by the hour so that one can (for example) easily
    spin up a Droplet for two hours, destroy it, and get charged just 0.014 USD.^([7](ch02.html#idm45785399102600))
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 本节展示了如何在[DigitalOcean](http://digitalocean.com)云实例上设置完整的 Python 基础设施。市面上有许多其他云提供商，其中以[Amazon
    Web Services](http://aws.amazon.com)（AWS）为主要提供商。然而，DigitalOcean 以其简易性和较低的小型云实例费率而闻名，其称之为*Droplet*。最小的
    Droplet，通常足以进行探索和开发，每月只需 5 美元或每小时 0.007 美元。按小时计费，因此可以（例如）轻松地启动一个 Droplet 两小时，销毁它，并只收取
    0.014 美元的费用。^([7](ch02.html#idm45785399102600))
- en: 'The goal of this section is to set up a Droplet on DigitalOcean that has a
    Python 3.8 installation plus typically needed packages (such as `NumPy` and `pandas`)
    in combination with a password-protected and Secure Sockets Layer (SSL)-encrypted
    [Jupyter Lab](http://jupyter.org) server installation.^([8](ch02.html#idm45785399086424))
    As a web-based tool suite, `Jupyter Lab` provides several tools that can be used
    via a regular browser:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 本节的目标是在 DigitalOcean 上设置一个 Droplet，该 Droplet 安装了 Python 3.8 并包含通常所需的包（如`NumPy`和`pandas`），并结合密码保护和安全套接层（SSL）加密的[Jupyter
    Lab](http://jupyter.org)服务器安装。^([8](ch02.html#idm45785399086424)) 作为一个基于 Web 的工具套件，`Jupyter
    Lab`提供了几个可以通过常规浏览器使用的工具：
- en: Jupyter Notebook
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: Jupyter Notebook
- en: This is one of the most popular (if not *the* most popular) browser-based, interactive
    development environment that features a selection of different language kernels
    like Python, R, and Julia.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 这是最受欢迎的（如果不是*最受欢迎的*）基于浏览器的交互式开发环境，具有不同语言内核的选择，如 Python、R 和 Julia。
- en: Python console
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: Python 控制台
- en: This is an `IPython`-based console that has a graphical user interface different
    from the look and feel of the standard, terminal-based implementation.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 这是基于`IPython`的控制台，其图形用户界面与标准的基于终端的实现外观和感觉不同。
- en: Terminal
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 终端
- en: This is a system shell implementation accessible via the browser that allows
    not only for all typical system administration tasks, but also for usage of helpful
    tools such as [`Vim`](http://vim.org/download) for code editing or [`git`](https://git-scm.com/)
    for version control.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个通过浏览器访问的系统 shell 实现，不仅允许进行所有典型的系统管理任务，还可以使用诸如[`Vim`](http://vim.org/download)进行代码编辑或[`git`](https://git-scm.com/)进行版本控制等有用工具。
- en: Editor
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑器
- en: Another major tool is a browser-based text file editor with syntax highlighting
    for many different programming languages and file types, as well as typical text/code
    editing capabilities.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个重要工具是基于浏览器的文本文件编辑器，支持许多不同的编程语言和文件类型的语法高亮显示，以及典型的文本/代码编辑功能。
- en: File manager
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 文件管理器
- en: '`Jupyter Lab` also provides a full-fledged file manager that allows for typical
    file operations, such as uploading, downloading, and renaming.'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '`Jupyter Lab`还提供了一个功能齐全的文件管理器，可以进行典型的文件操作，如上传、下载和重命名。'
- en: Having `Jupyter Lab` installed on a Droplet allows one to do Python development
    and deployment via the browser, circumventing the need to log in to the cloud
    instance via Secure Shell (SSH) access.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 在Droplet上安装`Jupyter Lab`允许通过浏览器进行Python开发和部署，避免通过安全外壳（SSH）访问云实例的需要。
- en: 'To accomplish the goal of this section, several scripts are needed:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成本节的目标，需要几个脚本：
- en: Server setup script
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器设置脚本
- en: This script orchestrates all steps necessary, such as copying other files to
    the Droplet and running them on the Droplet.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 此脚本编排所有必要的步骤，例如复制其他文件到Droplet并在Droplet上运行它们。
- en: Python and `Jupyter` installation script
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: Python和`Jupyter`安装脚本
- en: This script installs Python, additional packages, `Jupyter Lab`, and starts
    the `Jupyter Lab` server.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 此脚本安装Python、额外的包、`Jupyter Lab`并启动`Jupyter Lab`服务器。
- en: Jupyter Notebook configuration file
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: Jupyter Notebook配置文件
- en: This file is for the configuration of the `Jupyter Lab` server, for example,
    with regard to password protection.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件用于配置`Jupyter Lab`服务器，例如关于密码保护的设置。
- en: RSA public and private key files
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: RSA公钥和私钥文件
- en: These two files are needed for the SSL encryption of the communication with
    the `Jupyter Lab` server.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个文件是与`Jupyter Lab`服务器通信的SSL加密所必需的。
- en: The following section works backwards through this list of files since although
    the setup script is executed first, the other files need to have been created
    beforehand.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 下一节反向操作列出这些文件，因为虽然设置脚本首先执行，但其他文件需要事先创建。
- en: RSA Public and Private Keys
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: RSA公钥和私钥
- en: 'In order to accomplish a secure connection to the `Jupyter Lab` server via
    an arbitrary browser, an SSL certificate consisting of RSA public and private
    keys (see [RSA Wikipedia page](https://oreil.ly/8UG1K)) is needed. In general,
    one would expect that such a certificate comes from a so-called Certificate Authority
    (CA). For the purposes of this book, however, a self-generated certificate is
    “good enough.”^([9](ch02.html#idm45785399055176)) A popular tool to generate RSA
    key pairs is [`OpenSSL`](http://openssl.org). The brief interactive session to
    follow generates a certificate appropriate for use with a `Jupyter Lab` server
    (see the [Jupyter Notebook docs](https://oreil.ly/YxxaF)):'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 为了通过任意浏览器与`Jupyter Lab`服务器建立安全连接，需要包含RSA公钥和私钥的SSL证书（参见[RSA维基百科页面](https://oreil.ly/8UG1K)）。通常，人们期望这样的证书来自所谓的证书颁发机构（CA）。然而，对于本书的目的，自动生成的证书“足够好”。一个流行的工具用于生成RSA密钥对是[`OpenSSL`](http://openssl.org)。接下来的简短交互会话生成适用于`Jupyter
    Lab`服务器的证书（参见[Jupyter Notebook文档](https://oreil.ly/YxxaF)）：
- en: '[PRE26]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The two files `mykey.key` and `mycert.pem` need to be copied to the Droplet
    and need to be referenced by the `Jupyter Notebook` configuration file. This file
    is presented next.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 需要将两个文件`mykey.key`和`mycert.pem`复制到Droplet，并在`Jupyter Notebook`配置文件中引用这些文件。接下来会介绍这个文件。
- en: Jupyter Notebook Configuration File
  id: totrans-193
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Jupyter Notebook配置文件
- en: 'A public `Jupyter Lab` server can be deployed securely, as explained in the
    [Jupyter Notebook docs](https://oreil.ly/YxxaF). Among others things, `Jupyter
    Lab` shall be password protected. To this end, there is a password hash code-generating
    function called `passwd()` available in the `notebook.auth` sub-package. The following
    code generates a password hash code with `jupyter` being the password itself:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 可以根据[Jupyter Notebook文档](https://oreil.ly/YxxaF)安全部署公共`Jupyter Lab`服务器。其中，`Jupyter
    Lab`应该设置密码保护。为此，`notebook.auth`子包中有一个名为`passwd()`的函数可以生成密码哈希码。以下代码生成一个以`jupyter`为密码的密码哈希码：
- en: '[PRE27]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: This hash code needs to be placed in the `Jupyter Notebook` configuration file
    as presented in [Example 2-3](#jupyter_config_file). The configuration file assumes
    that the RSA key files have been copied on the Droplet to the `/root/.jupyter/`
    folder.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 此哈希码需要放置在`Jupyter Notebook`配置文件中，如[示例2-3](#jupyter_config_file)所示。配置文件假定RSA密钥文件已复制到Droplet的`/root/.jupyter/`文件夹中。
- en: Example 2-3\. Jupyter Notebook configuration file
  id: totrans-197
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例2-3. Jupyter Notebook配置文件
- en: '[PRE28]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The next step is to make sure that Python and `Jupyter Lab` get installed on
    the Droplet.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是确保Python和`Jupyter Lab`在Droplet上安装。
- en: Deploying `Jupyter Lab` in the cloud leads to a number of security issues since
    it is a full-fledged development environment accessible via a web browser. It
    is therefore of paramount importance to use the security measures that a `Jupyter
    Lab` server provides by default, like password protection and SSL encryption.
    But this is just the beginning, and further security measures might be advised
    depending on what exactly is done on the cloud instance.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在云中部署`Jupyter Lab`会导致一些安全问题，因为它是通过Web浏览器访问的全功能开发环境。因此，使用`Jupyter Lab`服务器默认提供的安全措施至关重要，如密码保护和SSL加密。但这只是开始，根据在云实例上具体执行的任务，可能建议采取进一步的安全措施。
- en: Installation Script for Python and Jupyter Lab
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python和Jupyter Lab的安装脚本
- en: The bash script to install Python and `Jupyter Lab` is similar to the one presented
    in section [“Using Docker Containers”](#docker_container) to install Python via
    Miniconda in a Docker container. However, the script in [Example 2-4](#cloud_install)
    needs to start the `Jupyter Lab` server, as well. All major parts and lines of
    code are commented inline.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Python和`Jupyter Lab`的Bash脚本类似于在Docker容器中通过Miniconda安装Python的[“使用Docker容器”](#docker_container)部分中提供的脚本。然而，在[示例 2-4](#cloud_install)中的脚本还需要启动`Jupyter
    Lab`服务器。所有主要部分和代码行都在内联中有注释。
- en: Example 2-4\. Bash script to install Python and to run the `Jupyter Notebook`
    server
  id: totrans-203
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 2-4\. 安装Python并运行`Jupyter Notebook`服务器的Bash脚本
- en: '[PRE29]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: This script needs to be copied to the Droplet and needs to be started by the
    orchestration script, as described in the next sub-section.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 此脚本需要复制到Droplet，并需要由编排脚本启动，如下一小节所述。
- en: Script to Orchestrate the Droplet Set Up
  id: totrans-206
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写Droplet设置的脚本
- en: The second bash script, which sets up the Droplet, is the shortest one (see
    [Example 2-5](#server_setup)). It mainly copies all the other files to the Droplet
    for which the respective IP address is expected as a parameter. In the final line,
    it starts the `install.sh` bash script, which in turn does the installation itself
    and starts the `Jupyter Lab` server.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个设置Droplet的Bash脚本是最短的一个（见[示例 2-5](#server_setup)）。它主要是将所有其他文件复制到Droplet中，需要IP地址作为参数。在最后一行，它启动`install.sh`
    bash脚本，该脚本本身进行安装并启动`Jupyter Lab`服务器。
- en: Example 2-5\. `Bash` script to set up the Droplet
  id: totrans-208
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例 2-5\. 设置Droplet的Bash脚本
- en: '[PRE30]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Everything now is together to give the set up code a try. On DigitalOcean,
    create a new Droplet with options similar to these:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 现在一切都准备好尝试设置代码了。在DigitalOcean上，创建一个新的Droplet，选择与以下选项类似的设置：
- en: Operating system
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 操作系统
- en: Ubuntu 20.04 LTS x64 (the newest version available at the time of this writing)
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: Ubuntu 20.04 LTS x64（撰写本文时的最新版本）
- en: Size
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 大小
- en: Two core, 2GB, 60GB SSD (standard Droplet)
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 两个核心，2GB，60GB SSD（标准Droplet）
- en: Data center region
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 数据中心地区
- en: Frankfurt (since your author lives in Germany)
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 法兰克福（因为您的作者住在德国）
- en: SSH key
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: SSH密钥
- en: Add a (new) SSH key for password-less login^([10](ch02.html#idm45785398949480))
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 为了无密码登录添加一个（新的）SSH密钥^([10](ch02.html#idm45785398949480))
- en: Droplet name
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: Droplet名称
- en: Prespecified name or something like `pyalgo`
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 预先指定的名称或类似于`pyalgo`的内容
- en: 'Finally, clicking on the `Create` button initiates the Droplet creation process,
    which generally takes about one minute. The major outcome for proceeding with
    the set-up procedure is the IP address, which might be, for instance, 134.122.74.144
    when you have chosen Frankfurt as your data center location. Setting up the Droplet
    now is as easy as what follows:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，点击`Create`按钮启动Droplet创建过程，通常需要大约一分钟。设置过程中的主要结果是IP地址，例如，当您选择法兰克福作为数据中心位置时，可能是134.122.74.144。现在设置Droplet与接下来的步骤一样简单：
- en: '[PRE31]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'The resulting process, however, might take a couple of minutes. It is finished
    when there is a message from the `Jupyter Lab` server saying something like the
    following:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，生成的过程可能需要几分钟。当`Jupyter Lab`服务器显示类似以下消息时，表示过程已完成：
- en: '[PRE32]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'In any current browser, visiting the following address accesses the running
    `Jupyter Notebook` server (note the `https` protocol):'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何当前浏览器中，访问以下地址即可访问运行的`Jupyter Notebook`服务器（注意使用`https`协议）：
- en: '[PRE33]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: After maybe adding a security exception, the `Jupyter Notebook` login screen
    prompting for a password (in our case `jupyter`) should appear. Everything is
    now ready to start Python development in the browser via `Jupyter Lab`, via the
    `IPython`-based console, and via a terminal window or the text file editor. Other
    file management capabilities like file upload, deletion of files, or creation
    of folders are also available.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 添加安全例外后，`Jupyter Notebook`登录屏幕会提示输入密码（在我们的情况下为`jupyter`）。现在一切准备就绪，可以通过`Jupyter
    Lab`、基于`IPython`的控制台以及终端窗口或文本文件编辑器在浏览器中开始Python开发。其他文件管理功能，如文件上传、文件删除或文件夹创建，也是可用的。
- en: Cloud instances, like those from DigitalOcean, and `Jupyter Lab` (powered by
    the `Jupyter Notebook` server) are a powerful combination for the Python developer
    and algorithmic trading practitioner to work on and to make use of professional
    compute and storage infrastructure. Professional cloud and data center providers
    make sure that your (virtual) machines are physically secure and highly available.
    Using cloud instances also keeps the exploration and development phase at rather
    low costs since usage is generally charged by the hour without the need to enter
    long term agreements.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 云实例，如DigitalOcean的实例，和`Jupyter Lab`（由`Jupyter Notebook`服务器提供支持）是Python开发人员和算法交易从业者的强大组合，可以使用专业计算和存储基础设施。专业的云和数据中心提供商确保您的（虚拟）机器物理安全且高度可用。使用云实例还可以使探索和开发阶段的成本保持相当低，因为使用通常按小时计费，无需签订长期协议。
- en: Conclusions
  id: totrans-229
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: Python is the programming language and technology platform of choice not only
    for this book but also for almost every leading financial institution. However,
    Python deployment can be tricky at best and sometimes even tedious and nerve-wracking.
    Fortunately, technologies are available today—almost all of which are younger
    than ten years—that help with the deployment issue. The open source software `conda`
    helps with both Python package and virtual environment management. Docker containers
    go even further in that complete file systems and runtime environments can be
    easily created in a technically shielded “sandbox,” or the *container*. Going
    even one step further, cloud providers like DigitalOcean offer compute and storage
    capacity in professionally managed and secured data centers within minutes and
    billed by the hour. This in combination with a Python 3.8 installation and a secure
    `Jupyter Notebook/Lab` server installation provides a professional environment
    for Python development and deployment in the context of Python for algorithmic
    trading projects.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: Python不仅是本书的选择编程语言和技术平台，几乎每个领先的金融机构也是如此。然而，Python部署可能是棘手的，有时甚至令人厌烦和焦虑。幸运的是，今天有技术可用——几乎所有这些技术都不到十年——可以帮助解决部署问题。开源软件`conda`不仅有助于Python软件包和虚拟环境管理。Docker容器甚至进一步扩展了功能，可以轻松创建完整的文件系统和运行时环境，放置在技术上的“沙箱”或*容器*中。更进一步，像DigitalOcean这样的云提供商在几分钟内提供专业管理和安全的数据中心中的计算和存储容量，按小时计费。这与Python
    3.8安装和安全的`Jupyter Notebook/Lab`服务器安装相结合，为Python开发和部署提供了专业环境，涉及Python用于算法交易项目。
- en: References and Further Resources
  id: totrans-231
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考资料和进一步资源
- en: 'For *Python package management*, consult the following resources:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 对于*Python软件包管理*，请参阅以下资源：
- en: '[`pip` package manager page](https://pypi.python.org/pypi/pip)'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`pip`软件包管理器页面](https://pypi.python.org/pypi/pip)'
- en: '[`conda` package manager page](http://conda.pydata.org)'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`conda`软件包管理器页面](http://conda.pydata.org)'
- en: '[official Installing Packages page](https://packaging.python.org/installing)'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[官方安装软件包页面](https://packaging.python.org/installing)'
- en: 'For *virtual environment management*, consult these resources:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 对于*虚拟环境管理*，请参阅以下资源：
- en: '[`virtualenv` environment manager page](https://pypi.python.org/pypi/virtualenv)'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`virtualenv`环境管理器页面](https://pypi.python.org/pypi/virtualenv)'
- en: '[`conda` Managing Environments page](http://conda.pydata.org/docs/using/envs.html)'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`conda`环境管理页面](http://conda.pydata.org/docs/using/envs.html)'
- en: '[`pipenv` package and environment manager](https://github.com/pypa/pipenv)'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[`pipenv`软件包和环境管理器](https://github.com/pypa/pipenv)'
- en: 'Information about *Docker containers* can found, among other places, at the
    [Docker home page](http://docker.com), as well as in the following:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 有关*Docker容器*的信息可以在[ Docker首页](http://docker.com)等地找到，以及以下位置：
- en: 'Matthias, Karl, and Sean Kane. 2018\. *Docker: Up and Running.* 2nd ed. Sebastopol:
    O’Reilly.'
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Matthias, Karl, 和 Sean Kane。2018。*Docker: Up and Running.* 第2版。Sebastopol：O’Reilly。'
- en: 'Robbins (2016) provides a concise introduction to and overview of the `Bash`
    *scripting language*:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: Robbins (2016) 提供了对 `Bash` *脚本语言*的简洁介绍和概述：
- en: 'Robbins, Arnold. 2016\. *Bash Pocket Reference*. 2nd ed. Sebastopol: O’Reilly.'
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Robbins, Arnold. 2016\. *Bash Pocket Reference*. 2nd ed. Sebastopol: O’Reilly.'
- en: How to *run a public Jupyter Notebook/Lab server securely* is explained in [The
    Jupyter Notebook Docs](https://oreil.ly/uBEeq). There is also `JupyterHub` available,
    which allows the management of multiple users for a `Jupyter Notebook` server
    (see [JupyterHub](https://oreil.ly/-XLi5)).
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 如何*安全运行公共 Jupyter Notebook/Lab 服务器*在 [Jupyter Notebook 文档](https://oreil.ly/uBEeq)中有解释。还有
    `JupyterHub` 可用，允许管理多个用户的 `Jupyter Notebook` 服务器（参见 [JupyterHub](https://oreil.ly/-XLi5)）。
- en: To sign up on DigitalOcean with a 10 USD starting balance in your new account,
    visit [*http://bit.ly/do_sign_up*](http://bit.ly/do_sign_up). This pays for two
    months of usage for the smallest Droplet.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 要在您的新账户中享受 10 美元的起始余额并注册 DigitalOcean，请访问 [*http://bit.ly/do_sign_up*](http://bit.ly/do_sign_up)。这可以支付最小
    Droplet 两个月的使用费。
- en: ^([1](ch02.html#idm45785393599784-marker)) A recent project called `pipenv`
    combines the capabilities of the package manager `pip` with those of the virual
    environment manager `virtualenv`. See [*https://github.com/pypa/pipenv*](https://github.com/pypa/pipenv).
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch02.html#idm45785393599784-marker)) 最近一个名为 `pipenv` 的项目将包管理器 `pip` 的功能与虚拟环境管理器
    `virtualenv` 的功能结合在一起。请参阅 [*https://github.com/pypa/pipenv*](https://github.com/pypa/pipenv)。
- en: ^([2](ch02.html#idm45785395838952-marker)) On Windows, you can also run the
    exact same commands in a Docker container (see [*https://oreil.ly/GndRR*](https://oreil.ly/GndRR)).
    Working on Windows directly requires some adjustments. See, for example, the book
    by Matthias and Kane (2018) for further details on Docker usage.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: ^([2](ch02.html#idm45785395838952-marker)) 在 Windows 上，您也可以在 Docker 容器中运行完全相同的命令（参见
    [*https://oreil.ly/GndRR*](https://oreil.ly/GndRR)）。直接在 Windows 上工作需要进行一些调整。例如，详细了解
    Docker 使用情况，请参阅 Matthias 和 Kane (2018) 的书籍。
- en: ^([3](ch02.html#idm45785395802712-marker)) Installing the meta package `nomkl`,
    such as in `conda install numpy nomkl`, avoids the automatic installation and
    usage of `mkl` and related other packages.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: ^([3](ch02.html#idm45785395802712-marker)) 安装元包 `nomkl`，比如 `conda install numpy
    nomkl`，可以避免自动安装和使用 `mkl` 及相关其他包。
- en: '^([4](ch02.html#idm45785399695288-marker)) In the official documentation, you
    will find the following explanation: “Python *Virtual Environments* allow Python
    packages to be installed in an isolated location for a particular application,
    rather than being installed globally.” See the [Creating Virtual Environments
    page](https://oreil.ly/5Jgjc).'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: ^([4](ch02.html#idm45785399695288-marker)) 在官方文档中，您会找到以下解释：“Python *虚拟环境*允许在特定应用程序的隔离位置安装
    Python 包，而不是全局安装。”请参阅 [创建虚拟环境页面](https://oreil.ly/5Jgjc)。
- en: ^([5](ch02.html#idm45785399679560-marker)) See Matthias and Kane (2018) for
    a comprehensive introduction to the Docker technology.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: ^([5](ch02.html#idm45785399679560-marker)) 有关 Docker 技术的全面介绍，请参阅 Matthias 和
    Kane (2018)。
- en: ^([6](ch02.html#idm45785399656040-marker)) Consult the book by Robbins (2016)
    for a concise introduction to and a quick overview of `Bash` scripting. Also see
    see [GNU Bash](https://oreil.ly/SGHn1).
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '^([6](ch02.html#idm45785399656040-marker)) 有关 `Bash` 脚本的简洁介绍和快速概述，请参阅 Robbins
    (2016) 的书籍。另请参阅 [GNU Bash](https://oreil.ly/SGHn1)。  '
- en: ^([7](ch02.html#idm45785399102600-marker)) For those who do not have an account
    with a cloud provider yet, on [*http://bit.ly/do_sign_up*](http://bit.ly/do_sign_up),
    new users get a starting credit of 10 USD for DigitalOcean.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: ^([7](ch02.html#idm45785399102600-marker)) 对于尚未与云提供商建立帐户的人，在 [*http://bit.ly/do_sign_up*](http://bit.ly/do_sign_up)
    上，新用户可获得 10 美元的起始信用额度用于 DigitalOcean。
- en: ^([8](ch02.html#idm45785399086424-marker)) Technically, `Jupyter Lab` is an
    extension of `Jupyter Notebook`. Both expressions are, however, sometimes used
    interchangeably.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: ^([8](ch02.html#idm45785399086424-marker)) 从技术上讲，`Jupyter Lab` 是 `Jupyter Notebook`
    的扩展。但是，这两个表达有时会交替使用。
- en: ^([9](ch02.html#idm45785399055176-marker)) With such a self-generated certificate,
    you might need to add a security exception when prompted by the browser. On Mac
    OS you might even explicitely register the certificate as trustworthy.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: ^([9](ch02.html#idm45785399055176-marker)) 使用这样的自动生成证书时，您可能需要在浏览器提示时添加安全异常。在
    Mac OS 上，您甚至可能需要显式将证书注册为可信任。
- en: ^([10](ch02.html#idm45785398949480-marker)) If you need assistance, visit either
    [How To Use SSH Keys with DigitalOcean Droplets](https://oreil.ly/Tggw7) or [How
    To Use SSH Keys with PuTTY on DigitalOcean Droplets (Windows users)](https://oreil.ly/-jTif).
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: ^([10](ch02.html#idm45785398949480-marker)) 如果需要帮助，请访问[如何在 DigitalOcean Droplets
    中使用 SSH 密钥](https://oreil.ly/Tggw7)或者[如何在 DigitalOcean Droplets 上使用 PuTTY 进行 SSH
    密钥管理（Windows 用户）](https://oreil.ly/-jTif)。

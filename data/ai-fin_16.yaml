- en: Chapter 12\. Execution and Deployment
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第12章。执行和部署
- en: Considerable progress is needed before autonomous vehicles can operate reliably
    in mixed urban traffic, heavy rain and snow, unpaved and unmapped roads, and where
    wireless access is unreliable.
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在混合城市交通、大雨和雪、未铺装和未映射的道路以及无线接入不可靠的情况下，自动驾驶车辆可靠运行还需取得可观的进展。
- en: ''
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Todd Litman (2020)
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Todd Litman（2020）
- en: An investment firm that engages in algorithmic trading shall have in place effective
    systems and risk controls suitable to the business it operates to ensure that
    its trading systems are resilient and have sufficient capacity, are subject to
    appropriate trading thresholds and limits and prevent the sending of erroneous
    orders or the systems otherwise functioning in a way that may create or contribute
    to a disorderly market.
  id: totrans-4
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 从事算法交易的投资公司应当建立有效的系统和风险控制措施，适合其经营的业务，以确保其交易系统具有弹性和足够的容量，受到适当的交易阈值和限制的约束，并防止发送错误订单或以其他方式使系统在可能创造或促成混乱市场的方式中运行。
- en: ''
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: MiFID II (Article 17)
  id: totrans-6
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: MiFID II（第17条）
- en: '[Chapter 11](ch11.xhtml#risk_management) trains a trading bot in the form of
    a financial Q-learning agent based on historical data. It introduces event-based
    backtesting as an approach flexible enough to account for typical risk measures,
    such as trailing stop loss orders or take profit targets. However, all this happens
    asynchronously in a sandbox environment based on historical data only. As with
    an autonomous vehicle (AV), there is the problem of deploying the AI in the real
    world. For an AV this means combining the AI with the car hardware and deploying
    the AV on test and public streets. For a trading bot this means connecting the
    trading bot with a trading platform and deploying it such that orders are executed
    automatically. In other words, the algorithmic side is clear—execution and deployment
    now need to be added to implement algorithmic trading.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[第11章](ch11.xhtml#risk_management)以基于历史数据的金融Q学习代理形式训练交易机器人。它介绍了基于事件的回测作为一种灵活的方法，足以考虑典型的风险措施，如跟踪止损订单或利润目标。然而，所有这些都异步发生在仅基于历史数据的沙盒环境中。与自动驾驶车辆（AV）一样，部署AI到现实世界存在问题。对于AV来说，这意味着将AI与车辆硬件结合，并在测试和公共道路上部署AV。对于交易机器人来说，这意味着将交易机器人连接到交易平台，并部署以实现订单的自动执行。换句话说，算法方面已经很清晰——现在需要添加执行和部署来实现算法交易。'
- en: This chapter introduces the [Oanda](http://oanda.com) trading platform for algorithmic
    trading. Therefore, the focus is on the [v20 API](https://oreil.ly/TbGKN) of the
    platform and not on applications that provide users with an interface for manual
    trading. To simplify the code, the wrapper package [`tpqoa`](https://oreil.ly/72pWe)
    is introduced and used. It relies on the [`v20`](https://oreil.ly/H_pIj) Python
    package from Oanda and provides a more Pythonic user interface.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了用于算法交易的[Oanda](http://oanda.com)交易平台。因此，重点放在平台的[v20 API](https://oreil.ly/TbGKN)，而不是提供用户手动交易界面的应用程序上。为了简化代码，介绍并使用了包装器包[`tpqoa`](https://oreil.ly/72pWe)，它依赖于Oanda的[`v20`](https://oreil.ly/H_pIj)
    Python包，并提供更符合Python风格的用户界面。
- en: '[“Oanda Account”](#ed_account) details the prerequisites to use a *demo account*
    with Oanda. [“Data Retrieval”](#ed_data_retrieval) shows how to retrieve historical
    and real-time (streaming) data from the API. [“Order Execution”](#ed_execution)
    deals with the execution of buy and sell orders, potentially including other orders,
    such as trailing stop loss orders. [“Trading Bot”](#ed_trading_bot) trains a trading
    bot based on historical intraday data from Oanda and backtests its performance
    in vectorized fashion. Finally, [“Deployment”](#ed_deployment) shows how to deploy
    the trading bot in real-time and an automated fashion.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[“Oanda账户”](#ed_account)详细介绍了使用Oanda的*演示账户*的先决条件。[“数据检索”](#ed_data_retrieval)展示了如何从API检索历史和实时（流式）数据。[“订单执行”](#ed_execution)处理买卖订单的执行，可能包括其他订单，如跟踪止损订单。[“交易机器人”](#ed_trading_bot)基于Oanda的历史分钟数据训练交易机器人，并以向量化方式进行性能回测。最后，[“部署”](#ed_deployment)展示了如何实时部署交易机器人和自动化部署。'
- en: Oanda Account
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Oanda账户
- en: 'The code in this chapter relies on the Python wrapper package [`tpqoa`](https://oreil.ly/72pWe).
    This package can be installed via `pip` as follows:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的代码依赖于Python包装器包[`tpqoa`](https://oreil.ly/72pWe)。可以通过以下方式使用`pip`安装此包：
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'To make use of this package, a demo account with [Oanda](http://oanda.com)
    is sufficient. Once the account is open, an *access token* is generated on the
    account page (after login). The access token and the *account id* (also found
    on the account page) are then stored in a configuration text file as follows:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用此包，仅需一个[Oanda](http://oanda.com)的演示账户即可。一旦账户开通，在登录后的账户页面生成一个*访问令牌*。然后将访问令牌和*账户ID*（也可在账户页面找到）存储在配置文本文件中，如下所示：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If the name of the configuration file is *aiif.cfg* and if it is stored in
    the current working directory, then the `tpqoa` package can be used as follows:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果配置文件名为*aiif.cfg*，并且存储在当前工作目录中，则可以如下使用`tpqoa`包：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Risk Disclaimers and Disclosures
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 风险免责声明和披露
- en: Oanda is a platform for *foreign exchange* (FX) and *contracts for difference*
    (CFD) trading. These instruments involve considerable risks, in particular when
    traded with leverage. It is strongly recommended that you read all relevant risk
    disclaimers and disclosures from Oanda on its [website](http://oanda.com) carefully
    before moving on (check for the appropriate jurisdiction).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Oanda是外汇（FX）和差价合约（CFD）交易的平台。这些工具涉及相当大的风险，特别是在使用杠杆交易时。强烈建议您在继续之前仔细阅读来自Oanda网站上所有相关的风险免责声明和披露（请查看适用司法管辖区）。
- en: All code and examples presented in this chapter are for technical illustration
    only and do not constitute any investment advice or similar.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中呈现的所有代码和示例仅用于技术说明，不构成任何投资建议或类似内容。
- en: Data Retrieval
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据检索
- en: 'As usual, some Python imports and configurations come first:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，首先进行一些Python导入和配置：
- en: '[PRE3]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Depending on the relevant jurisdiction of the account, Oanda offers a number
    of tradable FX and CFD instruments. The following Python code retrieves the available
    instruments for a given account:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 根据账户的相关司法管辖权，Oanda提供多种可交易的外汇和差价合约工具。以下Python代码检索给定账户的可用工具：
- en: '[PRE4]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[![1](Images/1.png)](#co_execution_and_deployment_CO1-1)'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_execution_and_deployment_CO1-1)'
- en: Imports the `tpqoa` package
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 导入`tpqoa`包
- en: '[![2](Images/2.png)](#co_execution_and_deployment_CO1-2)'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_execution_and_deployment_CO1-2)'
- en: Instantiates an API object given the account credentials
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 给定账户凭据实例化一个API对象
- en: '[![3](Images/3.png)](#co_execution_and_deployment_CO1-3)'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_execution_and_deployment_CO1-3)'
- en: Retrieves the list of available instruments in the format `(display_name,` `technical_name)`
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 检索可用工具列表的格式为`(显示名称, 技术名称)`
- en: '[![4](Images/4.png)](#co_execution_and_deployment_CO1-4)'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](Images/4.png)](#co_execution_and_deployment_CO1-4)'
- en: Shows a select few of these instruments
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 展示其中几个工具
- en: Oanda provides a wealth of historical data via its v20 API. The following examples
    retrieve historical data for the EUR/USD currency pair—the granularity is set
    to `D` (that is, *daily*).
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Oanda通过其v20 API提供丰富的历史数据。以下示例检索EUR/USD货币对的历史数据，粒度设置为`D`（即*每日*）。
- en: '[Figure 12-1](#figure_ed_01) plots the closing (ask) prices:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 12-1](#figure_ed_01) 绘制了收盘（卖出）价格：'
- en: '[PRE5]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[![1](Images/1.png)](#co_execution_and_deployment_CO2-1)'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_execution_and_deployment_CO2-1)'
- en: Specifies the instrument…
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 指定工具…
- en: '[![2](Images/2.png)](#co_execution_and_deployment_CO2-2)'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_execution_and_deployment_CO2-2)'
- en: …the starting date…
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: …开始日期…
- en: '[![3](Images/3.png)](#co_execution_and_deployment_CO2-3)'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_execution_and_deployment_CO2-3)'
- en: …the end date…
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: …结束日期…
- en: '[![4](Images/4.png)](#co_execution_and_deployment_CO2-4)'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](Images/4.png)](#co_execution_and_deployment_CO2-4)'
- en: …the granularity (`D` = daily)…
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: …粒度（`D` = 每日）…
- en: '[![5](Images/5.png)](#co_execution_and_deployment_CO2-5)'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](Images/5.png)](#co_execution_and_deployment_CO2-5)'
- en: …and the type of the price series (`A` = ask)
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: …和价格序列类型（`A` = 询价价）
- en: '![aiif 1201](Images/aiif_1201.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![aiif 1201](Images/aiif_1201.png)'
- en: Figure 12-1\. Historical daily closing prices for EUR/USD from Oanda
  id: totrans-47
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图12-1\. Oanda提供的EUR/USD历史每日收盘价格
- en: 'Intraday data is as easily retrieved and used as daily data, as the code that
    follows shows. [Figure 12-2](#figure_ed_02) visualizes minute bar (mid) price
    data:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 就如下面的代码所示，分钟数据和日数据一样容易检索和使用。[图 12-2](#figure_ed_02) 可视化了分钟条（中间价）价格数据：
- en: '[PRE6]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[![1](Images/1.png)](#co_execution_and_deployment_CO3-1)'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_execution_and_deployment_CO3-1)'
- en: Specifies the granularity (`M1` = one minute)…
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 指定粒度（`M1` = 一分钟）…
- en: '[![2](Images/2.png)](#co_execution_and_deployment_CO3-2)'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_execution_and_deployment_CO3-2)'
- en: …and the type of the price series (`M` = mid)
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: …和价格序列类型（`M` = 中间价）
- en: '![aiif 1202](Images/aiif_1202.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![aiif 1202](Images/aiif_1202.png)'
- en: Figure 12-2\. Historical one-minute bar closing prices for EUR/USD from Oanda
  id: totrans-55
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图12-2\. Oanda提供的EUR/USD历史一分钟条收盘价格
- en: 'Whereas historical data is important, for instance, to train and test a trading
    bot, real-time (streaming) data is required to deploy such a bot for algorithmic
    trading. `tpqoa` allows the synchronous streaming of real-time data for all available
    instruments with a single method call. The method prints by default the time stamp
    and the bid/ask prices. For algorithmic trading, this default behavior can be
    adjusted, as [“Deployment”](#ed_deployment) shows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管历史数据很重要，例如用于训练和测试交易机器人，实时（流式）数据则是部署算法交易的必要条件。`tpqoa`允许通过单个方法调用同步流式传输所有可用工具的实时数据。该方法默认打印时间戳和买入/卖出价格。对于算法交易，可以根据需要调整此默认行为，如[“部署”](#ed_deployment)所示：
- en: '[PRE7]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Order Execution
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 执行订单
- en: The AI of an AV needs to be able to control the physical vehicle. To this end
    it sends different types of signals to the vehicle, for example, to accelerate,
    break, turn left, or turn right. A trading bot needs to be able to place orders
    with the trading platform. This section covers different types of orders, such
    as market orders and stop loss orders.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 自动驾驶车辆的AI需要能够控制实体车辆。为此，它向车辆发送不同类型的信号，例如加速、刹车、左转或右转。交易机器人需要能够在交易平台上下订单。本节涵盖了不同类型的订单，例如市价订单和止损订单。
- en: 'The most fundamental type of order is a *market order*. This order allows buying
    or selling a financial instrument at the current market price (that is, the *ask
    price* when buying and the *bid price* when selling). The following examples are
    based on an account leverage of 20 and relatively small order sizes. Therefore,
    liquidity issues, for example, do not play a role. When executing orders via the
    Oanda v20 API, the API returns a detailed order object. First, a *buy market order*
    is placed:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 最基本的订单类型是*市价订单*。该订单允许以当前市场价格（即购买时的*卖出价*和销售时的*买入价*）买入或卖出金融工具。以下示例基于20倍杠杆和相对较小的订单规模。因此，流动性问题并不重要。通过Oanda
    v20 API执行订单时，API会返回详细的订单对象。首先，下了一个*买市场订单*：
- en: '[PRE8]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[![1](Images/1.png)](#co_execution_and_deployment_CO4-1)'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_execution_and_deployment_CO4-1)'
- en: Places a *buy market order* and prints the order object details
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 下单一个*买市场订单*并打印订单对象的详情
- en: '[![2](Images/2.png)](#co_execution_and_deployment_CO4-3)'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_execution_and_deployment_CO4-3)'
- en: Selects and shows the `time`, `instrument`, `units`, `price`, and `pl` details
    of the order
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 选择并显示订单的`时间`、`工具`、`单位`、`价格`和`pl`详情
- en: 'Second, the position is closed via a *sell market order* of the same size.
    Whereas the first trade has a profit/loss (P&L) of zero by its nature—before accounting
    for transaction costs—the second trade in general has a nonzero P&L:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，通过相同大小的*卖市场订单*关闭仓位。而第一笔交易由于其性质（在考虑交易成本之前）P＆L为零——通常第二笔交易具有非零P＆L：
- en: '[PRE9]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[![1](Images/1.png)](#co_execution_and_deployment_CO5-1)'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_execution_and_deployment_CO5-1)'
- en: Places a *sell market order* and prints the order object details
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 下单一个*卖市场订单*并打印订单对象的详情
- en: '[![2](Images/2.png)](#co_execution_and_deployment_CO5-3)'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_execution_and_deployment_CO5-3)'
- en: Selects and shows the `time`, `instrument`, `units`, `price`, and `pl` details
    of the order
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 选择并显示订单的`时间`、`工具`、`单位`、`价格`和`pl`详情
- en: Limit Orders
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 限价订单
- en: This chapter covers *market orders* as a type of base order only. With a market
    order, buying or selling a financial instrument happens at the price that is current
    when the order is placed. By contrast, a *limit order*, as the other main type
    of base order, allows the placement of an order with a minimum price or a maximum
    price. Only when the minimum/maximum price is reached is the order executed. Until
    that point, no transaction takes place.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 本章仅涵盖*市价订单*作为一种基本订单类型。市价订单在下单时以当前价格买入或卖出金融工具。相比之下，*限价订单*作为另一种主要的基本订单类型，允许以最低或最高价格下单。只有当达到最低/最高价格时才执行订单。在此之前不进行任何交易。
- en: 'Next, consider an example for the same combination of trades but this time
    with a *stop loss* (SL) order. An SL order is treated as a separate (limit) order.
    The following Python code places the orders and shows the details of the SL order
    object:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，考虑同一组合交易的示例，但这次使用*止损*（SL）订单。SL订单被视为单独的（限价）订单。以下Python代码下单并显示了SL订单对象的详情：
- en: '[PRE10]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[![1](Images/1.png)](#co_execution_and_deployment_CO6-1)'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_execution_and_deployment_CO6-1)'
- en: The SL distance is defined in currency units.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: SL距离以货币单位定义。
- en: '[![2](Images/2.png)](#co_execution_and_deployment_CO6-2)'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_execution_and_deployment_CO6-2)'
- en: Selects and shows the SL order object data.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 选择并显示 SL 订单对象数据。
- en: '[![3](Images/3.png)](#co_execution_and_deployment_CO6-4)'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_execution_and_deployment_CO6-4)'
- en: Selects and shows some relevant details of the two order objects.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 选择并显示两个订单对象的一些相关细节。
- en: 'A *trailing stop loss* (TSL) order is handled in the same way. The only difference
    is that there is no fixed price attached to a TSL order:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '*移动止损*（TSL）订单以相同的方式处理。唯一的区别是 TSL 订单没有固定的价格：'
- en: '[PRE11]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[![1](Images/1.png)](#co_execution_and_deployment_CO7-1)'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_execution_and_deployment_CO7-1)'
- en: The TSL distance is defined in currency units.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: TSL 距离以货币单位定义。
- en: '[![2](Images/2.png)](#co_execution_and_deployment_CO7-2)'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_execution_and_deployment_CO7-2)'
- en: Selects and shows the TSL order object data.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 选择并显示 TSL 订单对象数据。
- en: '[![3](Images/3.png)](#co_execution_and_deployment_CO7-4)'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_execution_and_deployment_CO7-4)'
- en: Selects and shows some relevant details of the two order objects.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 选择并显示两个订单对象的一些相关细节。
- en: 'Finally, here is a *take profit* (TP) order. This order requires a fixed TP
    target price. Therefore, the following code uses the execution price from the
    previous order to define the TP price in relative terms. Beyond this small difference,
    the handling is again the same as before:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，这是一个*获利*（TP）订单。该订单需要一个固定的 TP 目标价格。因此，以下代码使用先前订单的执行价格来定义相对价格的 TP 价格。除此以外的小差异外，处理方式与之前一样。
- en: '[PRE12]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[![1](Images/1.png)](#co_execution_and_deployment_CO8-1)'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_execution_and_deployment_CO8-1)'
- en: The TP target price is defined relative to the previous execution price.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: TP 目标价格相对于先前执行价格定义。
- en: '[![2](Images/2.png)](#co_execution_and_deployment_CO8-2)'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_execution_and_deployment_CO8-2)'
- en: Selects and shows the TP order object data.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 选择并显示 TP 订单对象数据。
- en: '[![3](Images/3.png)](#co_execution_and_deployment_CO8-4)'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_execution_and_deployment_CO8-4)'
- en: Selects and shows some relevant details of the two order objects.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 选择并显示两个订单对象的一些相关细节。
- en: 'The code so far only deals with transaction details of single orders. However,
    it is also of interest to have an overview of multiple *historical transactions*.
    To this end, the following method call provides overview data for all the main
    orders placed in this section, including P&L data:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，代码只处理单个订单的交易详情。然而，对于多个*历史交易*的概览也很有趣。为此，以下方法调用提供了本节中所有主要订单的概览数据，包括 P&L
    数据：
- en: '[PRE13]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Yet another method call provides a snapshot of the *account details*. The details
    shown are from an Oanda demo account that has been in use for quite some time
    for technical testing purposes:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个方法调用提供了*账户详情*的快照。显示的细节来自使用已经进行了相当长时间的 Oanda 演示账户进行技术测试的目的：
- en: '[PRE14]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This concludes the discussion of the basics of executing orders with Oanda.
    All elements are now together to support the deployment of a trading bot. The
    remainder of this chapter trains a trading bot on Oanda data and deploys it in
    automated fashion.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这结束了使用 Oanda 执行订单基础知识的讨论。所有元素现在都已准备好支持交易机器人的部署。本章剩余部分将在 Oanda 数据上训练交易机器人，并以自动化方式部署它。
- en: Trading Bot
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 交易机器人
- en: '[Chapter 11](ch11.xhtml#risk_management) shows in detail how to train a deep
    Q-learning trading bot and how to backtest it in vectorized and event-based fashion.
    This section now repeats selected core steps in this regard based on historical
    data from Oanda. [“Oanda Environment”](#ed_oanda_env) provides a Python module
    that contains the environment class `OandaEnv` to work with Oanda data. It can
    be used in the same way as the `Finance` class from [Chapter 11](ch11.xhtml#risk_management).'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '[第 11 章](ch11.xhtml#risk_management)详细介绍了如何训练深度 Q 学习交易机器人以及如何以矢量化和基于事件的方式进行回测。此节现在基于来自
    Oanda 的历史数据重复了这方面的一些核心步骤。[“Oanda 环境”](#ed_oanda_env)提供了一个包含用于处理 Oanda 数据的环境类 `OandaEnv`
    的 Python 模块。它可以与[第 11 章](ch11.xhtml#risk_management)中的 `Finance` 类一样使用。'
- en: 'The following Python code instantiates the learning environment object. During
    this step, the major data-related parameters driving the learning, validation,
    and testing are fixed. The `OandaEnv` class allows the inclusion of leverage,
    which is typical for FX and CFD trading. Leverage amplifies the realized returns,
    thereby increasing the profit potential but also the loss risks:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 以下 Python 代码实例化了学习环境对象。在此步骤中，固定了驱动学习、验证和测试的主要数据相关参数。`OandaEnv` 类允许包含杠杆，这对于外汇和差价合约交易是典型的。杠杆放大了实现的回报，从而增加了利润潜力，但也增加了损失风险：
- en: '[PRE15]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[![1](Images/1.png)](#co_execution_and_deployment_CO9-1)'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_execution_and_deployment_CO9-1)'
- en: Sets the granularity for the data to five seconds
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 设置数据的粒度为五秒钟
- en: '[![2](Images/2.png)](#co_execution_and_deployment_CO9-2)'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_execution_and_deployment_CO9-2)'
- en: Sets the price type to mid prices
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 将价格类型设置为中间价格
- en: '[![3](Images/3.png)](#co_execution_and_deployment_CO9-3)'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_execution_and_deployment_CO9-3)'
- en: Defines the set of features to be used
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 定义要使用的特征集
- en: '[![4](Images/4.png)](#co_execution_and_deployment_CO9-4)'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](Images/4.png)](#co_execution_and_deployment_CO9-4)'
- en: Defines the window length for rolling statistics
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 定义滚动统计的窗口长度
- en: '[![5](Images/5.png)](#co_execution_and_deployment_CO9-5)'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](Images/5.png)](#co_execution_and_deployment_CO9-5)'
- en: Specifies the number of lags
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 指定滞后数
- en: '[![6](Images/6.png)](#co_execution_and_deployment_CO9-6)'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '[![6](Images/6.png)](#co_execution_and_deployment_CO9-6)'
- en: Fixes the leverage
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 修正杠杆
- en: '[![7](Images/7.png)](#co_execution_and_deployment_CO9-7)'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '[![7](Images/7.png)](#co_execution_and_deployment_CO9-7)'
- en: Sets the required minimum accuracy
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 设置所需的最低准确率
- en: '[![8](Images/8.png)](#co_execution_and_deployment_CO9-8)'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '[![8](Images/8.png)](#co_execution_and_deployment_CO9-8)'
- en: Sets the required minimum performance
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 设置所需的最低性能
- en: 'In a next step, the validation environment is instantiated, relying on the
    parameters of the learning environment—apart from the time interval, for obvious
    reasons. [Figure 12-3](#figure_ed_03) shows the closing prices of EUR/USD as used
    in the learning, validation, and test environments (from left to right):'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步，将实例化验证环境，依赖于学习环境的参数——除了时间间隔，由于显而易见的原因。[图 12-3](#figure_ed_03) 显示了 EUR/USD
    的收盘价格，作为学习、验证和测试环境中使用的（从左到右）：
- en: '[PRE16]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '![aiif 1203](Images/aiif_1203.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![aiif 1203](Images/aiif_1203.png)'
- en: Figure 12-3\. Historical 30-second bar closing prices for EUR/USD from Oanda
    (learning = left, validation = middle, testing = right)
  id: totrans-126
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 12-3\. Oanda 提供的 EUR/USD 历史 30 秒钟收盘价（学习 = 左，验证 = 中，测试 = 右）
- en: 'Based on the Oanda environment, the trading bot from [Chapter 11](ch11.xhtml#risk_management)
    can be trained and validated. The following Python code performs this task and
    visualizes the performance results (see [Figure 12-4](#figure_ed_04)):'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 基于 Oanda 环境，可以对[第 11 章](ch11.xhtml#risk_management)中的交易机器人进行训练和验证。以下 Python
    代码执行此任务并可视化性能结果（参见 [图 12-4](#figure_ed_04)）：
- en: '[PRE17]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[![1](Images/1.png)](#co_execution_and_deployment_CO10-1)'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_execution_and_deployment_CO10-1)'
- en: Imports the `tradingbot` module from [Chapter 11](ch11.xhtml#risk_management)
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 从[第 11 章](ch11.xhtml#risk_management)导入`tradingbot`模块
- en: '[![2](Images/2.png)](#co_execution_and_deployment_CO10-3)'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_execution_and_deployment_CO10-3)'
- en: Trains and validates the trading bot based on Oanda data
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 基于 Oanda 数据对交易机器人进行训练和验证
- en: '[![3](Images/3.png)](#co_execution_and_deployment_CO10-5)'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_execution_and_deployment_CO10-5)'
- en: Visualizes the performance results
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 可视化性能结果
- en: As discussed in the previous two chapters, the training and validation performances
    are just an indicator of the trading bot performance.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 如前两章所讨论的，训练和验证表现只是交易机器人表现的一个指标。
- en: '![aiif 1204](Images/aiif_1204.png)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![aiif 1204](Images/aiif_1204.png)'
- en: Figure 12-4\. Training and validation performance results of the trading bot
    for Oanda data
  id: totrans-137
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 12-4\. Oanda 数据的交易机器人的训练和验证性能结果
- en: 'The following code implements a vectorized backtest of the trading bot performance
    for the test environment—again with the same parameters as the learning environment
    apart from the time interval used. The code makes use of the function `backtest()`
    as provided in the Python module presented in [“Vectorized Backtesting”](#ed_backtest).
    The reported performance numbers include a leverage of 20\. This holds true for
    both the gross performance of the passive benchmark investment and the trading
    bot over time, as shown in [Figure 12-5](#figure_ed_05):'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的代码实现了用于测试环境的交易机器人性能的矢量化回测——再次使用与学习环境相同的参数，除了使用的时间间隔。代码利用了 Python 模块中提供的`backtest()`函数，该模块在[“矢量化回测”](#ed_backtest)中有介绍。报告的性能数字包括杠杆为
    20。这对于被动基准投资的总体表现和交易机器人的表现都是如此，如[图 12-5](#figure_ed_05)所示：
- en: '[PRE18]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[![1](Images/1.png)](#co_execution_and_deployment_CO11-1)'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_execution_and_deployment_CO11-1)'
- en: Shows the total number of long and short positions
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 显示长仓和短仓的总数
- en: '[![2](Images/2.png)](#co_execution_and_deployment_CO11-2)'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_execution_and_deployment_CO11-2)'
- en: Shows the number of trades required to implement the strategy
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 显示实施该策略所需的交易次数
- en: '[![3](Images/3.png)](#co_execution_and_deployment_CO11-3)'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_execution_and_deployment_CO11-3)'
- en: Calculates the gross performance including leverage
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 计算包括杠杆在内的总体表现
- en: '[![4](Images/4.png)](#co_execution_and_deployment_CO11-4)'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](Images/4.png)](#co_execution_and_deployment_CO11-4)'
- en: Calculates the net performance including leverage
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 计算包括杠杆在内的净表现
- en: '[![5](Images/5.png)](#co_execution_and_deployment_CO11-5)'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](Images/5.png)](#co_execution_and_deployment_CO11-5)'
- en: Visualizes the gross performance over time including leverage
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 可视化随时间推移的总体表现，包括杠杆
- en: '![aiif 1205](Images/aiif_1205.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![aiif 1205](Images/aiif_1205.png)'
- en: Figure 12-5\. Gross performance of the passive benchmark investment and the
    trading bot over time (including leverage)
  id: totrans-151
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图12-5\. 被动基准投资和交易机器人随时间的总体表现（包括杠杆）
- en: Simplified Backtesting
  id: totrans-152
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简化的回测
- en: The training and backtesting of the trading bot in this section happen under
    assumptions that are not realistic. The trading strategy based on the 30-second
    bars might lead to a large number of trades over a short period of time. Assuming
    typical transaction costs (bid-ask spreads), such a strategy often is not economically
    viable. Longer bars or a strategy with fewer trades would be more realistic. However,
    to allow for a “quick” deployment demo in the next section, the training and backtest
    are implemented intentionally on the relatively short 30-second bars.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 本节中交易机器人的训练和回测是在不现实的假设条件下进行的。基于30秒钟的柱状图的交易策略可能会在短时间内导致大量交易。假设典型的交易成本（买卖价差），这样的策略通常在经济上不可行。更长的柱状图或更少交易的策略可能更现实。但是，为了在下一节中允许“快速”部署演示，训练和回测是故意在相对短的30秒钟柱状图上实施的。
- en: Deployment
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 部署
- en: 'This section combines the major elements of the previous sections to deploy
    the trained trading bot in automated fashion. This is comparable to the point
    in time at which an AV is prepared to be deployed on the streets. The class `OandaTradingBot`
    presented in the following code inherits from the `tpqoa` class and adds some
    helper functions and the trading logic:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 本节结合了前几节的主要元素，以自动化方式部署训练过的交易机器人。这类似于AV准备在街上部署的时刻。以下代码中介绍的`OandaTradingBot`类继承自`tpqoa`类，并添加了一些辅助函数和交易逻辑：
- en: '[PRE19]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[![1](Images/1.png)](#co_execution_and_deployment_CO12-1)'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_execution_and_deployment_CO12-1)'
- en: For demonstration, the normalization is done with the real-time data statistics.^([1](ch12.xhtml#idm45625242073656))
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示，使用实时数据统计进行归一化处理。^([1](ch12.xhtml#idm45625242073656))
- en: '[![2](Images/2.png)](#co_execution_and_deployment_CO12-3)'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_execution_and_deployment_CO12-3)'
- en: Collects the tick data and resamples it to the required granularity.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 收集tick数据并将其重新采样到所需的粒度。
- en: '[![3](Images/3.png)](#co_execution_and_deployment_CO12-7)'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_execution_and_deployment_CO12-7)'
- en: Returns the current state of the financial market.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 返回当前金融市场的状态。
- en: '[![4](Images/4.png)](#co_execution_and_deployment_CO12-9)'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](Images/4.png)](#co_execution_and_deployment_CO12-9)'
- en: Collects the P&L figures for every trade.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 收集每笔交易的盈亏数据。
- en: '[![5](Images/5.png)](#co_execution_and_deployment_CO12-11)'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](Images/5.png)](#co_execution_and_deployment_CO12-11)'
- en: Calculates the cumulative P&L for all trades.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 计算所有交易的累积盈亏。
- en: '[![6](Images/6.png)](#co_execution_and_deployment_CO12-14)'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '[![6](Images/6.png)](#co_execution_and_deployment_CO12-14)'
- en: Predicts the market direction and derives the signal (position).
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 预测市场方向并推导信号（头寸）。
- en: '[![7](Images/7.png)](#co_execution_and_deployment_CO12-17)'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '[![7](Images/7.png)](#co_execution_and_deployment_CO12-17)'
- en: Checks whether the conditions for a *long position* (buy order) are met.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 检查是否满足*多头位*（买入订单）的条件。
- en: '[![8](Images/8.png)](#co_execution_and_deployment_CO12-18)'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '[![8](Images/8.png)](#co_execution_and_deployment_CO12-18)'
- en: Checks whether the conditions for a *short position* (sell order) are met.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 检查是否满足*空头位*（卖出订单）的条件。
- en: 'The application of this class is straightforward. First, an object is instantiated,
    providing as the major input the trained trading bot `agent` from the previous
    section. Second, the streaming for the instrument to be traded needs to be started.
    Whenever new tick data arrives, the `.on_success()` method is called, which contains
    the main logic for both the processing of the tick data and the placement of trades.
    To speed things up a bit, the deployment example relies, as did the backtesting
    before, on 30-second bars. In a production context, when managing real money,
    a longer time interval might be the better choice—if only to reduce the number
    of trades and therewith the transaction costs:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类的应用非常直接。首先，实例化一个对象，主要输入是上一节中训练过的交易机器人`agent`。其次，需要启动要交易的工具的流。每当有新的tick数据到达时，都会调用`.on_success()`方法，其中包含处理tick数据和下订单的主要逻辑。为了加快速度，部署示例依赖于之前的回测一样，使用30秒钟的柱状图。在管理真实资金时，生产环境中可能更长的时间间隔可能是更好的选择——如果只是为了减少交易数量和因此的交易成本：
- en: '[PRE20]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[![1](Images/1.png)](#co_execution_and_deployment_CO13-1)'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_execution_and_deployment_CO13-1)'
- en: Instantiates the `OandaTradingBot` object
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 实例化`OandaTradingBot`对象
- en: '[![2](Images/2.png)](#co_execution_and_deployment_CO13-2)'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_execution_and_deployment_CO13-2)'
- en: Starts the streaming of the real-time data and the trading
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 启动实时数据和交易的流式传输
- en: '[![3](Images/3.png)](#co_execution_and_deployment_CO13-3)'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_execution_and_deployment_CO13-3)'
- en: Closes the final position after a certain number of ticks retrieved
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在检索到一定数量的 ticks 后关闭最终位置
- en: 'During the deployment, P&L figures are collected in the `pl` attribute, which
    is a `list` object. Once the trading has stopped, the P&L figures can be analyzed:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 在部署期间，利润和损失（P&L）数据被收集在`pl`属性中，这是一个`list`对象。一旦交易停止，可以分析P&L数据：
- en: '[PRE21]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[![1](Images/1.png)](#co_execution_and_deployment_CO14-1)'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_execution_and_deployment_CO14-1)'
- en: P&L figures for all trades
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 所有交易的P&L数据
- en: '[![2](Images/2.png)](#co_execution_and_deployment_CO14-3)'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_execution_and_deployment_CO14-3)'
- en: Cumulative P&L figures
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 累积P&L数据
- en: The simple deployment example illustrates that one can trade algorithmically
    and in automated fashion with a deep Q-learning trading bot in less than 100 lines
    of Python code. The major prerequisite is the trained trading bot (i.e., an instance
    of the `tradingbot` class). Many important aspects are intentionally left out
    here. For example, in a production environment, one would probably like to persist
    the data. One would also like to persist the order objects. Measures to make sure
    that the socket connection is still alive are also important (for example, by
    monitoring a heartbeat). Overall, security, reliability, logging, and monitoring
    are not really addressed. Some more details in this regard are provided in Hilpisch
    (2020).
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 简单的部署示例说明，人们可以使用少于100行的Python代码进行算法交易和自动化交易，使用深度Q学习交易机器人。主要前提是训练有素的交易机器人（即`tradingbot`类的实例）。此处有意省略了许多重要方面。例如，在生产环境中，可能希望持久化数据。还可能希望持久化订单对象。确保套接字连接仍然活动的措施也很重要（例如通过监视心跳）。总体而言，安全性、可靠性、日志记录和监控并未得到真正的关注。关于这方面的一些更多细节在Hilpisch（2020）中提供。
- en: 'The Python script in [“Oanda Trading Bot”](#ed_otb) presents a standalone executable
    version of the `OandaTradingBot` class. This represents a major step toward a
    more robust deployment option as compared to an interactive context such as Jupyter
    Notebook or Jupyter Lab. The script also includes functionality to add SL, TSL,
    or TP orders for the execution. The script expects a pickled version of the `agent`
    object in the current working directory. The following Python code pickles the
    object for later usage by the script:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: Python脚本中的[“Oanda Trading Bot”](#ed_otb)展示了`OandaTradingBot`类的独立可执行版本。与Jupyter
    Notebook或Jupyter Lab等交互式环境相比，这代表了更稳健的部署选项的重要进展。脚本还包括为执行添加SL、TSL或TP订单的功能。脚本期望当前工作目录中有`agent`对象的pickle版本，以下Python代码将该对象pickle化以供脚本后续使用：
- en: '[PRE22]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Conclusions
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: 'This chapter discusses central aspects of the execution of an algorithmic trading
    strategy and the deployment of a trading bot. The Oanda trading platform provides
    directly or indirectly with its v20 API all necessary capabilities to do the following:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 本章讨论了算法交易策略执行和交易机器人部署的核心方面。Oanda交易平台通过其v20 API直接或间接提供所有必要的功能来执行以下操作：
- en: Retrieve historical data
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检索历史数据
- en: Train and backtest a trading bot (deep Q-learning agent)
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 训练和回测交易机器人（深度Q学习代理）
- en: Stream real-time data
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实时数据流
- en: Place market (and limit) orders
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下达市场（和限价）订单
- en: Make use of SL, TSL, and TP orders
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用SL、TSL和TP订单
- en: Deploy a trading bot in an automated manner
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以自动化方式部署交易机器人
- en: The prerequisites to implement all these steps are a demo account with Oanda,
    standard hardware and software (open source only), and a stable internet connection.
    In other words, the barriers of entry to algorithmic trading for the purposes
    of exploiting economic inefficiencies are pretty low. This is in stark contrast,
    for example, to the training, design, and construction of AVs for deployment on
    public streets—the budgets of companies in the AV space run into the billions
    of dollars. In other words, the finance domain has distinctive advantages compared
    to other industries and domains with regard to the real-world deployment of AI
    agents, such as trading bots, as focused on in this and the previous chapter.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 实施所有这些步骤的先决条件是在Oanda拥有一个演示账户，标准硬件和软件（仅开源），以及稳定的互联网连接。换句话说，与在公共街道上部署AV（自动驾驶车辆）的培训、设计和建造相比，利用算法交易来利用经济效率低下的目的的门槛非常低。换句话说，金融领域在AI代理实际部署方面（如本章和前一章中所关注的交易机器人）与其他行业和领域相比具有显著优势。
- en: References
  id: totrans-199
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考资料
- en: 'Books and papers cited in this chapter:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 本章引用的书籍和论文：
- en: 'Hilpisch, Yves. 2020\. *Python for Algorithmic Trading: From Idea to Cloud
    Deployment.* Sebastopol: O’Reilly.'
  id: totrans-201
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Hilpisch, Yves. 2020年。《Python量化交易：从想法到云部署》。Sebastopol：O’Reilly。
- en: Litman, Todd. 2020\. “Autonomous Vehicle Implementation Predictions.” *Victoria
    Transport Policy Institute*. [*https://oreil.ly/ds7YM*](https://oreil.ly/ds7YM).
  id: totrans-202
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Litman, Todd. 2020年。《自动驾驶车辆实施预测》。*维多利亚交通政策研究所*。[*https://oreil.ly/ds7YM*](https://oreil.ly/ds7YM)。
- en: Python Code
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python代码
- en: This section contains code used and referenced in the main body of the chapter.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 此部分包含主章节中使用和引用的代码。
- en: Oanda Environment
  id: totrans-205
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Oanda环境
- en: 'The following is the Python module with the `OandaEnv` class to train a trading
    bot based on historical Oanda data:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是带有`OandaEnv`类的Python模块，用于基于历史Oanda数据训练交易机器人：
- en: '[PRE23]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[![1](Images/1.png)](#co_execution_and_deployment_CO15-1)'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_execution_and_deployment_CO15-1)'
- en: Defines the path for the data file
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 定义数据文件的路径
- en: '[![2](Images/2.png)](#co_execution_and_deployment_CO15-2)'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_execution_and_deployment_CO15-2)'
- en: Defines the filename of the data file
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 定义数据文件的文件名
- en: '[![3](Images/3.png)](#co_execution_and_deployment_CO15-4)'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_execution_and_deployment_CO15-4)'
- en: Reads the data if a corresponding data file exists
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 如果存在相应的数据文件，则读取数据
- en: '[![4](Images/4.png)](#co_execution_and_deployment_CO15-5)'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](Images/4.png)](#co_execution_and_deployment_CO15-5)'
- en: Retrieves the data for the API if no such file exists
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不存在这样的文件，则检索API的数据
- en: '[![5](Images/5.png)](#co_execution_and_deployment_CO15-6)'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](Images/5.png)](#co_execution_and_deployment_CO15-6)'
- en: Writes the data as a `CSV` file to disk
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 将数据写入`CSV`文件到磁盘
- en: '[![6](Images/6.png)](#co_execution_and_deployment_CO15-7)'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '[![6](Images/6.png)](#co_execution_and_deployment_CO15-7)'
- en: Selects the column with the closing prices
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 选择包含收盘价格的列
- en: '[![7](Images/7.png)](#co_execution_and_deployment_CO15-8)'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '[![7](Images/7.png)](#co_execution_and_deployment_CO15-8)'
- en: Renames the column to the instrument name (symbol)
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 将列重命名为工具名称（符号）
- en: '[![8](Images/8.png)](#co_execution_and_deployment_CO15-9)'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '[![8](Images/8.png)](#co_execution_and_deployment_CO15-9)'
- en: Reward for correct prediction
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 正确预测的奖励
- en: '[![9](Images/9.png)](#co_execution_and_deployment_CO15-10)'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '[![9](Images/9.png)](#co_execution_and_deployment_CO15-10)'
- en: Reward for the realized performance (return)
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 实现表现（回报）的奖励
- en: '[![10](Images/10.png)](#co_execution_and_deployment_CO15-11)'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '[![10](Images/10.png)](#co_execution_and_deployment_CO15-11)'
- en: Combined reward for prediction and performance
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 预测和表现的综合奖励
- en: Vectorized Backtesting
  id: totrans-228
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 矢量化回测
- en: 'The following is the Python module with the helper function `backtest` to generate
    the data to do a vectorized backtest for a deep Q-learning trading bot. The code
    is also used in [Chapter 11](ch11.xhtml#risk_management):'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是带有助手函数`backtest`的Python模块，用于为深度Q学习交易机器人进行矢量化回测生成数据。此代码还用于[第11章](ch11.xhtml#risk_management)：
- en: '[PRE24]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Oanda Trading Bot
  id: totrans-231
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Oanda交易机器人
- en: 'The following is the Python script with the `OandaTradingBot` class and code
    to deploy the class:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是带有`OandaTradingBot`类和部署该类的Python脚本：
- en: '[PRE25]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: ^([1](ch12.xhtml#idm45625242073656-marker)) This little trick leads more quickly
    to trades in this particular context given the data used. For real deployment,
    the statistics from the learning environment data are to be used for the normalization.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch12.xhtml#idm45625242073656-marker)) 在特定情境中，这个小技巧可以更快地导致交易，考虑到所使用的数据。对于真实部署，学习环境数据的统计数据将用于标准化。

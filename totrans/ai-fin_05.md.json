["```py\nIn [1]: import numpy as np\n\nIn [2]: S0 = 10  ![1](Images/1.png)\n        B0 = 10  ![1](Images/1.png)\n\nIn [3]: S1 = np.array((20, 5))  ![2](Images/2.png)\n        B1 = np.array((11, 11))  ![2](Images/2.png)\n\nIn [4]: M0 = np.array((S0, B0)) ![3](Images/3.png)\n        M0  ![3](Images/3.png)\nOut[4]: array([10, 10])\n\nIn [5]: M1 = np.array((S1, B1)).T  ![4](Images/4.png)\n        M1  ![4](Images/4.png)\nOut[5]: array([[20, 11],\n               [ 5, 11]])\n\nIn [6]: K = 14.5  ![5](Images/5.png)\n\nIn [7]: C1 = np.maximum(S1 - K, 0) ![6](Images/6.png)\n        C1  ![6](Images/6.png)\nOut[7]: array([5.5, 0. ])\n\nIn [8]: phi = np.linalg.solve(M1, C1)  ![7](Images/7.png)\n        phi  ![7](Images/7.png)\nOut[8]: array([ 0.36666667, -0.16666667])\n\nIn [9]: np.allclose(C1, np.dot(M1, phi))  ![8](Images/8.png)\nOut[9]: True\n\nIn [10]: C0 = np.dot(M0, phi)  ![9](Images/9.png)\n         C0  ![9](Images/9.png)\nOut[10]: 2.0\n```", "```py\nIn [11]: def u(x):\n             return np.sqrt(x)  ![1](Images/1.png)\n\nIn [12]: phi_A = np.array((0.75, 0.25))  ![2](Images/2.png)\n         phi_D = np.array((0.25, 0.75))  ![2](Images/2.png)\n\nIn [13]: np.dot(M0, phi_A) == np.dot(M0, phi_D)  ![3](Images/3.png)\nOut[13]: True\n\nIn [14]: A1 = np.dot(M1, phi_A)  ![4](Images/4.png)\n         A1  ![4](Images/4.png)\nOut[14]: array([17.75,  6.5 ])\n\nIn [15]: D1 = np.dot(M1, phi_D)  ![5](Images/5.png)\n         D1  ![5](Images/5.png)\nOut[15]: array([13.25,  9.5 ])\n\nIn [16]: P = np.array((0.5, 0.5))  ![6](Images/6.png)\n\nIn [17]: def EUT(x):\n             return np.dot(P, u(x))  ![7](Images/7.png)\n\nIn [18]: EUT(A1)  ![8](Images/8.png)\nOut[18]: 3.381292321692286\n\nIn [19]: EUT(D1)  ![8](Images/8.png)\nOut[19]: 3.3611309730623735\n```", "```py\nIn [20]: from scipy.optimize import minimize\n\nIn [21]: w = 10  ![1](Images/1.png)\n\nIn [22]: cons = {'type': 'eq', 'fun': lambda phi: np.dot(M0, phi) - w}  ![2](Images/2.png)\n\nIn [23]: def EUT_(phi):\n             x = np.dot(M1, phi)  ![3](Images/3.png)\n             return EUT(x)  ![3](Images/3.png)\n\nIn [24]: opt = minimize(lambda phi: -EUT_(phi),  ![4](Images/4.png)\n                        x0=phi_A,  ![5](Images/5.png)\n                        constraints=cons)  ![6](Images/6.png)\n\nIn [25]: opt  ![7](Images/7.png)\nOut[25]:      fun: -3.385015999493397\n              jac: array([-1.69249132, -1.69253424])\n          message: 'Optimization terminated successfully.'\n             nfev: 16\n              nit: 4\n             njev: 4\n           status: 0\n          success: True\n                x: array([0.61122474, 0.38877526])\n\nIn [26]: EUT_(opt['x'])  ![8](Images/8.png)\nOut[26]: 3.385015999493397\n```", "```py\nIn [27]: rS = S1 / S0 - 1  ![1](Images/1.png)\n         rS  ![1](Images/1.png)\nOut[27]: array([ 1. , -0.5])\n\nIn [28]: rB = B1 / B0 - 1  ![2](Images/2.png)\n         rB  ![2](Images/2.png)\nOut[28]: array([0.1, 0.1])\n\nIn [29]: def mu(rX):\n             return np.dot(P, rX)  ![3](Images/3.png)\n\nIn [30]: mu(rS)  ![4](Images/4.png)\nOut[30]: 0.25\n\nIn [31]: mu(rB)  ![4](Images/4.png)\nOut[31]: 0.10000000000000009\n\nIn [32]: rM = M1 / M0 - 1  ![5](Images/5.png)\n         rM  ![5](Images/5.png)\nOut[32]: array([[ 1. ,  0.1],\n                [-0.5,  0.1]])\n\nIn [33]: mu(rM)  ![6](Images/6.png)\nOut[33]: array([0.25, 0.1 ])\n```", "```py\nIn [34]: def var(rX):\n             return ((rX - mu(rX)) ** 2).mean()  ![1](Images/1.png)\n\nIn [35]: var(rS)\nOut[35]: 0.5625\n\nIn [36]: var(rB)\nOut[36]: 0.0\n\nIn [37]: def sigma(rX):\n             return np.sqrt(var(rX))  ![2](Images/2.png)\n\nIn [38]: sigma(rS)\nOut[38]: 0.75\n\nIn [39]: sigma(rB)\nOut[39]: 0.0\n\nIn [40]: np.cov(rM.T, aweights=P, ddof=0)  ![3](Images/3.png)\nOut[40]: array([[0.5625, 0.    ],\n                [0.    , 0.    ]])\n```", "```py\nIn [41]: phi = np.array((0.5, 0.5))\n\nIn [42]: def mu_phi(phi):\n             return np.dot(phi, mu(rM))  ![1](Images/1.png)\n\nIn [43]: mu_phi(phi)\nOut[43]: 0.17500000000000004\n\nIn [44]: def var_phi(phi):\n             cv = np.cov(rM.T, aweights=P, ddof=0)\n             return np.dot(phi, np.dot(cv, phi))  ![2](Images/2.png)\n\nIn [45]: var_phi(phi)\nOut[45]: 0.140625\n\nIn [46]: def sigma_phi(phi):\n             return var_phi(phi) ** 0.5  ![3](Images/3.png)\n\nIn [47]: sigma_phi(phi)\nOut[47]: 0.375\n```", "```py\nIn [48]: from pylab import plt, mpl\n         plt.style.use('seaborn')\n         mpl.rcParams['savefig.dpi'] = 300\n         mpl.rcParams['font.family'] = 'serif'\n\nIn [49]: phi_mcs = np.random.random((2, 200))  ![1](Images/1.png)\n\nIn [50]: phi_mcs = (phi_mcs / phi_mcs.sum(axis=0)).T  ![1](Images/1.png)\n\nIn [51]: mcs = np.array([(sigma_phi(phi), mu_phi(phi))\n                         for phi in phi_mcs])  ![2](Images/2.png)\n\nIn [52]: plt.figure(figsize=(10, 6))\n         plt.plot(mcs[:, 0], mcs[:, 1], 'ro')\n         plt.xlabel('expected volatility')\n         plt.ylabel('expected return');\n```", "```py\nIn [53]: P = np.ones(3) / 3  ![1](Images/1.png)\n         P  ![1](Images/1.png)\nOut[53]: array([0.33333333, 0.33333333, 0.33333333])\n\nIn [54]: S1 = np.array((20, 10, 5))\n\nIn [55]: T0 = 10\n         T1 = np.array((1, 12, 13))\n\nIn [56]: M0 = np.array((S0, T0))\n         M0\nOut[56]: array([10, 10])\n\nIn [57]: M1 = np.array((S1, T1)).T\n         M1\nOut[57]: array([[20,  1],\n                [10, 12],\n                [ 5, 13]])\n\nIn [58]: rM = M1 / M0 - 1\n         rM\nOut[58]: array([[ 1. , -0.9],\n                [ 0. ,  0.2],\n                [-0.5,  0.3]])\n\nIn [59]: mcs = np.array([(sigma_phi(phi), mu_phi(phi))\n                         for phi in phi_mcs])\n\nIn [60]: plt.figure(figsize=(10, 6))\n         plt.plot(mcs[:, 0], mcs[:, 1], 'ro')\n         plt.xlabel('expected volatility')\n         plt.ylabel('expected return');\n```", "```py\nIn [61]: cons = {'type': 'eq', 'fun': lambda phi: np.sum(phi) - 1}\n\nIn [62]: bnds = ((0, 1), (0, 1))\n\nIn [63]: min_var = minimize(sigma_phi, (0.5, 0.5),\n                            constraints=cons, bounds=bnds)  ![1](Images/1.png)\n\nIn [64]: min_var\nOut[64]:      fun: 0.07481322946910632\n              jac: array([0.07426564, 0.07528945])\n          message: 'Optimization terminated successfully.'\n             nfev: 17\n              nit: 4\n             njev: 4\n           status: 0\n          success: True\n                x: array([0.46511697, 0.53488303])\n\nIn [65]: def sharpe(phi):\n             return mu_phi(phi) / sigma_phi(phi)  ![2](Images/2.png)\n\nIn [66]: max_sharpe = minimize(lambda phi: -sharpe(phi), (0.5, 0.5),\n                        constraints=cons, bounds=bnds)  ![3](Images/3.png)\n\nIn [67]: max_sharpe\nOut[67]:      fun: -0.2721654098971811\n              jac: array([ 0.00012054, -0.00024174])\n          message: 'Optimization terminated successfully.'\n             nfev: 38\n              nit: 9\n             njev: 9\n           status: 0\n          success: True\n                x: array([0.66731116, 0.33268884])\n\nIn [68]: plt.figure(figsize=(10, 6))\n         plt.plot(mcs[:, 0], mcs[:, 1], 'ro', ms=5)\n         plt.plot(sigma_phi(min_var['x']), mu_phi(min_var['x']),\n                  '^', ms=12.5, label='minimum volatility')\n         plt.plot(sigma_phi(max_sharpe['x']), mu_phi(max_sharpe['x']),\n                  'v', ms=12.5, label='maximum Sharpe ratio')\n         plt.xlabel('expected volatility')\n         plt.ylabel('expected return')\n         plt.legend();\n```", "```py\nIn [69]: cons = [{'type': 'eq', 'fun': lambda phi: np.sum(phi) - 1},\n                {'type': 'eq', 'fun': lambda phi: mu_phi(phi) - target}]  ![1](Images/1.png)\n\nIn [70]: bnds = ((0, 1), (0, 1))\n\nIn [71]: targets = np.linspace(mu_phi(min_var['x']), 0.16)  ![2](Images/2.png)\n\nIn [72]: frontier = []\n         for target in targets:\n             phi_eff = minimize(sigma_phi, (0.5, 0.5),\n                                constraints=cons, bounds=bnds)['x']  ![3](Images/3.png)\n             frontier.append((sigma_phi(phi_eff), mu_phi(phi_eff)))\n         frontier = np.array(frontier)\n\nIn [73]: plt.figure(figsize=(10, 6))\n         plt.plot(frontier[:, 0], frontier[:, 1], 'mo', ms=5,\n                  label='efficient frontier')\n         plt.plot(sigma_phi(min_var['x']), mu_phi(min_var['x']),\n                  '^', ms=12.5, label='minimum volatility')\n         plt.plot(sigma_phi(max_sharpe['x']), mu_phi(max_sharpe['x']),\n                  'v', ms=12.5, label='maximum Sharpe ratio')\n         plt.xlabel('expected volatility')\n         plt.ylabel('expected return')\n         plt.legend();\n```", "```py\nIn [74]: plt.figure(figsize=(10, 6))\n         plt.plot((0, 0.3), (0.01, 0.22), label='capital market line')\n         plt.plot(0, 0.01, 'o', ms=9, label='risk-less asset')\n         plt.plot(0.2, 0.15, '^', ms=9, label='market portfolio')\n         plt.annotate('$(0, \\\\bar{r})$', (0, 0.01), (-0.01, 0.02))\n         plt.annotate('$(\\sigma_M, \\mu_M)$', (0.2, 0.15), (0.19, 0.16))\n         plt.xlabel('expected volatility')\n         plt.ylabel('expected return')\n         plt.legend();\n```", "```py\nIn [75]: phi_M = np.array((0.8, 0.2))\n\nIn [76]: mu_M = mu_phi(phi_M)\n         mu_M\nOut[76]: 0.10666666666666666\n\nIn [77]: sigma_M = sigma_phi(phi_M)\n         sigma_M\nOut[77]: 0.39474323581566567\n\nIn [78]: r = 0.0025\n\nIn [79]: plt.figure(figsize=(10, 6))\n         plt.plot(frontier[:, 0], frontier[:, 1], 'm.', ms=5,\n                  label='efficient frontier')\n         plt.plot(0, r, 'o', ms=9, label='risk-less asset')\n         plt.plot(sigma_M, mu_M, '^', ms=9, label='market portfolio')\n         plt.plot((0, 0.6), (r, r + ((mu_M - r) / sigma_M) * 0.6),\n                  'r', label='capital market line', lw=2.0)\n         plt.annotate('$(0, \\\\bar{r})$', (0, r), (-0.015, r + 0.01))\n         plt.annotate('$(\\sigma_M, \\mu_M)$', (sigma_M, mu_M),\n                      (sigma_M - 0.025, mu_M + 0.01))\n         plt.xlabel('expected volatility')\n         plt.ylabel('expected return')\n         plt.legend();\n```", "```py\nIn [80]: def U(p):\n             mu, sigma = p\n             return mu - 1 / 2 * (sigma ** 2 + mu ** 2)  ![1](Images/1.png)\n\nIn [81]: cons = {'type': 'eq',\n                 'fun': lambda p: p[0] - (r + (mu_M - r) / sigma_M * p[1])}  ![2](Images/2.png)\n\nIn [82]: opt = minimize(lambda p: -U(p), (0.1, 0.3), constraints=cons)\n\nIn [83]: opt\nOut[83]:      fun: -0.034885186826739426\n              jac: array([-0.93256102,  0.24608851])\n          message: 'Optimization terminated successfully.'\n             nfev: 8\n              nit: 2\n             njev: 2\n           status: 0\n          success: True\n                x: array([0.06743897, 0.2460885 ])\n```", "```py\nIn [84]: from sympy import *\n         init_printing(use_unicode=False, use_latex=False)\n\nIn [85]: mu, sigma, b, v = symbols('mu sigma b v')  ![1](Images/1.png)\n\nIn [86]: sol = solve('mu - b / 2 * (sigma ** 2 + mu ** 2) - v', mu)  ![2](Images/2.png)\n\nIn [87]: sol  ![2](Images/2.png)\nOut[87]:         _________________________     _________________________\n                /    2      2                 /    2      2\n          1 - \\/  - b *sigma  - 2*b*v + 1   \\/  - b *sigma  - 2*b*v + 1  + 1\n         [--------------------------------, --------------------------------]\n                         b                                 b\n\nIn [88]: u1 = sol[0].subs({'b': 1, 'v': 0.1})  ![3](Images/3.png)\n         u1\nOut[88]:        ______________\n               /            2\n         1 - \\/  0.8 - sigma\n\nIn [89]: u2 = sol[0].subs({'b': 1, 'v': 0.125})  ![3](Images/3.png)\n         u2\nOut[89]:        _______________\n               /             2\n         1 - \\/  0.75 - sigma\n\nIn [90]: f1 = lambdify(sigma, u1)  ![4](Images/4.png)\n         f2 = lambdify(sigma, u2)  ![4](Images/4.png)\n\nIn [91]: sigma_ = np.linspace(0.0, 0.5)  ![5](Images/5.png)\n         u1_ = f1(sigma_)  ![6](Images/6.png)\n         u2_ = f2(sigma_)  ![6](Images/6.png)\n\nIn [92]: plt.figure(figsize=(10, 6))\n         plt.plot(sigma_, u1_, label='$v=0.1$')\n         plt.plot(sigma_, u2_, '--', label='$v=0.125$')\n         plt.xlabel('expected volatility')\n         plt.ylabel('expected return')\n         plt.legend();\n```", "```py\nIn [93]: u = sol[0].subs({'b': 1, 'v': -opt['fun']})  ![1](Images/1.png)\n         u\nOut[93]:        ____________________________\n               /                          2\n         1 - \\/  0.930229626346521 - sigma\n\nIn [94]: f = lambdify(sigma, u)\n\nIn [95]: u_ = f(sigma_)  ![2](Images/2.png)\n\nIn [96]: plt.figure(figsize=(10, 6))\n         plt.plot(0, r, 'o', ms=9, label='risk-less asset')\n         plt.plot(sigma_M, mu_M, '^', ms=9, label='market portfolio')\n         plt.plot(opt['x'][1], opt['x'][0], 'v', ms=9, label='optimal portfolio')\n         plt.plot((0, 0.5), (r, r + (mu_M - r) / sigma_M * 0.5),\n                  label='capital market line', lw=2.0)\n         plt.plot(sigma_, u_, '--', label='$v={}$'.format(-round(opt['fun'], 3)))\n         plt.xlabel('expected volatility')\n         plt.ylabel('expected return')\n         plt.legend();\n```", "```py\nIn [97]: M1\nOut[97]: array([[20,  1],\n                [10, 12],\n                [ 5, 13]])\n\nIn [98]: M0\nOut[98]: array([10, 10])\n\nIn [99]: V1 = np.array((12, 15, 7))\n\nIn [100]: reg = np.linalg.lstsq(M1, V1, rcond=-1)[0]  ![1](Images/1.png)\n          reg  ![1](Images/1.png)\nOut[100]: array([0.6141665 , 0.50030531])\n\nIn [101]: np.dot(M1, reg)\nOut[101]: array([12.78363525, 12.14532872,  9.57480155])\n\nIn [102]: np.dot(M1, reg) - V1  ![2](Images/2.png)\nOut[102]: array([ 0.78363525, -2.85467128,  2.57480155])\n\nIn [103]: V0 = np.dot(M0, reg)  ![3](Images/3.png)\n          V0  ![3](Images/3.png)\nOut[103]: 11.144718094850402\n```", "```py\nIn [104]: U0 = 10\n          U1 = np.array((12, 5, 11))\n\nIn [105]: M0_ = np.array((S0, T0, U0))  ![1](Images/1.png)\n\nIn [106]: M1_ = np.concatenate((M1.T, np.array([U1,]))).T  ![2](Images/2.png)\n\nIn [107]: M1_  ![2](Images/2.png)\nOut[107]: array([[20,  1, 12],\n                 [10, 12,  5],\n                 [ 5, 13, 11]])\n\nIn [108]: np.linalg.matrix_rank(M1_)  ![2](Images/2.png)\nOut[108]: 3\n\nIn [109]: reg = np.linalg.lstsq(M1_, V1, rcond=-1)[0]\n          reg\nOut[109]: array([ 0.9575179 ,  0.72553699, -0.65632458])\n\nIn [110]: np.allclose(np.dot(M1_, reg), V1)  ![3](Images/3.png)\nOut[110]: True\n\nIn [111]: V0_ = np.dot(M0_, reg)\n          V0_  ![4](Images/4.png)\nOut[111]: 10.267303102625307\n```"]
["```py\nIn [1]: import numpy as np\n        from numpy.random import default_rng\n        np.set_printoptions(precision=5, suppress=True)\n\nIn [2]: rng = default_rng(100)  ![1](Images/1.png)\n\nIn [3]: I = 1000  ![2](Images/2.png)\n\nIn [4]: S = rng.normal(loc=100, scale=20, size=I)  ![3](Images/3.png)\n\nIn [5]: S[:14]  ![3](Images/3.png)\nOut[5]: array([ 76.84901, 105.79512, 115.61708, 110.87947,  80.77235, 121.42017,\n               114.02911, 114.09947, 114.90125, 122.08694, 144.85945,  87.77014,\n               100.94422, 135.08469])\n\nIn [6]: S.mean()  ![4](Images/4.png)\nOut[6]: 100.88376804485935\n```", "```py\nIn [7]: P = rng.random(I)  ![1](Images/1.png)\n\nIn [8]: P[:10]  ![2](Images/2.png)\nOut[8]: array([0.34914, 0.33408, 0.41319, 0.06102, 0.6339 , 0.51285, 0.51177,\n               0.92149, 0.72853, 0.58985])\n\nIn [9]: P /= P.sum()  ![2](Images/2.png)\n\nIn [10]: P.sum()  ![2](Images/2.png)\nOut[10]: 1.0\n\nIn [11]: P[:10]  ![3](Images/3.png)\nOut[11]: array([0.00072, 0.00069, 0.00085, 0.00013, 0.00131, 0.00106, 0.00106,\n                0.0019 , 0.0015 , 0.00122])\n\nIn [12]: np.dot(P, S)  ![4](Images/4.png)\nOut[12]: 100.71981640185018\n```", "```py\nIn [13]: M = np.array((\n             (11, 25, 0,  0,  25),\n             (11, 20, 30, 15, 25),\n             (11, 10, 0,  20, 10),\n             (11, 5,  30, 15, 0),\n             (11, 0,  0,  0,  0)\n         ))  ![1](Images/1.png)\n\nIn [14]: M0 = np.array(5 * [10.])  ![2](Images/2.png)\n\nIn [15]: M0  ![2](Images/2.png)\nOut[15]: array([10., 10., 10., 10., 10.])\n\nIn [16]: M.mean(axis=0)  ![3](Images/3.png)\nOut[16]: array([11., 12., 12., 10., 12.])\n\nIn [17]: mu = M.mean(axis=0) / M0 - 1  ![4](Images/4.png)\n\nIn [18]: mu  ![4](Images/4.png)\nOut[18]: array([0.1, 0.2, 0.2, 0. , 0.2])\n\nIn [19]: (M / M0 - 1)  ![5](Images/5.png)\nOut[19]: array([[ 0.1,  1.5, -1. , -1. ,  1.5],\n                [ 0.1,  1. ,  2. ,  0.5,  1.5],\n                [ 0.1,  0. , -1. ,  1. ,  0. ],\n                [ 0.1, -0.5,  2. ,  0.5, -1. ],\n                [ 0.1, -1. , -1. , -1. , -1. ]])\n\nIn [20]: sigma = (M / M0 - 1).std(axis=0)  ![6](Images/6.png)\n\nIn [21]: sigma  ![6](Images/6.png)\nOut[21]: array([0.     , 0.92736, 1.46969, 0.83666, 1.1225 ])\n```", "```py\nIn [22]: K = 15  ![1](Images/1.png)\n\nIn [23]: M[:, 1]  ![1](Images/1.png)\nOut[23]: array([25, 20, 10,  5,  0])\n\nIn [24]: C1 = np.maximum(M[:, 1] - K, 0)  ![2](Images/2.png)\n\nIn [25]: C1  ![2](Images/2.png)\nOut[25]: array([10,  5,  0,  0,  0])\n\nIn [26]: phi = np.linalg.solve(M, C1)  ![3](Images/3.png)\n\nIn [27]: phi  ![3](Images/3.png)\nOut[27]: array([ 0.,  0.5,  0.01667, -0.2, -0.1])\n\nIn [28]: np.allclose(C1, np.dot(M, phi))  ![4](Images/4.png)\nOut[28]: True\n\nIn [29]: C0 = np.dot(M0, phi)  ![5](Images/5.png)\n\nIn [30]: C0  ![5](Images/5.png)\nOut[30]: 2.1666666666666665\n```", "```py\nIn [31]: M = np.eye(5)  ![1](Images/1.png)\n\nIn [32]: M  ![1](Images/1.png)\nOut[32]: array([[1., 0., 0., 0., 0.],\n                [0., 1., 0., 0., 0.],\n                [0., 0., 1., 0., 0.],\n                [0., 0., 0., 1., 0.],\n                [0., 0., 0., 0., 1.]])\n\nIn [33]: np.linalg.linalg.matrix_rank(M)  ![2](Images/2.png)\nOut[33]: 5\n\nIn [34]: C1 = np.arange(10, 0, -2)  ![3](Images/3.png)\n\nIn [35]: C1  ![3](Images/3.png)\nOut[35]: array([10,  8,  6,  4,  2])\n\nIn [36]: np.linalg.solve(M, C1)  ![4](Images/4.png)\nOut[36]: array([10.,  8.,  6.,  4.,  2.])\n```", "```py\nIn [37]: rng = default_rng(100)  ![1](Images/1.png)\n\nIn [38]: M = rng.integers(1, 10, (5, 5))  ![2](Images/2.png)\n\nIn [39]: M  ![2](Images/2.png)\nOut[39]: array([[7, 8, 2, 6, 1],\n                [3, 4, 1, 6, 9],\n                [9, 6, 4, 8, 9],\n                [9, 1, 7, 7, 2],\n                [5, 9, 7, 3, 3]])\n\nIn [40]: np.linalg.matrix_rank(M)  ![3](Images/3.png)\nOut[40]: 5\n\nIn [41]: np.linalg.matrix_rank(M.T)  ![3](Images/3.png)\nOut[41]: 5\n\nIn [42]: phi = np.linalg.solve(M, C1)  ![4](Images/4.png)\n\nIn [43]: phi  ![4](Images/4.png)\nOut[43]: array([-1.16988,  0.52471, -0.3861 ,  2.56409, -0.62085])\n\nIn [44]: np.dot(M, phi)  ![5](Images/5.png)\nOut[44]: array([10.,  8.,  6.,  4.,  2.])\n```", "```py\nIn [45]: import scipy.optimize as sco    ![1](Images/1.png)\n\nIn [46]: M = np.array((\n             (11, 25, 0,  0,  25),\n             (11, 20, 30, 15, 25),\n             (11, 10, 0,  20, 10),\n             (11, 5,  30, 15, 0),\n             (11, 0,  0,  0,  0)\n         ))  ![2](Images/2.png)\n\nIn [47]: np.linalg.matrix_rank(M)  ![3](Images/3.png)\nOut[47]: 5\n\nIn [48]: M0 = np.ones(5) * 10  ![4](Images/4.png)\n\nIn [49]: M0  ![5](Images/5.png)\nOut[49]: array([10., 10., 10., 10., 10.])\n\nIn [50]: r = 0.1  ![6](Images/6.png)\n\nIn [51]: def E(Q):\n             return np.sum((np.dot(M.T, Q) - M0 * (1 + r)) ** 2)   ![7](Images/7.png)\n\nIn [52]: E(np.array(5 * [0.2]))\nOut[52]: 4.0\n\nIn [53]: cons = ({'type': 'eq', 'fun': lambda Q: Q.sum() - 1})  ![8](Images/8.png)\n\nIn [54]: bnds = (5 * [(0, 1)])  ![9](Images/9.png)\n\nIn [55]: bnds  ![9](Images/9.png)\nOut[55]: [(0, 1), (0, 1), (0, 1), (0, 1), (0, 1)]\n\nIn [56]: res = sco.minimize(E, 5 * [1],  ![10](Images/10.png)\n                            method='SLSQP',  ![11](Images/11.png)\n                            constraints=cons,  ![12](Images/12.png)\n                            bounds=bnds)  ![13](Images/13.png)\n\nIn [57]: Q = res['x']  ![14](Images/14.png)\n\nIn [58]: Q  ![14](Images/14.png)\nOut[58]: array([0.14667, 0.18333, 0.275  , 0.18333, 0.21167])\n\nIn [59]: np.dot(M.T, Q) / (1 + r)  ![15](Images/15.png)\nOut[59]: array([10.     ,  9.99998,  9.99999, 10.00001,  9.99998])\n\nIn [60]: np.allclose(M0, np.dot(M.T, Q) / (1 + r))\nOut[60]: True\n```", "```py\nIn [61]: import math\n\nIn [62]: S0 = 100  ![1](Images/1.png)\n         r = 0.05  ![2](Images/2.png)\n         sigma = 0.2  ![3](Images/3.png)\n         T = 1.0  ![4](Images/4.png)\n         I = 10000  ![5](Images/5.png)\n\nIn [63]: rng = default_rng(100)  ![6](Images/6.png)\n\nIn [64]: ST = S0 * np.exp((r - sigma ** 2 / 2) * T +\n              sigma * math.sqrt(T) * rng.standard_normal(I))  ![7](Images/7.png)\n\nIn [65]: ST[:8].round(1)  ![7](Images/7.png)\nOut[65]: array([ 81.7, 109.2, 120.5, 114.9,  85. , 127.7, 118.6, 118.6])\n\nIn [66]: ST.mean()  ![8](Images/8.png)\nOut[66]: 105.6675325917807\n\nIn [67]: S0 * math.exp(r * T)  ![9](Images/9.png)\nOut[67]: 105.12710963760242\n\nIn [68]: from pylab import mpl, plt\n         plt.style.use('seaborn')\n         mpl.rcParams['savefig.dpi'] = 300\n         mpl.rcParams['font.family'] = 'serif'\n\nIn [69]: plt.figure(figsize=(10, 6))\n         plt.hist(ST, bins=35, label='frequency');\n         plt.axvline(ST.mean(), color='r', label='mean')\n         plt.axvline(ST.mean() + ST.std(), color='y', label='sd up')\n         plt.axvline(ST.mean() - ST.std(), color='y', label='sd down')\n         plt.legend(loc=0);   ![10](Images/10.png)\n```", "```py\nIn [70]: K = 105  ![1](Images/1.png)\n\nIn [71]: CT = np.maximum(ST - K, 0)  ![2](Images/2.png)\n\nIn [72]: CT[:8].round(1)\nOut[72]: array([ 0. ,  4.2, 15.5,  9.9,  0. , 22.7, 13.6, 13.6])\n\nIn [73]: C0 = math.exp(-r * T) * CT.mean()  ![3](Images/3.png)\n\nIn [74]: C0  ![3](Images/3.png)\nOut[74]: 8.288763195530931\n```", "```py\nIn [75]: B0 = 100  ![1](Images/1.png)\n\nIn [76]: M0 = np.array((B0, S0))  ![2](Images/2.png)\n\nIn [77]: BT = B0 * np.ones(len(ST)) * math.exp(r * T)  ![3](Images/3.png)\n\nIn [78]: BT[:4]  ![3](Images/3.png)\nOut[78]: array([105.12711, 105.12711, 105.12711, 105.12711])\n\nIn [79]: M = np.array((BT, ST)).T  ![4](Images/4.png)\n\nIn [80]: M  ![4](Images/4.png)\nOut[80]: array([[105.12711,  81.74955],\n                [105.12711, 109.19348],\n                [105.12711, 120.4628 ],\n                ...,\n                [105.12711,  71.10624],\n                [105.12711, 105.32038],\n                [105.12711, 134.77647]])\n\nIn [81]: phi = np.linalg.lstsq(M, CT, rcond=None)[0]  ![5](Images/5.png)\n\nIn [82]: phi  ![5](Images/5.png)\nOut[82]: array([-0.51089,  0.59075])\n\nIn [83]: np.mean((np.dot(M, phi) - CT))  ![6](Images/6.png)\nOut[83]: 1.1798206855928583e-14\n\nIn [84]: np.dot(M0, phi)  ![7](Images/7.png)\nOut[84]: 7.9850808951857335\n```", "```py\nIn [85]: M0 = np.array((100, 100))   ![1](Images/1.png)\n\nIn [86]: r = 0.05\n         sigma = 0.2\n         lmbda = 0.3\n         mu = -0.3\n         delta = 0.1\n         rj = lmbda * (math.exp(mu + delta ** 2 / 2) - 1)\n         T = 1.0\n         I = 10000\n\nIn [87]: BT = M0[0] * np.ones(I) * math.exp(r * T)\n\nIn [88]: z = rng.standard_normal((2, I))  ![2](Images/2.png)\n         z -= z.mean()  ![3](Images/3.png)\n         z /= z.std()  ![3](Images/3.png)\n         y = rng.poisson(lmbda, I)  ![4](Images/4.png)\n\nIn [89]: ST = S0 * (\n             np.exp((r - rj - sigma ** 2 / 2) * T +\n                    sigma * math.sqrt(T) * z[0]) +\n             (np.exp(mu + delta * z[1]) - 1) * y\n         )  ![5](Images/5.png)\n\nIn [90]: ST.mean() * math.exp(-r * T)  ![6](Images/6.png)\nOut[90]: 100.53765025420363\n\nIn [91]: plt.figure(figsize=(10, 6))\n         plt.hist(ST, bins=35, label='frequency');\n         plt.axvline(ST.mean(), color='r', label='mean')\n         plt.axvline(ST.mean() + ST.std(), color='y', label='sd up')\n         plt.axvline(ST.mean() - ST.std(), color='y', label='sd down')\n         plt.legend(loc=0);\n```", "```py\nIn [92]: ST = np.maximum(S0 * (\n             np.exp((r - rj - sigma ** 2 / 2) * T +\n                    sigma * math.sqrt(T) * z[0]) +\n             (np.exp(mu + delta * z[1]) - 1) * y\n         ), 0)  ![1](Images/1.png)\n\nIn [93]: plt.figure(figsize=(10, 6))\n         plt.hist(ST, bins=35, label='frequency')  ![2](Images/2.png)\n         plt.axvline(ST.mean(), color='r', label='mean')\n         plt.axvline(ST.mean() + ST.std(), color='y', label='sd up')\n         plt.axvline(ST.mean() - ST.std(), color='y', label='sd down')\n         plt.legend(loc=0);\n```", "```py\nIn [94]: K = 105\n\nIn [95]: CT = np.maximum(ST - K, 0)\n\nIn [96]: C0 = math.exp(-r * T)  * np.mean(CT)  ![1](Images/1.png)\n\nIn [97]: C0  ![1](Images/1.png)\nOut[97]: 10.306374338651601\n\nIn [98]: M = np.array((BT, ST)).T\n\nIn [99]: phi = np.linalg.lstsq(M, CT, rcond=-1)[0]  ![2](Images/2.png)\n\nIn [100]: phi  ![2](Images/2.png)\nOut[100]: array([-0.41827,  0.51847])\n\nIn [101]: np.mean(np.dot(M, phi) - CT)  ![3](Images/3.png)\nOut[101]: 1.1823431123048067e-15\n\nIn [102]: np.dot(M0, phi)  ![4](Images/4.png)\nOut[102]: 10.020157308565008\n```"]
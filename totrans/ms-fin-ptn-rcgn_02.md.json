["```py\ndef add_column(data, times):\n\n    for i in range(1, times + 1):\n\n        new = np.zeros((len(data), 1), dtype = float)\n\n        data = np.append(data, new, axis = 1)\n\n    return data\n```", "```py\n`# Adding five columns to an existing array`\nmy_data = add_column(my_data, 5)\n```", "```py\ndef delete_column(data, index, times):\n\n    for i in range(1, times + 1):\n\n        data = np.delete(data, index, axis = 1)\n\n    return data\n\n```", "```py\n    my_data = delete_column(my_data, 4, 4)\n\n    ```", "```py\n    my_data = delete_column(my_data, 1, 2)\n    ```", "```py\ndef add_row(data, times):\n\n    for i in range(1, times + 1):       \n\n        columns = np.shape(data)[1]\n\n        new = np.zeros((1, columns), dtype = float)\n\n        data = np.append(data, new, axis = 0)\n\n    return data\n\n```", "```py\ndef delete_row(data, number):\n\n    data = data[number:, ]\n\n    return data\n```", "```py\ndef rounding(data, how_far):\n\n    data = data.round(decimals = how_far)\n\n    return data\n\n```", "```py\n    my_data = add_column(my_data, 2)\n    ```", "```py\n    my_data = delete_column(my_data, 1, 3)\n    ```", "```py\n    my_data = add_row(my_data, 11)\n    ```", "```py\n    my_data = delete_row(my_data, 4)\n    ```", "```py\n    my_data = rounding(my_data, 4)\n\n    ```", "```py\ndef signal(data):\n\n    data = add_column(data, 5)    \n\n    for i in range(len(data)):    \n\n       try:\n\n          `# Bullish Alpha`\n           if data[i, 2] < data[i - 5, 2] and data[i, 2] < data[i - 13, 2]\n              and data[i, 2] > data[i - 21, 2] and \\               data[i, 3] > data[i - 1, 3] and data[i, 4] == 0:\n\n                    data[i + 1, 4] = 1 \n\n           `# Bearish Alpha`\n           elif data[i, 1] > data[i - 5, 1] and data[i, 1] > data[i - 13,\n                ​1] and data[i, 1] < data[i - 21, 1] and \\                 data[i, 3] < data[i - 1, 3] and data[i, 5] == 0:\n\n                    data[i + 1, 5] = -1 \n\n       except IndexError:\n\n            pass\n\n    return data\n\n```", "```py\ndef signal(data):\n\n    data = add_column(data, 2)   \n\n    for i in range(len(data)):   \n\n        try:\n\n            `# Bullish signal`\n            if data[i, 3] > data[i - 2, 3]:\n\n                data[i + 1, 4] = 1\n\n  `# Bearish signal`\n            elif data[i, 3] < data[i - 2, 3]:\n\n                data[i + 1, 5] = -1\n\n        except IndexError:\n\n            pass\n\n    return data\n\n```", "```py\nmy_data = signal(my_data)\n```", "```py\ndef ohlc_plot_bars(data, window):\n\n    sample = data[-window:, ]\n\n    for i in range(len(sample)):\n\n        plt.vlines(x = i, ymin = sample[i, 2], ymax = sample[i, 1], \n        color = 'black', linewidth = 1)  \n\n        if sample[i, 3] > sample[i, 0]:\n\n            plt.vlines(x = i, ymin = sample[i, 0], ymax = sample[i, 3], \n            color = 'black', linewidth = 1)  \n\n        if sample[i, 3] < sample[i, 0]:\n\n            plt.vlines(x = i, ymin = sample[i, 3], ymax = sample[i, 0], \n            color = 'black', linewidth = 1)  \n\n        if sample[i, 3] == sample[i, 0]:\n\n            plt.vlines(x = i, ymin = sample[i, 3], ymax = sample[i, 0] + \n            0.00003, color = 'black', linewidth = 1.00)  \n\n    plt.grid()\n\n```", "```py\nohlc_plot_bars(my_data, 500)\n```", "```py\ndef signal_chart(data, position, buy_column, sell_column, window = 500):\n\n    sample = data[-window:, ]\n\n    fig, ax = plt.subplots(figsize = (10, 5))\n\n    ohlc_plot_bars(data, window)    \n\n    for i in range(len(sample)):\n\n        if sample[i, buy_column] == 1:\n\n            x = i\n            y = sample[i, position]\n\n            ax.annotate(' ', xy = (x, y), \n                        arrowprops = dict(width = 9, headlength = 11, \n                        headwidth = 11, facecolor = 'green', color = \n                        'green'))\n\n        elif sample[i, sell_column] == -1:\n\n            x = i\n            y = sample[i, position]\n\n            ax.annotate(' ', xy = (x, y), \n                        arrowprops = dict(width = 9, headlength = -11, \n                        headwidth = -11, facecolor = 'red', color = \n                        'red'))  \n\n```", "```py\nsignal_chart(my_data, 0, 4, 5, window = 250)\n```", "```py\n`# Choosing the asset`\npair = 1\n\n`# Time frame`\nhorizon = 'H1'\n\n`# Importing the asset as an array`\nmy_data = mass_import(pair, horizon)\n\n`# Creating the signal function`\ndef signal(data):\n\n    data = add_column(data, 2)   \n\n    for i in range(len(data)):   \n\n        try:\n\n        `# Bullish Alpha`\n            if data[i, 2] < data[i - 5, 2] and data[i, 2] < \n               data[i - 13, 2] and data[i, 2] > data[i - 21, 2] and \n               data[i, 3] > data[i - 1, 3] and data[i, 4] == 0:\n\n                     data[i + 1, 4] = 1\n\n          `# Bearish Alpha`\n            elif data[i, 1] > data[i - 5, 1] and data[i, 1] > \n                 data[i - 13, 1] and data[i, 1] < data[i - 21, 1] and \n                 data[i, 3] < data[i - 1, 3] and data[i, 5] == 0:\n\n                     data[i + 1, 5] = -1\n\n        except IndexError:\n\n            pass\n\n    return data\n\n`# Calling the signal function`\nmy_data = signal(my_data)\n\n`# Charting the latest 150 signals`\nsignal_chart(my_data, 0, 4, 5, window = 150)\n\n```", "```py\ndef performance(data, \n                 open_price, \n                 buy_column, \n                 sell_column, \n                 long_result_col, \n                 short_result_col, \n                 total_result_col):\n\n    `# Variable holding period`\n    for i in range(len(data)):\n\n        try:\n\n            if data[i, buy_column] == 1:\n\n                for a in range(i + 1, i + 1000):\n\n                    if data[a, buy_column] == 1 or data[a, sell_column] \\                                               == -1:\n\n                        data[a, long_result_col] = data[a, open_price] - \\                                                    data[i, open_price]\n\n                        break\n\n                    else:\n\n                        continue                \n\n            else:\n\n                continue\n\n        except IndexError:\n\n            pass\n\n    for i in range(len(data)):\n\n        try:\n\n            if data[i, sell_column] == -1:\n\n                for a in range(i + 1, i + 1000):\n\n                    if data[a, buy_column] == 1 or data[a, sell_column] \\                                               == -1:\n\n                        data[a, short_result_col] = data[i, open_price] -\\                                                     data[a, open_price]\n\n                        break   \n\n                    else:\n\n                        continue\n\n            else:\n                continue\n\n        except IndexError:\n\n            pass   \n\n  `# Aggregating the long & short results into one column`\n    data[:, total_result_col] = data[:, long_result_col] + \\                                 data[:, short_result_col]  \n\n    `# Profit factor   ` \n    total_net_profits = data[data[:, total_result_col] > 0, \\                         total_result_col]\n    total_net_losses  = data[data[:, total_result_col] < 0, \\                         total_result_col] \n    total_net_losses  = abs(total_net_losses)\n    profit_factor     = round(np.sum(total_net_profits) / \\                         np.sum(total_net_losses), 2)\n\n`# Hit ratio`   \n    hit_ratio         = len(total_net_profits) / (len(total_net_losses) \\                         + len(total_net_profits))\n    hit_ratio         = hit_ratio * 100\n\n    `# Risk-reward ratio`\n    average_gain            = total_net_profits.mean()\n    average_loss            = total_net_losses.mean()\n    realized_risk_reward    = average_gain / average_loss\n\n    `# Number of trades`\n    trades = len(total_net_losses) + len(total_net_profits)\n\n    print('Hit Ratio         = ', hit_ratio)\n    print('Profit factor     = ', profit_factor) \n    print('Realized RR       = ', round(realized_risk_reward, 3))\n    print('Number of trades  = ', trades)    \n\n```", "```py\nmy_data = performance(my_data, 0, 4, 5, 6, 7, 8)\n```"]
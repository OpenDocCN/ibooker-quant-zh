["```py\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom master_function import data_preprocessing, mass_import\nfrom master_function import plot_train_test_values, \nfrom master_function import calculate_accuracy, model_bias\nfrom sklearn.metrics import mean_squared_error\n```", "```py\nfrom sklearn.dummy import DummyRegressor\n```", "```py\n# Importing the differenced close price of EURUSD daily time frame\ndata = np.diff(mass_import(0, 'H1')[:, 3])\n```", "```py\n# Setting the hyperparameters\nnum_lags = 500\ntrain_test_split = 0.80\n```", "```py\ndef data_preprocessing(data, num_lags, train_test_split):\n    # Prepare the data for training\n    x = []\n    y = []\n    for i in range(len(data) – num_lags):\n        x.append(data[i:i + num_lags])\n        y.append(data[i+ num_lags])\n    # Convert the data to numpy arrays\n    x = np.array(x)\n    y = np.array(y)\n    # Split the data into training and testing sets\n    split_index = int(train_test_split * len(x))\n    x_train = x[:split_index]\n    y_train = y[:split_index]\n    x_test = x[split_index:]\n    y_test = y[split_index:]\n    return x_train, y_train, x_test, y_test\n\n```", "```py\n# Creating the training and test sets\nx_train, y_train, x_test, y_test = data_preprocessing(data, \n                                                      num_lags, \n                                                      train_test_split)\n```", "```py\n# Fitting the model\nmodel = DummyRegressor(strategy = 'mean')\nmodel.fit(x_train, y_train)\n```", "```py\n# Predicting in-sample\ny_predicted_train = np.reshape(model.predict(x_train), (–1, 1))\n# Predicting out-of-sample\ny_predicted = np.reshape(model.predict(x_test), (–1, 1))\n\n```", "```py\n# Comparing the mean of y_train to an arbitrary value in y_predicted\ny_train.mean() == y_predicted[123]\n\n```", "```py\nTrue\n```", "```py\n# Plotting\nplot_train_test_values(100, 50, y_train, y_test, y_predicted)\n```", "```py\nAccuracy Train =  49.28 %\nAccuracy Test =  49.33 %\nRMSE Train =  0.0076467838\nRMSE Test =  0.0053250347\nModel Bias =  0.0\n```", "```py\nfrom sklearn.linear_model import LinearRegression\n```", "```py\n# Fitting the model\nmodel = LinearRegression()\nmodel.fit(x_train, y_train)\n# Predicting in-sample\ny_predicted_train = np.reshape(model.predict(x_train), (–1, 1))\n# Predicting out-of-sample\ny_predicted = np.reshape(model.predict(x_test), (–1, 1))\n\n```", "```py\nAccuracy Train =  58.52 %\nAccuracy Test =  49.54 %\nRMSE Train =  0.007096094\nRMSE Test =  0.0055932632\nCorrelation In-Sample Predicted/Train =  0.373\nCorrelation Out-of-Sample Predicted/Test =  0.014\nModel Bias =  0.93\n\n```", "```py\nfrom sklearn.svm import SVR\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import make_pipeline\n\n```", "```py\nnum_lags = 50\n```", "```py\n# Fitting the model\nmodel = make_pipeline(StandardScaler(), \n                      SVR(kernel = 'rbf', C = 1, gamma = 0.04, \n                      epsilon = 0.01))\nmodel.fit(x_train, y_train)\n# Predicting in-sample\ny_predicted_train = np.reshape(model.predict(x_train), (–1, 1))\n# Predicting out-of-sample\ny_predicted = np.reshape(model.predict(x_test), (–1, 1))\n\n```", "```py\nAccuracy Train =  57.94 %\nAccuracy Test =  50.14 %\nRMSE Train =  0.0060447699\nRMSE Test =  0.0054036167\nCorrelation In-Sample Predicted/Train =  0.686\nCorrelation Out-of-Sample Predicted/Test =  0.024\nModel Bias =  0.98\n```", "```py\nfrom sklearn.linear_model import SGDRegressor\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import make_pipeline\n```", "```py\n# Fitting the model\nmodel = make_pipeline(StandardScaler(), SGDRegressor(max_iter = 50, \n                                                     tol = 1e–3))\nmodel.fit(x_train, y_train)\n# Predicting in-sample\ny_predicted_train = np.reshape(model.predict(x_train), (–1, 1))\n# Predicting out-of-sample\ny_predicted = np.reshape(model.predict(x_test), (–1, 1))\n\n```", "```py\nAccuracy Train =  55.59 %\nAccuracy Test =  46.45 %\nRMSE Train =  0.007834505\nRMSE Test =  0.0059334014\nCorrelation In-Sample Predicted/Train =  0.235\nCorrelation Out-of-Sample Predicted/Test =  –0.001\nModel Bias =  0.95\n\n```", "```py\nfrom sklearn.neighbors import KNeighborsRegressor\n```", "```py\n# Fitting the model\nmodel = KNeighborsRegressor(n_neighbors = 10)\nmodel.fit(x_train, y_train)\n# Predicting in-sample\ny_predicted_train = np.reshape(model.predict(x_train), (–1, 1))\n# Predicting out-of-sample\ny_predicted = np.reshape(model.predict(x_test), (–1, 1))\n\n```", "```py\nAccuracy Train =  67.69 %\nAccuracy Test =  50.77 %\nRMSE Train =  0.0069584171\nRMSE Test =  0.0054027335\nCorrelation In-Sample Predicted/Train =  0.599\nCorrelation Out-of-Sample Predicted/Test =  0.002\nModel Bias =  0.76\n\n```", "```py\nfrom sklearn.tree import DecisionTreeRegressor\n```", "```py\n# Fitting the model\nmodel = DecisionTreeRegressor(random_state = 123)\nmodel.fit(x_train, y_train)\n# Predicting in-sample\ny_predicted_train = np.reshape(model.predict(x_train), (–1, 1))\n# Predicting out-of-sample\ny_predicted = np.reshape(model.predict(x_test), (–1, 1))\n\n```", "```py\nAccuracy Train =  100.0 %\nAccuracy Test =  47.37 %\nRMSE Train =  0.0\nRMSE Test =  0.007640736\nCorrelation In-Sample Predicted/Train =  1.0\nCorrelation Out-of-Sample Predicted/Test =  –0.079\nModel Bias =  0.94\n\n```", "```py\nfrom sklearn.ensemble import RandomForestRegressor\n\n```", "```py\n# Fitting the model\nmodel = RandomForestRegressor(max_depth = 20, random_state = 123)\nmodel.fit(x_train, y_train)\n# Predicting in-sample\ny_predicted_train = np.reshape(model.predict(x_train), (–1, 1))\n# Predicting out-of-sample\ny_predicted = np.reshape(model.predict(x_test), (–1, 1))\n\n```", "```py\nAccuracy Train =  82.72 %\nAccuracy Test =  50.15 %\nRMSE Train =  0.0058106512\nRMSE Test =  0.0053452064\nCorrelation In-Sample Predicted/Train =  0.809\nCorrelation Out-of-Sample Predicted/Test =  –0.049\nModel Bias =  0.63\n\n```", "```py\nfrom sklearn.ensemble import AdaBoostRegressor\n```", "```py\n# Fitting the model\nmodel = AdaBoostRegressor(random_state = 123)\nmodel.fit(x_train, y_train)\n# Predicting in-sample\ny_predicted_train = np.reshape(model.predict(x_train), (–1, 1))\n# Predicting out-of-sample\ny_predicted = np.reshape(model.predict(x_test), (–1, 1))\n\n```", "```py\nAccuracy Train =  53.27 %\nAccuracy Test =  51.7 %\nRMSE Train =  0.0070124217\nRMSE Test =  0.0053582343\nCorrelation In-Sample Predicted/Train =  0.461\nCorrelation Out-of-Sample Predicted/Test =  0.017\nModel Bias =  0.72\n\n```", "```py\npip install xgboost\n```", "```py\nfrom xgboost import XGBRegressor\n```", "```py\n# Fitting the model\nmodel = XGBRegressor(random_state = 123, n_estimators = 16, \n                     max_depth = 12)\nmodel.fit(x_train, y_train)\n# Predicting in-sample\ny_predicted_train = np.reshape(model.predict(x_train), (–1, 1))\n# Predicting out-of-sample\ny_predicted = np.reshape(model.predict(x_test), (–1, 1))\n\n```", "```py\nAccuracy Train =  75.77 %\nAccuracy Test =  53.04 %\nRMSE Train =  0.0042354698\nRMSE Test =  0.0056622704\nCorrelation In-Sample Predicted/Train =  0.923\nCorrelation Out-of-Sample Predicted/Test =  0.05\nModel Bias =  6.8\n\n```"]
["```py\nIn [1]: import pandas as pd  ![1](images/1.png)\n\nIn [2]: df = pd.DataFrame([10, 20, 30, 40],  ![2](images/2.png)\n                          columns=['numbers'],  ![3](images/3.png)\n                          index=['a', 'b', 'c', 'd'])  ![4](images/4.png)\n\nIn [3]: df  ![5](images/5.png)\nOut[3]:    numbers\n        a       10\n        b       20\n        c       30\n        d       40\n```", "```py\nIn [4]: df.index  ![1](images/1.png)\nOut[4]: Index(['a', 'b', 'c', 'd'], dtype='object')\n\nIn [5]: df.columns  ![2](images/2.png)\nOut[5]: Index(['numbers'], dtype='object')\n\nIn [6]: df.loc['c']  ![3](images/3.png)\nOut[6]: numbers    30\n        Name: c, dtype: int64\n\nIn [7]: df.loc[['a', 'd']]  ![4](images/4.png)\nOut[7]:    numbers\n        a       10\n        d       40\n\nIn [8]: df.iloc[1:3]  ![5](images/5.png)\nOut[8]:    numbers\n        b       20\n        c       30\n\nIn [9]: df.sum()  ![6](images/6.png)\nOut[9]: numbers    100\n        dtype: int64\n\nIn [10]: df.apply(lambda x: x ** 2)  ![7](images/7.png)\nOut[10]:    numbers\n         a      100\n         b      400\n         c      900\n         d     1600\n\nIn [11]: df ** 2  ![8](images/8.png)\nOut[11]:    numbers\n         a      100\n         b      400\n         c      900\n         d     1600\n```", "```py\nIn [12]: df['floats'] = (1.5, 2.5, 3.5, 4.5)  ![1](images/1.png)\n\nIn [13]: df\nOut[13]:    numbers  floats\n         a       10     1.5\n         b       20     2.5\n         c       30     3.5\n         d       40     4.5\n\nIn [14]: df['floats']  ![2](images/2.png)\nOut[14]: a    1.5\n         b    2.5\n         c    3.5\n         d    4.5\n         Name: floats, dtype: float64\n```", "```py\nIn [15]: df['names'] = pd.DataFrame(['Yves', 'Sandra', 'Lilli', 'Henry'],\n                                    index=['d', 'a', 'b', 'c'])  ![1](images/1.png)\n\nIn [16]: df\nOut[16]:    numbers  floats   names\n         a       10     1.5  Sandra\n         b       20     2.5   Lilli\n         c       30     3.5   Henry\n         d       40     4.5    Yves\n```", "```py\nIn [17]: df.append({'numbers': 100, 'floats': 5.75, 'names': 'Jil'},\n                        ignore_index=True)  ![1](images/1.png)\nOut[17]:    numbers  floats   names\n         0       10    1.50  Sandra\n         1       20    2.50   Lilli\n         2       30    3.50   Henry\n         3       40    4.50    Yves\n         4      100    5.75     Jil\n\nIn [18]: df = df.append(pd.DataFrame({'numbers': 100, 'floats': 5.75,\n                                      'names': 'Jil'}, index=['y',]))  ![2](images/2.png)\n\nIn [19]: df\nOut[19]:    floats   names  numbers\n         a    1.50  Sandra       10\n         b    2.50   Lilli       20\n         c    3.50   Henry       30\n         d    4.50    Yves       40\n         y    5.75     Jil      100\n\nIn [20]: df = df.append(pd.DataFrame({'names': 'Liz'}, index=['z',]))  ![3](images/3.png)\n\nIn [21]: df\nOut[21]:    floats   names  numbers\n         a    1.50  Sandra     10.0\n         b    2.50   Lilli     20.0\n         c    3.50   Henry     30.0\n         d    4.50    Yves     40.0\n         y    5.75     Jil    100.0\n         z     NaN     Liz      NaN\n\nIn [22]: df.dtypes  ![4](images/4.png)\nOut[22]: floats     float64\n         names       object\n         numbers    float64\n         dtype: object\n```", "```py\nIn [23]: df[['numbers', 'floats']].mean()  ![1](images/1.png)\nOut[23]: numbers    40.00\n         floats      3.55\n         dtype: float64\n\nIn [24]: df[['numbers', 'floats']].std()  ![2](images/2.png)\nOut[24]: numbers    35.355339\n         floats      1.662077\n         dtype: float64\n```", "```py\nIn [25]: import numpy as np\n\nIn [26]: np.random.seed(100)\n\nIn [27]: a = np.random.standard_normal((9, 4))\n\nIn [28]: a\nOut[28]: array([[-1.74976547,  0.3426804 ,  1.1530358 , -0.25243604],\n                [ 0.98132079,  0.51421884,  0.22117967, -1.07004333],\n                [-0.18949583,  0.25500144, -0.45802699,  0.43516349],\n                [-0.58359505,  0.81684707,  0.67272081, -0.10441114],\n                [-0.53128038,  1.02973269, -0.43813562, -1.11831825],\n                [ 1.61898166,  1.54160517, -0.25187914, -0.84243574],\n                [ 0.18451869,  0.9370822 ,  0.73100034,  1.36155613],\n                [-0.32623806,  0.05567601,  0.22239961, -1.443217  ],\n                [-0.75635231,  0.81645401,  0.75044476, -0.45594693]])\n```", "```py\nIn [29]: df = pd.DataFrame(a)  ![1](images/1.png)\n\nIn [30]: df\nOut[30]:           0         1         2         3\n         0 -1.749765  0.342680  1.153036 -0.252436\n         1  0.981321  0.514219  0.221180 -1.070043\n         2 -0.189496  0.255001 -0.458027  0.435163\n         3 -0.583595  0.816847  0.672721 -0.104411\n         4 -0.531280  1.029733 -0.438136 -1.118318\n         5  1.618982  1.541605 -0.251879 -0.842436\n         6  0.184519  0.937082  0.731000  1.361556\n         7 -0.326238  0.055676  0.222400 -1.443217\n         8 -0.756352  0.816454  0.750445 -0.455947\n```", "```py\nIn [31]: df.columns = ['No1', 'No2', 'No3', 'No4']  ![1](images/1.png)\n\nIn [32]: df\nOut[32]:         No1       No2       No3       No4\n         0 -1.749765  0.342680  1.153036 -0.252436\n         1  0.981321  0.514219  0.221180 -1.070043\n         2 -0.189496  0.255001 -0.458027  0.435163\n         3 -0.583595  0.816847  0.672721 -0.104411\n         4 -0.531280  1.029733 -0.438136 -1.118318\n         5  1.618982  1.541605 -0.251879 -0.842436\n         6  0.184519  0.937082  0.731000  1.361556\n         7 -0.326238  0.055676  0.222400 -1.443217\n         8 -0.756352  0.816454  0.750445 -0.455947\n\nIn [33]: df['No2'].mean()  ![2](images/2.png)\nOut[33]: 0.70103309414564585\n```", "```py\nIn [34]: dates = pd.date_range('2019-1-1', periods=9, freq='M')  ![1](images/1.png)\n\nIn [35]: dates\nOut[35]: DatetimeIndex(['2019-01-31', '2019-02-28', '2019-03-31', '2019-04-30',\n                        '2019-05-31', '2019-06-30', '2019-07-31', '2019-08-31',\n                        '2019-09-30'],\n                       dtype='datetime64[ns]', freq='M')\n```", "```py\nIn [36]: df.index = dates\n\nIn [37]: df\nOut[37]:                  No1       No2       No3       No4\n         2019-01-31 -1.749765  0.342680  1.153036 -0.252436\n         2019-02-28  0.981321  0.514219  0.221180 -1.070043\n         2019-03-31 -0.189496  0.255001 -0.458027  0.435163\n         2019-04-30 -0.583595  0.816847  0.672721 -0.104411\n         2019-05-31 -0.531280  1.029733 -0.438136 -1.118318\n         2019-06-30  1.618982  1.541605 -0.251879 -0.842436\n         2019-07-31  0.184519  0.937082  0.731000  1.361556\n         2019-08-31 -0.326238  0.055676  0.222400 -1.443217\n         2019-09-30 -0.756352  0.816454  0.750445 -0.455947\n```", "```py\nIn [38]: df.values\nOut[38]: array([[-1.74976547,  0.3426804 ,  1.1530358 , -0.25243604],\n                [ 0.98132079,  0.51421884,  0.22117967, -1.07004333],\n                [-0.18949583,  0.25500144, -0.45802699,  0.43516349],\n                [-0.58359505,  0.81684707,  0.67272081, -0.10441114],\n                [-0.53128038,  1.02973269, -0.43813562, -1.11831825],\n                [ 1.61898166,  1.54160517, -0.25187914, -0.84243574],\n                [ 0.18451869,  0.9370822 ,  0.73100034,  1.36155613],\n                [-0.32623806,  0.05567601,  0.22239961, -1.443217  ],\n                [-0.75635231,  0.81645401,  0.75044476, -0.45594693]])\n\nIn [39]: np.array(df)\nOut[39]: array([[-1.74976547,  0.3426804 ,  1.1530358 , -0.25243604],\n                [ 0.98132079,  0.51421884,  0.22117967, -1.07004333],\n                [-0.18949583,  0.25500144, -0.45802699,  0.43516349],\n                [-0.58359505,  0.81684707,  0.67272081, -0.10441114],\n                [-0.53128038,  1.02973269, -0.43813562, -1.11831825],\n                [ 1.61898166,  1.54160517, -0.25187914, -0.84243574],\n                [ 0.18451869,  0.9370822 ,  0.73100034,  1.36155613],\n                [-0.32623806,  0.05567601,  0.22239961, -1.443217  ],\n                [-0.75635231,  0.81645401,  0.75044476, -0.45594693]])\n```", "```py\nIn [40]: df.info()  ![1](images/1.png)\n\n         <class 'pandas.core.frame.DataFrame'>\n         DatetimeIndex: 9 entries, 2019-01-31 to 2019-09-30\n         Freq: M\n         Data columns (total 4 columns):\n         No1    9 non-null float64\n         No2    9 non-null float64\n         No3    9 non-null float64\n         No4    9 non-null float64\n         dtypes: float64(4)\n         memory usage: 360.0 bytes\n\nIn [41]: df.describe()  ![2](images/2.png)\nOut[41]:             No1       No2       No3       No4\n         count  9.000000  9.000000  9.000000  9.000000\n         mean  -0.150212  0.701033  0.289193 -0.387788\n         std    0.988306  0.457685  0.579920  0.877532\n         min   -1.749765  0.055676 -0.458027 -1.443217\n         25%   -0.583595  0.342680 -0.251879 -1.070043\n         50%   -0.326238  0.816454  0.222400 -0.455947\n         75%    0.184519  0.937082  0.731000 -0.104411\n         max    1.618982  1.541605  1.153036  1.361556\n```", "```py\nIn [42]: df.sum()  ![1](images/1.png)\nOut[42]: No1   -1.351906\n         No2    6.309298\n         No3    2.602739\n         No4   -3.490089\n         dtype: float64\n\nIn [43]: df.mean()  ![2](images/2.png)\nOut[43]: No1   -0.150212\n         No2    0.701033\n         No3    0.289193\n         No4   -0.387788\n         dtype: float64\n\nIn [44]: df.mean(axis=0)  ![2](images/2.png)\nOut[44]: No1   -0.150212\n         No2    0.701033\n         No3    0.289193\n         No4   -0.387788\n         dtype: float64\n\nIn [45]: df.mean(axis=1)  ![3](images/3.png)\nOut[45]: 2019-01-31   -0.126621\n         2019-02-28    0.161669\n         2019-03-31    0.010661\n         2019-04-30    0.200390\n         2019-05-31   -0.264500\n         2019-06-30    0.516568\n         2019-07-31    0.803539\n         2019-08-31   -0.372845\n         2019-09-30    0.088650\n         Freq: M, dtype: float64\n\nIn [46]: df.cumsum()  ![4](images/4.png)\nOut[46]:                  No1       No2       No3       No4\n         2019-01-31 -1.749765  0.342680  1.153036 -0.252436\n         2019-02-28 -0.768445  0.856899  1.374215 -1.322479\n         2019-03-31 -0.957941  1.111901  0.916188 -0.887316\n         2019-04-30 -1.541536  1.928748  1.588909 -0.991727\n         2019-05-31 -2.072816  2.958480  1.150774 -2.110045\n         2019-06-30 -0.453834  4.500086  0.898895 -2.952481\n         2019-07-31 -0.269316  5.437168  1.629895 -1.590925\n         2019-08-31 -0.595554  5.492844  1.852294 -3.034142\n         2019-09-30 -1.351906  6.309298  2.602739 -3.490089\n```", "```py\nIn [47]: np.mean(df)  ![1](images/1.png)\nOut[47]: No1   -0.150212\n         No2    0.701033\n         No3    0.289193\n         No4   -0.387788\n         dtype: float64\n\nIn [48]: np.log(df)  ![2](images/2.png)\n\n         /Users/yves/miniconda3/envs/base/lib/python3.6/site-packages/ipykernel_launcher.py:1: RuntimeWarning: invalid value encountered in log\n           \"\"\"Entry point for launching an IPython kernel.\n\nOut[48]:                  No1       No2       No3       No4\n 2019-01-31       NaN -1.070957  0.142398       NaN\n 2019-02-28 -0.018856 -0.665106 -1.508780       NaN\n 2019-03-31       NaN -1.366486       NaN -0.832033\n 2019-04-30       NaN -0.202303 -0.396425       NaN\n 2019-05-31       NaN  0.029299       NaN       NaN\n 2019-06-30  0.481797  0.432824       NaN       NaN\n 2019-07-31 -1.690005 -0.064984 -0.313341  0.308628\n 2019-08-31       NaN -2.888206 -1.503279       NaN\n 2019-09-30       NaN -0.202785 -0.287089       NaN\n\nIn [49]: np.sqrt(abs(df)) ![3](images/3.png)\nOut[49]:                  No1       No2       No3       No4\n 2019-01-31  1.322787  0.585389  1.073795  0.502430\n 2019-02-28  0.990616  0.717091  0.470297  1.034429\n 2019-03-31  0.435311  0.504977  0.676777  0.659669\n 2019-04-30  0.763934  0.903796  0.820196  0.323127\n 2019-05-31  0.728890  1.014757  0.661918  1.057506\n 2019-06-30  1.272392  1.241614  0.501876  0.917843\n 2019-07-31  0.429556  0.968030  0.854986  1.166857\n 2019-08-31  0.571173  0.235958  0.471593  1.201340\n 2019-09-30  0.869685  0.903578  0.866282  0.675238\n\nIn [50]: np.sqrt(abs(df)).sum() ![4](images/4.png)\nOut[50]: No1    7.384345\n No2    7.075190\n No3    6.397719\n No4    7.538440\n dtype: float64\n\nIn [51]: 100 * df + 100 ![5](images/5.png)\nOut[51]:                    No1         No2         No3         No4\n 2019-01-31  -74.976547  134.268040  215.303580   74.756396\n 2019-02-28  198.132079  151.421884  122.117967   -7.004333\n 2019-03-31   81.050417  125.500144   54.197301  143.516349\n 2019-04-30   41.640495  181.684707  167.272081   89.558886\n 2019-05-31   46.871962  202.973269   56.186438  -11.831825\n 2019-06-30  261.898166  254.160517   74.812086   15.756426\n 2019-07-31  118.451869  193.708220  173.100034  236.155613\n 2019-08-31   67.376194  105.567601  122.239961  -44.321700\n 2019-09-30   24.364769  181.645401  175.044476   54.405307\n```", "```py\nIn [52]: from pylab import plt, mpl  ![1](images/1.png)\n         plt.style.use('seaborn')  ![1](images/1.png)\n         mpl.rcParams['font.family'] = 'serif'  ![1](images/1.png)\n         %matplotlib inline\n\nIn [53]: df.cumsum().plot(lw=2.0, figsize=(10, 6));  ![2](images/2.png)\n         # plt.savefig('../../images/ch05/pd_plot_01.png')\n```", "```py\nIn [54]: df.plot(kind='bar', figsize=(10, 6));  ![1](images/1.png)\n         # plt.savefig('../../images/ch05/pd_plot_02.png')\n```", "```py\nIn [55]: type(df)\nOut[55]: pandas.core.frame.DataFrame\n\nIn [56]: s = df['No1']\n\nIn [57]: s\nOut[57]: 2019-01-31   -1.749765\n         2019-02-28    0.981321\n         2019-03-31   -0.189496\n         2019-04-30   -0.583595\n         2019-05-31   -0.531280\n         2019-06-30    1.618982\n         2019-07-31    0.184519\n         2019-08-31   -0.326238\n         2019-09-30   -0.756352\n         Freq: M, Name: No1, dtype: float64\n\nIn [58]: type(s)\nOut[58]: pandas.core.series.Series\n```", "```py\nIn [59]: s.mean()\nOut[59]: -0.15021177307319458\n\nIn [60]: s.plot(lw=2.0, figsize=(10, 6));\n         # plt.savefig('../../images/ch05/pd_plot_03.png')\n```", "```py\nIn [61]: df['Quarter'] = ['Q1', 'Q1', 'Q1', 'Q2', 'Q2',\n                          'Q2', 'Q3', 'Q3', 'Q3']\n         df\nOut[61]:                  No1       No2       No3       No4 Quarter\n         2019-01-31 -1.749765  0.342680  1.153036 -0.252436      Q1\n         2019-02-28  0.981321  0.514219  0.221180 -1.070043      Q1\n         2019-03-31 -0.189496  0.255001 -0.458027  0.435163      Q1\n         2019-04-30 -0.583595  0.816847  0.672721 -0.104411      Q2\n         2019-05-31 -0.531280  1.029733 -0.438136 -1.118318      Q2\n         2019-06-30  1.618982  1.541605 -0.251879 -0.842436      Q2\n         2019-07-31  0.184519  0.937082  0.731000  1.361556      Q3\n         2019-08-31 -0.326238  0.055676  0.222400 -1.443217      Q3\n         2019-09-30 -0.756352  0.816454  0.750445 -0.455947      Q3\n```", "```py\nIn [62]: groups = df.groupby('Quarter')  ![1](images/1.png)\n\nIn [63]: groups.size()  ![2](images/2.png)\nOut[63]: Quarter\n         Q1    3\n         Q2    3\n         Q3    3\n         dtype: int64\n\nIn [64]: groups.mean()  ![3](images/3.png)\nOut[64]:               No1       No2       No3       No4\n         Quarter\n         Q1      -0.319314  0.370634  0.305396 -0.295772\n         Q2       0.168035  1.129395 -0.005765 -0.688388\n         Q3      -0.299357  0.603071  0.567948 -0.179203\n\nIn [65]: groups.max()  ![4](images/4.png)\nOut[65]:               No1       No2       No3       No4\n         Quarter\n         Q1       0.981321  0.514219  1.153036  0.435163\n         Q2       1.618982  1.541605  0.672721 -0.104411\n         Q3       0.184519  0.937082  0.750445  1.361556\n\nIn [66]: groups.aggregate([min, max]).round(2)  ![5](images/5.png)\nOut[66]:           No1         No2         No3         No4\n                   min   max   min   max   min   max   min   max\n         Quarter\n         Q1      -1.75  0.98  0.26  0.51 -0.46  1.15 -1.07  0.44\n         Q2      -0.58  1.62  0.82  1.54 -0.44  0.67 -1.12 -0.10\n         Q3      -0.76  0.18  0.06  0.94  0.22  0.75 -1.44  1.36\n```", "```py\nIn [67]: df['Odd_Even'] = ['Odd', 'Even', 'Odd', 'Even', 'Odd', 'Even',\n                           'Odd', 'Even', 'Odd']\n\nIn [68]: groups = df.groupby(['Quarter', 'Odd_Even'])\n\nIn [69]: groups.size()\nOut[69]: Quarter  Odd_Even\n         Q1       Even        1\n                  Odd         2\n         Q2       Even        2\n                  Odd         1\n         Q3       Even        1\n                  Odd         2\n         dtype: int64\n\nIn [70]: groups[['No1', 'No4']].aggregate([sum, np.mean])\nOut[70]:                        No1                 No4\n                                sum      mean       sum      mean\n         Quarter Odd_Even\n         Q1      Even      0.981321  0.981321 -1.070043 -1.070043\n                 Odd      -1.939261 -0.969631  0.182727  0.091364\n         Q2      Even      1.035387  0.517693 -0.946847 -0.473423\n                 Odd      -0.531280 -0.531280 -1.118318 -1.118318\n         Q3      Even     -0.326238 -0.326238 -1.443217 -1.443217\n                 Odd      -0.571834 -0.285917  0.905609  0.452805\n```", "```py\nIn [71]: data = np.random.standard_normal((10, 2))  ![1](images/1.png)\n\nIn [72]: df = pd.DataFrame(data, columns=['x', 'y'])  ![2](images/2.png)\n\nIn [73]: df.info()  ![2](images/2.png)\n\n         <class 'pandas.core.frame.DataFrame'>\n         RangeIndex: 10 entries, 0 to 9\n         Data columns (total 2 columns):\n         x    10 non-null float64\n         y    10 non-null float64\n         dtypes: float64(2)\n         memory usage: 240.0 bytes\n\nIn [74]: df.head()  ![3](images/3.png)\nOut[74]:           x         y\n         0  1.189622 -1.690617\n         1 -1.356399 -1.232435\n         2 -0.544439 -0.668172\n         3  0.007315 -0.612939\n         4  1.299748 -1.733096\n\nIn [75]: df.tail()  ![4](images/4.png)\nOut[75]:           x         y\n         5 -0.983310  0.357508\n         6 -1.613579  1.470714\n         7 -1.188018 -0.549746\n         8 -0.940046 -0.827932\n         9  0.108863  0.507810\n```", "```py\nIn [76]: df['x'] > 0.5  ![1](images/1.png)\nOut[76]: 0     True\n         1    False\n         2    False\n         3    False\n         4     True\n         5    False\n         6    False\n         7    False\n         8    False\n         9    False\n         Name: x, dtype: bool\n\nIn [77]: (df['x'] > 0) & (df['y'] < 0)  ![2](images/2.png)\nOut[77]: 0     True\n         1    False\n         2    False\n         3     True\n         4     True\n         5    False\n         6    False\n         7    False\n         8    False\n         9    False\n         dtype: bool\n\nIn [78]: (df['x'] > 0) | (df['y'] < 0)  ![3](images/3.png)\nOut[78]: 0     True\n         1     True\n         2     True\n         3     True\n         4     True\n         5    False\n         6    False\n         7     True\n         8     True\n         9     True\n         dtype: bool\n```", "```py\nIn [79]: df[df['x'] > 0]  ![1](images/1.png)\nOut[79]:           x         y\n         0  1.189622 -1.690617\n         3  0.007315 -0.612939\n         4  1.299748 -1.733096\n         9  0.108863  0.507810\n\nIn [80]: df[(df['x'] > 0) & (df['y'] < 0)]  ![2](images/2.png)\nOut[80]:           x         y\n         0  1.189622 -1.690617\n         3  0.007315 -0.612939\n         4  1.299748 -1.733096\n\nIn [81]: df[(df.x > 0) | (df.y < 0)]  ![3](images/3.png)\nOut[81]:           x         y\n         0  1.189622 -1.690617\n         1 -1.356399 -1.232435\n         2 -0.544439 -0.668172\n         3  0.007315 -0.612939\n         4  1.299748 -1.733096\n         7 -1.188018 -0.549746\n         8 -0.940046 -0.827932\n         9  0.108863  0.507810\n```", "```py\nIn [82]: df > 0  ![1](images/1.png)\nOut[82]:        x      y\n         0   True  False\n         1  False  False\n         2  False  False\n         3   True  False\n         4   True  False\n         5  False   True\n         6  False   True\n         7  False  False\n         8  False  False\n         9   True   True\n\nIn [83]: df[df > 0]  ![2](images/2.png)\nOut[83]:           x         y\n         0  1.189622       NaN\n         1       NaN       NaN\n         2       NaN       NaN\n         3  0.007315       NaN\n         4  1.299748       NaN\n         5       NaN  0.357508\n         6       NaN  1.470714\n         7       NaN       NaN\n         8       NaN       NaN\n         9  0.108863  0.507810\n```", "```py\nIn [84]: df1 = pd.DataFrame(['100', '200', '300', '400'],\n                             index=['a', 'b', 'c', 'd'],\n                             columns=['A',])\n\nIn [85]: df1\nOut[85]:      A\n         a  100\n         b  200\n         c  300\n         d  400\n\nIn [86]: df2 = pd.DataFrame(['200', '150', '50'],\n                             index=['f', 'b', 'd'],\n                             columns=['B',])\n\nIn [87]: df2\nOut[87]:      B\n         f  200\n         b  150\n         d   50\n```", "```py\nIn [88]: df1.append(df2)  ![1](images/1.png)\nOut[88]:      A    B\n         a  100  NaN\n         b  200  NaN\n         c  300  NaN\n         d  400  NaN\n         f  NaN  200\n         b  NaN  150\n         d  NaN   50\n\nIn [89]: df1.append(df2, ignore_index=True)  ![2](images/2.png)\nOut[89]:      A    B\n         0  100  NaN\n         1  200  NaN\n         2  300  NaN\n         3  400  NaN\n         4  NaN  200\n         5  NaN  150\n         6  NaN   50\n\nIn [90]: pd.concat((df1, df2))  ![3](images/3.png)\nOut[90]:      A    B\n         a  100  NaN\n         b  200  NaN\n         c  300  NaN\n         d  400  NaN\n         f  NaN  200\n         b  NaN  150\n         d  NaN   50\n\nIn [91]: pd.concat((df1, df2), ignore_index=True)  ![4](images/4.png)\nOut[91]:      A    B\n         0  100  NaN\n         1  200  NaN\n         2  300  NaN\n         3  400  NaN\n         4  NaN  200\n         5  NaN  150\n         6  NaN   50\n```", "```py\nIn [92]: df1.join(df2)  ![1](images/1.png)\nOut[92]:      A    B\n         a  100  NaN\n         b  200  150\n         c  300  NaN\n         d  400   50\n\nIn [93]: df2.join(df1)  ![2](images/2.png)\nOut[93]:      B    A\n         f  200  NaN\n         b  150  200\n         d   50  400\n```", "```py\nIn [94]: df1.join(df2, how='left')  ![1](images/1.png)\nOut[94]:      A    B\n         a  100  NaN\n         b  200  150\n         c  300  NaN\n         d  400   50\n\nIn [95]: df1.join(df2, how='right')  ![2](images/2.png)\nOut[95]:      A    B\n         f  NaN  200\n         b  200  150\n         d  400   50\n\nIn [96]: df1.join(df2, how='inner')  ![3](images/3.png)\nOut[96]:      A    B\n         b  200  150\n         d  400   50\n\nIn [97]: df1.join(df2, how='outer')  ![4](images/4.png)\nOut[97]:      A    B\n         a  100  NaN\n         b  200  150\n         c  300  NaN\n         d  400   50\n         f  NaN  200\n```", "```py\nIn [98]: df = pd.DataFrame()\n\nIn [99]: df['A'] = df1  ![1](images/1.png)\n\nIn [100]: df\nOut[100]:      A\n          0  NaN\n          1  NaN\n          2  NaN\n          3  NaN\n\nIn [101]: df['B'] = df2  ![2](images/2.png)\n\nIn [102]: df\nOut[102]:      A    B\n          0  NaN  NaN\n          1  NaN  NaN\n          2  NaN  NaN\n          3  NaN  NaN\n```", "```py\nIn [103]: df = pd.DataFrame({'A': df1['A'], 'B': df2['B']})  ![1](images/1.png)\n\nIn [104]: df\nOut[104]:      A    B\n          a  100  NaN\n          b  200  150\n          c  300  NaN\n          d  400   50\n          f  NaN  200\n```", "```py\nIn [105]: c = pd.Series([250, 150, 50], index=['b', 'd', 'c'])\n          df1['C'] = c\n          df2['C'] = c\n\nIn [106]: df1\nOut[106]:      A      C\n          a  100    NaN\n          b  200  250.0\n          c  300   50.0\n          d  400  150.0\n\nIn [107]: df2\nOut[107]:      B      C\n          f  200    NaN\n          b  150  250.0\n          d   50  150.0\n```", "```py\nIn [108]: pd.merge(df1, df2)  ![1](images/1.png)\nOut[108]:      A      C    B\n          0  100    NaN  200\n          1  200  250.0  150\n          2  400  150.0   50\n\nIn [109]: pd.merge(df1, df2, on='C')  ![1](images/1.png)\nOut[109]:      A      C    B\n          0  100    NaN  200\n          1  200  250.0  150\n          2  400  150.0   50\n\nIn [110]: pd.merge(df1, df2, how='outer')  ![2](images/2.png)\nOut[110]:      A      C    B\n          0  100    NaN  200\n          1  200  250.0  150\n          2  300   50.0  NaN\n          3  400  150.0   50\n```", "```py\nIn [111]: pd.merge(df1, df2, left_on='A', right_on='B')\nOut[111]:      A    C_x    B  C_y\n          0  200  250.0  200  NaN\n\nIn [112]: pd.merge(df1, df2, left_on='A', right_on='B', how='outer')\nOut[112]:      A    C_x    B    C_y\n          0  100    NaN  NaN    NaN\n          1  200  250.0  200    NaN\n          2  300   50.0  NaN    NaN\n          3  400  150.0  NaN    NaN\n          4  NaN    NaN  150  250.0\n          5  NaN    NaN   50  150.0\n\nIn [113]: pd.merge(df1, df2, left_index=True, right_index=True)\nOut[113]:      A    C_x    B    C_y\n          b  200  250.0  150  250.0\n          d  400  150.0   50  150.0\n\nIn [114]: pd.merge(df1, df2, on='C', left_index=True)\nOut[114]:      A      C    B\n          f  100    NaN  200\n          b  200  250.0  150\n          d  400  150.0   50\n\nIn [115]: pd.merge(df1, df2, on='C', right_index=True)\nOut[115]:      A      C    B\n          a  100    NaN  200\n          b  200  250.0  150\n          d  400  150.0   50\n\nIn [116]: pd.merge(df1, df2, on='C', left_index=True, right_index=True)\nOut[116]:      A      C    B\n          b  200  250.0  150\n          d  400  150.0   50\n```", "```py\nIn [117]: data = np.random.standard_normal((1000000, 2))  ![1](images/1.png)\n\nIn [118]: data.nbytes  ![1](images/1.png)\nOut[118]: 16000000\n\nIn [119]: df = pd.DataFrame(data, columns=['x', 'y'])  ![2](images/2.png)\n\nIn [120]: df.info()  ![2](images/2.png)\n\n          <class 'pandas.core.frame.DataFrame'>\n          RangeIndex: 1000000 entries, 0 to 999999\n          Data columns (total 2 columns):\n          x    1000000 non-null float64\n          y    1000000 non-null float64\n          dtypes: float64(2)\n          memory usage: 15.3 MB\n```", "```py\nIn [121]: %time res = df['x'] + df['y']  ![1](images/1.png)\n\n          CPU times: user 5.68 ms, sys: 14.5 ms, total: 20.1 ms\n          Wall time: 4.06 ms\n\nIn [122]: res[:3]\nOut[122]: 0    0.387242\n          1   -0.969343\n          2   -0.863159\n          dtype: float64\n\nIn [123]: %time res = df.sum(axis=1)  ![2](images/2.png)\n\n          CPU times: user 44 ms, sys: 14.9 ms, total: 58.9 ms\n          Wall time: 57.6 ms\n\nIn [124]: res[:3]\nOut[124]: 0    0.387242\n          1   -0.969343\n          2   -0.863159\n          dtype: float64\n\nIn [125]: %time res = df.values.sum(axis=1)  ![3](images/3.png)\n\n          CPU times: user 16.1 ms, sys: 1.74 ms, total: 17.8 ms\n          Wall time: 16.6 ms\n\nIn [126]: res[:3]\nOut[126]: array([ 0.3872424 , -0.96934273, -0.86315944])\n\nIn [127]: %time res = np.sum(df, axis=1)  ![4](images/4.png)\n\n          CPU times: user 39.7 ms, sys: 8.91 ms, total: 48.7 ms\n          Wall time: 47.7 ms\n\nIn [128]: res[:3]\nOut[128]: 0    0.387242\n          1   -0.969343\n          2   -0.863159\n          dtype: float64\n\nIn [129]: %time res = np.sum(df.values, axis=1)  ![5](images/5.png)\n\n          CPU times: user 16.1 ms, sys: 1.78 ms, total: 17.9 ms\n          Wall time: 16.6 ms\n\nIn [130]: res[:3]\nOut[130]: array([ 0.3872424 , -0.96934273, -0.86315944])\n```", "```py\nIn [131]: %time res = df.eval('x + y')  ![1](images/1.png)\n\n          CPU times: user 13.3 ms, sys: 15.6 ms, total: 28.9 ms\n          Wall time: 18.5 ms\n\nIn [132]: res[:3]\nOut[132]: 0    0.387242\n          1   -0.969343\n          2   -0.863159\n          dtype: float64\n\nIn [133]: %time res = df.apply(lambda row: row['x'] + row['y'], axis=1)  ![2](images/2.png)\n\n          CPU times: user 22 s, sys: 71 ms, total: 22.1 s\n          Wall time: 22.1 s\n\nIn [134]: res[:3]\nOut[134]: 0    0.387242\n          1   -0.969343\n          2   -0.863159\n          dtype: float64\n\n# tag::PD_34[]\n```"]
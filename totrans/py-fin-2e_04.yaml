- en: Chapter 4\. Numerical Computing with NumPy
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章。使用 NumPy 进行数值计算
- en: Computers are useless. They can only give answers.
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 计算机是无用的。它们只能给出答案。
- en: ''
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Pablo Picasso
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 巴勃罗·毕加索
- en: Introduction
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍
- en: This chapter introduces basic data types and data structures of `Python`. Although
    the `Python` interpreter itself already brings a rich variety of data structures
    with it, `NumPy` and other libraries add to these in a valuable fashion.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了 `Python` 的基本数据类型和数据结构。尽管 `Python` 解释器本身已经带来了丰富的数据结构，但 `NumPy` 和其他库以有价值的方式添加了这些数据结构。
- en: 'The chapter is organized as follows:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章组织如下：
- en: Arrays of data
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 数据数组
- en: This section discusses the concept of arrays in some detail and illustrates
    basic options to work with arrays of data in Python.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本节详细讨论了数组的概念，并说明了在 Python 中处理数据数组的基本选项。
- en: NumPy data structures
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: NumPy 数据结构
- en: This section is devoted to the characteristics and capabilities of the `NumPy`
    `ndarray` class and illustrates some of the benefits of this class for scientific
    and financial applications.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 本节致力于介绍 `NumPy` `ndarray` 类的特性和功能，并展示了该类对科学和金融应用的一些好处。
- en: Vectorization of code
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 代码向量化
- en: This section illustrates that, thanks to `NumPy`’s array class, vectorized code
    is easily implemented, leading to more compact and also better-performing code.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本节说明了，由于 `NumPy` 的数组类，向量化代码很容易实现，从而导致代码更紧凑，性能更好。
- en: 'The chapter covers the following data structures:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了以下数据结构：
- en: '| object type | meaning | usage/model for |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '| 对象类型 | 含义 | 用法/模型 |'
- en: '| --- | --- | --- |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `ndarray` (regular) | n-dimensional array object | large arrays of numerical
    data |'
  id: totrans-16
  prefs: []
  type: TYPE_TB
  zh: '| `ndarray`（常规） | n 维数组对象 | 大量数值数据的大数组 |'
- en: '| `ndarray` (record) | 2-dimensional array object | tabular data organized
    in columns |'
  id: totrans-17
  prefs: []
  type: TYPE_TB
  zh: '| `ndarray`（记录） | 二维数组对象 | 以列组织的表格数据 |'
- en: 'This chapter is organized as follows:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 本章组织如下：
- en: '[“Arrays of Data”](#arrays)'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[“数据数组”](#arrays)'
- en: This section is about the handling of arrays of data with pure Python code.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 本节讨论了使用纯 Python 代码处理数据数组的方法。
- en: '[Link to Come]'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[待添加链接]'
- en: This is the core section about the regular `NumPy` `ndarray` class; it is the
    work horse in almost all data intensive Python use cases.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这是关于常规 `NumPy` `ndarray` 类的核心部分；它是几乎所有数据密集型 Python 使用案例中的主要工具。
- en: '[Link to Come]'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '[待添加链接]'
- en: This brief section introduces structured (or record) `ndarray` objects for the
    handling of tabular data with columns.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这个简短的部分介绍了用于处理带有列的表格数据的结构化（或记录）`ndarray` 对象。
- en: '[“Vectorization of Code”](#vec_code)'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '[“代码的向量化”](#vec_code)'
- en: In this section, vectorization of code is discusses with its benefits; the section
    also discusses the importance of memory layout in certain scenarios.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，讨论了代码的向量化及其好处；该部分还讨论了在某些情况下内存布局的重要性。
- en: Arrays of Data
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据数组
- en: The previous chapter shows that `Python` provides some quite useful and flexible
    general data structures. In particular, `list` objects can be considered a real
    workhorse with many convenient characteristics and application areas. The cost
    to pay when using such a flexible (mutable) data structure in general comes in
    the form of relatively high memory usage, slower performance or both. However,
    scientific and financial applications generally have a need for high-performing
    operations on special data structures. One of the most important data structures
    in this regard is the *array*. Arrays generally structure other (fundamental)
    objects of the *same data type* in rows and columns.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 前一章表明 `Python` 提供了一些非常有用和灵活的通用数据结构。特别是，`list` 对象可以被认为是一个真正的工作马，具有许多方便的特性和应用领域。在一般情况下，使用这样一个灵活的（可变的）数据结构的代价在于相对较高的内存使用量，较慢的性能或两者兼有。然而，科学和金融应用通常需要对特殊数据结构进行高性能操作。在这方面最重要的数据结构之一是*数组*。数组通常以行和列的形式结构化其他（基本）相同数据类型的对象。
- en: Assume for the moment that we work with numbers only, although the concept generalizes
    to other types of data as well. In the simplest case, a one-dimensional array
    then represents, mathematically speaking, a *vector* of, in general, real numbers,
    internally represented by `float` objects. It then consists of a *single* row
    or column of elements only. In a more common case, an array represents an *i*
    × *j* *matrix* of elements. This concept generalizes to *i* × *j* × *k* *cubes*
    of elements in three dimensions as well as to general *n*-dimensional arrays of
    shape *i* × *j* × *k* × *l* × … .
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 暂时假设我们仅使用数字，尽管这个概念也可以推广到其他类型的数据。在最简单的情况下，一维数组在数学上表示为*向量*，通常由`float`对象内部表示为实数的一行或一列元素组成。在更普遍的情况下，数组表示为*i*
    × *j* *矩阵*的元素。这个概念在三维中也可以推广为*i* × *j* × *k* *立方体*的元素以及形状为*i* × *j* × *k* × *l*
    × …的一般*n*维数组。
- en: Mathematical disciplines like linear algebra and vector space theory illustrate
    that such mathematical structures are of high importance in a number of scientific
    disciplines and fields. It can therefore prove fruitful to have available a specialized
    class of data structures explicitly designed to handle arrays conveniently and
    efficiently. This is where the `Python` library `NumPy` comes into play, with
    its `ndarray` class. Before introducing its powerful `ndarray` class in the next
    section, this section illustrates two alternatives for the handling of arrays.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 线性代数和向量空间理论等数学学科说明了这些数学结构在许多科学学科和领域中的重要性。因此，设计一个专门的数据结构类来方便和高效地处理数组可能是非常有益的。这就是`Python`库`NumPy`的作用所在，其`ndarray`类应运而生。在下一节介绍其强大的`ndarray`类之前，本节展示了两种处理数组的替代方法。
- en: Arrays with Python Lists
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用Python列表的数组
- en: 'Before we turn to `NumPy`, let us first construct arrays with the built-in
    data structures presented in the previous section. `list` objects are particularly
    suited to accomplishing this task. A simple `list` can already be considered a
    one-dimensional array:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在转向`NumPy`之前，让我们首先用上一节介绍的内置数据结构构建数组。`list`对象特别适用于完成这项任务。一个简单的`list`已经可以被视为一维数组：
- en: '[PRE0]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[![1](images/1.png)](#co_numerical_computing_with_numpy_CO1-1)'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](images/1.png)](#co_numerical_computing_with_numpy_CO1-1)'
- en: '`list` object with numbers.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`list`对象与数字。'
- en: 'Since `list` objects can contain arbitrary other objects, they can also contain
    other `list` objects. In that way, two- and higher-dimensional arrays are easily
    constructed by nested `list` objects:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`list`对象可以包含任意其他对象，它们也可以包含其他`list`对象。通过嵌套`list`对象，可以轻松构建二维和更高维的数组：
- en: '[PRE1]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[![1](images/1.png)](#co_numerical_computing_with_numpy_CO2-1)'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](images/1.png)](#co_numerical_computing_with_numpy_CO2-1)'
- en: '`list` object with `list` objects …'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '`list`对象与`list`对象…'
- en: '[![2](images/2.png)](#co_numerical_computing_with_numpy_CO2-2)'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](images/2.png)](#co_numerical_computing_with_numpy_CO2-2)'
- en: … resulting in a matrix of numbers.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: … 得到一个数字矩阵。
- en: 'We can also easily select rows via simple indexing or single elements via double
    indexing (whole columns, however, are not so easy to select):'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以通过简单的索引选择行或通过双重索引选择单个元素（然而，选择整列并不那么容易）：
- en: '[PRE2]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Nesting can be pushed further for even more general structures:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 嵌套可以进一步推广到更一般的结构：
- en: '[PRE3]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[![1](images/1.png)](#co_numerical_computing_with_numpy_CO3-1)'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](images/1.png)](#co_numerical_computing_with_numpy_CO3-1)'
- en: Cube of numbers.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 立方数。
- en: 'Note that combining objects in the way just presented generally works with
    reference pointers to the original objects. What does that mean in practice? Let
    us have a look at the following operations:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，刚刚介绍的对象组合方式通常使用对原始对象的引用指针。这在实践中意味着什么？让我们看看以下操作：
- en: '[PRE4]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Now change the value of the first element of the `v` object and see what happens
    to the `m` object:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在修改`v`对象的第一个元素的值，看看`m`对象会发生什么变化：
- en: '[PRE5]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This can be avoided by using the `deepcopy` function of the `copy` module:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用`copy`模块的`deepcopy`函数，可以避免这种情况：
- en: '[PRE6]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[![1](images/1.png)](#co_numerical_computing_with_numpy_CO4-1)'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](images/1.png)](#co_numerical_computing_with_numpy_CO4-1)'
- en: Instead of reference pointer, physical copies are used.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 使用物理副本而不是引用指针。
- en: '[![2](images/2.png)](#co_numerical_computing_with_numpy_CO4-2)'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](images/2.png)](#co_numerical_computing_with_numpy_CO4-2)'
- en: As a consequence, a change in the original object …
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，对原始对象的更改…
- en: '[![3](images/3.png)](#co_numerical_computing_with_numpy_CO4-3)'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](images/3.png)](#co_numerical_computing_with_numpy_CO4-3)'
- en: … does not have any impact anymore.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: … 不再有任何影响。
- en: The Python Array Class
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python数组类
- en: 'The is a dedicated `array` module in Python available . As you can read on
    the documentation page (see [*https://docs.python.org/3/library/array.html*](https://docs.python.org/3/library/array.html)):'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: Python中有一个专用的`array`模块可用。正如您可以在文档页面上阅读到的（参见[*https://docs.python.org/3/library/array.html*](https://docs.python.org/3/library/array.html)）：
- en: 'This module defines an object type which can compactly represent an array of
    basic values: characters, integers, floating point numbers. Arrays are sequence
    types and behave very much like lists, except that the type of objects stored
    in them is constrained. The type is specified at object creation time by using
    a type code, which is a single character.'
  id: totrans-62
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 该模块定义了一种对象类型，可以紧凑地表示基本值的数组：字符、整数、浮点数。数组是序列类型，并且行为非常像列表，只是存储在其中的对象类型受到限制。类型在对象创建时通过使用类型代码（一个单个字符）来指定。
- en: Consider the following code, that instantiates an `array` object out of a `list`
    object.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下代码，将一个`list`对象实例化为一个`array`对象。
- en: '[PRE7]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[![1](images/1.png)](#co_numerical_computing_with_numpy_CO5-1)'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](images/1.png)](#co_numerical_computing_with_numpy_CO5-1)'
- en: The instantiation of the `array` object with `float` as the type code.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`float`作为类型代码实例化`array`对象。
- en: '[![2](images/2.png)](#co_numerical_computing_with_numpy_CO5-2)'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](images/2.png)](#co_numerical_computing_with_numpy_CO5-2)'
- en: Major methods work similar to those of the `list` object.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 主要方法的工作方式类似于`list`对象的方法。
- en: '[![3](images/3.png)](#co_numerical_computing_with_numpy_CO5-4)'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](images/3.png)](#co_numerical_computing_with_numpy_CO5-4)'
- en: Although “scalar multiplication” works in principle, the result is not the mathematically
    expected one; rather the elements are repeated.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然“标量乘法”原理上可行，但结果不是数学上预期的；而是元素被重复。
- en: Trying to append an object of a different than the specified data type, raises
    a `TypeError`.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试附加与指定数据类型不同的对象会引发`TypeError`。
- en: '[PRE8]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[![1](images/1.png)](#co_numerical_computing_with_numpy_CO6-1)'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](images/1.png)](#co_numerical_computing_with_numpy_CO6-1)'
- en: Only `float` objects can be appended; other data types/type codes raise errors.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 仅能附加`float`对象；其他数据类型/类型代码会引发错误。
- en: '[![2](images/2.png)](#co_numerical_computing_with_numpy_CO6-2)'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](images/2.png)](#co_numerical_computing_with_numpy_CO6-2)'
- en: However, the `array` object can easily be converted back to a `list` object
    if such flexibility is required.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果需要这样的灵活性，`array`对象可以轻松转换回`list`对象。
- en: An advantage of the `array` class is that it has built-in storage and retrieval
    functionality.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`array`类的一个优点是它具有内置的存储和检索功能。'
- en: '[PRE9]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[![1](images/1.png)](#co_numerical_computing_with_numpy_CO7-1)'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](images/1.png)](#co_numerical_computing_with_numpy_CO7-1)'
- en: Opens a file on disk for writing binary data.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 打开一个用于写入二进制数据的磁盘上的文件。
- en: '[![2](images/2.png)](#co_numerical_computing_with_numpy_CO7-2)'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](images/2.png)](#co_numerical_computing_with_numpy_CO7-2)'
- en: Writes the `array` data to the file.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 将`array`数据写入文件。
- en: '[![3](images/3.png)](#co_numerical_computing_with_numpy_CO7-3)'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](images/3.png)](#co_numerical_computing_with_numpy_CO7-3)'
- en: Closes the file.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 关闭文件。
- en: '[![4](images/4.png)](#co_numerical_computing_with_numpy_CO7-4)'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](images/4.png)](#co_numerical_computing_with_numpy_CO7-4)'
- en: Alternatively, a `with` context can be used for the same operation.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，可以使用`with`上下文执行相同的操作。
- en: '[![5](images/5.png)](#co_numerical_computing_with_numpy_CO7-6)'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](images/5.png)](#co_numerical_computing_with_numpy_CO7-6)'
- en: This shows the file as written on disk.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这显示了磁盘上写入的文件。
- en: As before, the data type of the `array` object is of importance when reading
    the data from disk.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 与以前一样，从磁盘读取数据时，`array`对象的数据类型很重要。
- en: '[PRE10]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[![1](images/1.png)](#co_numerical_computing_with_numpy_CO8-1)'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](images/1.png)](#co_numerical_computing_with_numpy_CO8-1)'
- en: A new `array` object with type code `float`.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 使用类型代码`float`创建一个新的`array`对象。
- en: '[![2](images/2.png)](#co_numerical_computing_with_numpy_CO8-2)'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](images/2.png)](#co_numerical_computing_with_numpy_CO8-2)'
- en: Opens the file for reading binary data …
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 打开文件以读取二进制数据...
- en: '[![3](images/3.png)](#co_numerical_computing_with_numpy_CO8-3)'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](images/3.png)](#co_numerical_computing_with_numpy_CO8-3)'
- en: … and reads five elements in the `b` object.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '...并在`b`对象中读取五个元素。'
- en: '[![4](images/4.png)](#co_numerical_computing_with_numpy_CO8-4)'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](images/4.png)](#co_numerical_computing_with_numpy_CO8-4)'
- en: A new `array` object with type code `double`.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 使用类型代码`double`创建一个新的`array`对象。
- en: '[![5](images/5.png)](#co_numerical_computing_with_numpy_CO8-5)'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](images/5.png)](#co_numerical_computing_with_numpy_CO8-5)'
- en: Reading two elements from the file.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 从文件中读取两个元素。
- en: '[![6](images/6.png)](#co_numerical_computing_with_numpy_CO8-6)'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '[![6](images/6.png)](#co_numerical_computing_with_numpy_CO8-6)'
- en: The difference in type codes leads to “wrong” numbers.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 类型代码的差异导致“错误”的数字。
- en: '[![7](images/7.png)](#co_numerical_computing_with_numpy_CO8-7)'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '[![7](images/7.png)](#co_numerical_computing_with_numpy_CO8-7)'
- en: Regular NumPy Arrays
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 常规NumPy数组
- en: Obviously, composing array structures with `list` objects works, somewhat. But
    it is not really convenient, and the `list` class has not been built with this
    specific goal in mind. It has rather been built with a much broader and more general
    scope. The `array` class is already a bit more specialized providing some useful
    features for working with arrays of data. However, some kind of “highly” specialized
    class could therefore be really beneficial to handle array-type structures.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，使用`list`对象构成数组结构有些作用。但这并不是真正方便的方式，而且`list`类并没有为此特定目标而构建。它的范围更广泛，更一般。`array`类已经稍微更专业一些，提供了一些有用的特性来处理数据数组。然而，某种“高度”专业化的类因此可能真的对处理数组类型的结构非常有益。
- en: The Basics
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基础知识
- en: 'Such a specialized class is the `numpy.ndarray` class, which has been built
    with the specific goal of handling *n*-dimensional arrays both conveniently and
    efficiently—i.e., in a highly performing manner. The basic handling of instances
    of this class is again best illustrated by examples:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这样一个专门的类就是`numpy.ndarray`类，它的特定目标是方便且高效地处理*n*维数组，即以高性能的方式。这个类的基本处理最好通过示例来说明：
- en: '[PRE11]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[![1](images/1.png)](#co_numerical_computing_with_numpy_CO9-1)'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](images/1.png)](#co_numerical_computing_with_numpy_CO9-1)'
- en: Import the `numpy` package.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 导入`numpy`包。
- en: '[![2](images/2.png)](#co_numerical_computing_with_numpy_CO9-2)'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](images/2.png)](#co_numerical_computing_with_numpy_CO9-2)'
- en: Creates an `ndarray` object out of a `list` object with floats.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 通过`list`对象中的浮点数创建一个`ndarray`对象。
- en: '[![3](images/3.png)](#co_numerical_computing_with_numpy_CO9-4)'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](images/3.png)](#co_numerical_computing_with_numpy_CO9-4)'
- en: Creates an `ndarray` object out of a `list` object with strings.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 通过`list`对象中的字符串创建一个`ndarray`对象。
- en: '[![4](images/4.png)](#co_numerical_computing_with_numpy_CO9-5)'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](images/4.png)](#co_numerical_computing_with_numpy_CO9-5)'
- en: '`np.arange` works similar to `range`.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '`np.arange`的工作方式类似于`range`。'
- en: '[![5](images/5.png)](#co_numerical_computing_with_numpy_CO9-6)'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](images/5.png)](#co_numerical_computing_with_numpy_CO9-6)'
- en: However, it takes as additional input the `dtype` parameter.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，它接受附加输入`dtype`参数。
- en: '[![6](images/6.png)](#co_numerical_computing_with_numpy_CO9-7)'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '[![6](images/6.png)](#co_numerical_computing_with_numpy_CO9-7)'
- en: With one-dimensional `ndarray` objects, indexing works as usual.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一维的`ndarray`对象，索引的工作方式与平常一样。
- en: 'A major feature of the `ndarray` class is the *multitude of built-in methods*.
    For instance:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '`ndarray`类的一个重要特性是*内置方法的多样性*。例如：'
- en: '[PRE12]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[![1](images/1.png)](#co_numerical_computing_with_numpy_CO10-1)'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](images/1.png)](#co_numerical_computing_with_numpy_CO10-1)'
- en: The sum of all elements.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 所有元素的总和。
- en: '[![2](images/2.png)](#co_numerical_computing_with_numpy_CO10-2)'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](images/2.png)](#co_numerical_computing_with_numpy_CO10-2)'
- en: The standard deviation of the elements.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 元素的标准偏差。
- en: '[![3](images/3.png)](#co_numerical_computing_with_numpy_CO10-3)'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](images/3.png)](#co_numerical_computing_with_numpy_CO10-3)'
- en: The cumulative sum over all elements (starting at index position 0).
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 所有元素的累积和（从索引位置0开始）。
- en: 'Another major feature is the (vectorized) *mathematical operations* defined
    on `ndarray` objects:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个重要特性是对`ndarray`对象定义的（向量化的）*数学运算*：
- en: '[PRE13]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[![1](images/1.png)](#co_numerical_computing_with_numpy_CO11-1)'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](images/1.png)](#co_numerical_computing_with_numpy_CO11-1)'
- en: “Scalar multiplication” with `list` objects leads to a repetition of elements.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 与`list`对象的“标量乘法”导致元素的重复。
- en: '[![2](images/2.png)](#co_numerical_computing_with_numpy_CO11-2)'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](images/2.png)](#co_numerical_computing_with_numpy_CO11-2)'
- en: By contrast, working with `ndarray` objects implements a proper scalar multiplication,
    for instance.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，使用`ndarray`对象实现了适当的标量乘法，例如。
- en: '[![3](images/3.png)](#co_numerical_computing_with_numpy_CO11-3)'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](images/3.png)](#co_numerical_computing_with_numpy_CO11-3)'
- en: This calculates element-wise the square values.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 这个计算每个元素的平方值。
- en: '[![4](images/4.png)](#co_numerical_computing_with_numpy_CO11-4)'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](images/4.png)](#co_numerical_computing_with_numpy_CO11-4)'
- en: This interprets the elements of the `ndarray` as the powers.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 这解释了`ndarray`的元素作为幂。
- en: '[![5](images/5.png)](#co_numerical_computing_with_numpy_CO11-5)'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](images/5.png)](#co_numerical_computing_with_numpy_CO11-5)'
- en: This calculates the power of every element to itself.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这个计算每个元素的自身的幂。
- en: Another important feature of the `NumPy` package are *universal functions*.
    They are “universal” in the sense that they in general operate on `ndarray` object
    as well as on basic Python data types. However, when applying universal functions
    to, say, a Python `float` object, one needs to be aware of the reduced performance
    compared to the same functionality found in the `math` module.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '`NumPy`包的另一个重要功能是*通用函数*。它们在一般情况下对`ndarray`对象以及基本Python数据类型进行操作。然而，当将通用函数应用于Python
    `float`对象时，需要注意与`math`模块中相同功能的性能降低。'
- en: '[PRE14]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[![1](images/1.png)](#co_numerical_computing_with_numpy_CO12-1)'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](images/1.png)](#co_numerical_computing_with_numpy_CO12-1)'
- en: Calculates the exponential values element-wise.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 逐个元素计算指数值。
- en: '[![2](images/2.png)](#co_numerical_computing_with_numpy_CO12-2)'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](images/2.png)](#co_numerical_computing_with_numpy_CO12-2)'
- en: Calculates the square root for every element.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 计算每个元素的平方根。
- en: '[![3](images/3.png)](#co_numerical_computing_with_numpy_CO12-3)'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](images/3.png)](#co_numerical_computing_with_numpy_CO12-3)'
- en: Calculates the square root for a Python `float` object.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 计算Python `float`对象的平方根。
- en: '[![4](images/4.png)](#co_numerical_computing_with_numpy_CO12-4)'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](images/4.png)](#co_numerical_computing_with_numpy_CO12-4)'
- en: The same calculation, this time using the `math` module.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 相同的计算，这次使用`math`模块。
- en: '[![5](images/5.png)](#co_numerical_computing_with_numpy_CO12-6)'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](images/5.png)](#co_numerical_computing_with_numpy_CO12-6)'
- en: The `math.sqrt` cannot be applied to the `ndarray` object directly.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '`math.sqrt`不能直接应用于`ndarray`对象。'
- en: '[![6](images/6.png)](#co_numerical_computing_with_numpy_CO12-7)'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '[![6](images/6.png)](#co_numerical_computing_with_numpy_CO12-7)'
- en: Applying the universal function `np.sqrt` to a Python `float` object …
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 将通用函数`np.sqrt`应用于Python `float`对象……
- en: '[![7](images/7.png)](#co_numerical_computing_with_numpy_CO12-8)'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '[![7](images/7.png)](#co_numerical_computing_with_numpy_CO12-8)'
- en: … is much slower than the same operation with the `math.sqrt` function.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: ……比使用`math.sqrt`函数的相同操作慢得多。
- en: Multiple Dimensions
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 多维度
- en: 'The transition to more than one dimension is seamless, and all features presented
    so far carry over to the more general cases. In particular, the indexing system
    is made consistent across all dimensions:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 切换到多维度是无缝的，并且到目前为止呈现的所有特征都适用于更一般的情况。特别是，索引系统在所有维度上保持一致：
- en: '[PRE15]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[![1](images/1.png)](#co_numerical_computing_with_numpy_CO13-1)'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](images/1.png)](#co_numerical_computing_with_numpy_CO13-1)'
- en: Constructs a two-dimensional `ndarray` object out of the one-dimensional one.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 用一维数组构造二维`ndarray`对象。
- en: '[![2](images/2.png)](#co_numerical_computing_with_numpy_CO13-2)'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](images/2.png)](#co_numerical_computing_with_numpy_CO13-2)'
- en: Selects the first row.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 选择第一行。
- en: '[![3](images/3.png)](#co_numerical_computing_with_numpy_CO13-3)'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](images/3.png)](#co_numerical_computing_with_numpy_CO13-3)'
- en: Selects the third element in the first row; indices are separated, within the
    brackets, by a comma.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 选择第一行的第三个元素；在括号内，索引由逗号分隔。
- en: '[![4](images/4.png)](#co_numerical_computing_with_numpy_CO13-4)'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](images/4.png)](#co_numerical_computing_with_numpy_CO13-4)'
- en: Selects the second column.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 选择第二列。
- en: '[![5](images/5.png)](#co_numerical_computing_with_numpy_CO13-5)'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](images/5.png)](#co_numerical_computing_with_numpy_CO13-5)'
- en: Calculates the sum over *all* values.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 计算*所有*值的总和。
- en: '[![6](images/6.png)](#co_numerical_computing_with_numpy_CO13-6)'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '[![6](images/6.png)](#co_numerical_computing_with_numpy_CO13-6)'
- en: Calculates the sum along the first axis, i.e. column-wise.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 沿第一个轴计算总和，即按列计算。
- en: '[![7](images/7.png)](#co_numerical_computing_with_numpy_CO13-7)'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '[![7](images/7.png)](#co_numerical_computing_with_numpy_CO13-7)'
- en: Calculates the sum along the second axis, i.e. row-wise.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 沿第二轴计算总和，即按行计算。
- en: 'There are a number of ways to initialize (instantiate) `ndarray` objects. One
    is as presented before, via `np.array`. However, this assumes that all elements
    of the array are already available. In contrast, one would maybe like to have
    the `ndarray` objects instantiated first to populate them later with results generated
    during the execution of code. To this end, we can use the following functions:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 有多种方法可以初始化（实例化）`ndarray`对象。一种方法如前所述，通过`np.array`。然而，这假定数组的所有元素已经可用。相比之下，也许我们希望首先实例化`ndarray`对象，以便在执行代码期间生成的结果后来填充它们。为此，我们可以使用以下函数：
- en: '[PRE16]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[![1](images/1.png)](#co_numerical_computing_with_numpy_CO14-1)'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](images/1.png)](#co_numerical_computing_with_numpy_CO14-1)'
- en: '`ndarray` object pre-populated with zeros.'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 用零预先填充的`ndarray`对象。
- en: '[![2](images/2.png)](#co_numerical_computing_with_numpy_CO14-2)'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](images/2.png)](#co_numerical_computing_with_numpy_CO14-2)'
- en: '`ndarray` object pre-populated with ones.'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 用1预先填充的`ndarray`对象。
- en: '[![3](images/3.png)](#co_numerical_computing_with_numpy_CO14-3)'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](images/3.png)](#co_numerical_computing_with_numpy_CO14-3)'
- en: The same but taking another `ndarray` object to infer the shape.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 相同，但采用另一个`ndarray`对象来推断形状。
- en: '[![4](images/4.png)](#co_numerical_computing_with_numpy_CO14-5)'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](images/4.png)](#co_numerical_computing_with_numpy_CO14-5)'
- en: '`ndarray` object not pre-populated with anything (numbers depend on the bits
    present in the memory).'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '`ndarray`对象不预先填充任何内容（数字取决于内存中存在的位）。'
- en: '[![5](images/5.png)](#co_numerical_computing_with_numpy_CO14-7)'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](images/5.png)](#co_numerical_computing_with_numpy_CO14-7)'
- en: Creates a square matrix as `ndarray` object with diagonal populated by ones.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个由1填充对角线的方阵作为`ndarray`对象。
- en: '[![6](images/6.png)](#co_numerical_computing_with_numpy_CO14-8)'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '[![6](images/6.png)](#co_numerical_computing_with_numpy_CO14-8)'
- en: Creates a one-dimensional `ndarray` object with evenly spaced intervals between
    numbers; parameters used are `start`, `end`, `num` (number of elements).
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个一维`ndarray`对象，其中数字之间的间隔均匀分布；所使用的参数是`start`、`end`、`num`（元素数量）。
- en: 'With all these functions we can provide the following parameters:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 使用所有这些函数，我们可以提供以下参数：
- en: '`shape`'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '`shape`'
- en: Either an `int`, a sequence of ``int`+s, or a reference to another +numpy.ndarray`
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 要么是一个`int`，一个``int`+s`序列，或者是对另一个`+numpy.ndarray`的引用
- en: '`dtype` (optional)'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: '`dtype`（可选）'
- en: A ``dtype``—these are `NumPy`-specific data types for `numpy.ndarray` objects
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 一个``dtype``——这些是`NumPy`特定的`numpy.ndarray`对象的数据类型
- en: '`order` (optional)'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '`order`（可选）'
- en: 'The order in which to store elements in memory: `C` for `C`-like (i.e., row-wise)
    or `F` for `Fortran`-like (i.e., column-wise)'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 存储元素在内存中的顺序：`C`表示`C`风格（即，逐行），或`F`表示`Fortran`风格（即，逐列）
- en: 'Here, it becomes obvious how `NumPy` specializes the construction of arrays
    with the `ndarray` class, in comparison to the `list` -based approach:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`NumPy`如何通过`ndarray`类专门构建数组的方式，与基于`list`的方法进行比较变得明显：
- en: The `ndarray` object has built-in *dimensions* (axes).
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ndarray`对象具有内置的*维度*（轴）。'
- en: The `ndarray` object is *immutable*, its shape is fixed.
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ndarray`对象是*不可变的*，其形状是固定的。'
- en: It only allows for a *single data type* (`numpy.dtype`) for the whole array.
  id: totrans-198
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它仅允许*单一数据类型*（`numpy.dtype`）用于整个数组。
- en: The `array` class by contrast shares only the characteristic of allowing for
    unique data type (type code, `dtype`).
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，`array`类只共享允许唯一数据类型（类型代码，`dtype`）的特性。
- en: The role of the `order` parameter is discussed later in the chapter. [Table 4-1](#numpy_dtypes)
    provides an overview of `numpy.dtype` objects (i.e., the basic data types `NumPy`
    allows).
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '`order`参数的作用在本章稍后讨论。[表4-1](#numpy_dtypes)提供了`numpy.dtype`对象的概述（即，`NumPy`允许的基本数据类型）。'
- en: Table 4-1\. NumPy dtype objects
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 表4-1。NumPy dtype对象
- en: '| dtype | Description | Example |'
  id: totrans-202
  prefs: []
  type: TYPE_TB
  zh: '| dtype | 描述 | 示例 |'
- en: '| --- | --- | --- |'
  id: totrans-203
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| `t` | Bit field | `t4` (4 bits) |'
  id: totrans-204
  prefs: []
  type: TYPE_TB
  zh: '| `t` | 位域 | `t4` (4位) |'
- en: '| `b` | Boolean | `b` (true or false) |'
  id: totrans-205
  prefs: []
  type: TYPE_TB
  zh: '| `b` | 布尔 | `b`（true或false） |'
- en: '| `i` | Integer | `i8` (64 bit) |'
  id: totrans-206
  prefs: []
  type: TYPE_TB
  zh: '| `i` | 整数 | `i8` (64位) |'
- en: '| `u` | Unsigned integer | `u8` (64 bit) |'
  id: totrans-207
  prefs: []
  type: TYPE_TB
  zh: '| `u` | 无符号整数 | `u8` (64位) |'
- en: '| `f` | Floating point | `f8` (64 bit) |'
  id: totrans-208
  prefs: []
  type: TYPE_TB
  zh: '| `f` | 浮点数 | `f8` (64位) |'
- en: '| `c` | Complex floating point | `c16` (128 bit) |'
  id: totrans-209
  prefs: []
  type: TYPE_TB
  zh: '| `c` | 复数浮点数 | `c16` (128位) |'
- en: '| `O` | Object | `0` (pointer to object) |'
  id: totrans-210
  prefs: []
  type: TYPE_TB
  zh: '| `O` | 对象 | `0` (对象指针) |'
- en: '| `S`, `a` | String | `S24` (24 characters) |'
  id: totrans-211
  prefs: []
  type: TYPE_TB
  zh: '| `S`, `a` | 字符串 | `S24` (24个字符) |'
- en: '| `U` | Unicode | `U24` (24 Unicode characters) |'
  id: totrans-212
  prefs: []
  type: TYPE_TB
  zh: '| `U` | Unicode | `U24` (24个Unicode字符) |'
- en: '| `V` | Other | `V12` (12-byte data block) |'
  id: totrans-213
  prefs: []
  type: TYPE_TB
  zh: '| `V` | 其他 | `V12` (12字节数据块) |'
- en: Meta-Information
  id: totrans-214
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 元信息
- en: Every `ndarray` object provides access to a number of useful attributes.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 每个`ndarray`对象都提供访问一些有用属性的功能。
- en: '[PRE17]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[![1](images/1.png)](#co_numerical_computing_with_numpy_CO15-1)'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](images/1.png)](#co_numerical_computing_with_numpy_CO15-1)'
- en: The number of elements.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 元素的数量。
- en: '[![2](images/2.png)](#co_numerical_computing_with_numpy_CO15-2)'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](images/2.png)](#co_numerical_computing_with_numpy_CO15-2)'
- en: The number of bytes used to represent one element.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 用于表示一个元素所使用的字节数。
- en: '[![3](images/3.png)](#co_numerical_computing_with_numpy_CO15-3)'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](images/3.png)](#co_numerical_computing_with_numpy_CO15-3)'
- en: The number of dimensions.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 维度的数量。
- en: '[![4](images/4.png)](#co_numerical_computing_with_numpy_CO15-4)'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](images/4.png)](#co_numerical_computing_with_numpy_CO15-4)'
- en: The shape of the `ndarray` object.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '`ndarray`对象的形状。'
- en: '[![5](images/5.png)](#co_numerical_computing_with_numpy_CO15-5)'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](images/5.png)](#co_numerical_computing_with_numpy_CO15-5)'
- en: The `dtype` of the elements.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 元素的`dtype`。
- en: '[![6](images/6.png)](#co_numerical_computing_with_numpy_CO15-6)'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '[![6](images/6.png)](#co_numerical_computing_with_numpy_CO15-6)'
- en: The total number of bytes used in memory.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 内存中使用的总字节数。
- en: Reshaping and Resizing
  id: totrans-229
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重塑和调整大小
- en: Although `ndarray` objects are immutable by default, there are multiple options
    to reshape and resize such an object. While the first operation in general just
    provides another *view* on the same data, the second operation in general creates
    a *new* (temporary) object.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然`ndarray`对象默认是不可变的，但有多种选项可以重塑和调整此类对象。一般情况下，第一个操作只是提供相同数据的另一个*视图*，而第二个操作一般会创建一个*新的*（临时）对象。
- en: '[PRE18]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[![1](images/1.png)](#co_numerical_computing_with_numpy_CO16-1)'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](images/1.png)](#co_numerical_computing_with_numpy_CO16-1)'
- en: The shape of the original `ndarray` object.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 原始`ndarray`对象的形状。
- en: '[![2](images/2.png)](#co_numerical_computing_with_numpy_CO16-3)'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](images/2.png)](#co_numerical_computing_with_numpy_CO16-3)'
- en: Reshaping to two dimensions (memory view).
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 重塑为两个维度（内存视图）。
- en: '[![3](images/3.png)](#co_numerical_computing_with_numpy_CO16-4)'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](images/3.png)](#co_numerical_computing_with_numpy_CO16-4)'
- en: Creating a new object.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 创建新对象。
- en: '[![4](images/4.png)](#co_numerical_computing_with_numpy_CO16-5)'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](images/4.png)](#co_numerical_computing_with_numpy_CO16-5)'
- en: The transpose of the new `ndarray` object.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 新`ndarray`对象的转置。
- en: During a reshaping operations the total number of elements in the `ndarray`
    object is unchanged. During a resizing operation, this number changes, i.e. it
    either decreases (“down-sizing”) or increases (“up-sizing”).
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 在重塑操作期间，`ndarray`对象中的元素总数保持不变。在调整大小操作期间，此数字会更改，即它要么减少（“向下调整”），要么增加（“向上调整”）。
- en: '[PRE19]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[![1](images/1.png)](#co_numerical_computing_with_numpy_CO17-1)'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](images/1.png)](#co_numerical_computing_with_numpy_CO17-1)'
- en: Two dimensions, down-sizing.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 两个维度，向下调整。
- en: '[![2](images/2.png)](#co_numerical_computing_with_numpy_CO17-4)'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](images/2.png)](#co_numerical_computing_with_numpy_CO17-4)'
- en: Two dimensions, up-sizing.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 两个维度，向上调整。
- en: Stacking is a special operation that allows the horizontal or vertical combination
    of two `ndarray` objects. However, the size of the “connecting” dimension must
    be the same.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 堆叠是一种特殊操作，允许水平或垂直组合两个`ndarray`对象。但是，“连接”维度的大小必须相同。
- en: '[PRE20]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[![1](images/1.png)](#co_numerical_computing_with_numpy_CO18-1)'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](images/1.png)](#co_numerical_computing_with_numpy_CO18-1)'
- en: Horizontal stacking of two `ndarray` objects.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 水平堆叠两个`ndarray`对象。
- en: '[![2](images/2.png)](#co_numerical_computing_with_numpy_CO18-2)'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](images/2.png)](#co_numerical_computing_with_numpy_CO18-2)'
- en: Vertical stacking of two `ndarray` objects.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 垂直堆叠两个`ndarray`对象。
- en: Another special operation is the flattening of a multi-dimensional `ndarray`
    object to a one-dimensional one. One can choose whether the flatting happens row-by-row
    (`C` order) or column-by-column (`F` order).
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个特殊操作是将多维`ndarray`对象展平为一维对象。可以选择是按行（`C`顺序）还是按列（`F`顺序）进行展平。
- en: '[PRE21]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[![1](images/1.png)](#co_numerical_computing_with_numpy_CO19-1)'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](images/1.png)](#co_numerical_computing_with_numpy_CO19-1)'
- en: The default order for flatting is `C`.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 平铺的默认顺序是`C`。
- en: '[![2](images/2.png)](#co_numerical_computing_with_numpy_CO19-3)'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](images/2.png)](#co_numerical_computing_with_numpy_CO19-3)'
- en: Flattening with `F` order.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 用`F`顺序展平。
- en: '[![3](images/3.png)](#co_numerical_computing_with_numpy_CO19-4)'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](images/3.png)](#co_numerical_computing_with_numpy_CO19-4)'
- en: The `flat` attribute provides a flat iterator (`C` order).
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '`flat`属性提供了一个平坦的迭代器（`C`顺序）。'
- en: '[![4](images/4.png)](#co_numerical_computing_with_numpy_CO19-5)'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](images/4.png)](#co_numerical_computing_with_numpy_CO19-5)'
- en: The `ravel()` method is an alternative to `flatten()`.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '`ravel()`方法是`flatten()`的另一种选择。'
- en: Boolean Arrays
  id: totrans-262
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 布尔数组
- en: Comparison and logical operations in general work on `ndarray` objects the same
    way, element-wise, as on standard Python data types. Evaluating conditions yield
    by default a Boolean `ndarray` object (`dtype` is `bool`).
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 比较和逻辑操作通常在`ndarray`对象上像在标准Python数据类型上一样逐元素地进行。默认情况下，评估条件会产生一个布尔`ndarray`对象（`dtype`为`bool`）。
- en: '[PRE22]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[![1](images/1.png)](#co_numerical_computing_with_numpy_CO20-1)'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](images/1.png)](#co_numerical_computing_with_numpy_CO20-1)'
- en: Is value greater than …?
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 值是否大于...？
- en: '[![2](images/2.png)](#co_numerical_computing_with_numpy_CO20-2)'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](images/2.png)](#co_numerical_computing_with_numpy_CO20-2)'
- en: Is value smaller or equal then …?
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 值是否小于或等于...？
- en: '[![3](images/3.png)](#co_numerical_computing_with_numpy_CO20-3)'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](images/3.png)](#co_numerical_computing_with_numpy_CO20-3)'
- en: Is value equal to …?
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 值是否等于...？
- en: '[![4](images/4.png)](#co_numerical_computing_with_numpy_CO20-4)'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](images/4.png)](#co_numerical_computing_with_numpy_CO20-4)'
- en: Present `True` and `False` as integer values 0 and 1.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 以整数值0和1表示`True`和`False`。
- en: '[![5](images/5.png)](#co_numerical_computing_with_numpy_CO20-5)'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](images/5.png)](#co_numerical_computing_with_numpy_CO20-5)'
- en: Is value greater than … and smaller or equal to …?
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 值是否大于...且小于或等于...？
- en: Such Boolean arrays can be used for indexing and data selection. Notice that
    the following operations flatten the data.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 此类布尔数组可用于索引和数据选择。注意以下操作会展平数据。
- en: '[PRE23]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[![1](images/1.png)](#co_numerical_computing_with_numpy_CO21-1)'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](images/1.png)](#co_numerical_computing_with_numpy_CO21-1)'
- en: Give me all values greater than …
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 给我所有大于...的值。
- en: '[![2](images/2.png)](#co_numerical_computing_with_numpy_CO21-2)'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](images/2.png)](#co_numerical_computing_with_numpy_CO21-2)'
- en: Give me all values greater than … *and* smaller or equal to …
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 给我所有大于... *且*小于或等于...的值。
- en: '[![3](images/3.png)](#co_numerical_computing_with_numpy_CO21-3)'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](images/3.png)](#co_numerical_computing_with_numpy_CO21-3)'
- en: Give me all values greater than … *or* smaller or equal to …
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 给我所有大于... *或*小于或等于...的值。
- en: A powerful tool in this regard it the `np.where()` function which allows the
    definition of actions/operations depending on the whether a condition is `True`
    or `False`. The result of applying `np.where()` is a new `ndarray` object of the
    same shape as the original one.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 在这方面的一个强大工具是`np.where()`函数，它允许根据条件是`True`还是`False`来定义操作/操作。应用`np.where()`的结果是一个与原始对象相同形状的新`ndarray`对象。
- en: '[PRE24]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[![1](images/1.png)](#co_numerical_computing_with_numpy_CO22-1)'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](images/1.png)](#co_numerical_computing_with_numpy_CO22-1)'
- en: In the new object, set `1` if `True` and `0` otherwise.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 在新对象中，如果为`True`，则设置为`1`，否则设置为`0`。
- en: '[![2](images/2.png)](#co_numerical_computing_with_numpy_CO22-2)'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](images/2.png)](#co_numerical_computing_with_numpy_CO22-2)'
- en: In the new object, set `even` if `True` and `odd` otherwise.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 在新对象中，如果为`True`，则设置为`even`，否则设置为`odd`。
- en: '[![3](images/3.png)](#co_numerical_computing_with_numpy_CO22-3)'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](images/3.png)](#co_numerical_computing_with_numpy_CO22-3)'
- en: In the new object, set two times the `h` element if `True` and half the `h`
    element otherwise.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 在新对象中，如果为`True`，则将`h`元素设置为两倍，否则将`h`元素设置为一半。
- en: Later chapters provide more examples for these important operations on `ndarray`
    objects.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 后续章节提供了关于`ndarray`对象上这些重要操作的更多示例。
- en: Speed Comparison
  id: totrans-292
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 速度比较
- en: Before moving on to structured arrays with `NumPy`, let us stick with regular
    arrays for a moment and see what the specialization brings in terms of performance.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 在转向具有`NumPy`的结构化数组之前，让我们暂时保持常规数组，并看看专业化在性能方面带来了什么。
- en: 'As a simple example, suppose we want to generate a matrix/array of shape 5,000
    × 5,000 elements, populated with (pseudo)random, standard normally distributed
    numbers. We then want to calculate the sum of all elements. First, the pure `Python`
    approach, where we make use of `list` comprehensions:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 以一个简单的例子为例，假设我们想要生成一个形状为 5,000 × 5,000 元素的矩阵/数组，填充了（伪）随机的标准正态分布的数字。然后我们想要计算所有元素的总和。首先，纯`Python`方法，我们使用`list`推导来实现：
- en: '[PRE25]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[![1](images/1.png)](#co_numerical_computing_with_numpy_CO23-1)'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](images/1.png)](#co_numerical_computing_with_numpy_CO23-1)'
- en: The creation of the matrix via a nested list comprehension.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 通过嵌套的列表推导来创建矩阵。
- en: '[![2](images/2.png)](#co_numerical_computing_with_numpy_CO23-2)'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](images/2.png)](#co_numerical_computing_with_numpy_CO23-2)'
- en: Some selected random numbers from those drawn.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 从所绘制的数字中选择一些随机数。
- en: '[![3](images/3.png)](#co_numerical_computing_with_numpy_CO23-3)'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](images/3.png)](#co_numerical_computing_with_numpy_CO23-3)'
- en: The sums of the single `list` objects are first calculated during a list comprehension;
    then the sum of the sums is taken.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 首先在列表推导中计算单个`list`对象的总和；然后计算总和的总和。
- en: '[![4](images/4.png)](#co_numerical_computing_with_numpy_CO23-4)'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](images/4.png)](#co_numerical_computing_with_numpy_CO23-4)'
- en: Adds up the memory usage of all `list` objects.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 添加所有`list`对象的内存使用量。
- en: 'Let us now turn to `NumPy` and see how the same problem is solved there. For
    convenience, the `NumPy` sublibrary `random` offers a multitude of functions to
    instantiate a `ndarray` object and populate it at the same time with (pseudo)random
    numbers:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们转向`NumPy`，看看同样的问题是如何在那里解决的。为了方便，`NumPy`子库`random`提供了许多函数来实例化一个`ndarray`对象，并同时填充它（伪）随机数：
- en: '[PRE26]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[![1](images/1.png)](#co_numerical_computing_with_numpy_CO24-1)'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](images/1.png)](#co_numerical_computing_with_numpy_CO24-1)'
- en: Creates the `ndarray` object with standard normally distributed random numbers;
    it is faster by a factor of about 20.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 使用标准正态分布的随机数字创建`ndarray`对象；速度约快20倍。
- en: '[![2](images/2.png)](#co_numerical_computing_with_numpy_CO24-2)'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](images/2.png)](#co_numerical_computing_with_numpy_CO24-2)'
- en: Calculates the sum of all values in the `ndarray` object; it is faster by a
    factor of 6.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 计算`ndarray`对象中所有值的总和；速度约快6倍。
- en: '[![3](images/3.png)](#co_numerical_computing_with_numpy_CO24-3)'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](images/3.png)](#co_numerical_computing_with_numpy_CO24-3)'
- en: The `NumPy` approach also saves some memory since the memory overhead of the
    `ndarray` object is tiny compared to the size of the data itself.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: '`NumPy`方法也节省了一些内存，因为`ndarray`对象的内存开销与数据本身的大小相比微不足道。'
- en: 'We observe the following:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 我们观察到以下情况：
- en: Syntax
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 语法
- en: Although we use several approaches to compact the pure `Python` code, the `NumPy`
    version is even more compact and better readable.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
- en: Performance
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
- en: The generation of the `ndarray` object is roughly 20 times faster and the calculation
    of the sum is roughly 6 times faster than the respective operations in pure `Python`.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
- en: Using NumPy Arrays
  id: totrans-317
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The use of `NumPy` for array-based operations and algorithms generally results
    in compact, easily readable code and significant performance improvements over
    pure `Python` code.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
- en: Structured NumPy Arrays
  id: totrans-319
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The specialization of the `ndarray` class obviously brings a number of valuable
    benefits with it. However, a too-narrow specialization might turn out to be too
    large a burden to carry for the majority of array-based algorithms and applications.
    Therefore, `NumPy` provides *structured* or *record* `ndarray` objects that allow
    to have a different `dtype` *per column*. What does “per column” mean? Consider
    the following initialization of a structured array object:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[![1](images/1.png)](#co_numerical_computing_with_numpy_CO25-1)'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
- en: The complex `dtype` is composed.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](images/2.png)](#co_numerical_computing_with_numpy_CO25-3)'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
- en: An alternative syntax to achieve the same result.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](images/3.png)](#co_numerical_computing_with_numpy_CO25-5)'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
- en: The structured `ndarray` is instantiated with two records.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](images/4.png)](#co_numerical_computing_with_numpy_CO25-7)'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
- en: The object type is still `numpy.ndarray`.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
- en: 'In a sense, this construction comes quite close to the operation for initializing
    tables in a `SQL` database. We have column names and column data types, with maybe
    some additional information (e.g., maximum number of characters per `string` object).
    The single columns can now be easily accessed by their names and the rows by their
    index values:'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[![1](images/1.png)](#co_numerical_computing_with_numpy_CO26-1)'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
- en: Selecting a column by name.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](images/2.png)](#co_numerical_computing_with_numpy_CO26-2)'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
- en: Calling a method on a selected column.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](images/3.png)](#co_numerical_computing_with_numpy_CO26-3)'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
- en: Selecting a record.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](images/4.png)](#co_numerical_computing_with_numpy_CO26-4)'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
- en: Selecting a field in a record.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
- en: In summary, structured arrays are a generalization of the regular `numpy.ndarray`
    object types in that the data type only has to be the same *per column*, as one
    is used to in the context of tables in `SQL` databases. One advantage of structured
    arrays is that a single element of a column can be another multidimensional object
    and does not have to conform to the basic `NumPy` data types.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
- en: Structured Arrays
  id: totrans-341
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`NumPy` provides, in addition to regular arrays, structured (record) arrays
    that allow the description and handling of table-like data structures with a variety
    of different data types per (named) column. They bring `SQL` table-like data structures
    to `Python`, with most of the benefits of regular `ndarray` objects (syntax, methods,
    performance).'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
- en: Vectorization of Code
  id: totrans-343
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Vectorization of code is a strategy to get more compact code that is possibly
    executed faster. The fundamental idea is to conduct an operation on or to apply
    a function to a complex object “at once” and not by looping over the single elements
    of the object. In `Python`, functional programming tools such as `map` and `filter`
    provide some basic means for vectorization. However, `NumPy` has vectorization
    built in deep down in its core.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 代码的矢量化是一种获得更紧凑代码并可能更快执行的策略。其基本思想是对复杂对象进行“一次性”操作或应用函数，而不是通过循环遍历对象的单个元素。在`Python`中，函数式编程工具，如`map`和`filter`，提供了一些基本的矢量化手段。然而，`NumPy`在其核心深处内置了矢量化。
- en: Basic Vectorization
  id: totrans-345
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基本矢量化
- en: 'As we learned in the previous section, simple mathematical operations — such
    as calculating the sum over all elements — can be implemented on `ndarray` objects
    directly (via methods or universal functions). More general vectorized operations
    are also possible. For example, we can add two `NumPy` arrays element-wise as
    follows:'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在上一节中学到的，简单的数学运算，如计算所有元素的总和，可以直接在`ndarray`对象上实现（通过方法或通用函数）。还可以进行更一般的矢量化操作。例如，我们可以按元素将两个`NumPy`数组相加如下：
- en: '[PRE29]'
  id: totrans-347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[![1](images/1.png)](#co_numerical_computing_with_numpy_CO27-1)'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](images/1.png)](#co_numerical_computing_with_numpy_CO27-1)'
- en: The first `ndarray` object with random numbers.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 具有随机数的第一个`ndarray`对象。
- en: '[![2](images/2.png)](#co_numerical_computing_with_numpy_CO27-2)'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](images/2.png)](#co_numerical_computing_with_numpy_CO27-2)'
- en: The second `ndarray` object with random numbers.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 具有随机数的第二个`ndarray`对象。
- en: '[![3](images/3.png)](#co_numerical_computing_with_numpy_CO27-5)'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](images/3.png)](#co_numerical_computing_with_numpy_CO27-5)'
- en: Element-wise addition as an vectorized operation (no looping).
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 逐元素加法作为矢量化操作（无循环）。
- en: '`NumPy` also supports what is called *broadcasting*. This allows to combine
    objects of different shape within a single operation. We have already made use
    of this before. Consider the following examples:'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: '`NumPy`还支持所谓的*广播*。这允许在单个操作中组合不同形状的对象。我们之前已经使用过这个功能。考虑以下示例：'
- en: '[PRE30]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[![1](images/1.png)](#co_numerical_computing_with_numpy_CO28-1)'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](images/1.png)](#co_numerical_computing_with_numpy_CO28-1)'
- en: During scalar addition, the scalar is broadcast and added to every element.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 在标量加法期间，标量被广播并添加到每个元素。
- en: '[![2](images/2.png)](#co_numerical_computing_with_numpy_CO28-2)'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](images/2.png)](#co_numerical_computing_with_numpy_CO28-2)'
- en: During scalar multiplication, the scalar is also broadcast to and multiplied
    with every element.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 在标量乘法期间，标量也广播并与每个元素相乘。
- en: '[![3](images/3.png)](#co_numerical_computing_with_numpy_CO28-3)'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](images/3.png)](#co_numerical_computing_with_numpy_CO28-3)'
- en: This linear transformation combines both operations.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 此线性变换结合了两个操作。
- en: 'These operations work with differently shaped `ndarray` objects as well, up
    to a certain point:'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 这些操作也适用于不同形状的`ndarray`对象，直到某个特定点为止：
- en: '[PRE31]'
  id: totrans-363
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[![1](images/1.png)](#co_numerical_computing_with_numpy_CO29-1)'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](images/1.png)](#co_numerical_computing_with_numpy_CO29-1)'
- en: A new one-dimensional `ndarray` object of length 3.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 长度为3的新一维`ndarray`对象。
- en: '[![2](images/2.png)](#co_numerical_computing_with_numpy_CO29-3)'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](images/2.png)](#co_numerical_computing_with_numpy_CO29-3)'
- en: The `r` (matrix) and `s` (vector) objects can be added straightforwardly.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: '`r`（矩阵）和`s`（向量）对象可以直接相加。'
- en: '[![3](images/3.png)](#co_numerical_computing_with_numpy_CO29-4)'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](images/3.png)](#co_numerical_computing_with_numpy_CO29-4)'
- en: Another one-dimensional `ndarray` object of length 4.
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个长度为4的一维`ndarray`对象。
- en: '[![4](images/4.png)](#co_numerical_computing_with_numpy_CO29-6)'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](images/4.png)](#co_numerical_computing_with_numpy_CO29-6)'
- en: The length of the new `s` (vector) object is now different from the length of
    the second dimension of the `r` object.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 新`s`（向量）对象的长度现在与`r`对象的第二维长度不同。
- en: '[![5](images/5.png)](#co_numerical_computing_with_numpy_CO29-7)'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](images/5.png)](#co_numerical_computing_with_numpy_CO29-7)'
- en: Transposing the `r` object again allows for the vectorized addition.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 再次转置`r`对象允许进行矢量化加法。
- en: '[![6](images/6.png)](#co_numerical_computing_with_numpy_CO29-8)'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: '[![6](images/6.png)](#co_numerical_computing_with_numpy_CO29-8)'
- en: Alternatively, the shape of `s` can be changed to `(4, 1)` to make the addition
    work (the results are different, however).
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，`s`的形状可以更改为`(4, 1)`以使加法起作用（但结果不同）。
- en: 'As a general rule, custom-defined `Python` functions work with `numpy.ndarray`s
    as well. If the implementation allows, arrays can be used with functions just
    as `int` or `float` objects can. Consider the following function:'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，自定义的`Python`函数也适用于`numpy.ndarray`。如果实现允许，数组可以像`int`或`float`对象一样与函数一起使用。考虑以下函数：
- en: '[PRE32]'
  id: totrans-377
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[![1](images/1.png)](#co_numerical_computing_with_numpy_CO30-1)'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](images/1.png)](#co_numerical_computing_with_numpy_CO30-1)'
- en: A simple Python function implementing a linear transform on parameter `x`.
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 实现对参数`x`进行线性变换的简单Python函数。
- en: '[![2](images/2.png)](#co_numerical_computing_with_numpy_CO30-2)'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](images/2.png)](#co_numerical_computing_with_numpy_CO30-2)'
- en: The function `f` applied to a Python `float` object.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 函数`f`应用于Python的`float`对象。
- en: '[![3](images/3.png)](#co_numerical_computing_with_numpy_CO30-3)'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](images/3.png)](#co_numerical_computing_with_numpy_CO30-3)'
- en: The same function applied to a `ndarray` object, resulting in a vectorized and
    element-wise evaluation of the function.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 同一函数应用于`ndarray`对象，导致函数的向量化和逐个元素的评估。
- en: What `NumPy` does is to simply apply the function `f` to the object element-wise.
    In that sense, by using this kind of operation we do *not* avoid loops; we only
    avoid them on the `Python` level and delegate the looping to `NumPy`. On the `NumPy`
    level, looping over the `ndarray` object is taken care of by highly optimized
    code, most of it written in `C` and therefore generally much faster than pure
    `Python`. This explains the “secret” behind the performance benefits of using
    `NumPy` for array-based use cases.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: '`NumPy`所做的是简单地将函数`f`逐个元素地应用于对象。在这种意义上，通过使用这种操作，我们并*不*避免循环；我们只是在`Python`级别上避免了它们，并将循环委托给了`NumPy`。在`NumPy`级别上，对`ndarray`对象进行循环处理是由高度优化的代码来完成的，其中大部分代码都是用`C`编写的，因此通常比纯`Python`快得多。这解释了在基于数组的用例中使用`NumPy`带来性能优势的“秘密”。'
- en: Memory Layout
  id: totrans-385
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 内存布局
- en: When we first initialized `numpy.ndarray` objects by using `np.zero`, we provided
    an optional argument for the memory layout. This argument specifies, roughly speaking,
    which elements of an array get stored in memory next to each other (contiguously).
    When working with small arrays, this has hardly any measurable impact on the performance
    of array operations. However, when arrays get large and depending on the (financial)
    algorithm to be implemented on them the story might be different. This is when
    *memory layout* comes into play (see, for instance [Memory Layout of Multi-Dimensional
    Arrays](https://eli.thegreenplace.net/2015/memory-layout-of-multi-dimensional-arrays/).)
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们首次使用`np.zero`初始化`numpy.ndarray`对象时，我们提供了一个可选参数用于内存布局。这个参数大致指定了数组的哪些元素会被连续地存储在内存中。当处理小数组时，这几乎不会对数组操作的性能产生任何可测量的影响。然而，当数组变大并且取决于要在其上实现的（财务）算法时，情况可能会有所不同。这就是*内存布局*发挥作用的时候（参见，例如[多维数组的内存布局](https://eli.thegreenplace.net/2015/memory-layout-of-multi-dimensional-arrays/)）。
- en: 'To illustrate the potential importance of the memory layout of arrays in science
    and finance, consider the following construction of multidimensional `ndarray`
    objects:'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 要说明数组的内存布局在科学和金融中的潜在重要性，考虑以下构建多维`ndarray`对象的情况：
- en: '[PRE33]'
  id: totrans-388
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[![1](images/1.png)](#co_numerical_computing_with_numpy_CO31-1)'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](images/1.png)](#co_numerical_computing_with_numpy_CO31-1)'
- en: A `ndarray` object with large asymmetry in the two dimensions.
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 一个在两个维度上具有较大不对称性的`ndarray`对象。
- en: '[![2](images/2.png)](#co_numerical_computing_with_numpy_CO31-2)'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](images/2.png)](#co_numerical_computing_with_numpy_CO31-2)'
- en: A linear transform of the original object data.
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 对原始对象数据进行线性变换。
- en: '[![3](images/3.png)](#co_numerical_computing_with_numpy_CO31-3)'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](images/3.png)](#co_numerical_computing_with_numpy_CO31-3)'
- en: This creates a two-dimensional `ndarray` object with `C` order (row-major).
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个二维`ndarray`对象，其顺序为`C`（行优先）。
- en: '[![4](images/4.png)](#co_numerical_computing_with_numpy_CO31-4)'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](images/4.png)](#co_numerical_computing_with_numpy_CO31-4)'
- en: This creates a two-dimensional `ndarray` object with `F` order (column-major).
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个二维`ndarray`对象，其顺序为`F`（列优先）。
- en: '[![5](images/5.png)](#co_numerical_computing_with_numpy_CO31-5)'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](images/5.png)](#co_numerical_computing_with_numpy_CO31-5)'
- en: Memory is freed up (contingent on garbage collection).
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 内存被释放（取决于垃圾收集）。
- en: '[![6](images/6.png)](#co_numerical_computing_with_numpy_CO31-6)'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: '[![6](images/6.png)](#co_numerical_computing_with_numpy_CO31-6)'
- en: Some numbers from the `C` object.
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 从`C`对象中获取一些数字。
- en: 'Let’s look at some really fundamental examples and use cases for both types
    of `ndarray` objects and consider the speed with which they are executed given
    the different memory layouts:'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一些关于两种类型的`ndarray`对象的基本示例和用例，并考虑它们在不同内存布局下执行的速度：
- en: '[PRE34]'
  id: totrans-402
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[![1](images/1.png)](#co_numerical_computing_with_numpy_CO32-1)'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](images/1.png)](#co_numerical_computing_with_numpy_CO32-1)'
- en: Calculates the sum over all elements.
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 计算所有元素的总和。
- en: '[![2](images/2.png)](#co_numerical_computing_with_numpy_CO32-3)'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](images/2.png)](#co_numerical_computing_with_numpy_CO32-3)'
- en: Calculates the sums per row (“many”).
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 每行计算和（“许多”）。
- en: '[![3](images/3.png)](#co_numerical_computing_with_numpy_CO32-4)'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](images/3.png)](#co_numerical_computing_with_numpy_CO32-4)'
- en: Calculates the sums per columns (“few”).
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 计算每列的总和（“少”）。
- en: 'We can summarize the performance results as follows:'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以总结性能结果如下：
- en: When calculating the sum over *all elements*, the memory layout does not really
    matter.
  id: totrans-410
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当计算*所有元素*的总和时，内存布局实际上并不重要。
- en: The summing up over the `C`-ordered `ndarray` objects is faster both over rows
    as well as columns (*absolute* speed advantage).
  id: totrans-411
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对 `C`-ordered `ndarray` 对象的求和在行和列上都更快（*绝对*速度优势）。
- en: With the `C`-ordered (row-major) `ndarray` object, summing up over rows is *relatively*
    faster compared to summing up over columns.
  id: totrans-412
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `C`-ordered（行优先）`ndarray` 对象，对行求和*相对*比对列求和更快。
- en: With the `F`-ordered (column-major) `ndarray` object, summing up over columns
    is *relatively* faster compared to summing up over rows.
  id: totrans-413
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `F`-ordered（列优先）`ndarray` 对象，对列求和*相对*比对行求和更快。
- en: Conclusions
  id: totrans-414
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: '`NumPy` is the package of choice for numerical computing in Python. The `ndarray`
    class is a class specifically designed to be convenient and efficient in the handling
    of (large) numerical data. Powerful methods and `NumPy`’s universal functions
    allow for vectorized code the mostly avoids slow loops on the Python level. Many
    approaches introduced in this chapter carry over to `pandas` and its `DataFrame`
    class as well (see [Chapter 5](ch05.html#pandas))'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: '`NumPy` 是 Python 中数值计算的首选包。`ndarray` 类是专门设计用于处理（大）数值数据的高效方便的类。强大的方法和 `NumPy`
    的通用函数允许进行向量化的代码，大部分避免了在 Python 层上的慢循环。本章介绍的许多方法也适用于 `pandas` 及其 `DataFrame` 类（见
    [第5章](ch05.html#pandas)）'
- en: Further Resources
  id: totrans-416
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更多资源
- en: 'Helpful resources are provided under:'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 有用的资源提供在：
- en: '[*http://www.numpy.org/*](http://www.numpy.org/)'
  id: totrans-418
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*http://www.numpy.org/*](http://www.numpy.org/)'
- en: 'Excellent introductions to `NumPy` in book form are:'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 优秀的 `NumPy` 介绍书籍包括：
- en: 'McKinney, Wes (2017): *Python for Data Analysis*. 2nd ed., O’Reilly, Beijing
    et al.'
  id: totrans-420
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: McKinney, Wes（2017）：*Python 数据分析*。第2版，O’Reilly，北京等。
- en: 'VanderPlas, Jake (2016): *Python Data Science Handbook*. O’Reilly, Beijing
    et al.'
  id: totrans-421
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: VanderPlas, Jake（2016）：*Python 数据科学手册*。O’Reilly，北京等。

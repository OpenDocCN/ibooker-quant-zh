["```py\nIn [1]: fn = '../data/AAPL.csv'  ![1](assets/1.png)\n\nIn [2]: with open(fn, 'r') as f:  ![1](assets/1.png)\n            for _ in range(5):  ![2](assets/2.png)\n                print(f.readline(), end='')  ![3](assets/3.png)\n        Date,HIGH,CLOSE,LOW,OPEN,COUNT,VOLUME\n        2020-04-01,248.72,240.91,239.13,246.5,460606.0,44054638.0\n        2020-04-02,245.15,244.93,236.9,240.34,380294.0,41483493.0\n        2020-04-03,245.7,241.41,238.9741,242.8,293699.0,32470017.0\n        2020-04-06,263.11,262.47,249.38,250.9,486681.0,50455071.0\n```", "```py\nIn [3]: import csv  ![1](assets/1.png)\n\nIn [4]: csv_reader = csv.reader(open(fn, 'r'))  ![2](assets/2.png)\n\nIn [5]: data = list(csv_reader)  ![3](assets/3.png)\n\nIn [6]: data[:5]  ![4](assets/4.png)\nOut[6]: [['Date', 'HIGH', 'CLOSE', 'LOW', 'OPEN', 'COUNT', 'VOLUME'],\n         ['2020-04-01',\n          '248.72',\n          '240.91',\n          '239.13',\n          '246.5',\n          '460606.0',\n          '44054638.0'],\n         ['2020-04-02',\n          '245.15',\n          '244.93',\n          '236.9',\n          '240.34',\n          '380294.0',\n          '41483493.0'],\n         ['2020-04-03',\n          '245.7',\n          '241.41',\n          '238.9741',\n          '242.8',\n          '293699.0',\n          '32470017.0'],\n         ['2020-04-06',\n          '263.11',\n          '262.47',\n          '249.38',\n          '250.9',\n          '486681.0',\n          '50455071.0']]\n```", "```py\nIn [7]: csv_reader = csv.DictReader(open(fn, 'r'))  ![1](assets/1.png)\n\nIn [8]: data = list(csv_reader)\n\nIn [9]: data[:3]\nOut[9]: [{'Date': '2020-04-01',\n          'HIGH': '248.72',\n          'CLOSE': '240.91',\n          'LOW': '239.13',\n          'OPEN': '246.5',\n          'COUNT': '460606.0',\n          'VOLUME': '44054638.0'},\n         {'Date': '2020-04-02',\n          'HIGH': '245.15',\n          'CLOSE': '244.93',\n          'LOW': '236.9',\n          'OPEN': '240.34',\n          'COUNT': '380294.0',\n          'VOLUME': '41483493.0'},\n         {'Date': '2020-04-03',\n          'HIGH': '245.7',\n          'CLOSE': '241.41',\n          'LOW': '238.9741',\n          'OPEN': '242.8',\n          'COUNT': '293699.0',\n          'VOLUME': '32470017.0'}]\n```", "```py\nIn [10]: sum([float(l['CLOSE']) for l in data]) / len(data)  ![1](assets/1.png)\nOut[10]: 272.38619047619045\n```", "```py\nIn [11]: import pandas as pd  ![1](assets/1.png)\n\nIn [12]: data = pd.read_csv(fn, index_col=0,\n                            parse_dates=True)  ![2](assets/2.png)\n\nIn [13]: data.info()  ![3](assets/3.png)\n         <class 'pandas.core.frame.DataFrame'>\n         DatetimeIndex: 21 entries, 2020-04-01 to 2020-04-30\n         Data columns (total 6 columns):\n          #   Column  Non-Null Count  Dtype\n         ---  ------  --------------  -----\n          0   HIGH    21 non-null     float64\n          1   CLOSE   21 non-null     float64\n          2   LOW     21 non-null     float64\n          3   OPEN    21 non-null     float64\n          4   COUNT   21 non-null     float64\n          5   VOLUME  21 non-null     float64\n         dtypes: float64(6)\n         memory usage: 1.1 KB\n\nIn [14]: data.tail()  ![4](assets/4.png)\nOut[14]:               HIGH   CLOSE     LOW    OPEN     COUNT      VOLUME\n         Date\n         2020-04-24  283.01  282.97  277.00  277.20  306176.0  31627183.0\n         2020-04-27  284.54  283.17  279.95  281.80  300771.0  29271893.0\n         2020-04-28  285.83  278.58  278.20  285.08  285384.0  28001187.0\n         2020-04-29  289.67  287.73  283.89  284.73  324890.0  34320204.0\n         2020-04-30  294.53  293.80  288.35  289.96  471129.0  45765968.0\n```", "```py\nIn [15]: data['CLOSE'].mean()\nOut[15]: 272.38619047619056\n```", "```py\nIn [16]: data.to_excel('data/aapl.xls', 'AAPL')  ![1](assets/1.png)\n\nIn [17]: data.to_json('data/aapl.json')  ![2](assets/2.png)\n\nIn [18]: ls -n data/\n         total 24\n         -rw-r--r--  1 501  20  3067 Aug 25 11:47 aapl.json\n         -rw-r--r--  1 501  20  5632 Aug 25 11:47 aapl.xls\n```", "```py\nIn [19]: data_copy_1 = pd.read_excel('data/aapl.xls', 'AAPL',\n                                     index_col=0)  ![1](assets/1.png)\n\nIn [20]: data_copy_1.head()  ![2](assets/2.png)\nOut[20]:               HIGH   CLOSE       LOW    OPEN   COUNT    VOLUME\n         Date\n         2020-04-01  248.72  240.91  239.1300  246.50  460606  44054638\n         2020-04-02  245.15  244.93  236.9000  240.34  380294  41483493\n         2020-04-03  245.70  241.41  238.9741  242.80  293699  32470017\n         2020-04-06  263.11  262.47  249.3800  250.90  486681  50455071\n         2020-04-07  271.70  259.43  259.0000  270.80  467375  50721831\n\nIn [21]: data_copy_2 = pd.read_json('data/aapl.json')  ![3](assets/3.png)\n\nIn [22]: data_copy_2.head()  ![4](assets/4.png)\nOut[22]:               HIGH   CLOSE       LOW    OPEN   COUNT    VOLUME\n         2020-04-01  248.72  240.91  239.1300  246.50  460606  44054638\n         2020-04-02  245.15  244.93  236.9000  240.34  380294  41483493\n         2020-04-03  245.70  241.41  238.9741  242.80  293699  32470017\n         2020-04-06  263.11  262.47  249.3800  250.90  486681  50455071\n         2020-04-07  271.70  259.43  259.0000  270.80  467375  50721831\n\nIn [23]: !rm data/*\n```", "```py\nIn [24]: import configparser\n         config = configparser.ConfigParser()\n         config.read('../pyalgo.cfg')\nOut[24]: ['../pyalgo.cfg']\n\nIn [25]: import quandl as q  ![1](assets/1.png)\n\nIn [26]: data = q.get('BCHAIN/MKPRU', api_key=config['quandl']['api_key'])  ![2](assets/2.png)\n\nIn [27]: data.info()\n         <class 'pandas.core.frame.DataFrame'>\n         DatetimeIndex: 4254 entries, 2009-01-03 to 2020-08-26\n         Data columns (total 1 columns):\n          #   Column  Non-Null Count  Dtype\n         ---  ------  --------------  -----\n          0   Value   4254 non-null   float64\n         dtypes: float64(1)\n         memory usage: 66.5 KB\n\nIn [28]: data['Value'].resample('A').last()  ![3](assets/3.png)\nOut[28]: Date\n         2009-12-31        0.000000\n         2010-12-31        0.299999\n         2011-12-31        4.995000\n         2012-12-31       13.590000\n         2013-12-31      731.000000\n         2014-12-31      317.400000\n         2015-12-31      428.000000\n         2016-12-31      952.150000\n         2017-12-31    13215.574000\n         2018-12-31     3832.921667\n         2019-12-31     7385.360000\n         2020-12-31    11763.930000\n         Freq: A-DEC, Name: Value, dtype: float64\n```", "```py\nIn [29]: data = q.get('FSE/SAP_X', start_date='2018-1-1',\n                      end_date='2020-05-01',\n                      api_key=config['quandl']['api_key'])\n\nIn [30]: data.info()\n         <class 'pandas.core.frame.DataFrame'>\n         DatetimeIndex: 579 entries, 2018-01-02 to 2020-04-30\n         Data columns (total 10 columns):\n          #   Column                 Non-Null Count  Dtype\n         ---  ------                 --------------  -----\n          0   Open                   257 non-null    float64\n          1   High                   579 non-null    float64\n          2   Low                    579 non-null    float64\n          3   Close                  579 non-null    float64\n          4   Change                 0 non-null      object\n          5   Traded Volume          533 non-null    float64\n          6   Turnover               533 non-null    float64\n          7   Last Price of the Day  0 non-null      object\n          8   Daily Traded Units     0 non-null      object\n          9   Daily Turnover         0 non-null      object\n         dtypes: float64(6), object(4)\n         memory usage: 49.8+ KB\n```", "```py\nq.ApiConfig.api_key = 'YOUR_API_KEY'\n```", "```py\nIn [31]: q.ApiConfig.api_key = config['quandl']['api_key']\n\nIn [32]: vol = q.get('VOL/MSFT')\n\nIn [33]: vol.iloc[:, :10].info()\n         <class 'pandas.core.frame.DataFrame'>\n         DatetimeIndex: 1006 entries, 2015-01-02 to 2018-12-31\n         Data columns (total 10 columns):\n          #   Column  Non-Null Count  Dtype\n         ---  ------  --------------  -----\n          0   Hv10    1006 non-null   float64\n          1   Hv20    1006 non-null   float64\n          2   Hv30    1006 non-null   float64\n          3   Hv60    1006 non-null   float64\n          4   Hv90    1006 non-null   float64\n          5   Hv120   1006 non-null   float64\n          6   Hv150   1006 non-null   float64\n          7   Hv180   1006 non-null   float64\n          8   Phv10   1006 non-null   float64\n          9   Phv20   1006 non-null   float64\n         dtypes: float64(10)\n         memory usage: 86.5 KB\n\nIn [34]: vol[['IvMean30', 'IvMean60', 'IvMean90']].tail()\nOut[34]:             IvMean30  IvMean60  IvMean90\n         Date\n         2018-12-24    0.4310    0.4112    0.3829\n         2018-12-26    0.4059    0.3844    0.3587\n         2018-12-27    0.3918    0.3879    0.3618\n         2018-12-28    0.3940    0.3736    0.3482\n         2018-12-31    0.3760    0.3519    0.3310\n```", "```py\nIn [35]: import eikon as ek  ![1](assets/1.png)\n\nIn [36]: ek.set_app_key(config['eikon']['app_key'])  ![2](assets/2.png)\n\nIn [37]: help(ek)  ![3](assets/3.png)\n         Help on package eikon:\n\n         NAME\n           eikon - # coding: utf-8\n\n         PACKAGE CONTENTS\n           Profile\n           data_grid\n           eikonError\n           json_requests\n           news_request\n           streaming_session (package)\n           symbology\n           time_series\n           tools\n\n         SUBMODULES\n           cache\n           desktop_session\n           istream_callback\n           itemstream\n           session\n           stream\n           stream_connection\n           streamingprice\n           streamingprice_callback\n           streamingprices\n\n         VERSION\n           1.1.5\n\n         FILE\n\n            /Users/yves/Python/envs/py38/lib/python3.8/site-packages/eikon/__init__\n         .py\n```", "```py\nIn [39]: symbols = ['AAPL.O', 'MSFT.O', 'GOOG.O']  ![1](assets/1.png)\n\nIn [40]: data = ek.get_timeseries(symbols,  ![2](assets/2.png)\n                                  start_date='2020-01-01',  ![3](assets/3.png)\n                                  end_date='2020-05-01',  ![4](assets/4.png)\n                                  interval='daily',  ![5](assets/5.png)\n                                  fields=['*'])  ![6](assets/6.png)\n\nIn [41]: data.keys()  ![7](assets/7.png)\nOut[41]: MultiIndex([('AAPL.O',   'HIGH'),\n                     ('AAPL.O',  'CLOSE'),\n                     ('AAPL.O',    'LOW'),\n                     ('AAPL.O',   'OPEN'),\n                     ('AAPL.O',  'COUNT'),\n                     ('AAPL.O', 'VOLUME'),\n                     ('MSFT.O',   'HIGH'),\n                     ('MSFT.O',  'CLOSE'),\n                     ('MSFT.O',    'LOW'),\n                     ('MSFT.O',   'OPEN'),\n                     ('MSFT.O',  'COUNT'),\n                     ('MSFT.O', 'VOLUME'),\n                     ('GOOG.O',   'HIGH'),\n                     ('GOOG.O',  'CLOSE'),\n                     ('GOOG.O',    'LOW'),\n                     ('GOOG.O',   'OPEN'),\n                     ('GOOG.O',  'COUNT'),\n                     ('GOOG.O', 'VOLUME')],\n                    )\n\nIn [42]: type(data['AAPL.O'])  ![8](assets/8.png)\nOut[42]: pandas.core.frame.DataFrame\n\nIn [43]: data['AAPL.O'].info()  ![9](assets/9.png)\n         <class 'pandas.core.frame.DataFrame'>\n         DatetimeIndex: 84 entries, 2020-01-02 to 2020-05-01\n         Data columns (total 6 columns):\n          #   Column  Non-Null Count  Dtype\n         ---  ------  --------------  -----\n          0   HIGH    84 non-null     float64\n          1   CLOSE   84 non-null     float64\n          2   LOW     84 non-null     float64\n          3   OPEN    84 non-null     float64\n          4   COUNT   84 non-null     Int64\n          5   VOLUME  84 non-null     Int64\n         dtypes: Int64(2), float64(4)\n         memory usage: 4.8 KB\n\nIn [44]: data['AAPL.O'].tail()  ![10](assets/10.png)\nOut[44]:               HIGH   CLOSE     LOW    OPEN   COUNT    VOLUME\n         Date\n         2020-04-27  284.54  283.17  279.95  281.80  300771  29271893\n         2020-04-28  285.83  278.58  278.20  285.08  285384  28001187\n         2020-04-29  289.67  287.73  283.89  284.73  324890  34320204\n         2020-04-30  294.53  293.80  288.35  289.96  471129  45765968\n         2020-05-01  299.00  289.07  285.85  286.25  558319  60154175\n```", "```py\nIn [45]: %%time\n         data = ek.get_timeseries(symbols,  ![1](assets/1.png)\n                                  start_date='2020-08-14',  ![2](assets/2.png)\n                                  end_date='2020-08-15',  ![3](assets/3.png)\n                                  interval='minute',  ![4](assets/4.png)\n                                  fields='*')\n         CPU times: user 58.2 ms, sys: 3.16 ms, total: 61.4 ms\n         Wall time: 2.02 s\n\nIn [46]: print(data['GOOG.O'].loc['2020-08-14 16:00:00':\n                                  '2020-08-14 16:04:00'])  ![5](assets/5.png)\n\n                               HIGH       LOW      OPEN     CLOSE   COUNT VOLUME\n     Date\n\n     2020-08-14 16:00:00  1510.7439  1509.220  1509.940  1510.5239     48   1362\n     2020-08-14 16:01:00  1511.2900  1509.980  1510.500  1511.2900     52   1002\n     2020-08-14 16:02:00  1513.0000  1510.964  1510.964  1512.8600     72   1762\n     2020-08-14 16:03:00  1513.6499  1512.160  1512.990  1513.2300    108   4534\n     2020-08-14 16:04:00  1513.6500  1511.540  1513.418  1512.7100     40   1364\n\nIn [47]: for sym in symbols:\n             print('\\n' + sym + '\\n', data[sym].iloc[-300:-295])  ![6](assets/6.png)\n\n       AAPL.O\n                                HIGH       LOW      OPEN    CLOSE  COUNT  VOLUME\n       Date\n       2020-08-14 19:01:00  457.1699  456.6300    457.14   456.83   1457  104693\n       2020-08-14 19:02:00  456.9399  456.4255    456.81   456.45   1178   79740\n       2020-08-14 19:03:00  456.8199  456.4402    456.45   456.67    908   68517\n       2020-08-14 19:04:00  456.9800  456.6100    456.67   456.97    665   53649\n       2020-08-14 19:05:00  457.1900  456.9300    456.98   457.00    679   49636\n\n       MSFT.O\n                                HIGH       LOW      OPEN     CLOSE  COUNT VOLUME\n       Date\n\n       2020-08-14 19:01:00  208.6300  208.5083  208.5500  208.5674    333  21368\n       2020-08-14 19:02:00  208.5750  208.3550  208.5501  208.3600    513  37270\n       2020-08-14 19:03:00  208.4923  208.3000  208.3600  208.4000    303  23903\n       2020-08-14 19:04:00  208.4200  208.3301  208.3901  208.4099    222  15861\n       2020-08-14 19:05:00  208.4699  208.3600  208.3920  208.4069    235   9569\n\n       GOOG.O\n                                HIGH       LOW       OPEN   CLOSE   COUNT VOLUME\n       Date\n\n       2020-08-14 19:01:00  1510.42  1509.3288  1509.5100  1509.8550   47   1577\n       2020-08-14 19:02:00  1510.30  1508.8000  1509.7559  1508.8647   71   2950\n       2020-08-14 19:03:00  1510.21  1508.7200  1508.7200  1509.8100   33    603\n       2020-08-14 19:04:00  1510.21  1508.7200  1509.8800  1509.8299   41    934\n       2020-08-14 19:05:00  1510.21  1508.7300  1509.5500  1509.6600   30    445\n```", "```py\nIn [48]: %%time\n         data = ek.get_timeseries(symbols[0],\n                                  start_date='2020-08-14 15:00:00',  ![1](assets/1.png)\n                                  end_date='2020-08-14 15:30:00',  ![2](assets/2.png)\n                                  interval='tick',  ![3](assets/3.png)\n                                  fields=['*'])\n         CPU times: user 257 ms, sys: 17.3 ms, total: 274 ms\n         Wall time: 2.31 s\n\nIn [49]: data.info()  ![4](assets/4.png)\n         <class 'pandas.core.frame.DataFrame'>\n         DatetimeIndex: 47346 entries, 2020-08-14 15:00:00.019000 to 2020-08-14\n          15:29:59.987000\n         Data columns (total 2 columns):\n          #   Column  Non-Null Count  Dtype\n         ---  ------  --------------  -----\n          0   VALUE   47311 non-null  float64\n          1   VOLUME  47346 non-null  Int64\n         dtypes: Int64(1), float64(1)\n         memory usage: 1.1 MB\n\nIn [50]: data.head()  ![5](assets/5.png)\nOut[50]:                             VALUE  VOLUME\n         Date\n         2020-08-14 15:00:00.019  453.2499      60\n         2020-08-14 15:00:00.036  453.2294       3\n         2020-08-14 15:00:00.146  453.2100       5\n         2020-08-14 15:00:00.146  453.2100     100\n         2020-08-14 15:00:00.236  453.2100       2\n\nIn [51]: resampled = data.resample('30s', label='right').agg(\n                     {'VALUE': 'last', 'VOLUME': 'sum'}) ![6](assets/6.png)\n\nIn [52]: resampled.tail()  ![7](assets/7.png)\nOut[52]:                         VALUE  VOLUME\n         Date\n         2020-08-14 15:28:00  453.9000   29746\n         2020-08-14 15:28:30  454.2869   86441\n         2020-08-14 15:29:00  454.3900   49513\n         2020-08-14 15:29:30  454.7550   98520\n         2020-08-14 15:30:00  454.6200   55592\n```", "```py\nIn [53]: headlines = ek.get_news_headlines(query='R:AAPL.O macbook',  ![1](assets/1.png)\n                                           count=5,  ![2](assets/2.png)\n                                           date_from='2020-4-1',  ![3](assets/3.png)\n                                           date_to='2020-5-1')  ![4](assets/4.png)\n\nIn [54]: headlines  ![5](assets/5.png)\nOut[54]:                                           versionCreated  \\\n         2020-04-20 21:33:37.332 2020-04-20 21:33:37.332000+00:00\n         2020-04-20 10:20:23.201 2020-04-20 10:20:23.201000+00:00\n         2020-04-20 02:32:27.721 2020-04-20 02:32:27.721000+00:00\n         2020-04-15 12:06:58.693 2020-04-15 12:06:58.693000+00:00\n         2020-04-09 21:34:08.671 2020-04-09 21:34:08.671000+00:00\n\n                                                                             text  \\\n         2020-04-20 21:33:37.332  Apple said to launch new AirPods, MacBook Pro ...\n         2020-04-20 10:20:23.201  Apple might launch upgraded AirPods, 13-inch M...\n         2020-04-20 02:32:27.721  Apple to reportedly launch new AirPods alongsi...\n         2020-04-15 12:06:58.693  Apple files a patent for iPhones, MacBook indu...\n         2020-04-09 21:34:08.671  Apple rolls out new software update for MacBoo...\n\n                                                                       storyId  \\\n         2020-04-20 21:33:37.332  urn:newsml:reuters.com:20200420:nNRAble9rq:1\n         2020-04-20 10:20:23.201  urn:newsml:reuters.com:20200420:nNRAbl8eob:1\n         2020-04-20 02:32:27.721  urn:newsml:reuters.com:20200420:nNRAbl4mfz:1\n         2020-04-15 12:06:58.693  urn:newsml:reuters.com:20200415:nNRAbjvsix:1\n         2020-04-09 21:34:08.671  urn:newsml:reuters.com:20200409:nNRAbi2nbb:1\n\n                                 sourceCode\n         2020-04-20 21:33:37.332  NS:TIMIND\n         2020-04-20 10:20:23.201  NS:BUSSTA\n         2020-04-20 02:32:27.721  NS:HINDUT\n         2020-04-15 12:06:58.693  NS:HINDUT\n         2020-04-09 21:34:08.671  NS:TIMIND\n\nIn [55]: story = headlines.iloc[0]  ![6](assets/6.png)\n\nIn [56]: story  ![7](assets/7.png)\nOut[56]: versionCreated                     2020-04-20 21:33:37.332000+00:00\n         text              Apple said to launch new AirPods, MacBook Pro ...\n         storyId                urn:newsml:reuters.com:20200420:nNRAble9rq:1\n         sourceCode                                                NS:TIMIND\n         Name: 2020-04-20 21:33:37.332000, dtype: object\n\nIn [57]: news_text = ek.get_news_story(story['storyId'])  ![8](assets/8.png)\n\nIn [58]: from IPython.display import HTML  ![9](assets/9.png)\n\nIn [59]: HTML(news_text)  ![10](assets/10.png)\nOut[59]: <IPython.core.display.HTML object>\n```", "```py\nNEW DELHI: Apple recently launched its much-awaited affordable smartphone\niPhone SE. Now it seems that the company is gearing up for another launch.\nApple is said to launch the next generation of AirPods and the all-new\n13-inch MacBook Pro next month.\n\nIn February an online report revealed that the Cupertino-based tech giant\nis working on AirPods Pro Lite. Now a tweet by tipster Job Posser has\nrevealed that Apple will soon come up with new AirPods and MacBook Pro.\nJon Posser tweeted, \"New AirPods (which were supposed to be at the\nMarch Event) is now ready to go.\n\nProbably alongside the MacBook Pro next month.\" However, not many details\nabout the upcoming products are available right now. The company was\nsupposed to launch these products at the March event along with the iPhone SE.\n\nBut due to the ongoing pandemic coronavirus, the event got cancelled.\nIt is expected that Apple will launch the AirPods Pro Lite and the 13-inch\nMacBook Pro just like the way it launched the iPhone SE. Meanwhile,\nApple has scheduled its annual developer conference WWDC to take place in June.\n\nThis year the company has decided to hold an online-only event due to\nthe outbreak of coronavirus. Reports suggest that this year the company\nis planning to launch the all-new AirTags and a premium pair of over-ear\nBluetooth headphones at the event. Using the Apple AirTags, users will\nbe able to locate real-world items such as keys or suitcase in the Find My app.\n\nThe AirTags will also have offline finding capabilities that the company\nintroduced in the core of iOS 13\\. Apart from this, Apple is also said to\nunveil its high-end Bluetooth headphones. It is expected that the Bluetooth\nheadphones will offer better sound quality and battery backup as compared\nto the AirPods.\n\nFor Reprint Rights: timescontent.com\n\nCopyright (c) 2020 BENNETT, COLEMAN & CO.LTD.\n```", "```py\nIn [60]: from sample_data import generate_sample_data  ![1](assets/1.png)\n\nIn [61]: print(generate_sample_data(rows=5, cols=4))  ![2](assets/2.png)\n                                     No0         No1         No2         No3\n         2021-01-01 00:00:00  100.000000  100.000000  100.000000  100.000000\n         2021-01-01 00:01:00  100.019641   99.950661  100.052993   99.913841\n         2021-01-01 00:02:00   99.998164   99.796667  100.109971   99.955398\n         2021-01-01 00:03:00  100.051537   99.660550  100.136336  100.024150\n         2021-01-01 00:04:00   99.984614   99.729158  100.210888   99.976584\n```", "```py\nIn [62]: %time data = generate_sample_data(rows=5e6, cols=10).round(4)  ![1](assets/1.png)\n         CPU times: user 3.88 s, sys: 830 ms, total: 4.71 s\n         Wall time: 4.72 s\n\nIn [63]: data.info()\n         <class 'pandas.core.frame.DataFrame'>\n         DatetimeIndex: 5000000 entries, 2021-01-01 00:00:00 to 2030-07-05\n          05:19:00\n         Freq: T\n         Data columns (total 10 columns):\n          #   Column  Dtype\n         ---  ------  -----\n          0   No0     float64\n          1   No1     float64\n          2   No2     float64\n          3   No3     float64\n          4   No4     float64\n          5   No5     float64\n          6   No6     float64\n          7   No7     float64\n          8   No8     float64\n          9   No9     float64\n         dtypes: float64(10)\n         memory usage: 419.6 MB\n```", "```py\nIn [64]: h5 = pd.HDFStore('data/data.h5', 'w')  ![1](assets/1.png)\n\nIn [65]: %time h5['data'] = data  ![2](assets/2.png)\n         CPU times: user 356 ms, sys: 472 ms, total: 828 ms\n         Wall time: 1.08 s\n\nIn [66]: h5  ![3](assets/3.png)\nOut[66]: <class 'pandas.io.pytables.HDFStore'>\n         File path: data/data.h5\n\nIn [67]: ls -n data/data.*\n         -rw-r--r--@ 1 501  20  440007240 Aug 25 11:48 data/data.h5\n\nIn [68]: h5.close()  ![4](assets/4.png)\n```", "```py\nIn [69]: h5 = pd.HDFStore('data/data.h5', 'r')  ![1](assets/1.png)\n\nIn [70]: %time data_copy = h5['data']  ![2](assets/2.png)\n         CPU times: user 388 ms, sys: 425 ms, total: 813 ms\n         Wall time: 812 ms\n\nIn [71]: data_copy.info()\n         <class 'pandas.core.frame.DataFrame'>\n         DatetimeIndex: 5000000 entries, 2021-01-01 00:00:00 to 2030-07-05\n          05:19:00\n         Freq: T\n         Data columns (total 10 columns):\n          #   Column  Dtype\n         ---  ------  -----\n          0   No0     float64\n          1   No1     float64\n          2   No2     float64\n          3   No3     float64\n          4   No4     float64\n          5   No5     float64\n          6   No6     float64\n          7   No7     float64\n          8   No8     float64\n          9   No9     float64\n         dtypes: float64(10)\n         memory usage: 419.6 MB\n\nIn [72]: h5.close()\n\nIn [73]: rm data/data.h5\n```", "```py\nIn [74]: %time data.to_hdf('data/data.h5', 'data', format='table')  ![1](assets/1.png)\n         CPU times: user 3.25 s, sys: 491 ms, total: 3.74 s\n         Wall time: 3.8 s\n\nIn [75]: ls -n data/data.*\n         -rw-r--r--@ 1 501  20  446911563 Aug 25 11:48 data/data.h5\n\nIn [76]: %time data_copy = pd.read_hdf('data/data.h5', 'data')  ![2](assets/2.png)\n         CPU times: user 236 ms, sys: 266 ms, total: 502 ms\n         Wall time: 503 ms\n\nIn [77]: data_copy.info()\n         <class 'pandas.core.frame.DataFrame'>\n         DatetimeIndex: 5000000 entries, 2021-01-01 00:00:00 to 2030-07-05\n          05:19:00\n         Freq: T\n         Data columns (total 10 columns):\n          #   Column  Dtype\n         ---  ------  -----\n          0   No0     float64\n          1   No1     float64\n          2   No2     float64\n          3   No3     float64\n          4   No4     float64\n          5   No5     float64\n          6   No6     float64\n          7   No7     float64\n          8   No8     float64\n          9   No9     float64\n         dtypes: float64(10)\n         memory usage: 419.6 MB\n```", "```py\nIn [78]: import tables as tb  ![1](assets/1.png)\n\nIn [79]: h5 = tb.open_file('data/data.h5', 'r')  ![2](assets/2.png)\n\nIn [80]: h5  ![3](assets/3.png)\nOut[80]: File(filename=data/data.h5, title='', mode='r', root_uep='/',\n          filters=Filters(complevel=0, shuffle=False, bitshuffle=False,\n          fletcher32=False, least_significant_digit=None))\n         / (RootGroup) ''\n         /data (Group) ''\n         /data/table (Table(5000000,)) ''\n           description := {\n           \"index\": Int64Col(shape=(), dflt=0, pos=0),\n           \"values_block_0\": Float64Col(shape=(10,), dflt=0.0, pos=1)}\n           byteorder := 'little'\n           chunkshape := (2978,)\n           autoindex := True\n           colindexes := {\n             \"index\": Index(6, medium, shuffle, zlib(1)).is_csi=False}\n\nIn [81]: h5.root.data.table[:3]  ![4](assets/4.png)\nOut[81]: array([(1609459200000000000, [100.    , 100.    , 100.    , 100.    ,\n          100.    , 100.    , 100.    , 100.    , 100.    , 100.    ]),\n         (1609459260000000000, [100.0752, 100.1164, 100.0224, 100.0073,\n          100.1142, 100.0474,  99.9329, 100.0254, 100.1009, 100.066 ]),\n         (1609459320000000000, [100.1593, 100.1721, 100.0519, 100.0933,\n          100.1578, 100.0301,  99.92  , 100.0965, 100.1441, 100.0717])],\n               dtype=[('index', '<i8'), ('values_block_0', '<f8', (10,))])\n\nIn [82]: h5.close()  ![5](assets/5.png)\n\nIn [83]: rm data/data.h5\n```", "```py\nIn [84]: %%time\n         data = generate_sample_data(rows=2.5e6, cols=5,\n                                     freq='1s').round(4)  ![1](assets/1.png)\n         CPU times: user 915 ms, sys: 191 ms, total: 1.11 s\n         Wall time: 1.14 s\n\nIn [85]: data.info()\n         <class 'pandas.core.frame.DataFrame'>\n         DatetimeIndex: 2500000 entries, 2021-01-01 00:00:00 to 2021-01-29\n          22:26:39\n         Freq: S\n         Data columns (total 5 columns):\n          #   Column  Dtype\n         ---  ------  -----\n          0   No0     float64\n          1   No1     float64\n          2   No2     float64\n          3   No3     float64\n          4   No4     float64\n         dtypes: float64(5)\n         memory usage: 114.4 MB\n```", "```py\npip install git+https://github.com/yhilpisch/tstables.git\n```", "```py\nIn [86]: import tstables  ![1](assets/1.png)\n\nIn [87]: import tables as tb  ![2](assets/2.png)\n\nIn [88]: class desc(tb.IsDescription):\n             ''' Description of TsTables table structure.\n             '''\n             timestamp = tb.Int64Col(pos=0)  ![3](assets/3.png)\n             No0 = tb.Float64Col(pos=1)  ![4](assets/4.png)\n             No1 = tb.Float64Col(pos=2)\n             No2 = tb.Float64Col(pos=3)\n             No3 = tb.Float64Col(pos=4)\n             No4 = tb.Float64Col(pos=5)\n\nIn [89]: h5 = tb.open_file('data/data.h5ts', 'w')  ![5](assets/5.png)\n\nIn [90]: ts = h5.create_ts('/', 'data', desc)  ![6](assets/6.png)\n\nIn [91]: h5  ![7](assets/7.png)\nOut[91]: File(filename=data/data.h5ts, title='', mode='w', root_uep='/',\n          filters=Filters(complevel=0, shuffle=False, bitshuffle=False,\n          fletcher32=False, least_significant_digit=None))\n         / (RootGroup) ''\n         /data (Group/Timeseries) ''\n         /data/y2020 (Group) ''\n         /data/y2020/m08 (Group) ''\n         /data/y2020/m08/d25 (Group) ''\n         /data/y2020/m08/d25/ts_data (Table(0,)) ''\n           description := {\n           \"timestamp\": Int64Col(shape=(), dflt=0, pos=0),\n           \"No0\": Float64Col(shape=(), dflt=0.0, pos=1),\n           \"No1\": Float64Col(shape=(), dflt=0.0, pos=2),\n           \"No2\": Float64Col(shape=(), dflt=0.0, pos=3),\n           \"No3\": Float64Col(shape=(), dflt=0.0, pos=4),\n           \"No4\": Float64Col(shape=(), dflt=0.0, pos=5)}\n           byteorder := 'little'\n           chunkshape := (1365,)\n```", "```py\nIn [92]: %time ts.append(data)  ![1](assets/1.png)\n         CPU times: user 476 ms, sys: 238 ms, total: 714 ms\n         Wall time: 739 ms\n\nIn [93]: # h5 ![2](assets/2.png)\n```", "```py\nFile(filename=data/data.h5ts, title='', mode='w', root_uep='/',\n\tfilters=Filters(complevel=0, shuffle=False, bitshuffle=False,\n\tfletcher32=False, least_significant_digit=None))\n/ (RootGroup) ''\n/data (Group/Timeseries) ''\n/data/y2020 (Group) ''\n/data/y2021 (Group) ''\n/data/y2021/m01 (Group) ''\n/data/y2021/m01/d01 (Group) ''\n/data/y2021/m01/d01/ts_data (Table(86400,)) ''\n  description := {\n  \"timestamp\": Int64Col(shape=(), dflt=0, pos=0),\n  \"No0\": Float64Col(shape=(), dflt=0.0, pos=1),\n  \"No1\": Float64Col(shape=(), dflt=0.0, pos=2),\n  \"No2\": Float64Col(shape=(), dflt=0.0, pos=3),\n  \"No3\": Float64Col(shape=(), dflt=0.0, pos=4),\n  \"No4\": Float64Col(shape=(), dflt=0.0, pos=5)}\n  byteorder := 'little'\n  chunkshape := (1365,)\n/data/y2021/m01/d02 (Group) ''\n/data/y2021/m01/d02/ts_data (Table(86400,)) ''\n  description := {\n  \"timestamp\": Int64Col(shape=(), dflt=0, pos=0),\n  \"No0\": Float64Col(shape=(), dflt=0.0, pos=1),\n  \"No1\": Float64Col(shape=(), dflt=0.0, pos=2),\n  \"No2\": Float64Col(shape=(), dflt=0.0, pos=3),\n  \"No3\": Float64Col(shape=(), dflt=0.0, pos=4),\n  \"No4\": Float64Col(shape=(), dflt=0.0, pos=5)}\n  byteorder := 'little'\n  chunkshape := (1365,)\n/data/y2021/m01/d03 (Group) ''\n/data/y2021/m01/d03/ts_data (Table(86400,)) ''\n  description := {\n  \"timestamp\": Int64Col(shape=(), dflt=0, pos=0),\n\t...\n```", "```py\nIn [94]: import datetime\n\nIn [95]: start = datetime.datetime(2021, 1, 2)  ![1](assets/1.png)\n\nIn [96]: end = datetime.datetime(2021, 1, 3)  ![2](assets/2.png)\n\nIn [97]: %time subset = ts.read_range(start, end)  ![3](assets/3.png)\n         CPU times: user 10.3 ms, sys: 3.63 ms, total: 14 ms\n         Wall time: 12.8 ms\n\nIn [98]: start = datetime.datetime(2021, 1, 2, 12, 30, 0)\n\nIn [99]: end = datetime.datetime(2021, 1, 5, 17, 15, 30)\n\nIn [100]: %time subset = ts.read_range(start, end)\n          CPU times: user 28.6 ms, sys: 18.5 ms, total: 47.1 ms\n          Wall time: 46.1 ms\n\nIn [101]: subset.info()\n          <class 'pandas.core.frame.DataFrame'>\n          DatetimeIndex: 276331 entries, 2021-01-02 12:30:00 to 2021-01-05\n           17:15:30\n          Data columns (total 5 columns):\n           #   Column  Non-Null Count   Dtype\n          ---  ------  --------------   -----\n           0   No0     276331 non-null  float64\n           1   No1     276331 non-null  float64\n           2   No2     276331 non-null  float64\n           3   No3     276331 non-null  float64\n           4   No4     276331 non-null  float64\n          dtypes: float64(5)\n          memory usage: 12.6 MB\n\nIn [102]: h5.close()\n\nIn [103]: rm data/*\n```", "```py\nIn [104]: %time data = generate_sample_data(1e6, 5, '1min').round(4)  ![1](assets/1.png)\n          CPU times: user 342 ms, sys: 60.5 ms, total: 402 ms\n          Wall time: 405 ms\n\nIn [105]: data.info()  ![1](assets/1.png)\n          <class 'pandas.core.frame.DataFrame'>\n          DatetimeIndex: 1000000 entries, 2021-01-01 00:00:00 to 2022-11-26\n           10:39:00\n          Freq: T\n          Data columns (total 5 columns):\n           #   Column  Non-Null Count    Dtype\n          ---  ------  --------------    -----\n           0   No0     1000000 non-null  float64\n           1   No1     1000000 non-null  float64\n           2   No2     1000000 non-null  float64\n           3   No3     1000000 non-null  float64\n           4   No4     1000000 non-null  float64\n          dtypes: float64(5)\n          memory usage: 45.8 MB\n\nIn [106]: import sqlite3 as sq3  ![2](assets/2.png)\n\nIn [107]: con = sq3.connect('data/data.sql')  ![3](assets/3.png)\n\nIn [108]: %time data.to_sql('data', con)  ![4](assets/4.png)\n          CPU times: user 4.6 s, sys: 352 ms, total: 4.95 s\n          Wall time: 5.07 s\n\nIn [109]: ls -n data/data.*\n          -rw-r--r--@ 1 501  20  105316352 Aug 25 11:48 data/data.sql\n```", "```py\nIn [110]: query = 'SELECT * FROM data WHERE No1 > 105 and No2 < 108'  ![1](assets/1.png)\n\nIn [111]: %time res = con.execute(query).fetchall()  ![2](assets/2.png)\n          CPU times: user 109 ms, sys: 30.3 ms, total: 139 ms\n          Wall time: 138 ms\n\nIn [112]: res[:5]  ![3](assets/3.png)\nOut[112]: [('2021-01-03 19:19:00', 103.6894, 105.0117, 103.9025, 95.8619,\n           93.6062),\n          ('2021-01-03 19:20:00', 103.6724, 105.0654, 103.9277, 95.8915,\n           93.5673),\n          ('2021-01-03 19:21:00', 103.6213, 105.1132, 103.8598, 95.7606,\n           93.5618),\n          ('2021-01-03 19:22:00', 103.6724, 105.1896, 103.8704, 95.7302,\n           93.4139),\n          ('2021-01-03 19:23:00', 103.8115, 105.1152, 103.8342, 95.706,\n           93.4436)]\n\nIn [113]: len(res)  ![4](assets/4.png)\nOut[113]: 5035\n\nIn [114]: con.close()\n\nIn [115]: rm data/*\n```", "```py\n#\n# Python Module to Generate a\n# Sample Financial Data Set\n#\n# Python for Algorithmic Trading\n# (c) Dr. Yves J. Hilpisch\n# The Python Quants GmbH\n#\nimport numpy as np\nimport pandas as pd\n\nr = 0.05  # constant short rate\nsigma = 0.5  # volatility factor\n\ndef generate_sample_data(rows, cols, freq='1min'):\n    '''\n Function to generate sample financial data.\n\n Parameters\n ==========\n rows: int\n number of rows to generate\n cols: int\n number of columns to generate\n freq: str\n frequency string for DatetimeIndex\n\n Returns\n =======\n df: DataFrame\n DataFrame object with the sample data\n '''\n    rows = int(rows)\n    cols = int(cols)\n    # generate a DatetimeIndex object given the frequency\n    index = pd.date_range('2021-1-1', periods=rows, freq=freq)\n    # determine time delta in year fractions\n    dt = (index[1] - index[0]) / pd.Timedelta(value='365D')\n    # generate column names\n    columns = ['No%d' % i for i in range(cols)]\n    # generate sample paths for geometric Brownian motion\n    raw = np.exp(np.cumsum((r - 0.5 * sigma ** 2) * dt +\n                 sigma * np.sqrt(dt) *\n                 np.random.standard_normal((rows, cols)), axis=0))\n    # normalize the data to start at 100\n    raw = raw / raw[0] * 100\n    # generate the DataFrame object\n    df = pd.DataFrame(raw, index=index, columns=columns)\n    return df\n\nif __name__ == '__main__':\n    rows = 5  # number of rows\n    columns = 3  # number of columns\n    freq = 'D'  # daily frequency\n    print(generate_sample_data(rows, columns, freq))\n```"]
["```py\nfrom sklearn.linear_model import LinearRegression\nmodel = LinearRegression()\nmodel.fit(X, Y)\n```", "```py\nmodel = LinearRegression()\nparam_grid = {'fit_intercept': [True, False]}\n}\n```", "```py\ngrid = GridSearchCV(estimator=model, param_grid=param_grid, scoring= 'r2', \\\n  cv=kfold)\ngrid_result = grid.fit(X, Y)\n```", "```py\nfrom sklearn.linear_model import Lasso\nmodel = Lasso()\nmodel.fit(X, Y)\n```", "```py\nfrom sklearn.linear_model import Ridge\nmodel = Ridge()\nmodel.fit(X, Y)\n```", "```py\nfrom sklearn.linear_model import ElasticNet\nmodel = ElasticNet()\nmodel.fit(X, Y)\n```", "```py\nfrom sklearn.linear_model import LogisticRegression\nmodel = LogisticRegression()\nmodel.fit(X, Y)\n```", "```py\nfrom sklearn.svm import SVR\nmodel = SVR()\nmodel.fit(X, Y)\n```", "```py\nfrom sklearn.svm import SVC\nmodel = SVC()\nmodel.fit(X, Y)\n```", "```py\nfrom sklearn.neighbors import KNeighborsClassifier\nmodel = KNeighborsClassifier()\nmodel.fit(X, Y)\n```", "```py\nfrom sklearn.neighbors import KNeighborsRegressor\nmodel = KNeighborsRegressor()\nmodel.fit(X, Y)\n```", "```py\nfrom sklearn.discriminant_analysis import LinearDiscriminantAnalysis\nmodel = LinearDiscriminantAnalysis()\nmodel.fit(X, Y)\n```", "```py\nfrom sklearn.tree import DecisionTreeClassifier\nmodel = DecisionTreeClassifier()\nmodel.fit(X, Y)\n```", "```py\nfrom sklearn.tree import DecisionTreeRegressor\nmodel = DecisionTreeRegressor ()\nmodel.fit(X, Y)\n```", "```py\nfrom sklearn.ensemble import RandomForestClassifier\nmodel = RandomForestClassifier()\nmodel.fit(X, Y)\n```", "```py\nfrom sklearn.ensemble import RandomForestRegressor\nmodel = RandomForestRegressor()\nmodel.fit(X, Y)\n```", "```py\nfrom sklearn.ensemble import ExtraTreesClassifier\nmodel = ExtraTreesClassifier()\nmodel.fit(X, Y)\n```", "```py\nfrom sklearn.ensemble import ExtraTreesRegressor\nmodel = ExtraTreesRegressor()\nmodel.fit(X, Y)\n```", "```py\nfrom sklearn.ensemble import AdaBoostClassifier\nmodel = AdaBoostClassifier()\nmodel.fit(X, Y)\n```", "```py\nfrom sklearn.ensemble import AdaBoostRegressor\nmodel = AdaBoostRegressor()\nmodel.fit(X, Y)\n```", "```py\nfrom sklearn.ensemble import GradientBoostingClassifier\nmodel = GradientBoostingClassifier()\nmodel.fit(X, Y)\n```", "```py\nfrom sklearn.ensemble import GradientBoostingRegressor\nmodel = GradientBoostingRegressor()\nmodel.fit(X, Y)\n```", "```py\nfrom sklearn.neural_network import MLPClassifier\nmodel = MLPClassifier()\nmodel.fit(X, Y)\n```", "```py\nfrom sklearn.neural_network import MLPRegressor\nmodel = MLPRegressor()\nmodel.fit(X, Y)\n```"]
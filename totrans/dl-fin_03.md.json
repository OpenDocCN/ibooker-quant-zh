["```py\n# Importing the required library\nimport pandas_datareader as pdr\n# Setting the beginning and end of the historical data\nstart_date = '1950-01-01'\nend_date   = '2023-01-23'\n# Creating a dataframe and downloading the CPI data\ncpi = pdr.DataReader('CPIAUCSL', 'fred', start_date, end_date)\n# Printing the latest five observations of the dataframe\nprint(cpi.tail())\n# Checking if there are nan values in the CPI dataframe\ncount_nan = cpi['CPIAUCSL'].isnull().sum()\n# Printing the result\nprint('Number of nan values in the CPI dataframe: ' + str(count_nan))\n# Transforming the CPI into a year-on-year measure\ncpi = cpi.pct_change(periods = 12, axis = 0) * 100\n# Dropping the nan values from the rows\ncpi = cpi.dropna()\n\n```", "```py\n# Calculating the mean of the CPI over the last 20 years\ncpi_latest = cpi.iloc[–240:]\nmean = cpi_latest[\"CPIAUCSL\"].mean()\n# Printing the result\nprint('The mean of the dataset: ' + str(mean), '%')\n# Importing the required library\nimport matplotlib.pyplot as plt\n# Plotting the latest observations in black with a label\nplt.plot(cpi_latest[:], color = 'black', linewidth = 1.5, \n         label = 'Change in CPI Year-on-Year')\n# Plotting horizontal lines that represent the mean and the zero threshold\nplt.axhline(y = mean, color = 'red', linestyle = 'dashed', \n         label = 'Mean')\nplt.axhline(y = 0, color = 'blue', linestyle = 'dashed', linewidth = 1)\nplt.grid()\nplt.legend()\n\n```", "```py\nThe mean of the dataset: 2.49 %\n```", "```py\n# Calculating the median\nmedian = cpi_latest[\"CPIAUCSL\"].median() \n# Printing the result\nprint('The median of the dataset: ' + str(median), '%')\n# Plotting the latest observations in black with a label\nplt.plot(cpi_latest[:], color = 'black', linewidth = 1.5, \n         label = 'Change in CPI Year-on-Year')\n# Plotting horizontal lines that represent the median and the zero threshold\nplt.axhline(y = median, color = 'red', linestyle = 'dashed', \n            label = 'Median')\nplt.axhline(y = 0, color = 'blue', linestyle = 'dashed', linewidth = 1)\nplt.grid()\nplt.legend()\n\n```", "```py\nThe median of the dataset: 2.12 %\n```", "```py\n# Calculating the variance\nvariance = cpi_latest[\"CPIAUCSL\"].var() \n# Printing the result\nprint('The variance of the dataset: ' + str(variance), '%')\n```", "```py\nThe variance of the dataset: 3.62 %\n```", "```py\n# Calculating the standard deviation\nstandard_deviation = cpi_latest[\"CPIAUCSL\"].std() \n# Printing the result\nprint('The standard deviation of the dataset: ' + \n      str(standard_deviation), '%')\n\n```", "```py\nThe standard deviation of the dataset: 1.90 %\n```", "```py\n# Calculating the range\nrange_metric = max(cpi[\"CPIAUCSL\"]) – min(cpi[\"CPIAUCSL\"])\n# Printing the result\nprint('The range of the dataset: ' + str(range_metric), '%')\n\n```", "```py\nThe range of the dataset: 16.5510 %\n```", "```py\n# Importing libraries\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport scipy.stats as stats\n# Generate data for the plot\ndata = np.linspace(–3, 3, num = 1000)\n# Define the mean and standard deviation of the normal distribution\nmean = 0\nstd = 1\n# Generate the function of the normal distribution\npdf = stats.norm.pdf(data, mean, std)\n# Plot the normal distribution plot\nplt.plot(data, pdf, '-', color = 'black', lw = 2)\nplt.axvline(mean, color = 'black', linestyle = '--')\nplt.grid()\nplt.show()\n```", "```py\n# Calculating the skew\nskew = cpi_latest[\"CPIAUCSL\"].skew() \n# Printing the result\nprint('The skew of the dataset: ' + str(skew))\n\n```", "```py\nThe skew of the dataset: 1.17\n```", "```py\n# Plotting the histogram of the data\nfig, ax = plt.subplots()\nax.hist(cpi['CPIAUCSL'], bins = 30, edgecolor = 'black', color = 'white')\n# Add vertical lines for better interpretation\nax.axvline(mean, color='black', linestyle='--', label = 'Mean', \n           linewidth = 2)\nax.axvline(median, color='grey', linestyle='-.', label = 'Median', \n           linewidth = 2)\nplt.grid()\nplt.legend()\nplt.show()\n\n```", "```py\n# Calculating the excess kurtosis\nexcess_kurtosis = cpi_latest[\"CPIAUCSL\"].kurtosis() \n# Printing the result\nprint('The excess kurtosis of the dataset: ' + str(excess_kurtosis))\n\n```", "```py\nThe excess kurtosis of the dataset: 2.15\n```", "```py\n# Importing the required library\nimport matplotlib.pyplot as plt\n# Resetting the index\ncpi = cpi.reset_index()\n# Creating the chart\nfig, ax = plt.subplots()\nax.scatter(cpi['DATE'], cpi['CPIAUCSL'], color = 'black', \n           s = 8,  label = 'Change in CPI Year-on-Year')\nplt.grid()\nplt.legend()\nplt.show()\n\n```", "```py\n# Setting the beginning and end of the historical data\nstart_date = '1995-01-01'\nend_date   = '2022-12-01'\n# Creating a dataframe and downloading the CPI data\ncpi_us = pdr.DataReader('CPIAUCSL', 'fred', start_date, end_date)\ncpi_uk = pdr.DataReader('GBRCPIALLMINMEI', 'fred', start_date, end_date)\n# Dropping the NaN values from the rows\ncpi_us = cpi_us.dropna()\ncpi_uk = cpi_uk.dropna()\n# Transforming the CPI into a year-on-year measure\ncpi_us = cpi_us.pct_change(periods = 12, axis = 0) * 100\ncpi_us = cpi_us.dropna()\ncpi_uk = cpi_uk.pct_change(periods = 12, axis = 0) * 100\ncpi_uk = cpi_uk.dropna()\n# Creating the chart\nfig, ax = plt.subplots()\nax.scatter(cpi_us['CPIAUCSL'], cpi_uk['GBRCPIALLMINMEI'], \n           color = 'black', s = 8, label = 'Change in CPI Year-on-Year')\n# Adding a few aesthetic elements to the chart\nax.set_xlabel('US CPI')\nax.set_ylabel('UK CPI')\nax.axvline(x = 0, color='black', linestyle = 'dashed', linewidth = 1)\nax.axhline(y = 0, color='black', linestyle = 'dashed', linewidth = 1)\nax.set_ylim(-2,)\nplt.grid()\nplt.legend()\nplt.show()\n\n```", "```py\n# Creating the chart\nplt.plot(cpi['DATE'], cpi['CPIAUCSL'], color = 'black', \n         label = 'Change in CPI Year-on-Year')\nplt.grid()\nplt.legend()\nplt.show()\n\n```", "```py\n# Taking the values of the previous twelve months\ncpi_one_year = cpi.iloc[-12:]\n# Creating the chart\nplt.bar(cpi_one_year['DATE'], cpi_one_year['CPIAUCSL'], \n        color = 'black', label = 'Change in CPI Year-on-Year', width = 7)\nplt.grid()\nplt.legend()\nplt.show()\n\n```", "```py\n# Creating the chart\nfig, ax = plt.subplots()\nax.hist(cpi['CPIAUCSL'], bins = 30, edgecolor = 'black', \n        color = 'white', label = 'Change in CPI Year-on-Year',)\n# Add vertical lines for better interpretation\nax.axvline(0, color = 'black')\nplt.grid()\nplt.legend()\nplt.show()\n\n```", "```py\n# Creating the chart\ncpi_latest = cpi.iloc[–240:]\nfig, ax = plt.subplots()\nax.boxplot(cpi_latest['CPIAUCSL'])\nplt.grid()\nplt.legend()\nplt.show()\n\n```", "```py\n# Replace the corresponding code line with the following\nfig, ax = plt.subplots()\nax.boxplot(cpi_latest['CPIAUCSL'], showfliers = False)\n```", "```py\n# Importing the required libraries\nimport pandas_datareader as pdr\nimport pandas as pd\n# Setting the beginning and end of the historical data\nstart_date = '1995-01-01'\nend_date   = '2022-12-01'\n# Creating a dataframe and downloading the CPI data\ncpi_us = pdr.DataReader('CPIAUCSL', 'fred', start_date, end_date)\ncpi_uk = pdr.DataReader('GBRCPIALLMINMEI', 'fred', start_date, end_date)\n# Dropping the nan values from the rows\ncpi_us = cpi_us.dropna()\ncpi_uk = cpi_uk.dropna()\n# Transforming the US CPI into a year-on-year measure\ncpi_us = cpi_us.pct_change(periods = 12, axis = 0) * 100\ncpi_us = cpi_us.dropna()\n# Transforming the UK CPI into a year-on-year measure\ncpi_uk = cpi_uk.pct_change(periods = 12, axis = 0) * 100\ncpi_uk = cpi_uk.dropna()\n# Joining both CPI data into one dataframe\ncombined_cpi_data = pd.concat([cpi_us['CPIAUCSL'], \n                               cpi_uk['GBRCPIALLMINMEI']], axis = 1)\n# Calculating Pearson correlation\ncombined_cpi_data.corr(method = 'pearson')\n\n```", "```py\n                 CPIAUCSL  GBRCPIALLMINMEI\nCPIAUCSL         1.000000         0.732164\nGBRCPIALLMINMEI  0.732164         1.000000\n```", "```py\n# Calculating Spearman's rank correlation\ncombined_cpi_data.corr(method = 'spearman')\n\n```", "```py\n                 CPIAUCSL  GBRCPIALLMINMEI\nCPIAUCSL         1.000000         0.472526\nGBRCPIALLMINMEI  0.472526         1.000000\n```", "```py\n# Creating a dataframe and downloading the CPI data\ncpi = pdr.DataReader('CPIAUCSL', 'fred', start_date, end_date)\n# Transforming the US CPI into a year-on-year measure\ncpi = cpi.pct_change(periods = 12, axis = 0) * 100\ncpi = cpi.dropna()\n# Transforming the data frame to a series structure\ncpi = cpi.iloc[:,0]\n# Calculating autocorrelation with a lag of 1\nprint('Correlation with a lag of 1 = ', round(cpi.autocorr(lag = 1), 2))\n# Calculating autocorrelation with a lag of 6\nprint('Correlation with a lag of 6 = ', round(cpi.autocorr(lag = 6), 2))\n# Calculating autocorrelation with a lag of 12\nprint('Correlation with a lag of 12 = ', round(cpi.autocorr(lag = 12), 2))\n\n```", "```py\nCorrelation with a lag of 1 =  0.97\nCorrelation with a lag of 6 =  0.65\nCorrelation with a lag of 12 =  0.17\n```", "```py\n# Importing the required libraries\nimport numpy as np\nimport matplotlib.pyplot as plt\n# Setting the range of the data\ndata_range = np.arange(0, 30, 0.1)\n# Creating the sine and the cosine waves\nsine = np.sin(data_range)\ncosine = np.cos(data_range)\n# Plotting\nplt.plot(sine, color = 'black', label = 'Sine Function')\nplt.plot(cosine, color = 'grey', linestyle = 'dashed', \n         label = 'Cosine Function')\nplt.grid()\nplt.legend()\n\n```", "```py\nCorrelation | Pearson:  0.035\nCorrelation | Spearman:  0.027\nCorrelation | MIC: 0.602\n```", "```py\n# Importing the required library\nfrom statsmodels.tsa.stattools import adfuller\n# Applying the ADF test on the CPI data\nprint('p-value: %f' % adfuller(cpi)[1])\n\n```", "```py\np-value: 0.0152\n```", "```py\n# Creating a dataframe and downloading the CPI data\ncpi = pdr.DataReader('CPIAUCSL', 'fred', start_date, end_date)\n# Applying the ADF test on the CPI data\nprint('p-value: %f' % adfuller(cpi)[1])\n\n```", "```py\np-value: 0.999\n\n```", "```py\n# Importing the required libraries\nimport numpy as np\nimport matplotlib.pyplot as plt\n# Creating the first time series using sine waves\nlength = np.pi * 2 * 5\nsinewave = np.sin(np.arange(0, length, length / 1000))\n# Creating the second time series using trending sine waves\nsinewave_ascending = np.sin(np.arange(0, length, length / 1000))\n# Defining the trend variable\na = 0.01\n# Looping to add a trend factor\nfor i in range(len(sinewave_ascending)): \n    sinewave_ascending[i] = a + sinewave_ascending[i]\n    a = 0.01 + a\n\n```", "```py\n# Plotting the series\nplt.plot(sinewave, label = 'Sine Wave', color = 'black')\nplt.plot(sinewave_ascending, label = 'Ascending Sine Wave', \n         color = 'grey')\nplt.grid()\nplt.legend()\nplt.show()\n\n```", "```py\n# ADF testing | Normal sine wave\nprint('p-value: %f' % adfuller(sinewave)[1])\n# ADF testing | Ascending sine wave\nprint('p-value: %f' % adfuller(sinewave_ascending)[1])\n\n```", "```py\np-value: 0.000000 # For the sine wave\np-value: 0.989341 # For the ascending sine wave\n\n```", "```py\n# Importing the KPSS library\nfrom statsmodels.tsa.stattools import kpss\n# KPSS testing | Normal sine wave\nprint('p-value: %f' % kpss(sinewave)[1])\n# KPSS testing | Ascending sine wave\nprint('p-value: %f' % kpss(sinewave_ascending)[1])\n# KPSS testing while taking into account the trend | Ascending sine wave\nprint('p-value: %f' % kpss(sinewave_ascending, regression = 'ct')[1])\n`''' The 'ct' argument is used to check if the dataset is stationary  around a trend. By default, the argument is 'c' which is used to check if the data is stationary around a constant. '''`\n\n```", "```py\np-value: 0.10 # For the sine wave\np-value: 0.01 # For the ascending sine wave without trend consideration\np-value: 0.10 # For the ascending sine wave with trend consideration\n\n```", "```py\n# Applying the KPSS (no trend consideration) test on the CPI data\nprint('p-value: %f' % kpss(cpi)[1])\n# Applying the KPSS (with trend consideration) test on the CPI data\nprint('p-value: %f' % kpss(cpi, regression = 'ct')[1])\n\n```", "```py\np-value: 0.010000 # without trend consideration\np-value: 0.010000 # with trend consideration\n\n```"]
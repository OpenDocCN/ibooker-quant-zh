["```py\nIn [1]: class HumanBeing(object):  ![1](images/1.png)\n            def __init__(self, first_name, eye_color):  ![2](images/2.png)\n                self.first_name = first_name  ![3](images/3.png)\n                self.eye_color = eye_color  ![4](images/4.png)\n                self.position = 0  ![5](images/5.png)\n            def walk_steps(self, steps):  ![6](images/6.png)\n                self.position += steps  ![7](images/7.png)\n```", "```py\nIn [2]: Sandra = HumanBeing('Sandra', 'blue')  ![1](images/1.png)\n\nIn [3]: Sandra.first_name  ![2](images/2.png)\nOut[3]: 'Sandra'\n\nIn [4]: Sandra.position  ![2](images/2.png)\nOut[4]: 0\n\nIn [5]: Sandra.walk_steps(5)  ![3](images/3.png)\n\nIn [6]: Sandra.position  ![4](images/4.png)\nOut[6]: 5\n```", "```py\nIn [7]: n = 5  ![1](images/1.png)\n\nIn [8]: type(n)  ![2](images/2.png)\nOut[8]: int\n\nIn [9]: n.numerator  ![3](images/3.png)\nOut[9]: 5\n\nIn [10]: n.bit_length()  ![4](images/4.png)\nOut[10]: 3\n\nIn [11]: n + n  ![5](images/5.png)\nOut[11]: 10\n\nIn [12]: 2 * n  ![6](images/6.png)\nOut[12]: 10\n\nIn [13]: n.__sizeof__()  ![7](images/7.png)\nOut[13]: 28\n```", "```py\nIn [14]: l = [1, 2, 3, 4]  ![1](images/1.png)\n\nIn [15]: type(l)  ![2](images/2.png)\nOut[15]: list\n\nIn [16]: l[0]  ![3](images/3.png)\nOut[16]: 1\n\nIn [17]: l.append(10)  ![4](images/4.png)\n\nIn [18]: l + l  ![5](images/5.png)\nOut[18]: [1, 2, 3, 4, 10, 1, 2, 3, 4, 10]\n\nIn [19]: 2 * l  ![6](images/6.png)\nOut[19]: [1, 2, 3, 4, 10, 1, 2, 3, 4, 10]\n\nIn [20]: sum(l)  ![7](images/7.png)\nOut[20]: 20\n\nIn [21]: l.__sizeof__()  ![8](images/8.png)\nOut[21]: 104\n```", "```py\nIn [22]: import numpy as np  ![1](images/1.png)\n\nIn [23]: a = np.arange(16).reshape((4, 4))  ![2](images/2.png)\n\nIn [24]: a  ![2](images/2.png)\nOut[24]: array([[ 0,  1,  2,  3],\n                [ 4,  5,  6,  7],\n                [ 8,  9, 10, 11],\n                [12, 13, 14, 15]])\n\nIn [25]: type(a)  ![3](images/3.png)\nOut[25]: numpy.ndarray\n```", "```py\nIn [26]: a.nbytes  ![1](images/1.png)\nOut[26]: 128\n\nIn [27]: a.sum()  ![2](images/2.png)\nOut[27]: 120\n\nIn [28]: a.cumsum(axis=0)  ![3](images/3.png)\nOut[28]: array([[ 0,  1,  2,  3],\n                [ 4,  6,  8, 10],\n                [12, 15, 18, 21],\n                [24, 28, 32, 36]])\n\nIn [29]: a + a  ![4](images/4.png)\nOut[29]: array([[ 0,  2,  4,  6],\n                [ 8, 10, 12, 14],\n                [16, 18, 20, 22],\n                [24, 26, 28, 30]])\n\nIn [30]: 2 * a  ![5](images/5.png)\nOut[30]: array([[ 0,  2,  4,  6],\n                [ 8, 10, 12, 14],\n                [16, 18, 20, 22],\n                [24, 26, 28, 30]])\n\nIn [31]: sum(a)  ![6](images/6.png)\nOut[31]: array([24, 28, 32, 36])\n\nIn [32]: np.sum(a)  ![7](images/7.png)\nOut[32]: 120\n\nIn [33]: a.__sizeof__()  ![8](images/8.png)\nOut[33]: 112\n```", "```py\nIn [34]: import pandas as pd  ![1](images/1.png)\n\nIn [35]: df = pd.DataFrame(a, columns=list('abcd'))  ![2](images/2.png)\n\nIn [36]: type(df)  ![3](images/3.png)\nOut[36]: pandas.core.frame.DataFrame\n```", "```py\nIn [37]: df.columns  ![1](images/1.png)\nOut[37]: Index(['a', 'b', 'c', 'd'], dtype='object')\n\nIn [38]: df.sum()  ![2](images/2.png)\nOut[38]: a    24\n         b    28\n         c    32\n         d    36\n         dtype: int64\n\nIn [39]: df.cumsum()  ![3](images/3.png)\nOut[39]:     a   b   c   d\n         0   0   1   2   3\n         1   4   6   8  10\n         2  12  15  18  21\n         3  24  28  32  36\n\nIn [40]: df + df  ![4](images/4.png)\nOut[40]:     a   b   c   d\n         0   0   2   4   6\n         1   8  10  12  14\n         2  16  18  20  22\n         3  24  26  28  30\n\nIn [41]: 2 * df  ![5](images/5.png)\nOut[41]:     a   b   c   d\n         0   0   2   4   6\n         1   8  10  12  14\n         2  16  18  20  22\n         3  24  26  28  30\n\nIn [42]: np.sum(df)  ![6](images/6.png)\nOut[42]: a    24\n         b    28\n         c    32\n         d    36\n         dtype: int64\n\nIn [43]: df.__sizeof__()  ![7](images/7.png)\nOut[43]: 208\n```", "```py\nIn [44]: class FinancialInstrument(object):  ![1](images/1.png)\n             pass  ![2](images/2.png)\n\nIn [45]: fi = FinancialInstrument()  ![3](images/3.png)\n\nIn [46]: type(fi)  ![4](images/4.png)\nOut[46]: __main__.FinancialInstrument\n\nIn [47]: fi  ![4](images/4.png)\nOut[47]: <__main__.FinancialInstrument at 0x10a21c828>\n\nIn [48]: fi.__str__()  ![5](images/5.png)\nOut[48]: '<__main__.FinancialInstrument object at 0x10a21c828>'\n\nIn [49]: fi.price = 100  ![6](images/6.png)\n\nIn [50]: fi.price  ![6](images/6.png)\nOut[50]: 100\n```", "```py\nIn [51]: class FinancialInstrument(object):\n             author = 'Yves Hilpisch'  ![1](images/1.png)\n             def __init__(self, symbol, price):  ![2](images/2.png)\n                 self.symbol = symbol  ![3](images/3.png)\n                 self.price = price  ![3](images/3.png)\n\nIn [52]: FinancialInstrument.author  ![1](images/1.png)\nOut[52]: 'Yves Hilpisch'\n\nIn [53]: aapl = FinancialInstrument('AAPL', 100)  ![4](images/4.png)\n\nIn [54]: aapl.symbol  ![5](images/5.png)\nOut[54]: 'AAPL'\n\nIn [55]: aapl.author  ![6](images/6.png)\nOut[55]: 'Yves Hilpisch'\n\nIn [56]: aapl.price = 105  ![7](images/7.png)\n\nIn [57]: aapl.price  ![7](images/7.png)\nOut[57]: 105\n```", "```py\nIn [58]: class FinancialInstrument(FinancialInstrument):  ![1](images/1.png)\n             def get_price(self):  ![2](images/2.png)\n                 return self.price  ![2](images/2.png)\n             def set_price(self, price):  ![3](images/3.png)\n                 self.price = price  ![4](images/4.png)\n\nIn [59]: fi = FinancialInstrument('AAPL', 100)  ![5](images/5.png)\n\nIn [60]: fi.get_price()  ![6](images/6.png)\nOut[60]: 100\n\nIn [61]: fi.set_price(105)  ![7](images/7.png)\n\nIn [62]: fi.get_price()  ![6](images/6.png)\nOut[62]: 105\n\nIn [63]: fi.price  ![8](images/8.png)\nOut[63]: 105\n```", "```py\nIn [64]: class FinancialInstrument(object):\n             def __init__(self, symbol, price):\n                 self.symbol = symbol\n                 self.__price = price  ![1](images/1.png)\n             def get_price(self):\n                 return self.__price\n             def set_price(self, price):\n                 self.__price = price\n\nIn [65]: fi = FinancialInstrument('AAPL', 100)\n\nIn [66]: fi.get_price()  ![2](images/2.png)\nOut[66]: 100\n\nIn [67]: fi.__price  ![3](images/3.png)\n\n         ----------------------------------------\n         AttributeErrorTraceback (most recent call last)\n         <ipython-input-67-74c0dc05c9ae> in <module>()\n----> 1 fi.__price  ![3](images/3.png)\n\n         AttributeError: 'FinancialInstrument' object has no attribute '__price'\n\nIn [68]: fi._FinancialInstrument__price  ![4](images/4.png)\nOut[68]: 100\n\nIn [69]: fi._FinancialInstrument__price = 105  ![4](images/4.png)\n\nIn [70]: fi.set_price(100)  ![5](images/5.png)\n```", "```py\nIn [71]: class PortfolioPosition(object):\n             def __init__(self, financial_instrument, position_size):\n                 self.position = financial_instrument  ![1](images/1.png)\n                 self.__position_size = position_size  ![2](images/2.png)\n             def get_position_size(self):\n                 return self.__position_size\n             def update_position_size(self, position_size):\n                 self.__position_size = position_size\n             def get_position_value(self):\n                 return self.__position_size * \\\n                        self.position.get_price()  ![3](images/3.png)\n\nIn [72]: pp = PortfolioPosition(fi, 10)\n\nIn [73]: pp.get_position_size()\nOut[73]: 10\n\nIn [74]: pp.get_position_value()  ![3](images/3.png)\nOut[74]: 1000\n\nIn [75]: pp.position.get_price()  ![4](images/4.png)\nOut[75]: 100\n\nIn [76]: pp.position.set_price(105)  ![5](images/5.png)\n\nIn [77]: pp.get_position_value()  ![6](images/6.png)\nOut[77]: 1050\n```", "```py\nIn [78]: class Vector(object):\n             def __init__(self, x=0, y=0, z=0):  ![1](images/1.png)\n                 self.x = x  ![1](images/1.png)\n                 self.y = y  ![1](images/1.png)\n                 self.z = z  ![1](images/1.png)\n\nIn [79]: v = Vector(1, 2, 3)  ![2](images/2.png)\n\nIn [80]: v  ![3](images/3.png)\nOut[80]: <__main__.Vector at 0x10a245d68>\n```", "```py\nIn [81]: class Vector(Vector):\n             def __repr__(self):\n                 return 'Vector(%r, %r, %r)' % (self.x, self.y, self.z)\n\nIn [82]: v = Vector(1, 2, 3)\n\nIn [83]: v  ![1](images/1.png)\nOut[83]: Vector(1, 2, 3)\n\nIn [84]: print(v)  ![1](images/1.png)\n\n         Vector(1, 2, 3)\n```", "```py\nIn [85]: class Vector(Vector):\n             def __abs__(self):\n                 return (self.x ** 2 +  self.y ** 2 +\n                         self.z ** 2) ** 0.5  ![1](images/1.png)\n\n             def __bool__(self):\n                 return bool(abs(self))\n\nIn [86]: v = Vector(1, 2, -1)  ![2](images/2.png)\n\nIn [87]: abs(v)\nOut[87]: 2.449489742783178\n\nIn [88]: bool(v)\nOut[88]: True\n\nIn [89]: v = Vector()  ![3](images/3.png)\n\nIn [90]: v  ![3](images/3.png)\nOut[90]: Vector(0, 0, 0)\n\nIn [91]: abs(v)\nOut[91]: 0.0\n\nIn [92]: bool(v)\nOut[92]: False\n```", "```py\nIn [93]: class Vector(Vector):\n             def __add__(self, other):\n                 x = self.x + other.x\n                 y = self.y + other.y\n                 z = self.z + other.z\n                 return Vector(x, y, z)  ![1](images/1.png)\n\n             def __mul__(self, scalar):\n                 return Vector(self.x * scalar,\n                               self.y * scalar,\n                               self.z * scalar)  ![1](images/1.png)\n\nIn [94]: v = Vector(1, 2, 3)\n\nIn [95]: v + Vector(2, 3, 4)\nOut[95]: Vector(3, 5, 7)\n\nIn [96]: v * 2\nOut[96]: Vector(2, 4, 6)\n```", "```py\nIn [97]: class Vector(Vector):\n             def __len__(self):\n                 return 3  ![1](images/1.png)\n\n             def __getitem__(self, i):\n                 if i in [0, -3]: return self.x\n                 elif i in [1, -2]: return self.y\n                 elif i in [2, -1]: return self.z\n                 else: raise IndexError('Index out of range.')\n\nIn [98]: v = Vector(1, 2, 3)\n\nIn [99]: len(v)\nOut[99]: 3\n\nIn [100]: v[0]\nOut[100]: 1\n\nIn [101]: v[-2]\nOut[101]: 2\n\nIn [102]: v[3]\n\n          ----------------------------------------\n          IndexErrorTraceback (most recent call last)\n          <ipython-input-102-0f5531c4b93d> in <module>()\n----> 1 v[3]\n\n          <ipython-input-97-eef2cdc22510> in __getitem__(self, i)\n      7         elif i in [1, -2]: return self.y\n      8         elif i in [2, -1]: return self.z\n----> 9         else: raise IndexError('Index out of range.')\n\n          IndexError: Index out of range.\n```", "```py\nIn [103]: class Vector(Vector):\n              def __iter__(self):\n                  for i in range(len(self)):\n                      yield self[i]\n\nIn [104]: v = Vector(1, 2, 3)\n\nIn [105]: for i in range(3):  ![1](images/1.png)\n              print(v[i])  ![1](images/1.png)\n\n          1\n          2\n          3\n\nIn [106]: for coordinate in v:  ![2](images/2.png)\n              print(coordinate)  ![2](images/2.png)\n\n          1\n          2\n          3\n```", "```py\nIn [107]: class Vector(object):\n              def __init__(self, x=0, y=0, z=0):\n                  self.x = x\n                  self.y = y\n                  self.z = z\n\n              def __repr__(self):\n                  return 'Vector(%r, %r, %r)' % (self.x, self.y, self.z)\n\n              def __abs__(self):\n                  return (self.x ** 2 +  self.y ** 2 + self.z ** 2) ** 0.5\n\n              def __bool__(self):\n                  return bool(abs(self))\n\n              def __add__(self, other):\n                  x = self.x + other.x\n                  y = self.y + other.y\n                  z = self.z + other.z\n                  return Vector(x, y, z)\n\n              def __mul__(self, scalar):\n                  return Vector(self.x * scalar,\n                                self.y * scalar,\n                                self.z * scalar)\n\n              def __len__(self):\n                  return 3\n\n              def __getitem__(self, i):\n                  if i in [0, -3]: return self.x\n                  elif i in [1, -2]: return self.y\n                  elif i in [2, -1]: return self.z\n                  else: raise IndexError('Index out of range.')\n\n              def __iter__(self):\n                  for i in range(len(self)):\n                      yield self[i]\n```"]
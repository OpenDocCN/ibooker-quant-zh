- en: Chapter 10\. Synthetic Data Generation and The Hidden Markov Model in Finance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The data does not have to be rooted in the real world to have value: it can
    be fabricated and slotted in where some is missing or hard to get hold of.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Ahuja (2020)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Synthetic data generation has been gaining attention in finance due to rising
    concerns about confidentiality and increasing data requirements. So, instead of
    working with real data, why not feed your model with synthetic data as long as
    it mimics the requisite statistical properties? It sounds appealing, doesn’t it?
    Synthetic data generation is one part of this chapter; the other part is devoted
    to another underappreciated but quite important and interesting topic: the hidden
    Markov model (HMM). You may be tempted to ask: what is the common ground between
    synthetic data and HMM? Well, we can generate synthetic data from HMM—and this
    is one of the aims of this chapter. The other aim is to introduce these two important
    topics, as they are often used in machine learning.'
  prefs: []
  type: TYPE_NORMAL
- en: Synthetic Data Generation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The confidentiality, sensitivity, and cost of financial data greatly restricts
    its usage. This, in turn, hinders the progress and dissemination of useful knowledge
    in finance. Synthetic data addresses these drawbacks and helps researchers and
    practitioners conduct their analyses and disseminate the results.
  prefs: []
  type: TYPE_NORMAL
- en: 'Synthetic data is data generated from a process by which it mimics the statistical
    properties of the real data. Even though there is a belief that data must be modeled
    in its original form, generating synthetic data from real data is not the only
    way we can create it (Patki, Wedge, and Veeramachaneni 2016). Rather, there are
    three ways we can generate synthetic data:'
  prefs: []
  type: TYPE_NORMAL
- en: Synthetic data can be generated from the *real data*. The workflow of this process
    starts with getting real data, and continues with modeling to unveil the distribution
    of the data, and as a last step synthetic data is sampled from this existing model.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Synthetic data can be obtained from a *model or knowledge*. Generally speaking,
    this type of synthetic data generation can be applied either by using an existing
    model or knowledge of the researcher.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A *hybrid* process includes the previous two steps, because sometimes only a
    part of the data becomes available and this part of the real data is used to generate
    synthetic data and the other part of the synthetic data can be obtained from a
    model.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will soon see how we can apply these techniques to generate synthetic data.
    By its nature, the synthetic data generation process has an uncompromising trade-off
    between privacy and utility. To be exact, synthetic data generation from real
    undisclosed data results in high utility. However, the utility of the synthetic
    data generation depends greatly on the deidentification and aggregation of real
    public data. The utility of synthetic data generation is dependent upon successful
    modeling or the expertise of the analyst.
  prefs: []
  type: TYPE_NORMAL
- en: The privacy-utility trade-off in the context of data-generating processes is
    illustrated in [Figure 10-1](#synt_sch).
  prefs: []
  type: TYPE_NORMAL
- en: '![synt_sch](assets/mlfr_1001.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10-1\. Privacy-utility trade-off
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Evaluation of the Synthetic Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As you can imagine, various tools can be applied to measure the effectiveness
    of the synthetic data; however, we will restrict our attention to four commonly
    embraced methods: KL-divergence, distinguishable, ROC curve, and comparing the
    main statistics such as mean, median, etc. As KL-divergence and ROC were discussed
    in Chapters [8](ch08.html#chapter_8) and [6](ch06.html#chapter_6), respectively,
    we will skip over those and start with the distinguishable method.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Distinguishable*, as its name implies, tries to distinguish between real and
    synthetic records by assigning 1 if they are real and 0 if not using a classification
    model that distinguishes between real and synthetic data. If the output is closer
    to 1, it predicts that the record is real, otherwise it predicts it is synthetic
    data using a *propensity score* (El Emam 2020).'
  prefs: []
  type: TYPE_NORMAL
- en: The other method is easy yet powerful, and is based on comparing the main statistics
    of the real and synthetic data. Given the model employed, the mean (or other statistic)
    of the real data and the synthetic data can be compared to get a sense of the
    extent to which the synthetic data mimics the real data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s discuss the advantages and disadvantages of synthetic data generation:'
  prefs: []
  type: TYPE_NORMAL
- en: Advantages
  prefs: []
  type: TYPE_NORMAL
- en: Increased availability of data
  prefs: []
  type: TYPE_NORMAL
- en: Synthetic data generation equips us with a strong tool by which we can overcome
    the difficulty of accessing real data, which can be costly and proprietary.
  prefs: []
  type: TYPE_NORMAL
- en: Improved analytical skill
  prefs: []
  type: TYPE_NORMAL
- en: Synthetic data as a good proxy of the real data can be used in various analytical
    processes, and this, in turn, improves our understanding of a specific topic.
    Besides, synthetic data can be used for labeling, paving the way for highly accurate
    analyses.
  prefs: []
  type: TYPE_NORMAL
- en: Handling common statistical problems
  prefs: []
  type: TYPE_NORMAL
- en: Synthetic data generation can mitigate the problems arising from real data.
    Real data may come with issues—such as missing values, outliers, and so on—that
    badly affect the performance of the model. Synthetics data provides a tool to
    cope with these statistical problems so that we might end up with improved modeling
    performance.
  prefs: []
  type: TYPE_NORMAL
- en: Disadvantages
  prefs: []
  type: TYPE_NORMAL
- en: Inability to preserve confidentiality
  prefs: []
  type: TYPE_NORMAL
- en: Due to cyberattacks, synthetic data might turn out to be a source of private-information
    leakage. For instance, the credentials of customers can be obtained by reverse
    engineering.
  prefs: []
  type: TYPE_NORMAL
- en: Quality concerns
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two important things that need to be taken into account during the
    synthetic data generation process: the researcher’s ability and the characteristics
    of data. These two points determine the quality process of synthetic data generation.
    If these points are lacking, it is likely to expect low-quality synthetic data.'
  prefs: []
  type: TYPE_NORMAL
- en: Generating Synthetic Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let’s start off with generating synthetic data first from real data, and then
    from a model. We will use real data from `fetch_california_housing` to generate
    synthetic data, and we will also use the CTGAN library (`CTGANSynthesizer`) in
    this process. The CTGAN library enables us to generate synthetic data with high
    fidelity to the original data based on generative adversarial networks (GANs).
    In generating synthetic data, the number of training steps is controlled by `epoch`
    parameter, which enables us to obtain synthetic data in a short period of time:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_synthetic_data_generation_and___span_class__keep_together__the_hidden_markov_model_in_finance__span__CO1-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Importing the `fetch_california_housing` data from `sklearn`
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_synthetic_data_generation_and___span_class__keep_together__the_hidden_markov_model_in_finance__span__CO1-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Generating independent and dependent variables from `fetch_california_​housing`
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_synthetic_data_generation_and___span_class__keep_together__the_hidden_markov_model_in_finance__span__CO1-3)'
  prefs: []
  type: TYPE_NORMAL
- en: Stacking two arrays using the stack function
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_synthetic_data_generation_and___span_class__keep_together__the_hidden_markov_model_in_finance__span__CO1-4)'
  prefs: []
  type: TYPE_NORMAL
- en: Importing `CTGANSynthesizer` for synthetic data generation
  prefs: []
  type: TYPE_NORMAL
- en: '[![5](assets/5.png)](#co_synthetic_data_generation_and___span_class__keep_together__the_hidden_markov_model_in_finance__span__CO1-5)'
  prefs: []
  type: TYPE_NORMAL
- en: Initializing the synthetic data generation process from `CTGANSynthesizer` with
    an `epoch` of 10
  prefs: []
  type: TYPE_NORMAL
- en: '[![6](assets/6.png)](#co_synthetic_data_generation_and___span_class__keep_together__the_hidden_markov_model_in_finance__span__CO1-6)'
  prefs: []
  type: TYPE_NORMAL
- en: Generating the sample
  prefs: []
  type: TYPE_NORMAL
- en: 'After generating the synthetic data, the similarity of the synthetic data can
    be checked by descriptive statistics. As always, descriptive statistics is handy,
    but we have another tool, the `evaluate` package from the Synthetic Data Vault
    (SDV). The output of this function will be a number between 0 and 1, which will
    indicate how similar the two tables are, with 0 being the worst and 1 being the
    best possible score. In addition, the result of the generation process can be
    visualized (in the resulting Figures [10-2](#eval_synt1) and [10-3](#eval_synt2))
    and compared with the real data so we can fully understand whether the synthetic
    data is a good representation of the real data or not:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_synthetic_data_generation_and___span_class__keep_together__the_hidden_markov_model_in_finance__span__CO2-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Importing the `evaluate` package for assessing the similarity of synthetic and
    real data
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_synthetic_data_generation_and___span_class__keep_together__the_hidden_markov_model_in_finance__span__CO2-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Running the `evaluate` package on our real and synthetic data
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_synthetic_data_generation_and___span_class__keep_together__the_hidden_markov_model_in_finance__span__CO2-3)'
  prefs: []
  type: TYPE_NORMAL
- en: Importing `TableEvaluator` for visual inspection of the similarities between
    synthetic and real data
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_synthetic_data_generation_and___span_class__keep_together__the_hidden_markov_model_in_finance__span__CO2-4)'
  prefs: []
  type: TYPE_NORMAL
- en: Running `TableEvaluator` with real and synthetic data
  prefs: []
  type: TYPE_NORMAL
- en: '[![5](assets/5.png)](#co_synthetic_data_generation_and___span_class__keep_together__the_hidden_markov_model_in_finance__span__CO2-5)'
  prefs: []
  type: TYPE_NORMAL
- en: Conducting visual analysis with `visual_evaluation` package
  prefs: []
  type: TYPE_NORMAL
- en: '![eval_synt1](assets/mlfr_1002.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10-2\. Evaluation of synthetic data generation-1
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '![eval_synt2](assets/mlfr_1003.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10-3\. Evaluation of synthetic data generation-2
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Figures [10-2](#eval_synt1) and [10-3](#eval_synt2) allow us to visually compare
    the performance of the real and synthetic data using the mean, standard deviation,
    and heatmaps. Even though `evaluation` has many different tools, it is worth restricting
    our attention to these for now.
  prefs: []
  type: TYPE_NORMAL
- en: 'As can you see, it is not hard to generate synthetic data from real data. Let’s
    now walk through a process by which we can generate synthetic data based on a
    model. I will use `sklearn`, the Swiss knife library for ML applications, both
    for classification and regression models. `make_regression` is helpful for generating
    synthetic data for running a regression model. Likewise, `make_classification`
    generates synthetic data for the purpose of running a classification model. The
    following code also generates [Figure 10-4](#regression_noise):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_synthetic_data_generation_and___span_class__keep_together__the_hidden_markov_model_in_finance__span__CO3-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Importing the `make_regression` package
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_synthetic_data_generation_and___span_class__keep_together__the_hidden_markov_model_in_finance__span__CO3-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Generating synthetic data for regression with 1000 samples, 3 features, and
    the standard deviation of the noise
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 10-4](#regression_noise) shows the effects of varying noise on synthetic
    data generation. As expected, as the standard deviation goes up, the `noise` parameter
    gets bigger and bigger.'
  prefs: []
  type: TYPE_NORMAL
- en: '![regression_noise](assets/mlfr_1004.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10-4\. Synthetic data generation with different noises
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'How about generating synthetic data for classification? Well, it does sound
    easy. We will follow a very similar process as regression. This time, we’ll use
    the `make_classification` package. After generating synthetic data, the effect
    of different numbers of classes will be observed via scatter plot ([Figure 10-5](#classification_class)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_synthetic_data_generation_and___span_class__keep_together__the_hidden_markov_model_in_finance__span__CO4-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Importing `make_classification` package
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_synthetic_data_generation_and___span_class__keep_together__the_hidden_markov_model_in_finance__span__CO4-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Generating synthetic data for classification with 100 samples, 4 features, and
    4 informative features
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 10-5](#classification_class) shows us the effect of having different
    classes on the synthetic data generation; in this case, synthetic data was generated
    with classes 2 to 5.'
  prefs: []
  type: TYPE_NORMAL
- en: '![classification_class](assets/mlfr_1005.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10-5\. Synthetic data generation with different classes
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'It is also possible to generate synthetic data from unsupervised learning.
    `make_blobs` is a package that can be used for this purpose. So we will generate
    synthetic data and eyeball the effect of different numbers of clusters on the
    synthetic data and produce [Figure 10-6](#synthetic_cluster):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_synthetic_data_generation_and___span_class__keep_together__the_hidden_markov_model_in_finance__span__CO5-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Importing the `make_blobs` package from `sklearn`
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_synthetic_data_generation_and___span_class__keep_together__the_hidden_markov_model_in_finance__span__CO5-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Generating synthetic data with 100 samples, 2 centers, and 2 features
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 10-6](#synthetic_cluster) shows how the synthetic data looks with varying
    clusters.'
  prefs: []
  type: TYPE_NORMAL
- en: Up until now, we have learned how to generate synthetic data using real data
    and models, using both supervised learning (regression and classification) and
    unsupervised learning. From this point on, we will explore the HMM and how to
    use it. From the financial standpoint, we will accomplish this task by factor
    investing. Factor investing is not a new topic but it has become more and more
    appealing after the celebrated Fama-French three-factor model (Fama and French
    1993). We will see the impact of HMM on identifying different states in the economy
    and take it into account in investment strategies. In the end, we will be able
    to compare the effectiveness of factor-investing based on the three-factor Fama-French
    model with HMM using the Sharpe ratio.
  prefs: []
  type: TYPE_NORMAL
- en: '![synthetic_cluster](assets/mlfr_1006.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10-6\. Synthetic data generation with different noises
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: A Brief Introduction to the Hidden Markov Model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: HMM gives us a probability distribution over sequential data, which is modeled
    by a Markov process with hidden states. HMM enables us to estimate probability
    transition from one state to another.
  prefs: []
  type: TYPE_NORMAL
- en: To illustrate, let us consider the stock market, in which stocks go up, go down,
    or stay constant. Pick a random state—say, going up. The next state would be either
    going up, going down, or staying constant. In this context, the state is thought
    to be a *hidden* state because we do not know with certainty which state will
    prevail next in the market.
  prefs: []
  type: TYPE_NORMAL
- en: 'In general, there are two fundamental assumptions that HMM makes: first, that
    all observations are solely dependent on the current state and are conditionally
    independent of other variables, and second, that the transition probabilities
    are homogenous and depend only on the current hidden state (Wang, Lin, and Mikhelson
    2020).'
  prefs: []
  type: TYPE_NORMAL
- en: Fama-French Three-Factor Model Versus HMM
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The model proposed by Fama and French (1993) paved the way for further studies
    expanding on CAPM. The model suggests brand-new explanatory variables to account
    for the changes in stock returns. The three factors in this model are market risk
    <math alttext="left-parenthesis upper R m minus upper R f right-parenthesis"><mrow><mo>(</mo>
    <mi>R</mi> <mi>m</mi> <mo>-</mo> <mi>R</mi> <mi>f</mi> <mo>)</mo></mrow></math>
    , small minus big (SMB), and high minus low (HML). Let’s briefly discuss these
    factors, as we will use them in the model below.
  prefs: []
  type: TYPE_NORMAL
- en: <math alttext="left-parenthesis upper R m minus upper R f right-parenthesis"><mrow><mo>(</mo>
    <mi>R</mi> <mi>m</mi> <mo>-</mo> <mi>R</mi> <mi>f</mi> <mo>)</mo></mrow></math>
    is basically the return of a market portfolio minus the risk-free rate, which
    is a hypothetical rate proxied by government-issued T-bills or similar assets.
  prefs: []
  type: TYPE_NORMAL
- en: SMB is a proxy for size effect. Size effect is an important variable used to
    explain several phenomenon in corporate finance. It is represented by different
    variables like logarithm of total assets. Fama-French takes size effect into account
    by calculating between returns of small-cap companies and big-cap companies.
  prefs: []
  type: TYPE_NORMAL
- en: The third factor is HML, which represents the spread in returns between companies
    with high book-to-market and companies with low book-to-market, comparing a company’s
    book value to its market value.
  prefs: []
  type: TYPE_NORMAL
- en: Empirical studies suggest that smaller SMB, higher HML, and smaller <math alttext="left-parenthesis
    upper R m minus upper R f right-parenthesis"><mrow><mo>(</mo> <mi>R</mi> <mi>m</mi>
    <mo>-</mo> <mi>R</mi> <mi>f</mi> <mo>)</mo></mrow></math> boosts stock returns.
    Theoretically speaking, identifying states before running the Fama-French three-factor
    model would boost the performance of the model. To see if this is the case with
    real data, let us run the factor investment model with or without the HMM.
  prefs: []
  type: TYPE_NORMAL
- en: 'The data is compiled from the [Kenneth R. French data library](https://oreil.ly/m5ShJ).
    As can be seen in the following, the variables included in the data are: `Date`,
    `Mkt-RF`, `SMB`, `HML`, and `RF`. It turns out all the variables are numerical
    aside from the date as expected. To save some time processing the model, the data
    has been trimmed to start from 2000-01-03:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Well, we have obtained the variables explaining the dynamic behind the stock
    return, but which stock return is it? It is supposed to be a return representing
    general well-being of the economy. A potential candidate for this kind of variable
    is the S&P 500 exchange-traded fund (ETF).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'ETF is a special type of investment fund and exchange-traded product that tracks
    industry, commodities, and so on. SPDR S&P 500 ETF (SPY) is a very well-known
    example tracking the S&P 500 Index. Some other ETFs are:'
  prefs: []
  type: TYPE_NORMAL
- en: Vanguard Total International Stock ETF (VXUS)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Energy Select Sector SPDR Fund (XLE)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: iShares Edge MSCI Min Vol USA ETF (USMV)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: iShares Morningstar Large-Cap ETF (JKD)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We’ll collect the daily closing SPY price from 2000-01-03 to 2021-04-30 to
    match the period we’re examining. After accessing the data, `ff_trim` and `SP_ETF`
    are merged so that we end up with the data including return and volatility on
    which the hidden states are determined:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_synthetic_data_generation_and___span_class__keep_together__the_hidden_markov_model_in_finance__span__CO6-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Calculating return of the SPY
  prefs: []
  type: TYPE_NORMAL
- en: 'It is assumed that there are three states in the economy: up, down, and constant.
    With this in mind, we run the HMM with full covariance, indicating independent
    components and a number of iterations (`n_iter`) of 100\. The following code block
    shows how we can apply Gaussian HMM and predict the hidden state:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_synthetic_data_generation_and___span_class__keep_together__the_hidden_markov_model_in_finance__span__CO7-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Fitting the Gaussian HMM with return data
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_synthetic_data_generation_and___span_class__keep_together__the_hidden_markov_model_in_finance__span__CO7-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Given the return data, predicting the hidden states
  prefs: []
  type: TYPE_NORMAL
- en: After predicting the hidden states, return data is concatenated with the hidden
    state so that we are able to see which return belongs to which state.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s now examine the result we obtained after running our Gaussian HMM analysis.
    In the following code block, we compute the mean and standard deviations of different
    states. Also, covariance, initial probability, and transition matrix are estimated:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The number of observations per state is given in [Table 10-1](#hmm_states).
  prefs: []
  type: TYPE_NORMAL
- en: Table 10-1\. Observations per state
  prefs: []
  type: TYPE_NORMAL
- en: '| State | Number of observations | Return means | Covariances |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 0 | 3014 | 0.0010 | 3.8482e-05 |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | 2092 | -0.0023 | 1.2643e-05 |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | 258 | -0.0003 | 1.8256e-05 |'
  prefs: []
  type: TYPE_TB
- en: 'We assume that the economy has three states, but this assumption rests on theory.
    However, if we want to make sure, there is a strong and convenient tool that can
    be applied: *Elbow Analysis*. After running Gaussian HMM, we obtain the likelihood
    result, and if there is no room for improvement—that is, the likelihood value
    becomes relatively stagnant—this is the point at which we can stop the analysis.
    Given the following result (along with the resultant [Figure 10-7](#optimum_cluster_hmm)),
    it turns out that three components is a good choice:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_synthetic_data_generation_and___span_class__keep_together__the_hidden_markov_model_in_finance__span__CO8-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Creating ten clusters based on Gaussian HMM via list comprehension
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_synthetic_data_generation_and___span_class__keep_together__the_hidden_markov_model_in_finance__span__CO8-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Calculating log-likelihood given the number of components
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 10-7](#optimum_cluster_hmm) shows the likelihood values per state.
    It is readily observable that after the third component, the curve becomes flatter.'
  prefs: []
  type: TYPE_NORMAL
- en: '![optimum_cluster_hmm](assets/mlfr_1007.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10-7\. Gaussian HMM scree plot
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Let us now visualize the states that we have obtained via Gaussian HMM and
    produce [Figure 10-8](#HMM_Regime_plot):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![HMM_Regime_plot](assets/mlfr_1008.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10-8\. Gaussian HMM states
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '[Figure 10-8](#HMM_Regime_plot) shows the behavior of the hidden states, and
    as expected, the distributions of these states are entirely different from each
    other, highlighting the importance of identifying the states.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Given the states, the SPY returns differ, which is something that we expect.
    After all these preparations, we can move forward and run the Fama-Frech three-factor
    model with and without Gaussian HMM. The Sharpe ratio, which we’ll calculate after
    modeling, will tell us which is the better risk-adjusted return. Analysis with
    Gaussian HMM reveals a Sharpe ratio of nearly 0.0981:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_synthetic_data_generation_and___span_class__keep_together__the_hidden_markov_model_in_finance__span__CO9-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Adjustment based on transition matrix
  prefs: []
  type: TYPE_NORMAL
- en: 'The traditional way to run Fama-Frech three-factor model is to apply linear
    regression and the following code block does that. After running linear regression,
    we can make predictions and then calculate the Sharpe ratio. We’ll see that linear
    regression produces a lower Sharpe ratio (0.0589) compared to one with Gaussian
    HMM:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This result suggests that Gaussian HMM delivers better risk-adjusted returns,
    making it useful in portfolio allocation, among other analyses.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following analysis tries to show what happens if the states of the index
    return need to be predicted based on the unseen data that can be used for backtesting
    for future analysis:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'As we have discussed, HMM provides a helpful and strong way for further expanding
    our analysis to get more reliable and accurate results. Before concluding this
    chapter, it is worthwhile to show the synthetic data generation process using
    Gaussian HMM. To do that, we should first define our initial parameters. These
    parameters are: initial probability (`startprob`), transition matrix (`transmat`),
    mean (`means`), and covariance (`covars`). Having defined the parameters, we can
    run Gaussian HMM and apply a random sampling procedure to end up with a desired
    number of observations, which is 1,000 in our case. The following code results
    in Figures [10-9](#HMM_syn_hist) and [10-10](#HMM_syn_line):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The distribution and line plot based on the synthetic data can be seen in Figures
    [10-9](#HMM_syn_hist) and [10-10](#HMM_syn_line). As we have a large enough sample
    size coming out of our Gaussian HMM, we observe normally distributed data.
  prefs: []
  type: TYPE_NORMAL
- en: '![HMM_syn_hist](assets/mlfr_1009.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10-9\. Gaussian HMM synthetic data histogram
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '![HMM_syn_line](assets/mlfr_1010.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10-10\. Gaussian HMM synthetic data line plot
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Conclusion
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this final chapter, we discussed two relatively new yet promising topics.
    Synthetic data generation enables us to conduct analysis in the absence of real
    data or in the case of breaching confidentiality, so it can be life-saver for
    a practitioner in these situations. In the second part of this chapter, we looked
    at Gaussian HMM and its usefulness in financial analysis and then used Gaussian
    HMM to generate synthetic data.
  prefs: []
  type: TYPE_NORMAL
- en: We saw how Gaussian HMM helps us obtain better results in portfolio allocations,
    but it is worth noting that this is not the only area in which we can apply HMM.
    Rather, there are many different areas where researchers take advantage of this
    method, and it’s a safe bet that more are to come.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Articles and books cited in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Ahuja, Ankana. 2020\. “The promise of synthetic data”. *Financial Times*. [*https://oreil.ly/qphEN*](https://oreil.ly/qphEN).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'El Emam, Khaled, Lucy Mosquera, and Richard Hoptroff. 2020\. *Practical Synthetic
    Data Generation: Balancing Privacy and the Broad Availability of Data*. Sebastopol:
    O’Reilly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Fama, Eugene F., and Kenneth R. French. 1993\. “Common Risk Factors in the
    Returns on Stocks and Bonds.” *Journal of Financial Economics* 33 (3): 56.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Patki, Neha, Roy Wedge, and Kalyan Veeramachaneni. 2016\. “The Synthetic Data
    Vault.” In the 2016 IEEE International Conference on Data Science and Advanced
    Analytics (DSAA), 399-410.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Wang, Matthew, Yi-Hong Lin, and Ilya Mikhelson. 2020\. “Regime-Switching Factor
    Investing with Hidden Markov Models.” *Journal of Risk and Financial Management*
    13 (12): 311.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL

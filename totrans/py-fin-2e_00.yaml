- en: Chapter 1\. Why Python for Finance?
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一章。为什么要用 Python 进行金融？
- en: Banks are essentially technology firms.
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 银行本质上是科技公司。
- en: ''
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Hugo Banziger
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[雨果·班齐格](https://www.example.org/hugo_banziger)'
- en: What Is Python?
  id: totrans-4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是 Python？
- en: 'Python is a high-level, multipurpose programming language that is used in a
    wide range of domains and technical fields. On the Python website you find the
    following executive summary (see [*https://www.python.org/doc/essays/blurb*](https://www.python.org/doc/essays/blurb)):'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Python 是一种高级、通用的编程语言，广泛应用于各个领域和技术领域。在 Python 网站上，您可以找到以下执行摘要（参见 [*https://www.python.org/doc/essays/blurb*](https://www.python.org/doc/essays/blurb)）：
- en: Python is an interpreted, object-oriented, high-level programming language with
    dynamic semantics. Its high-level built in data structures, combined with dynamic
    typing and dynamic binding, make it very attractive for Rapid Application Development,
    as well as for use as a scripting or glue language to connect existing components
    together. Python’s simple, easy to learn syntax emphasizes readability and therefore
    reduces the cost of program maintenance. Python supports modules and packages,
    which encourages program modularity and code reuse. The Python interpreter and
    the extensive standard library are available in source or binary form without
    charge for all major platforms, and can be freely distributed.
  id: totrans-6
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Python 是一种解释性的、面向对象的、高级的编程语言，具有动态语义。它的高级内置数据结构，结合动态类型和动态绑定，使其非常适合快速应用程序开发，以及用作脚本语言或粘合语言将现有组件连接在一起。Python
    简单、易学的语法强调可读性，从而降低了程序维护的成本。Python 支持模块和包，这鼓励了程序的模块化和代码的重用。Python 解释器和广泛的标准库可以在所有主要平台上免费获得源代码或二进制形式，并可以自由分发。
- en: This pretty well describes *why* Python has evolved into one of the major programming
    languages as of today. Nowadays, Python is used by the beginner programmer as
    well as by the highly skilled expert developer, at schools, in universities, at
    web companies, in large corporations and financial institutions, as well as in
    any scientific field.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这很好地描述了为什么 Python 已经发展成为今天的主要编程语言之一。现在，Python 不仅被初学者程序员使用，还被高技能专家开发者使用，在学校，在大学，在网络公司，在大型企业和金融机构以及在任何科学领域都有应用。
- en: 'Among others, Python is characterized by the following features:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Python 具有以下特点之一：
- en: Open source
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 开源
- en: Python and the majority of supporting libraries and tools available are open
    source and generally come with quite flexible and open licenses.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Python 及其大多数支持库和工具都是开源的，并且通常具有相当灵活和开放的许可证。
- en: Interpreted
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 解释性的
- en: The reference `CPython` implementation is an interpreter of the language that
    translates Python code at runtime to executable byte code.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 参考 `CPython` 实现是一种语言的解释器，它将 Python 代码在运行时转换为可执行字节码。
- en: Multiparadigm
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 多范式
- en: Python supports different programming and implementation paradigms, such as
    object orientation and imperative, functional, or procedural programming.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Python 支持不同的编程和实现范式，如面向对象和命令式、函数式或过程式编程。
- en: Multipurpose
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 多用途
- en: Python can be used for rapid, interactive code development as well as for building
    large applications; it can be used for low-level systems operations as well as
    for high-level analytics tasks.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Python 可用于快速、交互式的代码开发，也可用于构建大型应用程序；它可用于低级系统操作，也可用于高级分析任务。
- en: Cross-platform
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 跨平台
- en: Python is available for the most important operating systems, such as Windows,
    Linux, and Mac OS; it is used to build desktop as well as web applications; it
    can be used on the largest clusters and most powerful servers as well as on such
    small devices as the Raspberry Pi (see [*http://www.raspberrypi.org*](http://www.raspberrypi.org)).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Python 可用于最重要的操作系统，如 Windows、Linux 和 Mac OS；它用于构建桌面应用程序和 Web 应用程序；它可以用于最大的集群和最强大的服务器，也可以用于树莓派等小型设备（参见
    [*http://www.raspberrypi.org*](http://www.raspberrypi.org)）。
- en: Dynamically typed
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 动态类型
- en: Types in Python are in general inferred during runtime and not statically declared
    as in most compiled languages.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Python 中的类型通常在运行时推断，而不是像大多数编译语言中静态声明的那样。
- en: Indentation aware
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 缩进感知
- en: In contrast to the majority of other programming languages, Python uses indentation
    for marking code blocks instead of parentheses, brackets, or semicolons.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 与大多数其他编程语言不同，Python 使用缩进来标记代码块，而不是使用括号、方括号或分号。
- en: Garbage collecting
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 垃圾收集
- en: Python has automated garbage collection, avoiding the need for the programmer
    to manage memory.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Python 具有自动化垃圾收集，避免了程序员管理内存的需要。
- en: 'When it comes to Python syntax and what Python is all about, Python Enhancement
    Proposal 20—i.e., the so-called “Zen of Python”—provides the major guidelines.
    It can be accessed from every interactive shell with the command `import this`:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及到 Python 语法和 Python 的本质时，Python Enhancement Proposal 20——即所谓的“Python 之禅”提供了主要的指导原则。可以通过每个交互式
    shell 的命令`import this`访问它：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Brief History of Python
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python 的简要历史
- en: 'Although Python might still have the appeal of something *new* to some people,
    it has been around for quite a long time. In fact, development efforts began in
    the 1980s by Guido van Rossum from the Netherlands. He is still active in Python
    development and has been awarded the title of *Benevolent Dictator for Life* by
    the Python community (see [*http://en.wikipedia.org/wiki/History_of_Python*](http://en.wikipedia.org/wiki/History_of_Python)).
    The following can be considered milestones in the development of Python:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管对于一些人来说，Python 可能仍然具有一些*新鲜感*，但它已经存在了相当长的时间。事实上，Python 的开发工作始于 1980 年代，由来自荷兰的Guido
    van Rossum负责。他仍然活跃于 Python 的开发，并且被 Python 社区授予了*终身仁慈独裁者*的称号（参见[*http://en.wikipedia.org/wiki/History_of_Python*](http://en.wikipedia.org/wiki/History_of_Python)）。以下可以被视为
    Python 发展的里程碑：
- en: '**Python 0.9.0** released in 1991 (first release)'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Python 0.9.0** 发布于 1991 年（第一个版本）'
- en: '**Python 1.0** released in 1994'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Python 1.0** 发布于 1994 年'
- en: '**Python 2.0** released in 2000'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Python 2.0** 发布于 2000 年'
- en: '**Python 2.6** released in 2008'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Python 2.6** 发布于 2008 年'
- en: '**Python 3.0** released in 2008'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Python 3.0** 发布于 2008 年'
- en: '**Python 3.1** released in 2009'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Python 3.1** 发布于 2009 年'
- en: '**Python 2.7** released in 2010'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Python 2.7** 发布于 2010 年'
- en: '**Python 3.2** released in 2011'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Python 3.2** 发布于 2011 年'
- en: '**Python 3.3** released in 2012'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Python 3.3** 发布于 2012 年'
- en: '**Python 3.4** released in 2014'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Python 3.4** 发布于 2014 年'
- en: '**Python 3.5** released in 2015'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Python 3.5** 发布于 2015 年'
- en: '**Python 3.6** released in 2016'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Python 3.6** 发布于 2016 年'
- en: It is remarkable, and sometimes confusing to Python newcomers, that there are
    two major versions available, still being developed and, more importantly, in
    parallel use since 2008\. As of this writing, this will probably keep on for a
    little while since a mass of code available and in production is still Python
    2.6/2.7\. While the first edition of this book was based on Python 2.7, this second
    edition uses Python 3.6 throughout.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 令人瞩目的是，对于 Python 新手来说，Python 有两个主要版本可用，自 2008 年以来仍在开发中，并且更重要的是，同时使用。截至撰写本文时，这种情况可能会持续一段时间，因为大量的代码仍然是基于
    Python 2.6/2.7 并且在生产中使用。尽管本书的第一版是基于 Python 2.7 编写的，但本书的第二版全程使用的是 Python 3.6。
- en: The Python Ecosystem
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python 生态系统
- en: A major feature of Python as an ecosystem, compared to just being a programming
    language, is the availability of a large number of packages and tools. These packages
    and tools generally have to be *imported* when needed (e.g., a plotting library)
    or have to be started as a separate system process (e.g., a Python development
    environment). Importing means making a package available to the current namespace
    and the current Python interpreter process.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Python 作为一个生态系统的一个主要特点，与仅仅是一种编程语言相比，就是有大量的包和工具可用。这些包和工具通常在需要时必须被*导入*（例如，绘图库），或者必须作为一个单独的系统进程启动（例如，Python
    开发环境）。导入意味着使一个包对当前的命名空间和当前的 Python 解释器进程可用。
- en: 'Python itself already comes with a large set of packages and modules that enhance
    the basic interpreter in different directions. One speaks of the *Python Standard
    Library* (see [*https://docs.python.org/3/library/index.html*](https://docs.python.org/3/library/index.html)).
    For example, basic mathematical calculations can be done without any importing,
    while more specialized mathematical functions need to be imported through the
    `math` module:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Python 本身已经带有大量的包和模块，可以增强基本的解释器。人们谈论的是*Python 标准库*（参见[*https://docs.python.org/3/library/index.html*](https://docs.python.org/3/library/index.html)）。例如，可以进行基本的数学计算而无需任何导入，而更专业的数学函数需要通过`math`模块导入：
- en: '[PRE1]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: While `math` is a standard Python library available with any installation, there
    are many more libraries that can be installed optionally and that can be used
    in the very same fashion as the standard libraries. Such libraries are available
    from different (web) sources. However, it is generally advisable to use a Python
    package manager that makes sure that all libraries are consistent with each other
    (see [Chapter 2](ch02.html#infrastructure) for more on this topic).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 `math` 是一个标准的 Python 库，可以在任何安装中使用，但还有许多其他可选安装的库，可以像标准库一样使用。这些库可从不同的（网络）来源获取。然而，通常建议使用一个Python软件包管理器，以确保所有库都与彼此一致（有关此主题的更多信息，请参见[第2章](ch02.html#infrastructure)）。
- en: The code examples presented so far all use `IPython` (see [*http://www.ipython.org*](http://www.ipython.org)),
    which is one of the most popular interactive development environments (IDE) for
    Python. Although it started out as an enhanced shell only, it today has many features
    typically found in IDEs (e.g., support for profiling and debugging). Those features
    missing are typically provided by advanced text/code editors, like Sublime Text
    (see [*http://www.sublimetext.com*](http://www.sublimetext.com)). Therefore, it
    is not unusual to combine `IPython` with one’s text/code editor of choice to form
    the basic tool set for a Python development process.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止所提供的代码示例都使用了`IPython`（请参见[*http://www.ipython.org*](http://www.ipython.org)），这是Python最受欢迎的交互式开发环境（IDE）之一。尽管它最初只是一个增强的
    shell，但今天它具有许多通常在IDE中找到的特性（例如，支持分析和调试）。那些缺失的功能通常由高级文本/代码编辑器提供，如Sublime Text（请参见[*http://www.sublimetext.com*](http://www.sublimetext.com)）。因此，将`IPython`与个人选择的文本/代码编辑器结合起来形成Python开发过程的基本工具集并不罕见。
- en: '``IPython`` enhances the standard interactive shell in many ways. For example,
    it provides improved command-line history functions and allows for easy object
    inspection. For instance, the help text (`docstring`) for a function is printed
    by just adding a `?` behind or before the function name (adding `??` will provide
    even more information).'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '``IPython`` 在许多方面增强了标准的交互式 shell。例如，它提供了改进的命令行历史功能，并允许轻松地检查对象。例如，只需在函数名称前后添加`?`（添加`??`将提供更多信息），就可以打印函数的帮助文本（`docstring`）。'
- en: '`IPython` originally came in two popular versions: a *shell* version and a
    *browser-based version* (the `Notebook`). The `Notebook` variant has proven to
    be that useful and popular that it has become an independent, language-agnostic
    project and tool, called `Jupyter` now (see [*http://jupyter.org*](http://jupyter.org)).'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`IPython` 最初有两个流行版本：一个是 *shell* 版本，另一个是 *基于浏览器的版本*（`Notebook`）。`Notebook` 变体已被证明非常有用和受欢迎，因此它现在已成为一个独立的、与语言无关的项目和工具，现在称为
    `Jupyter`（见[*http://jupyter.org*](http://jupyter.org)）。'
- en: Python User Spectrum
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python 用户光谱
- en: Python does not only appeal to professional software developers; it is also
    of use for the casual developer as well as for domain experts and scientific developers.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Python 不仅吸引专业软件开发人员；它也对业余开发人员以及领域专家和科学开发人员有用。
- en: '*Professional software developers* find all that they need to efficiently build
    large applications. Almost all programming paradigms are supported; there are
    powerful development tools available; and any task can, in principle, be addressed
    with Python. These types of users typically build their own frameworks and classes,
    also work on the fundamental Python and scientific stack, and strive to make the
    most of the ecosystem.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '*专业软件开发人员*可以找到他们构建大型应用程序所需的一切。几乎支持所有编程范式；有强大的开发工具可用；并且原则上任何任务都可以通过Python来解决。这些类型的用户通常构建自己的框架和类，也在基本的Python和科学堆栈上工作，并努力充分利用生态系统。'
- en: '*Scientific developers* or *domain experts* are generally heavy users of certain
    libraries and frameworks, have built their own applications that they enhance
    and optimize over time, and tailor the ecosystem to their specific needs. These
    groups of users also generally engage in longer interactive sessions, rapidly
    prototyping new code as well as exploring and visualizing their research and/or
    domain data sets.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '*科学开发人员*或*领域专家*通常是某些库和框架的重度用户，已经构建了自己的应用程序，并随着时间的推移对其进行了增强和优化，并根据自己的特定需求定制了生态系统。这些用户群通常参与更长时间的交互式会话，快速原型化新代码，并探索和可视化他们的研究和/或领域数据集。'
- en: '*Casual programmers* like to use Python generally for specific problems they
    know that Python has its strengths in. For example, visiting the gallery page
    of `matplotlib`, copying a certain piece of visualization code provided there,
    and adjusting the code to their specific needs might be a beneficial use case
    for members of this group.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '*业余程序员* 喜欢使用 Python 通常是因为他们知道 Python 在特定问题上有优势。例如，访问 `matplotlib` 的画廊页面，复制那里提供的某个可视化代码片段，并根据他们的特定需求调整代码，可能是这个群体的成员的有益用例。'
- en: 'There is also another important group of Python users: *beginner programmers*,
    i.e., those that are just starting to program. Nowadays, Python has become a very
    popular language at universities, colleges, and even schools to introduce students
    to programming.^([1](ch01.html#idm140277704171024)) A major reason for this is
    that its basic syntax is easy to learn and easy to understand, even for the nondeveloper.
    In addition, it is helpful that Python supports almost all programming styles.^([2](ch01.html#idm140277704168880))'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 还有另一重要的 Python 用户群体：*初学者程序员*，即那些刚开始学习编程的人。如今，Python 已经成为大学、学院甚至学校介绍编程给学生的非常流行的语言之一。^([1](ch01.html#idm140277704171024))
    这主要是因为它的基本语法易于学习和理解，即使对于非开发者也是如此。此外，有帮助的是 Python 几乎支持所有的编程风格。^([2](ch01.html#idm140277704168880))
- en: The Scientific Stack
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 科学堆栈
- en: 'There is a certain set of libraries that is collectively labeled the *scientific
    stack*. This stack comprises, among others, the following packages:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 有一组被统称为 *科学堆栈* 的库。这个堆栈包括，但不限于，以下几个包：
- en: '[`NumPy`](http://www.numpy.org)'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '[`NumPy`](http://www.numpy.org)'
- en: '`NumPy` provides a multidimensional array object to store homogeneous or heterogeneous
    data; it also provides optimized functions/methods to operate on this array object.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`NumPy` 提供了一个多维数组对象来存储同构或异构数据；它还提供了优化的函数/方法来操作这个数组对象。'
- en: '[`SciPy`](http://www.scipy.org)'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SciPy`](http://www.scipy.org)'
- en: '`SciPy` is a collection of sub-packages and functions implementing important
    standard functionality often needed in science or finance; for example, one finds
    functions for cubic splines interpolation as well as for numerical integration.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`SciPy` 是一个子包和函数的集合，实现了科学或金融中经常需要的重要标准功能；例如，可以找到用于三次样条插值以及数值积分的函数。'
- en: '[`matplotlib`](http://www.matplotlib.org)'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '[`matplotlib`](http://www.matplotlib.org)'
- en: This is the most popular plotting and visualization library for Python, providing
    both 2D and 3D visualization capabilities.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 Python 中最受欢迎的绘图和可视化库，提供了 2D 和 3D 可视化功能。
- en: '[`PyTables`](http://www.pytables.org)'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '[`PyTables`](http://www.pytables.org)'
- en: '`PyTables` is a popular wrapper for the `HDF5` data storage library (see [*http://www.hdfgroup.org/HDF5/*](http://www.hdfgroup.org/HDF5/));
    it is a library to implement optimized, disk-based I/O operations based on a hierarchical
    database/file format.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '`PyTables` 是 `HDF5` 数据存储库的流行封装器（参见[*http://www.hdfgroup.org/HDF5/*](http://www.hdfgroup.org/HDF5/)）；它是一个用于实现基于磁盘的优化
    I/O 操作的库，基于分层数据库/文件格式。'
- en: '[`pandas`](http://pandas.pydata.org)'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '[`pandas`](http://pandas.pydata.org)'
- en: '`pandas` builds on `NumPy` and provides richer classes for the management and
    analysis of time series and tabular data; it is tightly integrated with `matplotlib`
    for plotting and `PyTables` for data storage and retrieval.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`pandas` 建立在 `NumPy` 之上，提供了更丰富的类来管理和分析时间序列和表格数据；它与 `matplotlib` 紧密集成用于绘图和 `PyTables`
    用于数据存储和检索。'
- en: '[`Scikit-Learn`](http://scikit-learn.org)'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '[`Scikit-Learn`](http://scikit-learn.org)'
- en: '`Scikit-Learn` is a popular machine learning (ML) package that provides a unified
    API for many different ML algorithms, for instance, for estimation, classification
    or clustering.'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`Scikit-Learn` 是一个流行的机器学习（ML）包，为许多不同的 ML 算法提供了统一的 API，例如，用于估计、分类或聚类的算法。'
- en: Depending on the specific domain or problem, this stack is enlarged by additional
    libraries, which more often than not have in common that they build on top of
    one or more of these fundamental libraries. However, the *least common denominator*
    or *basic building block* in general is the `NumPy` `ndarray` class (see [Chapter 4](ch04.html#numpy)),
    or nowadays the `pandas` `DataFrame` class (see [Chapter 5](ch05.html#pandas)).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 根据特定的领域或问题，这个堆栈会通过额外的库进行扩展，这些库往往有一个共同点，即它们建立在一个或多个基本库的基础之上。然而，在一般情况下，最常见的最小公分母或基本构建块是
    `NumPy` 的 `ndarray` 类（参见 [第四章](ch04.html#numpy)），或者现在是 `pandas` 的 `DataFrame`
    类（参见 [第五章](ch05.html#pandas)）。
- en: 'Taking Python as a programming language alone, there are a number of other
    languages available that can probably keep up with its syntax and elegance. For
    example, `Ruby` is quite a popular language often compared to Python. On the language’s
    web site [*http://www.ruby-lang.org*](http://www.ruby-lang.org) you find the following
    description:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 单纯将 Python 视为一种编程语言，还有许多其他语言可供选择，可能与其语法和优雅程度相媲美。例如，`Ruby` 是一种相当流行的语言，经常与 Python
    进行比较。在该语言的网站 [*http://www.ruby-lang.org*](http://www.ruby-lang.org) 上，您会找到以下描述：
- en: A dynamic, open source programming language with a focus on simplicity and productivity.
    It has an elegant syntax that is natural to read and easy to write.
  id: totrans-72
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 一种以简洁和高效为重点的动态、开源编程语言。它具有优雅的语法，自然易读且易于编写。
- en: The majority of people using Python would probably also agree with the exact
    same statement being made about Python itself. However, what distinguishes Python
    for many users from equally appealing languages like `Ruby` is the availability
    of the scientific stack. This makes Python not only a good and elegant language
    to use, but also one that is capable of replacing domain-specific languages and
    tool sets like Matlab or R. It provides by default also anything that you would
    expect, say, as a seasoned web developer or systems administrator. In addition,
    Python is also good at interfacing with domain specific languages, such as R,
    so that the decision usually is not about *either Python or something else* — it
    is rather about which language should be the major one.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数使用 Python 的人可能也同意对 Python 本身作出完全相同的声明。然而，与 `Ruby` 等同样吸引人的语言相比，许多用户认为 Python
    的特点在于科学堆栈的可用性。这使得 Python 不仅是一种好的、优雅的语言，还能够替代类似 Matlab 或 R 这样的领域特定语言和工具集。它默认提供了你所期望的任何东西，比如一位经验丰富的
    Web 开发人员或系统管理员。此外，Python 也擅长与领域特定语言（如 R）进行接口交互，因此通常决策并不是关于“要么选择 Python 要么选择其他语言”，而是关于选择哪种语言作为主要语言。
- en: Technology in Finance
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 金融科技
- en: Now that we have some rough ideas of what Python is all about, it makes sense
    to step back a bit and to briefly contemplate the role of technology in finance.
    This will put us in a position to better judge the role Python already plays and,
    even more importantly, will probably play in the financial industry of the future.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对 Python 的大致了解有了一些想法，稍微退后一步，简要思考一下技术在金融中的作用是有意义的。这将使我们能够更好地评判 Python 已经扮演的角色，甚至更重要的是，可能会在未来的金融行业中发挥的作用。
- en: In a sense, technology per se is *nothing special* to financial institutions
    (as compared, for instance, to industrial companies) or to the finance function
    (as compared to other corporate functions, like logistics). However, in recent
    years, spurred by innovation and also regulation, banks and other financial institutions
    like hedge funds have evolved more and more into technology companies instead
    of being *just* financial intermediaries. Technology has become a major asset
    for almost any financial institution around the globe, having the potential to
    lead to competitive advantages as well as disadvantages. Some background information
    can shed light on the reasons for this development.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在某种意义上，技术本身对金融机构（例如，与工业公司相比）或金融职能（例如，与物流等其他企业职能相比）并不“特别”。然而，近年来，在创新和监管的推动下，银行和其他金融机构（如对冲基金）已经越来越多地演变成了技术公司，而不仅仅是“仅仅”是金融中介。技术已经成为全球几乎所有金融机构的重要资产，具有带来竞争优势以及劣势的潜力。一些背景信息可以阐明这一发展的原因。
- en: Technology Spending
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 技术支出
- en: 'Banks and financial institutions together form the industry that spends the
    most on technology on an annual basis. The following statement therefore shows
    not only that technology is important for the financial industry, but that the
    financial industry is also really important to the technology sector ([http://www.idc.com](https://www.idc.com/getdoc.jsp?containerId=prUS41216616)):'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 银行和金融机构共同构成了年度技术支出最多的行业。因此，以下声明不仅显示了技术对金融业的重要性，而且金融业对技术行业也非常重要（[http://www.idc.com](https://www.idc.com/getdoc.jsp?containerId=prUS41216616)）：
- en: …, financial services IT spending will reach almost $480 billion worldwide in
    2016 with a five-year compound annual growth rate (CAGR) of 4.2%.
  id: totrans-79
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: …，截至 2016 年，全球金融服务 IT 支出将达到近 4800 亿美元，年复合增长率（CAGR）为 4.2%。
- en: ''
  id: totrans-80
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: IDC
  id: totrans-81
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: IDC
- en: 'In particular, banks and other financial institutions are engaging in a race
    to move their business and operating models on a digital basis ([http://www.statista.com](https://www.statista.com/statistics/379517/forecast-of-bank-spending-on-new-tech-by-region/)):'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 特别是，银行和其他金融机构正在竞相将业务和运营模式转移到数字化基础上 ([http://www.statista.com](https://www.statista.com/statistics/379517/forecast-of-bank-spending-on-new-tech-by-region/))：
- en: Bank spending on new technologies was predicted to amount to 19.9 billion U.S.
    dollars in 2017 in North America.
  id: totrans-83
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 预计2017年北美银行对新技术的支出将达到199亿美元。
- en: ''
  id: totrans-84
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The banks develop current systems and work on new technological solutions in
    order to increase their competitiveness on the global market and to attract clients
    interested in new online and mobile technologies. It is a big opportunity for
    global Fintech companies which provide new ideas and software solutions for the
    banking industry.
  id: totrans-85
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 银行开发当前系统并致力于新技术解决方案，以增强其在全球市场上的竞争力并吸引对新在线和移动技术感兴趣的客户。这对于为银行业提供新想法和软件解决方案的全球金融科技公司来说是一个巨大的机遇。
- en: ''
  id: totrans-86
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Statista
  id: totrans-87
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Statista
- en: Large, multinational banks today generally employ thousands of developers that
    maintain existing systems and build new ones. Large investment banks with heavy
    technological requirements show technology budgets often of several billion USD
    per year.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 当今，大型跨国银行通常雇佣数千名开发人员来维护现有系统并构建新系统。
- en: Technology as Enabler
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 技术作为推动因素
- en: 'The technological development has also contributed to innovations and efficiency
    improvements in the financial sector:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 技术发展也促进了金融领域的创新和效率提升：
- en: The financial services industry has seen drastic technology-led changes over
    the past few years. Many executives look to their IT departments to improve efficiency
    and facilitate game-changing innovation — while somehow also lowering costs and
    continuing to support legacy systems. Meanwhile, FinTech start-ups are encroaching
    upon established markets, leading with customer-friendly solutions developed from
    the ground up and unencumbered by legacy systems.
  id: totrans-91
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 金融服务行业在过去几年里经历了技术引领的剧变。许多高管指望他们的IT部门提高效率并促进游戏改变式的创新，同时以某种方式降低成本并继续支持遗留系统。与此同时，金融科技初创企业正在侵入已建立的市场，以客户友好的解决方案为首，这些解决方案从零开始开发，并且不受遗留系统的束缚。
- en: ''
  id: totrans-92
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: PwC 19th Annual Global CEO Survey 2016
  id: totrans-93
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 《普华永道第19届全球CEO调查报告》（2016年）
- en: As a side effect of the increasing efficiency, competitive advantages must often
    be looked for in ever more complex products or transactions. This in turn inherently
    increases risks and makes risk management as well as oversight and regulation
    more and more difficult. The financial crisis of 2007 and 2008 tells the story
    of potential dangers resulting from such developments. In a similar vein, “algorithms
    and computers gone wild” also represent a potential risk to the financial markets;
    this materialized dramatically in the so-called *flash crash* of May 2010, where
    automated selling led to large intraday drops in certain stocks and stock indices
    (see [*http://en.wikipedia.org/wiki/2010_Flash_Crash*](http://en.wikipedia.org/wiki/2010_Flash_Crash)).
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 随着效率日益提高，寻找竞争优势往往要求在越来越复杂的产品或交易中寻找。这反过来会增加风险，并使风险管理以及监督和监管变得越来越困难。2007年和2008年的金融危机讲述了由此类发展带来的潜在危险。同样，“算法和计算机失控”也代表了对金融市场的潜在风险；这在2010年5月的所谓*闪电崩盘*中得到了戏剧性的体现，那时自动卖出导致某些股票和股票指数在一天内大幅下跌（参见[*http://en.wikipedia.org/wiki/2010_Flash_Crash*](http://en.wikipedia.org/wiki/2010_Flash_Crash)）。
- en: Technology and Talent as Barriers to Entry
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 技术和人才作为进入壁垒
- en: 'On the one hand, technology advances reduce cost over time, *ceteris paribus*.
    On the other hand, financial institutions continue to invest heavily in technology
    to both gain market share and defend their current positions. To be active in
    certain areas in finance today often brings with it the need for large-scale investments
    in both technology and skilled staff. As an example, consider the derivatives
    analytics space:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 一方面，技术的进步会随着时间的推移降低成本，*其他条件不变*。另一方面，金融机构继续大力投资于技术，以获得市场份额并捍卫其当前地位。要在今天的某些金融领域活跃起来，通常需要进行大规模的技术和人才投资。例如，考虑一下衍生品分析领域：
- en: Aggregated over the total software lifecycle, firms adopting in-house strategies
    for OTC [derivatives] pricing will require investments between $25 million and
    $36 million alone to build, maintain, and enhance a complete derivatives library.
  id: totrans-97
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在总体软件生命周期中，采用内部策略进行场外[衍生品]定价的公司，仅建立、维护和增强完整的衍生品库就需要投资额在$25百万到$36百万之间。
- en: ''
  id: totrans-98
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Ding 2010
  id: totrans-99
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Ding 2010
- en: Not only is it costly and time-consuming to build a full-fledged derivatives
    analytics library, but you also need to have *enough experts* to do so. And these
    experts have to have the right tools and technologies available to accomplish
    their tasks.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 建立完整的衍生品分析库不仅成本高昂且耗时，你还需要*足够的专家*来完成这项工作。而且这些专家必须有适当的工具和技术来完成他们的任务。
- en: 'Another quote about the early days of Long-Term Capital Management (LTCM),
    formerly one of the most respected quantitative hedge funds—which, however, went
    bust in the late 1990s—further supports this insight about technology and talent:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 另一则关于长期资本管理（LTCM）早期的报价支持了关于技术和人才的这一见解：LTCM曾是最受尊敬的量化对冲基金之一，然而在1990年代末破产。
- en: Meriwether spent $20 million on a state-of-the-art computer system and hired
    a crack team of financial engineers to run the show at LTCM, which set up shop
    in Greenwich, Connecticut. It was risk management on an industrial level.
  id: totrans-102
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Meriwether花费了$20百万在格林威治，康涅狄格州建立了一套最先进的计算机系统，并雇佣了一支精英金融工程团队来运作LTCM，这是工业级风险管理。
- en: ''
  id: totrans-103
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Patterson 2010
  id: totrans-104
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Patterson 2010
- en: The same computing power that Meriwether had to buy for millions of dollars
    is today probably available for thousands. On the other hand, trading, pricing,
    and risk management have become so complex for larger financial institutions that
    today they need to deploy IT infrastructures with tens of thousands of computing
    cores.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: Meriwether为数百万美元购买的同样计算能力，如今可能只需数千美元就能获得。另一方面，对于更大的金融机构来说，交易、定价和风险管理已变得如此复杂，以至于今天它们需要部署拥有数万计算核心的IT基础设施。
- en: Ever-Increasing Speeds, Frequencies, Data Volumes
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 日益增加的速度、频率和数据量
- en: 'There is one dimension of the finance industry that has been influenced most
    by technological advances: the *speed* and *frequency* with which financial transactions
    are decided and executed. The recent book by Lewis (2014) describes so-called
    *flash trading*—i.e., trading at the highest speeds possible—in vivid detail.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 金融行业的一个维度受到技术进步影响最大：金融交易的决策和执行*速度*和*频率*。Lewis（2014年）的新书详细描述了所谓的*闪电交易*—即以最高速度进行交易。
- en: 'On the one hand, increasing data availability on ever-smaller scales makes
    it necessary to react in real time. On the other hand, the increasing speed and
    frequency of trading let the data volumes further increase. This leads to processes
    that reinforce each other and push the average time scale for financial transactions
    systematically down:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 一方面，不断增加的数据可用性在越来越小的尺度上使得实时反应变得必要。另一方面，交易速度和频率的增加使得数据量进一步增加。这导致了一些过程相互强化，并将金融交易的平均时间尺度系统性地推向下降：
- en: Renaissance’s Medallion fund gained an astonishing 80 percent in 2008, capitalizing
    on the market’s extreme volatility with its lightning-fast computers. Jim Simons
    was the hedge fund world’s top earner for the year, pocketing a cool $2.5 billion.
  id: totrans-109
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Renaissance的Medallion基金在2008年惊人地增长了80%，利用其闪电般快速的计算机资本化市场极端波动。吉姆·西蒙斯成为当年对冲基金界的最高收入者，赚得了25亿美元。
- en: ''
  id: totrans-110
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Patterson 2010
  id: totrans-111
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Patterson 2010
- en: Thirty years’ worth of daily stock price data for a single stock represents
    roughly 7,500 quotes. This kind of data is what most of today’s finance theory
    is based on. For example, theories like the modern portfolio theory (MPT), the
    capital asset pricing model (CAPM), and value-at-risk (VaR) all have their foundations
    in daily stock price data.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 单支股票的三十年日度股价数据大约包括7,500个报价。今天大部分金融理论基于这种数据。例如，现代投资组合理论（MPT）、资本资产定价模型（CAPM）和风险价值（VaR）理论都基于日度股价数据。
- en: 'In comparison, on a typical trading day the stock price of Apple Inc. (AAPL)
    is quoted around 15,000 times—two times as many quotes as seen for end-of-day
    quoting over a time span of 30 years. This brings with it a number of challenges:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，在典型的交易日，苹果公司（AAPL）的股价约被报价15,000次—比过去30年末日报价看到的报价多两倍。这带来了一系列挑战：
- en: Data processing
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 数据处理
- en: It does not suffice to consider and process end-of-day quotes for stocks or
    other financial instruments; “too much” happens during the day for some instruments
    during 24 hours for 7 days a week.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 仅仅考虑和处理股票或其他金融工具的日终行情是不够的；对于某些工具来说，每天24小时，每周7天都会发生“太多”的事情。
- en: Analytics speed
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 分析速度
- en: Decisions often have to be made in milliseconds or even faster, making it necessary
    to build the respective analytics capabilities and to analyze large amounts of
    data in real time.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 决策通常需要在毫秒甚至更快的时间内做出，因此需要建立相应的分析能力，并实时分析大量数据。
- en: Theoretical foundations
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 理论基础
- en: Although traditional finance theories and concepts are far from being perfect,
    they have been well tested (and sometimes well rejected) over time; for the millisecond
    scales important as of today, consistent concepts and theories that have proven
    to be somewhat robust over time are still missing.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管传统的金融理论和概念远非完美，但它们随着时间的推移已经经过了充分的测试（有时也被充分地拒绝）；就当今至关重要的毫秒级时间尺度而言，仍然缺乏一致的、经过时间检验的概念和理论，这些理论已被证明在一定程度上是相对稳健的。
- en: All these challenges can in principle only be addressed by modern technology.
    Something that might also be a little bit surprising is that the lack of consistent
    theories often is addressed by technological approaches, in that high-speed algorithms
    exploit market microstructure elements (e.g., order flow, bid-ask spreads) rather
    than relying on some kind of financial reasoning.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些挑战原则上只能通过现代技术来解决。可能有点令人惊讶的是，缺乏一致性理论往往是通过技术手段来解决的，高速算法利用市场微观结构元素（例如，订单流量、买卖价差），而不是依赖某种金融推理。
- en: The Rise of Real-Time Analytics
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实时分析的崛起
- en: 'There is one discipline that has seen a strong increase in importance in the
    finance industry: *financial and data analytics*. This phenomenon has a close
    relationship to the insight that speeds, frequencies, and data volumes increase
    at a rapid pace in the industry. In fact, real-time analytics can be considered
    the industry’s answer to this trend.'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个学科在金融行业的重要性大大增加：*金融和数据分析*。这一现象与速度、频率和数据量在行业中迅速增长的认识密切相关。事实上，实时分析可以被认为是行业对这一趋势的回应。
- en: Roughly speaking, “financial and data analytics” refers to the discipline of
    applying software and technology in combination with (possibly advanced) algorithms
    and methods to gather, process, and analyze data in order to gain insights, to
    make decisions, or to fulfill regulatory requirements, for instance. Examples
    might include the estimation of sales impacts induced by a change in the pricing
    structure for a financial product in the retail branch of a bank. Another example
    might be the large-scale overnight calculation of credit value adjustments (CVA)
    for complex portfolios of derivatives trades of an investment bank.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 大致而言，“金融和数据分析”是指将软件和技术与（可能是先进的）算法和方法相结合，以收集、处理和分析数据，以获取见解、做出决策或满足监管要求的学科。例如，估算银行零售业务中金融产品定价结构变化引起的销售影响。另一个例子可能是对投资银行衍生品交易的复杂投资组合进行大规模的隔夜信用价值调整（CVA）计算。
- en: 'There are two major challenges that financial institutions face in this context:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，金融机构面临着两个主要挑战：
- en: Big data
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 大数据
- en: Banks and other financial institutions had to deal with massive amounts of data
    even before the term “big data” was coined; however, the amount of data that has
    to be processed during single analytics tasks has increased tremendously over
    time, demanding both increased computing power and ever-larger memory and storage
    capacities.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 即使在“大数据”这个术语被创造之前，银行和其他金融机构也不得不处理大量数据；然而，随着时间的推移，单个分析任务中需要处理的数据量已经大大增加，要求提高计算能力以及越来越大的内存和存储容量。
- en: Real-time economy
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 实时经济
- en: In the past, decision makers could rely on structured, regular planning, decision,
    and (risk) management processes, whereas they today face the need to take care
    of these functions in real time; several tasks that have been taken care of in
    the past via overnight batch runs in the back office have now been moved to the
    front office and are executed in real time.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去，决策者可以依靠结构化的、定期的规划、决策和（风险）管理流程，而今天他们面临的是需要实时处理这些功能的需求；过去通过夜间批量运行在后台处理的几项任务现在已被转移到前台，并实时执行。
- en: Again, one can observe an interplay between advances in technology and financial/business
    practice. On the one hand, there is the need to constantly improve analytics approaches
    in terms of speed and capability by applying modern technologies. On the other
    hand, advances on the technology side allow new analytics approaches that were
    considered impossible (or infeasible due to budget constraints) a couple of years
    or even months ago.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，人们可以观察到技术进步与金融/商业实践之间的相互作用。一方面，需要不断应用现代技术来提高分析方法的速度和能力。另一方面，技术的进步使得几年甚至几个月前被认为不可能（或由于预算限制而不可行）的新分析方法成为可能。
- en: One major trend in the analytics space has been the utilization of parallel
    architectures on the CPU (central processing unit) side and massively parallel
    architectures on the GPGPU (general-purpose graphical processing units) side.
    Current GPGPUs often have more than 1,000 computing cores, making necessary a
    sometimes radical rethinking of what parallelism might mean to different algorithms.
    What is still an obstacle in this regard is that users generally have to learn
    new paradigms and techniques to harness the power of such hardware.^([3](ch01.html#idm140277704069440))
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 分析领域的一个主要趋势是在 CPU（中央处理单元）端利用并行架构和在 GPGPU（通用图形处理单元）端利用大规模并行架构。当前的 GPGPU 通常拥有
    1,000 多个计算核心，这使得有时需要彻底重新思考并行对不同算法可能意味着什么。在这方面仍然存在的障碍是用户通常必须学习新的范例和技术来利用这种硬件的性能。^（[3](ch01.html#idm140277704069440)）
- en: Python for Finance
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 金融中的 Python
- en: 'The previous section describes some selected aspects characterizing the role
    of technology in finance:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 上一节描述了金融中技术角色的一些选定方面：
- en: Costs for technology in the finance industry
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 金融业技术成本
- en: Technology as an enabler for new business and innovation
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 技术作为新业务和创新的推动者
- en: Technology and talent as barriers to entry in the finance industry
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 技术和人才作为金融行业进入壁垒
- en: Increasing speeds, frequencies, and data volumes
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 速度、频率和数据量的增加
- en: The rise of real-time analytics
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实时分析的兴起
- en: In this section, we want to analyze how Python can help in addressing several
    of the challenges implied by these aspects. But first, on a more fundamental level,
    let us examine Python for finance from a language and syntax standpoint.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们想要分析 Python 如何帮助解决这些方面所暗示的几个挑战。但首先，从更基本的角度来看，让我们从语言和语法的角度来审视 Python 在金融领域的作用。
- en: Finance and Python Syntax
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 金融和 Python 语法
- en: Most people who make their first steps with Python in a finance context may
    attack an algorithmic problem. This is similar to a scientist who, for example,
    wants to solve a differential equation, wants to evaluate an integral, or simply
    wants to visualize some data. In general, at this stage, there is only little
    thought spent on topics like a formal development process, testing, documentation,
    or deployment. However, this especially seems to be the stage when people fall
    in love with Python. A major reason for this might be that the Python syntax is
    generally quite close to the mathematical syntax used to describe scientific problems
    or financial algorithms.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在金融环境中首次尝试 Python 的大多数人可能会面临算法问题。这类似于科学家想要解决微分方程、评估积分或简单地可视化一些数据的情况。一般来说，在这个阶段，很少有人会花费时间思考形式化的开发过程、测试、文档编写或部署等问题。然而，这似乎是人们开始喜爱
    Python 的阶段。其中一个主要原因可能是 Python 语法通常与用于描述科学问题或金融算法的数学语法非常接近。
- en: We can illustrate this phenomenon by a simple financial algorithm, namely the
    valuation of a European call option by Monte Carlo simulation. We will consider
    a Black-Scholes-Merton (BSM) setup (see also [Link to Come]) in which the option’s
    underlying risk factor follows a geometric Brownian motion.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过一个简单的金融算法来说明这一现象，即通过蒙特卡洛模拟对欧式看涨期权进行估值。我们将考虑一个 Black-Scholes-Merton（BSM）设置（也见[待续链接]），其中期权的基础风险因素遵循几何布朗运动。
- en: 'Suppose we have the following numerical *parameter values* for the valuation:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们对估值有以下数值*参数值*：
- en: Initial stock index level <math alttext="upper S 0 equals 100"><mrow><msub><mi>S</mi>
    <mn>0</mn></msub> <mo>=</mo> <mn>100</mn></mrow></math>
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 初始股指水平 <math alttext="upper S 0 equals 100"><mrow><msub><mi>S</mi> <mn>0</mn></msub>
    <mo>=</mo> <mn>100</mn></mrow></math>
- en: Strike price of the European call option <math alttext="upper K equals 105"><mrow><mi>K</mi>
    <mo>=</mo> <mn>105</mn></mrow></math>
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 欧式看涨期权的行权价格 <math alttext="upper K equals 105"><mrow><mi>K</mi> <mo>=</mo> <mn>105</mn></mrow></math>
- en: Time-to-maturity <math alttext="upper T equals 1"><mrow><mi>T</mi> <mo>=</mo>
    <mn>1</mn></mrow></math> year
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Constant, riskless short rate <math alttext="r equals 0.05"><mrow><mi>r</mi>
    <mo>=</mo> <mn>0</mn> <mo>.</mo> <mn>05</mn></mrow></math>
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Constant volatility <math><mrow><mi>σ</mi> <mo>=</mo> <mn>0</mn> <mo>.</mo>
    <mn>2</mn></mrow></math>
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the BSM model, the index level at maturity is a random variable, given by
    [Equation 1-1](#bsm_rv) with *z* being a standard normally distributed random
    variable.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: Equation 1-1\. Black-Scholes-Merton (1973) index level at maturity
  id: totrans-149
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: <math display="block" alttext="upper S Subscript upper T Baseline equals upper
    S 0 exp left-parenthesis left-parenthesis r minus one-half sigma squared right-parenthesis
    upper T plus sigma StartRoot upper T EndRoot z right-parenthesis"><mrow><msub><mi>S</mi>
    <mi>T</mi></msub> <mo>=</mo> <msub><mi>S</mi> <mn>0</mn></msub> <mo form="prefix">exp</mo>
    <mfenced separators="" open="(" close=")"><mfenced separators="" open="(" close=")"><mi>r</mi>
    <mo>-</mo> <mfrac><mn>1</mn> <mn>2</mn></mfrac> <msup><mi>σ</mi> <mn>2</mn></msup></mfenced>
    <mi>T</mi> <mo>+</mo> <mi>σ</mi> <msqrt><mi>T</mi></msqrt> <mi>z</mi></mfenced></mrow></math>
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: <math display="block" alttext="upper S Subscript upper T Baseline equals upper
    S 0 exp left-parenthesis left-parenthesis r minus one-half sigma squared right-parenthesis
    upper T plus sigma StartRoot upper T EndRoot z right-parenthesis"><mrow><msub><mi>S</mi>
    <mi>T</mi></msub> <mo>=</mo> <msub><mi>S</mi> <mn>0</mn></msub> <mo form="prefix">exp</mo>
    <mfenced separators="" open="(" close=")"><mfenced separators="" open="(" close=")"><mi>r</mi>
    <mo>-</mo> <mfrac><mn>1</mn> <mn>2</mn></mfrac> <msup><mi>σ</mi> <mn>2</mn></msup></mfenced>
    <mi>T</mi> <mo>+</mo> <mi>σ</mi> <msqrt><mi>T</mi></msqrt> <mi>z</mi></mfenced></mrow></math>
- en: 'The following is an *algorithmic description* of the Monte Carlo valuation
    procedure:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: Draw <math><mi>I</mi></math> (pseudo)random numbers <math alttext="z left-parenthesis
    i right-parenthesis comma i i n left-brace 1 comma 2 comma period period period
    comma upper I right-brace"><mrow><mi>z</mi> <mo>(</mo> <mi>i</mi> <mo>)</mo> <mo>,</mo>
    <mi>i</mi> <mi>i</mi> <mi>n</mi> <mo>{</mo> <mn>1</mn> <mo>,</mo> <mn>2</mn> <mo>,</mo>
    <mo>.</mo> <mo>.</mo> <mo>.</mo> <mo>,</mo> <mi>I</mi> <mo>}</mo></mrow></math>
    , from the standard normal distribution.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Calculate all resulting index levels at maturity <math alttext="upper S Subscript
    upper T Baseline left-parenthesis i right-parenthesis"><mrow><msub><mi>S</mi>
    <mi>T</mi></msub> <mrow><mo>(</mo> <mi>i</mi> <mo>)</mo></mrow></mrow></math>
    for given <math alttext="z left-parenthesis i right-parenthesis"><mrow><mi>z</mi>
    <mo>(</mo> <mi>i</mi> <mo>)</mo></mrow></math> and [Equation 1-1](#bsm_rv).
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Calculate all inner values of the option at maturity as <math alttext="h Subscript
    upper T Baseline left-parenthesis i right-parenthesis equals max left-parenthesis
    upper S Subscript upper T Baseline left-parenthesis i right-parenthesis minus
    upper K comma 0 right-parenthesis"><mrow><msub><mi>h</mi> <mi>T</mi></msub> <mrow><mo>(</mo>
    <mi>i</mi> <mo>)</mo></mrow> <mo>=</mo> <mo movablelimits="true" form="prefix">max</mo>
    <mrow><mo>(</mo> <msub><mi>S</mi> <mi>T</mi></msub> <mrow><mo>(</mo> <mi>i</mi>
    <mo>)</mo></mrow> <mo>-</mo> <mi>K</mi> <mo>,</mo> <mn>0</mn> <mo>)</mo></mrow></mrow></math>
    .
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Estimate the option present value via the Monte Carlo estimator given in [Equation
    1-2](#bsm_mcs_est).
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Equation 1-2\. Monte Carlo estimator for European option
  id: totrans-156
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
- en: <math display="block"><mrow><msub><mi>C</mi> <mn>0</mn></msub> <mo>≈</mo> <msup><mi>e</mi>
    <mrow><mo>-</mo><mi>r</mi><mi>T</mi></mrow></msup> <mfrac><mn>1</mn> <mi>I</mi></mfrac>
    <munder><mo>∑</mo> <mi>I</mi></munder> <msub><mi>h</mi> <mi>T</mi></msub> <mrow><mo>(</mo>
    <mi>i</mi> <mo>)</mo></mrow></mrow></math>
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: <math display="block"><mrow><msub><mi>C</mi> <mn>0</mn></msub> <mo>≈</mo> <msup><mi>e</mi>
    <mrow><mo>-</mo><mi>r</mi><mi>T</mi></mrow></msup> <mfrac><mn>1</mn> <mi>I</mi></mfrac>
    <munder><mo>∑</mo> <mi>I</mi></munder> <msub><mi>h</mi> <mi>T</mi></msub> <mrow><mo>(</mo>
    <mi>i</mi> <mo>)</mo></mrow></mrow></math>
- en: We are now going to translate this problem and algorithm into Python code. The
    reader might follow the single steps by using, for example, `IPython`—this is,
    however, not really necessary at this stage.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[![1](images/1.png)](#co_python_and_finance_CO1-1)'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: The model parameter values are defined.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](images/2.png)](#co_python_and_finance_CO1-6)'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: '`NumPy` is used here as the main package.'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](images/3.png)](#co_python_and_finance_CO1-7)'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: The seed value for the randon number generator is fixed.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](images/4.png)](#co_python_and_finance_CO1-8)'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: This draws standard normally distributed random numbers.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: '[![5](images/5.png)](#co_python_and_finance_CO1-9)'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: This simulates the end-of-period values.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: '[![6](images/6.png)](#co_python_and_finance_CO1-10)'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '[![6](images/6.png)](#co_python_and_finance_CO1-10)'
- en: The option payoffs at maturity are calculated.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 到期时的期权回报是通过计算得出的。
- en: '[![7](images/7.png)](#co_python_and_finance_CO1-11)'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '[![7](images/7.png)](#co_python_and_finance_CO1-11)'
- en: The Monte Carlo estimator is evaluated.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 蒙特卡洛估算器被评估。
- en: '[![8](images/8.png)](#co_python_and_finance_CO1-12)'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '[![8](images/8.png)](#co_python_and_finance_CO1-12)'
- en: This prints the resulting value estimate.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打印出结果值的估计。
- en: 'Three aspects are worth highlighting:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 有三个方面值得强调：
- en: Syntax
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 语法
- en: The Python syntax is indeed quite close to the mathematical syntax, e.g., when
    it comes to the parameter value assignments.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: Python语法确实与数学语法非常接近，例如，在参数值赋值时。
- en: Translation
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 翻译
- en: Every mathematical and/or algorithmic statement can generally be translated
    into a *single* line of Python code.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 每个数学和/或算法声明通常可以被翻译成一行*单独的*Python代码。
- en: Vectorization
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 向量化
- en: One of the strengths of `NumPy` is the compact, vectorized syntax, e.g., allowing
    for 100,000 calculations within a single line of code.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '`NumPy`的一个优点是其紧凑、向量化的语法，例如，允许在一行代码中进行10万次计算。'
- en: This code can be used in an interactive environment like `IPython`. However,
    code that is meant to be reused regularly typically gets organized in so-called
    *modules* (or *scripts*), which are single Python (technicakky “text”) files with
    the suffix `.py`. Such a module could in this case look like [Example 1-1](#bsm_mcs_euro)
    and could be saved as a file named `bsm_mcs_euro.py`.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码可以在像`IPython`这样的交互环境中使用。然而，通常被定期重复使用的代码会被组织成所谓的*模块*（或*脚本*），它们是具有后缀`.py`的单个Python（技术上的“文本”）文件。在这种情况下，这样的一个模块可能看起来像[Example 1-1](#bsm_mcs_euro)，并且可以保存为名为`bsm_mcs_euro.py`的文件。
- en: Example 1-1\. Monte Carlo valuation of European call option
  id: totrans-184
  prefs:
  - PREF_H5
  type: TYPE_NORMAL
  zh: 示例1-1\. 欧式看涨期权的蒙特卡洛估值
- en: '[PRE3]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The rather simple algorithmic example in this subsection illustrates that Python,
    with its very syntax, is well suited to complement the classic duo of scientific
    languages, English and Mathematics. It seems that adding `Python` to the set of
    scientific languages makes it more well rounded. We have
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 本小节中相当简单的算法示例说明了Python，以其非常直观的语法，非常适合补充经典的科学语言英语和数学。似乎将`Python`加入到科学语言集合中使其更加完整。我们有
- en: '**English** for *writing, talking* about scientific and financial problems,
    etc.'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**英语**用于*书写、讨论*科学和金融问题等。'
- en: '**Mathematics** for *concisely and exactly describing and modeling* abstract
    aspects, algorithms, complex quantities, etc.'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数学**用于*简洁而准确地描述和建模*抽象方面、算法、复杂量等。'
- en: '**Python** for *technically modeling and implementing* abstract aspects, algorithms,
    complex quantities, etc.'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Python**用于*技术上建模和实现*抽象方面、算法、复杂量等。'
- en: Mathematics and Python Syntax
  id: totrans-190
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数学和Python语法
- en: There is hardly any programming language that comes as close to mathematical
    syntax as Python. Numerical algorithms are therefore simple to translate from
    the mathematical representation into the `Pythonic` implementation. This makes
    prototyping, development, and code maintenance in such areas quite efficient with
    Python.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 几乎没有任何编程语言能像Python一样接近数学语法。因此，数值算法从数学表示转换为`Python`实现非常简单。这使得在这些领域中使用Python进行原型设计、开发和代码维护非常高效。
- en: In some areas, it is common practice to use *pseudocode* and therewith to introduce
    a fourth language family member. The role of pseudocode is to represent, for example,
    financial algorithms in a more technical fashion that is both still close to the
    mathematical representation and already quite close to the technical implementation.
    In addition to the algorithm itself, pseudocode takes into account how computers
    work in principle.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在一些领域，使用*伪代码*并以此引入第四个语言家族成员是常见做法。伪代码的作用是更技术化地表示金融算法，这既与数学表示接近，又与技术实现接近。除了算法本身，伪代码还考虑了计算机原理。
- en: This practice generally has its cause in the fact that with most programming
    languages the technical implementation is quite “far away” from its formal, mathematical
    representation. The majority of programming languages make it necessary to include
    so many elements that are only technically required that it is hard to see the
    equivalence between the mathematics and the code.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 这种做法通常源于大多数编程语言的技术实现与其正式数学表示相距甚远。大多数编程语言需要包含许多仅在技术上需要的元素，以至于很难看出数学和代码之间的等价性。
- en: 'Nowadays, Python is often used in a *pseudocode way* since its syntax is almost
    analogous to the mathematics and since the technical “overhead” is kept to a minimum.
    This is accomplished by a number of high-level concepts embodied in the language
    that not only have their advantages but also come in general with risks and/or
    other costs. However, it is safe to say that with Python you can, whenever the
    need arises, follow the same strict implementation and coding practices that other
    languages might require from the outset. In that sense, Python can provide the
    best of both worlds: *high-level abstraction* and *rigorous implementation*.'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，Python通常以*伪代码方式*使用，因为其语法几乎与数学相似，并且由于技术“开销”保持最小。这是通过语言中体现的一些高级概念实现的，这些概念不仅具有优势，而且一般都伴随着风险和/或其他成本。但是，可以肯定的是，使用Python可以在需要时遵循其他语言可能从一开始就需要的严格实现和编码实践。在这个意义上，Python可以提供最好的两种世界：*高级抽象*和*严格实现*。
- en: Efficiency and Productivity Through Python
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过Python提高效率和生产力
- en: 'At a high level, benefits from using Python can be measured in three dimensions:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在高层次上，使用Python的好处可以从三个方面衡量：
- en: Efficiency
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 效率
- en: How can Python help in getting results faster, in saving costs, and in saving
    time?
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: Python如何帮助更快地获得结果，节省成本和节省时间？
- en: Productivity
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 生产力
- en: How can Python help in getting more done with the same resources (people, assets,
    etc.)?
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: Python如何帮助提高使用相同资源（人力、资产等）的效率？
- en: Quality
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 质量
- en: What does Python allow us to do that we could not do with alternative technologies?
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: Python允许我们做什么，而其他技术做不到呢？
- en: A discussion of these aspects can by nature not be exhaustive. However, it can
    highlight some arguments as a starting point.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 对这些方面的讨论自然不可能穷尽。但是，它可以突出一些论据作为起点。
- en: Shorter time-to-results
  id: totrans-204
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更短的结果时间
- en: A field where the efficiency of Python becomes quite obvious is interactive
    data analytics. This is a field that benefits strongly from such powerful tools
    as `IPython` and libraries like `pandas`.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: Python的效率显而易见的领域之一是交互式数据分析。这是一个极大受益于诸如`IPython`和像`pandas`这样的强大工具的领域。
- en: 'Consider a finance student, writing her master’s thesis and interested in S&P
    500 index values. She wants to analyze historical index levels for, say, a few
    years to see how the volatility of the index has fluctuated over time. She wants
    to find evidence that volatility, in contrast to some typical model assumptions,
    fluctuates over time and is far from being constant. The results should also be
    visualized. She mainly has to do the following:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一个金融学生，她正在写她的硕士论文，对S&P 500指数值感兴趣。她想要分析历史指数水平，比如说，几年来指数波动率是如何随时间波动的。她想要找到证据表明，与一些典型的模型假设相反，波动率随时间波动，并且远非恒定。结果还应该进行可视化。她主要需要做以下几件事：
- en: Retrieve index level data from the Web.
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从网络检索指数水平数据。
- en: Calculate the annualized rolling standard deviation of the log returns (volatility).
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算对数收益的年化滚动标准差（波动性）。
- en: Plot the index level data and the results.
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绘制指数水平数据和结果。
- en: These tasks are complex enough that not too long ago one would have considered
    them to be something for professional financial analysts. Today, even the finance
    student can easily cope with such problems. Let us see how exactly this works—without
    worrying about syntax details at this stage (everything is explained in detail
    in subsequent chapters).
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 这些任务足够复杂，以至于不久之前人们会认为这是专业金融分析师的事情。如今，即使是金融学生也能轻松应对这些问题。让我们看看这究竟是如何运作的——在这个阶段不必担心语法细节（一切都将在后续章节中详细解释）。
- en: '[PRE4]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[![1](images/1.png)](#co_python_and_finance_CO2-1)'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](images/1.png)](#co_python_and_finance_CO2-1)'
- en: This imports `NumPy` and `pandas`.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 这导入了`NumPy`和`pandas`。
- en: '[![2](images/2.png)](#co_python_and_finance_CO2-3)'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](images/2.png)](#co_python_and_finance_CO2-3)'
- en: '`read_csv` allows the retrievel of remotely stored data sets.'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '`read_csv`允许检索远程存储的数据集。'
- en: '[![3](images/3.png)](#co_python_and_finance_CO2-4)'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](images/3.png)](#co_python_and_finance_CO2-4)'
- en: A sub-set of the data is picked.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 选择数据的一个子集。
- en: '[![4](images/4.png)](#co_python_and_finance_CO2-5)'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](images/4.png)](#co_python_and_finance_CO2-5)'
- en: This shows some meta-information about the data set.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 这显示了数据集的一些元信息。
- en: '[![5](images/5.png)](#co_python_and_finance_CO2-6)'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](images/5.png)](#co_python_and_finance_CO2-6)'
- en: The log returns are calculated in vectorized fashion (“no looping”).
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 对数收益以矢量化方式计算（“无循环”）。
- en: '[![6](images/6.png)](#co_python_and_finance_CO2-7)'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '[![6](images/6.png)](#co_python_and_finance_CO2-7)'
- en: The rolling, annzalized volatility is derived.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 滚动、年化波动率是由此得出的。
- en: '[![7](images/7.png)](#co_python_and_finance_CO2-8)'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '[![7](images/7.png)](#co_python_and_finance_CO2-8)'
- en: This line finally plots the two time series.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一行将这两个时间序列绘制出来。
- en: '[Figure 1-1](#spx_vola) shows the graphical result of this brief interactive
    session. It can be considered almost amazing that a few lines of code suffice
    to implement three rather complex tasks typically encountered in financial analytics:
    data gathering, complex and repeated mathematical calculations, and visualization
    of results. This example illustrates that `pandas` makes working with whole time
    series almost as simple as doing mathematical operations on floating-point numbers.'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '[图 1-1](#spx_vola) 展示了这个简短交互会话的图形结果。几行代码就足以实现在金融分析中经常遇到的三个相当复杂的任务：数据收集、复杂和重复的数学计算，以及结果的可视化。这个例子说明了`pandas`使得处理整个时间序列几乎与对浮点数执行数学运算一样简单。'
- en: '![spx volatility](images/spx_volatility.png)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
  zh: '![spx 波动率](images/spx_volatility.png)'
- en: Figure 1-1\. S&P 500 closing values and annualized volatility
  id: totrans-228
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 1-1\. S&P 500 收盘价和年化波动率
- en: Translated to a professional finance context, the example implies that financial
    analysts can—when applying the right Python tools and libraries, providing high-level
    abstraction—focus on their very domain and not on the technical intrinsicalities.
    Analysts can react faster, providing valuable insights almost in real time and
    making sure they are one step ahead of the competition. This example of *increased
    efficiency* can easily translate into measurable bottom-line effects.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 将其翻译成专业的金融背景下，该示例意味着金融分析师可以——当应用正确的 Python 工具和库，提供高级抽象——专注于他们的领域，而不是技术细节。分析师可以更快地做出反应，几乎实时提供有价值的见解，并确保他们领先竞争对手一步。这个*提高效率*的例子很容易转化为可衡量的底线效应。
- en: Ensuring high performance
  id: totrans-230
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 确保高性能
- en: 'In general, it is accepted that Python has a rather concise syntax and that
    it is relatively efficient to code with. However, due to the very nature of Python
    being an interpreted language, the *prejudice* persists that Python generally
    is too slow for compute-intensive tasks in finance. Indeed, depending on the specific
    implementation approach, Python can be really slow. But it *does not have to be
    slow*—it can be highly performing in almost any application area. In principle,
    one can distinguish at least three different strategies for better performance:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 总的来说，人们普遍认为 Python 语法相对简洁，编码相对高效。然而，由于 Python 是一种解释语言，导致了“偏见”持续存在，即 Python 通常对金融中的计算密集型任务来说速度太慢了。事实上，根据特定的实现方法，Python
    可能确实很慢。但它*不一定慢*— 它几乎可以在任何应用领域都表现出高性能。原则上，可以区分至少三种不同的策略来提高性能：
- en: Paradigm
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 范式
- en: In general, many different ways can lead to the same result in Python, but with
    rather different performance characteristics; “simply” choosing the right way
    (e.g., a specific library) can improve results significantly.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，Python 中有很多不同的方法可以得到相同的结果，但性能特性却大不相同；“简单地”选择正确的方式（例如特定的库）可以显著提高结果。
- en: Compiling
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 编译
- en: Nowadays, there are several performance libraries available that provide compiled
    versions of important functions or that compile Python code statically or dynamically
    (at runtime or call time) to machine code, which can be orders of magnitude faster;
    popular ones are `Cython` and `Numba`.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，有几个性能库可用，它们提供了重要函数的编译版本，或者将 Python 代码静态或动态地（在运行时或调用时）编译为机器代码，速度可以提高数个数量级；其中流行的有`Cython`和`Numba`。
- en: Parallelization
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 并行化
- en: Many computational tasks, in particular in finance, can strongly benefit from
    parallel execution; this is nothing special to Python but something that can easily
    be accomplished with it.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 许多计算任务，特别是在金融领域，都可以从并行执行中获益；这并不是 Python 特有的，但是可以很容易地用 Python 实现。
- en: Performance Computing with Python
  id: totrans-238
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Python 进行性能计算
- en: Python per se is not a high-performance computing technology. However, Python
    has developed into an ideal platform to access current performance technologies.
    In that sense, Python has become something like a *glue language for performance
    computing*.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: Python 本身不是一种高性能计算技术。然而，Python 已经发展成为访问当前性能技术的理想平台。从这个意义上说，Python 已经成为一种 *性能计算的粘合语言*。
- en: Later chapters illustrate all three techniques in detail. For the moment, we
    want to stick to a simple, but still realistic, example that touches upon all
    three techniques.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 后面的章节将详细介绍这三种技术。目前，我们希望使用一个简单但仍然现实的例子，涉及这三种技术。
- en: 'A quite common task in financial analytics is to evaluate complex mathematical
    expressions on large arrays of numbers. To this end, Python itself provides everything
    needed:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 在金融分析中，一个相当常见的任务是在大量数字数组上评估复杂的数学表达式。为此，Python 本身提供了一切所需的：
- en: '[PRE5]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The Python interpreter needs 1.5 seconds in this case to evaluate the function
    `f` 2,500,000 times.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，Python 解释器需要 1.5 秒来评估函数 `f` 250 万次。
- en: 'The same task can be implemented using `NumPy`, which provides optimized (i.e.,
    *pre-compiled*), functions to handle such array-based operations:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 同样的任务可以使用`NumPy`来实现，它提供了优化（即，*预编译*）的函数来处理这种基于数组的操作：
- en: '[PRE6]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Using `NumPy` considerably reduces the execution time to 90 milliseconds.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`NumPy`可以大大减少执行时间至 90 毫秒。
- en: 'However, there is even a library specifically dedicated to this kind of task.
    It is called `numexpr`, for “numerical expressions.” It *compiles* the expression
    to improve upon the performance of `NumPy`’s general functionality by, for example,
    avoiding in-memory copies of arrays along the way:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，甚至有一个专门致力于这种任务的库。它被称为 `numexpr`，表示“数值表达式”。它将表达式*编译*以改进`NumPy`的一般功能，例如，在此过程中避免数组的内存副本：
- en: '[PRE7]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Using this more specialized approach further reduces execution time to 80 milliseconds.
    However, `numexpr` also has built-in capabilities to parallelize the execution
    of the respective operation. This allows us to use multiple threads of a CPU:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种更专业的方法进一步将执行时间缩短到 80 毫秒。然而，`numexpr` 也具有内置功能来并行执行相应的操作。这使我们能够使用 CPU 的多个线程：
- en: '[PRE8]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: This brings execution time further down to some 25 milliseconds in this case,
    with four threads utilized. Overall, this is a performance improvement of more
    than 50 times. Note, in particular, that this kind of improvement is possible
    without altering the basic problem/algorithm and without knowing anything about
    compiling or parallelization issues. The capabilities are accessible from a high
    level even by nonexperts. However, one has to be aware, of course, of which capabilities
    and options exist.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 这将执行时间进一步缩短到约 25 毫秒，在此情况下，使用了四个线程。总体而言，这是性能提升超过 50 倍。特别注意，这种改进是可能的，而不需要改变基本的问题/算法，也不需要了解编译或并行化问题。即使是非专家也可以从高层次访问这些功能。当然，必须意识到存在哪些功能和选项。
- en: The example shows that Python provides a number of options to make more out
    of existing resources—i.e., to *increase productivity*. With the sequential approach,
    about 31 mn evaluations per second are accomplished, while the parallel approach
    allows for more than 100 mn evaluations per second—in this case simply by telling
    Python to use all available CPU threads instead of just one.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 该示例显示了 Python 提供了许多选项，以充分利用现有资源——即，*提高生产力*。使用顺序方法，每秒完成大约 31 百万次评估，而并行方法允许每秒进行超过
    100 百万次评估——在这种情况下，只需告诉 Python 使用所有可用的 CPU 线程，而不是只使用一个线程。
- en: From Prototyping to Production
  id: totrans-253
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从原型设计到生产
- en: Efficiency in interactive analytics and performance when it comes to execution
    speed are certainly two benefits of Python to consider. Yet another major benefit
    of using Python for finance might at first sight seem a bit subtler; at second
    sight it might present itself as an important strategic factor. It is the possibility
    to use Python end to end, from *prototyping to production*.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 在交互式分析中的效率以及在执行速度方面的性能无疑是考虑 Python 的两个好处。然而，使用 Python 进行金融交易的另一个主要好处乍一看可能似乎有点微妙；第二次看可能会表现为一个重要的战略因素。这就是可以从*原型设计到生产*都可以使用
    Python 的可能性。
- en: Today’s practice in financial institutions around the globe, when it comes to
    financial development processes, is often characterized by a separated, two-step
    process. On the one hand, there are the *quantitative analysts* (“quants”) responsible
    for model development and technical prototyping. They like to use tools and environments
    like `Matlab` and `R` that allow for rapid, interactive application development.
    At this stage of the development efforts, issues like performance, stability,
    exception management, separation of data access, and analytics, among others,
    are not that important. One is mainly looking for a proof of concept and/or a
    prototype that exhibits the main desired features of an algorithm or a whole application.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: Once the prototype is finished, IT departments with their *developers* take
    over and are responsible for translating the existing *prototype code* into reliable,
    maintainable, and performant *production code*. Typically, at this stage there
    is a paradigm shift in that languages like `C`++ or `Java` are now used to fulfill
    the requirements for production. Also, a formal development process with professional
    tools, version control, etc. is applied.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: 'This two-step approach has a number of generally unintended consequences:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: Inefficiencies
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: Prototype code is not reusable; algorithms have to be implemented twice; redundant
    efforts take time and resources.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: Diverse skill sets
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
- en: Different departments show different skill sets and use different languages
    to implement “the same things.”
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: Legacy code
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
- en: Code is available and has to be maintained in different languages, often using
    different styles of implementation (e.g., from an architectural point of view).
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
- en: Using Python, on the other hand, enables a *streamlined* end-to-end process
    from the first interactive prototyping steps to highly reliable and efficiently
    maintainable production code. The communication between different departments
    becomes easier. The training of the workforce is also more streamlined in that
    there is only one major language covering all areas of financial application building.
    It also avoids the inherent inefficiencies and redundancies when using different
    technologies in different steps of the development process. All in all, Python
    can provide a *consistent technological framework* for almost all tasks in financial
    application development and algorithm implementation.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: AI-First Finance
  id: totrans-265
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Data Availability
  id: totrans-266
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Machine & Deep Learning
  id: totrans-267
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Traditional vs. AI-First Finance
  id: totrans-268
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Conclusions
  id: totrans-269
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Python as a language—but much more so as an ecosystem—is an ideal technological
    framework for the financial industry. It is characterized by a number of benefits,
    like an elegant syntax, efficient development approaches, and usability for prototyping
    *and* production, among others. With its huge amount of available libraries and
    tools, Python seems to have answers to most questions raised by recent developments
    in the financial industry in terms of analytics, data volumes and frequency, compliance,
    and regulation, as well as technology itself. It has the potential to provide
    a *single, powerful, consistent framework* with which to streamline end-to-end
    development and production efforts even across larger financial institutions.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: Python作为一种语言——但更多作为一个生态系统——是金融行业的理想技术框架。它具有许多优点，如优雅的语法、高效的开发方法以及适用于原型设计*和*生产等方面的可用性。凭借其大量可用的库和工具，Python似乎对金融行业的最新发展所提出的大多数问题都有答案，例如分析、数据量和频率、合规性和监管，以及技术本身。它有潜力提供一个*单一、强大、一致的框架*，可以使端到端的开发和生产工作流程变得更加顺畅，即使是在较大的金融机构之间也是如此。
- en: Further Reading
  id: totrans-271
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'The following book, by the same author, covers many aspects only touched upon
    briefly in this chapter in considerable detail (e.g. derivatives analytics):'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 以下书籍由同一作者撰写，详细介绍了本章中只是简要提及的许多方面（例如衍生品分析）：
- en: 'Hilpisch, Yves (2015): *Derivatives Analytics with Python*. Wiley Finance,
    Chichester, England. [*http://derivatives-analytics-with-python.com*](http://derivatives-analytics-with-python.com).'
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Hilpisch, Yves (2015): *Python衍生品分析.* Wiley Finance, Chichester, England. [*http://derivatives-analytics-with-python.com*](http://derivatives-analytics-with-python.com)。'
- en: 'The quotes in this chapter are taken from the following resources:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 本章引用的语录来自以下资源：
- en: 'Crosman, Penny (2013): “Top 8 Ways Banks Will Spend Their 2014 IT Budgets.”
    *Bank Technology News*.'
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Crosman, Penny (2013): “银行将如何使用其2014年IT预算的8种方式。” *银行技术新闻*。'
- en: 'Deutsche Börse Group (2008): “The Global Derivatives Market—An Introduction.”
    White paper.'
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Deutsche Börse Group (2008): “全球衍生品市场——简介。” 白皮书。'
- en: 'Ding, Cubillas (2010): “Optimizing the OTC Pricing and Valuation Infrastructure.”
    *Celent study*.'
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Ding, Cubillas (2010): “优化场外交易定价和估值基础设施。” *Celent研究*。'
- en: 'Lewis, Michael (2014): *Flash Boys*. W. W. Norton & Company, New York.'
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Lewis, Michael (2014): *闪电少年.* W. W. Norton & Company, New York.'
- en: 'Patterson, Scott (2010): *The Quants.* Crown Business, New York.'
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Patterson, Scott (2010): *量化分析师.* Crown Business, New York.'
- en: ^([1](ch01.html#idm140277704171024-marker)) Python, for example, is a major
    language used in the Master of Financial Engineering program at Baruch College
    of the City University of New York (see [*http://mfe.baruch.cuny.edu*](http://mfe.baruch.cuny.edu)).
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: ^([1](ch01.html#idm140277704171024-marker)) 例如，Python是纽约市立大学巴鲁克学院金融工程硕士课程中使用的主要语言（请参阅[*http://mfe.baruch.cuny.edu*](http://mfe.baruch.cuny.edu)）。
- en: ^([2](ch01.html#idm140277704168880-marker)) See [*http://wiki.python.org/moin/BeginnersGuide*](http://wiki.python.org/moin/BeginnersGuide),
    where you will find links to many valuable resources for both developers and nondevelopers
    getting started with Python.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: ^([2](ch01.html#idm140277704168880-marker)) 请参阅[*http://wiki.python.org/moin/BeginnersGuide*](http://wiki.python.org/moin/BeginnersGuide)，在那里您将找到许多对于初学者和非开发人员来说开始使用Python非常有价值的资源链接。
- en: ^([3](ch01.html#idm140277704069440-marker)) [Link to Come] provides an example
    for the benefits of using modern GPGPUs in the context of the generation of random
    numbers.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: ^([3](ch01.html#idm140277704069440-marker)) [*Link to Come*]提供了在随机数生成的背景下使用现代GPGPU的好处的示例。

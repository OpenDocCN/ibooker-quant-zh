- en: Chapter 1\. Finance and Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The history of finance theory is an interesting example of the interaction between
    abstract theorizing and practical application.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Frank Milne (1995)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Hedge funds have sucked in tens of billions of dollars in investments in recent
    years, assisted increasingly by technology. The same tech is also benefiting those
    people who make the financial decisions at these organisations.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Laurence Fletcher (2020)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'This chapter gives a concise overview of topics relevant for the book. It is
    intended to provide both the financial and technological framework for the chapters
    to follow. [“A Brief History of Finance”](#history_finance) starts by giving a
    brief overview of the history and current state of finance. [“Major Trends in
    Finance”](#major_trends) discusses the major trends that have been driving the
    evolution of finance over time: mathematics, technology, data, and artificial
    intelligence. Against this background, [“A Four-Languages World”](#four_languages)
    argues that finance today is a discipline of four closely interconnected types
    of languages: English, finance, mathematics, and programming. The overall approach
    of the book is explained in [“The Approach of This Book”](#approach_book). [“Getting
    Started with Python”](#python_start) illustrates how an appropriate Python environment
    can be installed on the reader’s computer. However, all the code can be used and
    executed via a regular web browser on the [Quant Platform](http://finpy.pqp.io)
    so that a local Python installation can be set up later.'
  prefs: []
  type: TYPE_NORMAL
- en: A Brief History of Finance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To better understand the current state of finance and the financial industry,
    it is helpful to have a look at how they have developed over time. The history
    of finance as a scientific field can be divided roughly into three periods according
    to Rubinstein (2006):'
  prefs: []
  type: TYPE_NORMAL
- en: The ancient period (pre-1950)
  prefs: []
  type: TYPE_NORMAL
- en: A period mainly characterized by informal reasoning, rules of thumb, and the
    experience of market practitioners.
  prefs: []
  type: TYPE_NORMAL
- en: The classical period (1950–1980)
  prefs: []
  type: TYPE_NORMAL
- en: A period characterized by the introduction of formal reasoning and mathematics
    to the field. Specialized models (for example, Black and Scholes’s (1973) option
    pricing model) as well as general frameworks (for example, Harrison and Kreps’s
    (1979) risk-neutral pricing approach) were developed during this period.
  prefs: []
  type: TYPE_NORMAL
- en: The modern period (1980–2000)
  prefs: []
  type: TYPE_NORMAL
- en: This period generated many advances in specific subfields of finance (for example,
    computational finance) and tackled, among others, important empirical phenomena
    in the financial markets, such as stochastic interest rates (for example, Cox,
    Ingersoll, and Ross (1985)) or stochastic volatility (for example, Heston (1993)).
  prefs: []
  type: TYPE_NORMAL
- en: 'Fifteen years after the publication of the Rubinstein (2006) book, we can add
    fourth and fifth periods today. These two periods are responsible for the rise
    and the current omnipresence of Python in finance:'
  prefs: []
  type: TYPE_NORMAL
- en: The computational period (2000–2020)
  prefs: []
  type: TYPE_NORMAL
- en: This period saw a shift from a theoretical focus in finance to a computational
    one, driven by advances in both hardware and software used in finance. The paper
    by Longstaff and Schwartz (2001)—providing an efficient numerical algorithm to
    value American options by Monte Carlo simulation—illustrates this paradigm shift
    quite well. Their algorithm is computationally demanding in that hundreds of thousands
    of simulations and multiple ordinary least-squares regressions are required in
    general to value only a single option (see Hilpisch (2018)).
  prefs: []
  type: TYPE_NORMAL
- en: The artificial intelligence period (post-2020)
  prefs: []
  type: TYPE_NORMAL
- en: Advances in artificial intelligence (AI) and related success stories have spurred
    interest to make use of the capabilities of AI in the financial domain. While
    there are already successful applications of AI in finance (see Hilpisch (2020)),
    it can be assumed that from 2020 onward there will be a systematic paradigm shift
    toward *AI-first finance*. AI-first finance describes the shift from simple, in
    general linear, models in finance to the use of advanced models and algorithms
    from AI—such as deep neural networks or reinforcement learning—to capture, describe,
    and explain financial phenomena.
  prefs: []
  type: TYPE_NORMAL
- en: Major Trends in Finance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Like many other subjects and industries, finance has become a more formalized
    scientific discipline over time, driven by the increasing use of formal mathematics,
    advanced technology, increasing data availability, and improved algorithms, such
    as those from AI. Taken together, the evolution of finance over time can therefore
    be characterized by four major trends:'
  prefs: []
  type: TYPE_NORMAL
- en: Mathematics
  prefs: []
  type: TYPE_NORMAL
- en: Starting in the 1950s with the classical period, finance has become a more and
    more formalized discipline, making systematic use of different fields in mathematics,
    like linear algebra or stochastic calculus. The mean-variance portfolio (MVP)
    theory by Markowitz (1952) can be considered a major breakthrough in quantitative
    finance if not its starting point itself—leaving the ancient period characterized
    mainly by informal reasoning behind.
  prefs: []
  type: TYPE_NORMAL
- en: Technology
  prefs: []
  type: TYPE_NORMAL
- en: The widespread availability and use of personal computers, workstations, and
    servers, starting mainly in the late 1980s and early 1990s, brought more and more
    technology to the field. While compute power and capacity in the beginning were
    rather limited, they have reached levels as of today that allow us to attack even
    the most complex problems in finance by sheer brute force, often rendering the
    search for rather specialized, efficient models and methods—that characterized
    the classical and modern periods—obsolete. The credo has become “Scale your hardware
    and use modern software in combination with appropriate numerical methods.” On
    the other hand, the modern hardware found in most dorm and living rooms is already
    powerful enough that even high-performance approaches, like parallel processing,
    can generally be used on such commodity hardware—lowering the barriers of entry
    to computational and AI-first finance tremendously.
  prefs: []
  type: TYPE_NORMAL
- en: Data
  prefs: []
  type: TYPE_NORMAL
- en: While researchers and practitioners alike mainly relied on printed financial
    information and data in the ancient and classical periods (think of the *Wall
    Street Journal* or the *Financial Times*), electronic financial data sets have
    become more widely available starting in the modern period. However, the computational
    period has seen an explosion in the availability of financial data. High-frequency
    intraday data sets have become the norm and have replaced end-of-day closing prices
    as the major basis for empirical research. A single stock might generate intraday
    data sets with well over 100,000 data points every trading day—this number is
    roughly the equivalent of 400 years’ worth of end-of-day closing prices for the
    same stock (250 trading days per year times 400 years). Even more recently, a
    proliferation in open or free data sets has been observed, which also significantly
    lowers the barriers of entry to computational finance, algorithmic trading, or
    financial econometrics.
  prefs: []
  type: TYPE_NORMAL
- en: Artificial intelligence
  prefs: []
  type: TYPE_NORMAL
- en: The availability of ever more financial data (“big financial data”) makes the
    application of AI algorithms—such as those from machine learning, deep learning,
    or reinforcement learning (see Hilpisch (2020))—not only possible but also in
    many cases these days necessary. Traditional statistical methods from financial
    econometrics are often not suited anymore to cope with today’s complexities in
    financial markets. Faced with nonlinear, multidimensional, ever-changing financial
    environments, AI-based algorithms might often be the only option to discover relevant
    relationships and patterns, generate valuable insights, and benefit from improved
    prediction capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: By reading this book, the reader lays the foundations in the areas of financial
    mathematics and modern technology used to implement formal financial models. The
    reader also acquires skills to work with typical financial data sets encountered
    in finance. Taken together, this prepares the reader to later on also explore
    more easily advanced topics in computational finance or AI as applied to finance.
  prefs: []
  type: TYPE_NORMAL
- en: Python and Finance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: More and more, finance has become a field driven by computationally demanding
    algorithms, ever-increasing data availability, and AI. Python has proven to be
    the right programming language and technology platform to address the requirements
    and challenges that arise from the major trends observed in the field.
  prefs: []
  type: TYPE_NORMAL
- en: A Four-Languages World
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Against this background, finance has become a world of four languages:'
  prefs: []
  type: TYPE_NORMAL
- en: Natural language
  prefs: []
  type: TYPE_NORMAL
- en: Today, the *English* language is the only relevant language in the field when
    it comes to published research, books, articles, or news.
  prefs: []
  type: TYPE_NORMAL
- en: Financial language
  prefs: []
  type: TYPE_NORMAL
- en: Like every other field, *finance* has technical terms, notions, and expressions
    that describe certain phenomena or ideas that are usually not relevant in other
    domains.
  prefs: []
  type: TYPE_NORMAL
- en: Mathematical language
  prefs: []
  type: TYPE_NORMAL
- en: '*Mathematics* is the tool and language of choice when it comes to formalizing
    the notions and concepts of finance.'
  prefs: []
  type: TYPE_NORMAL
- en: Programming language
  prefs: []
  type: TYPE_NORMAL
- en: As the quote at the beginning of the preface points out, [*Python*](http://python.org)
    as a programming language has become the language of choice in many corners of
    the financial industry.
  prefs: []
  type: TYPE_NORMAL
- en: 'The mastery of finance therefore requires both the academic and practitioner
    to be fluent in all four languages: English, finance, mathematics, and Python.
    This is *not* to say that, for instance, English and Python are the *only* relevant
    natural or programming languages. It is rather the case that if you have only
    a limited amount of time to learn a programming language, you should most probably
    focus on Python—alongside mathematical finance—on your way to mastery of the field.'
  prefs: []
  type: TYPE_NORMAL
- en: The Approach of This Book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: How does this book approach the four languages needed in finance? The English
    language is a no-brainer—you are reading it already. Yet, three remain.
  prefs: []
  type: TYPE_NORMAL
- en: For example, this book cannot introduce every single piece of mathematics in
    detail that is needed in finance. Nor can it introduce every single concept in
    (Python) programming in detail that is needed in computational finance. However,
    it tries to introduce related concepts from finance, mathematics, and programming
    alongside one another whenever possible and sensible.
  prefs: []
  type: TYPE_NORMAL
- en: 'From [Chapter 2](ch02_split_000.xhtml#two_state_economy) onward, the book introduces
    a financial notion or concept and then illustrates it on the basis of both a mathematical
    representation and the implementation in Python. As an example, have a look at
    the following table from [Chapter 3](ch03.xhtml#three_state_economy). The table
    lists the financial topic, the major mathematical elements, and the major Python
    data structure used to implement the financial mathematics:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Finance | Mathematics | Python |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Uncertainty | Probability space | `ndarray` |'
  prefs: []
  type: TYPE_TB
- en: '| Financial assets | Vectors, matrices | `ndarray` |'
  prefs: []
  type: TYPE_TB
- en: '| Attainable contingent claims | Span of vectors, basis of vector space | `ndarray`
    |'
  prefs: []
  type: TYPE_TB
- en: The following is a walkthrough of one specific example, details of which are
    provided in later chapters. The example is only for illustration of the general
    approach of the book at this point.
  prefs: []
  type: TYPE_NORMAL
- en: 'As an example, take the central concept of *uncertainty* in finance from the
    preceding table. Uncertainty embodies the notion that future states of a model
    economy are not known in advance. Which future state of the economy unfolds might
    be important, for example, to determine the payoff of a European call option.
    In a discrete case, one deals with a finite number of such states, like two, three,
    or more. In the most simple case of two future states only, the payoff of a European
    call option is represented mathematically as a *random variable*, which in turn
    can be represented formally as a *vector* <math alttext="v"><mi>v</mi></math>
    that is itself an element of the *vector space* <math alttext="double-struck upper
    R squared"><msup><mi>ℝ</mi> <mn>2</mn></msup></math> . A vector space is a collection
    of objects—called vectors—for which addition and scalar multiplication are defined.
    Formally, one writes for such a vector <math alttext="v"><mi>v</mi></math> , for
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: <math mode="display"><mrow><mi>v</mi> <mo>=</mo> <mfenced open="(" close=")"><mtable><mtr><mtd><msup><mi>v</mi>
    <mi>u</mi></msup></mtd></mtr> <mtr><mtd><msup><mi>v</mi> <mi>d</mi></msup></mtd></mtr></mtable></mfenced>
    <mo>∈</mo> <msubsup><mi>ℝ</mi> <mrow><mn>≥0</mn></mrow> <mn>2</mn></msubsup></mrow></math>
  prefs: []
  type: TYPE_NORMAL
- en: Here, both elements of the vector are assumed to be non-negative real numbers
    <math><mrow><msup><mi>v</mi> <mi>u</mi></msup> <mo>,</mo><msup><mi>v</mi> <mi>d</mi></msup>
    <mo>∈</mo><msub><mi>ℝ</mi> <mrow><mn>≥0</mn></mrow></msub></mrow></math> . More
    concretely, if the uncertain, state-dependent price of the stock on which the
    European call option is written is given in this context by
  prefs: []
  type: TYPE_NORMAL
- en: <math mode="display"><mrow><mi>S</mi> <mo>=</mo> <mfenced open="(" close=")"><mtable><mtr><mtd><mn>20</mn></mtd></mtr>
    <mtr><mtd><mn>5</mn></mtd></mtr></mtable></mfenced> <mo>∈</mo> <msubsup><mi>ℝ</mi>
    <mrow><mn>≥0</mn></mrow> <mn>2</mn></msubsup></mrow></math>
  prefs: []
  type: TYPE_NORMAL
- en: and the strike price of the option is <math alttext="upper K equals 15"><mrow><mi>K</mi>
    <mo>=</mo> <mn>15</mn></mrow></math> , the payoff <math alttext="upper C"><mi>C</mi></math>
    of the European call option is given by
  prefs: []
  type: TYPE_NORMAL
- en: <math mode="display"><mrow><mi>C</mi> <mo>=</mo> <mo movablelimits="true" form="prefix">max</mo>
    <mrow><mo>(</mo> <mi>S</mi> <mo>-</mo> <mi>K</mi> <mo>,</mo> <mn>0</mn> <mo>)</mo></mrow>
    <mo>=</mo> <mfenced open="(" close=")"><mtable><mtr><mtd><mrow><mo movablelimits="true"
    form="prefix">max</mo> <mo>(</mo> <mn>20</mn> <mo>-</mo> <mn>15</mn> <mo>,</mo>
    <mn>0</mn> <mo>)</mo></mrow></mtd></mtr> <mtr><mtd><mrow><mo movablelimits="true"
    form="prefix">max</mo> <mo>(</mo> <mn>5</mn> <mo>-</mo> <mn>15</mn> <mo>,</mo>
    <mn>0</mn> <mo>)</mo></mrow></mtd></mtr></mtable></mfenced> <mo>=</mo> <mfenced
    open="(" close=")"><mtable><mtr><mtd><mn>5</mn></mtd></mtr> <mtr><mtd><mn>0</mn></mtd></mtr></mtable></mfenced>
    <mo>∈</mo> <msubsup><mi>ℝ</mi> <mrow><mn>≥0</mn></mrow> <mn>2</mn></msubsup></mrow></math>
  prefs: []
  type: TYPE_NORMAL
- en: This illustrates how the notions of the *uncertain price of a stock* and the
    *state-dependent payoff of a European option* can be modeled mathematically as
    a vector. The discipline dealing with vectors and vector spaces in mathematics
    is called *linear algebra*.
  prefs: []
  type: TYPE_NORMAL
- en: 'How can all this be translated into Python programming? First, *real numbers*
    are represented as *floating point numbers* or `float` objects in Python:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](Images/1.png)](#co_finance_and_python_CO1-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Defines a variable with the name `vu` and the value 1.5.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](Images/2.png)](#co_finance_and_python_CO1-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Defines a variable with the name `vd` and the value 3.75.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](Images/3.png)](#co_finance_and_python_CO1-3)'
  prefs: []
  type: TYPE_NORMAL
- en: Looks up the type of the `vu` object—it is a `float` object.
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](Images/4.png)](#co_finance_and_python_CO1-4)'
  prefs: []
  type: TYPE_NORMAL
- en: Adds up the values of `vu` and `vd`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Second, one usually calls collections of objects of the same type in programming
    *arrays*. In Python, the package [`NumPy`](http://numpy.org) provides support
    for such data structures. The major data structure provided by this package is
    called `ndarray`, which is an abbreviation for <math alttext="n"><mi>n</mi></math>
    -dimensional array. Real-valued vectors are straightforward to model with `NumPy`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](Images/1.png)](#co_finance_and_python_CO2-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Imports the `NumPy` package.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](Images/2.png)](#co_finance_and_python_CO2-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Instantiates an `ndarray` object.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](Images/3.png)](#co_finance_and_python_CO2-3)'
  prefs: []
  type: TYPE_NORMAL
- en: Prints out the data stored in the object.
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](Images/4.png)](#co_finance_and_python_CO2-4)'
  prefs: []
  type: TYPE_NORMAL
- en: Looks up the data type for all elements.
  prefs: []
  type: TYPE_NORMAL
- en: '[![5](Images/5.png)](#co_finance_and_python_CO2-5)'
  prefs: []
  type: TYPE_NORMAL
- en: Looks up the shape of the object.
  prefs: []
  type: TYPE_NORMAL
- en: '[![6](Images/6.png)](#co_finance_and_python_CO2-6)'
  prefs: []
  type: TYPE_NORMAL
- en: Vector addition illustrated.
  prefs: []
  type: TYPE_NORMAL
- en: '[![7](Images/7.png)](#co_finance_and_python_CO2-7)'
  prefs: []
  type: TYPE_NORMAL
- en: Scalar multiplication illustrated.
  prefs: []
  type: TYPE_NORMAL
- en: 'This shows how the mathematical concepts surrounding vectors are represented
    and applied in Python. It is then only one step further to apply those insights
    to finance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](Images/1.png)](#co_finance_and_python_CO3-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Defines the uncertain price of the stock as an `ndarray` object.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](Images/2.png)](#co_finance_and_python_CO3-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Defines the strike price as a Python variable with an integer value (`int` object).
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](Images/3.png)](#co_finance_and_python_CO3-3)'
  prefs: []
  type: TYPE_NORMAL
- en: Calculates the maximum expression element-wise.
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](Images/4.png)](#co_finance_and_python_CO3-4)'
  prefs: []
  type: TYPE_NORMAL
- en: Shows the resulting data now stored in the `ndarray` object `C`.
  prefs: []
  type: TYPE_NORMAL
- en: 'This illustrates the style and approach of this book:'
  prefs: []
  type: TYPE_NORMAL
- en: Notions and concepts in finance are introduced.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A mathematical representation and model is provided.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The mathematical model is translated into executable Python code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In that sense, finance motivates the use of mathematics, which in turn motivates
    the use of Python programming techniques.
  prefs: []
  type: TYPE_NORMAL
- en: Getting Started with Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'One of the benefits of Python is that it is an open source language, which
    holds true for the absolute majority of important packages as well. This allows
    for easy installation of the language and required packages on all major operating
    systems, such as macOS, Windows, and Linux. There are only a few major packages
    that are required for the code of this book and finance in general in addition
    to a basic Python interpreter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[`NumPy`](http://numpy.org)'
  prefs: []
  type: TYPE_NORMAL
- en: This package allows the efficient handling of large, *n*-dimensional numerical
    data sets.
  prefs: []
  type: TYPE_NORMAL
- en: '[`pandas`](http://pandas.pydata.org)'
  prefs: []
  type: TYPE_NORMAL
- en: This package is primarily for the efficient handling of tabular data sets, such
    as financial time series data. Although not required for the purposes of this
    book, `pandas` has become one of the most popular Python packages in finance.
  prefs: []
  type: TYPE_NORMAL
- en: '[`SciPy`](http://scipy.org)'
  prefs: []
  type: TYPE_NORMAL
- en: This package is a collection of scientific functions that are required, for
    example, to solve typical optimization problems.
  prefs: []
  type: TYPE_NORMAL
- en: '[`SymPy`](http://sympy.org)'
  prefs: []
  type: TYPE_NORMAL
- en: This package allows for symbolic mathematics with Python, which sometimes comes
    in handy when dealing with financial models and algorithms.
  prefs: []
  type: TYPE_NORMAL
- en: '[`matplotlib`](http://matplotlib.org)'
  prefs: []
  type: TYPE_NORMAL
- en: This package is the standard package in Python for visualization. It allows
    you to generate and customize different types of plots, such as line plots, bar
    charts, and histograms.
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, there are only two tools that are required to get started with interactive
    Python coding:'
  prefs: []
  type: TYPE_NORMAL
- en: '[IPython](http://ipython.org)'
  prefs: []
  type: TYPE_NORMAL
- en: This is the most popular environment in which to do interactive Python coding
    on the command line (terminal, shell).
  prefs: []
  type: TYPE_NORMAL
- en: '[JupyterLab](http://jupyter.org)'
  prefs: []
  type: TYPE_NORMAL
- en: This is the interactive development environment in which to do interactive Python
    coding and development in the browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'The technical prerequisites to follow along with regard to Python programming
    are minimal. There are basically two options for making use of the Python code
    in this book:'
  prefs: []
  type: TYPE_NORMAL
- en: Quant Platform
  prefs: []
  type: TYPE_NORMAL
- en: On the [Quant Platform](http://finpy.pqp.io), for which you can sign up for
    free, you find a full-fledged environment for interactive financial analytics
    with Python. This allows you to make use of the Python code provided in this book
    via the browser, making a local installation unnecessary. After signing up for
    free, you have automatic access to all code and all Jupyter Notebooks that accompany
    the book, and you can execute the code right away in the browser.
  prefs: []
  type: TYPE_NORMAL
- en: Local Python environment
  prefs: []
  type: TYPE_NORMAL
- en: It is also straightforward nowadays to install a local Python environment that
    allows you to dive into financial analytics and the book code on your own computer.
    This section describes how to do this.
  prefs: []
  type: TYPE_NORMAL
- en: Local Installation Versus the Quant Platform
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: From experience, the local installation of an appropriate Python environment
    can sometimes prove difficult for someone who is just starting out in the programming
    world. Therefore, it is recommended that you do not spend too much time at the
    beginning on installing Python locally if you face any issues. Rather, make use
    of the [Quant Platform](http://finpy.pqp.io) and later on, with some more experience,
    you can still return and install Python on your local machine.
  prefs: []
  type: TYPE_NORMAL
- en: An easy and modern way of installing Python is by the use of the [`conda`](http://conda.io)
    package and environment manager (see [Figure 1-1](#conda_01)).
  prefs: []
  type: TYPE_NORMAL
- en: '![ftwp 0101](Images/ftwp_0101.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1-1\. `conda` web page
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The most efficient way to install `conda` and a basic Python interpreter is
    via the [Miniconda](https://oreil.ly/NI0Wi) distribution. On the Miniconda [download
    page](https://oreil.ly/gaWTP), installer packages for the most important operating
    systems and Python versions are provided (see [Figure 1-2](#conda_02)). Additional
    options, such as for Apple’s M1 chips (“Apple Silicon”), are provided by the [Miniforge
    project](https://oreil.ly/gKeo3).
  prefs: []
  type: TYPE_NORMAL
- en: '![ftwp 0102](Images/ftwp_0102.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1-2\. Miniconda download page
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'After having installed Miniconda or Miniforge according to the guidelines provided
    for your operating system, you should open a shell or command prompt and check
    whether `conda` is available. The examples that follow are based on `conda` as
    installed via Miniforge on an Apple Mac computer with the M1 chip. You should
    get an output similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Also note the `(base)` part of the prompt that is typical for `conda`-based
    Python installations. The next step is to create a new *Python environment* as
    follows (and to answer “y” when prompted):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'After the successful completion, activate the environment as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice how the prompt changes. Next, install the required tools IPython and
    JupyterLab as follows (and answer “y” when prompted):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'After that, you should install the major Python packages generally used for
    financial data science as follows (the flag `-y` avoids the confirmation prompt):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'This provides the most important Python packages for data analysis in general
    and financial analytics in particular. You might check whether everything has
    been installed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'An interactive Python session is then started by simply typing `python`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'A better interactive shell is provided by IPython, which is started via `ipython`
    on the shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'However, it is recommended—especially for the Python beginner—to work with
    JupyterLab in the browser. To this end, type `jupyter lab` on the shell, which
    should give an output with messages similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: In general, a new browser tab is opened automatically, which then shows you
    the starting page of JupyterLab similar to [Figure 1-3](#jupyter_01).
  prefs: []
  type: TYPE_NORMAL
- en: You can then open a new Jupyter Notebook and start with interactive Python coding,
    as shown in [Figure 1-4](#jupyter_02). To write code in a cell, click on the cell.
    To execute the code, use Shift-Return, Ctrl-Return, or Alt-Return (you will notice
    the difference).
  prefs: []
  type: TYPE_NORMAL
- en: '![ftwp 0103](Images/ftwp_0103.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1-3\. JupyterLab start page
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '![ftwp 0104](Images/ftwp_0104.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1-4\. New Jupyter Notebook
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: You can also open one of the Jupyter Notebook files provided with this book
    (see [Figure 1-5](#jupyter_03)).
  prefs: []
  type: TYPE_NORMAL
- en: '![ftwp 0105](Images/ftwp_0105.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1-5\. Jupyter Notebook accompanying the book
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: This section just provides the very basics to get started with Python and related
    tools, such as IPython and JupyterLab. For more details—for example, about how
    to work with IPython—refer to the book by VanderPlas (2016) listed in [Chapter 7](ch07.xhtml#where_to_go).
  prefs: []
  type: TYPE_NORMAL
- en: Conclusions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Finance can look back on a long history. The period from 1950 to 1980 is characterized
    by the introduction of rigorous mathematical analysis to the field. From the 1980s
    onward, and in particular since 2000, the role of computers and computational
    finance has gained tremendously in importance. This trend will be further reinforced
    by the increasing role AI plays in the field, with its computationally demanding
    algorithms from machine learning (ML) and deep learning (DL).
  prefs: []
  type: TYPE_NORMAL
- en: 'The finance field makes use of four different types of language: *natural language*
    (English in general), *financial language* (notions and expressions special to
    the field), *mathematical language* (like linear algebra or probability theory),
    and *programming language* (like Python for the purposes of this book).'
  prefs: []
  type: TYPE_NORMAL
- en: The approach of this book is to introduce related concepts from finance, mathematics,
    and Python programming alongside one another. The necessary prerequisites on the
    Python side are minimal, with the `conda` package and environment manager often
    as the tool of choice nowadays to manage Python environments.
  prefs: []
  type: TYPE_NORMAL
- en: You are now ready to move on to [Chapter 2](ch02_split_000.xhtml#two_state_economy),
    which discusses the most simple financial model presented in the book and introduces
    many of the central finance notions. The intuition that you gain in the most simple
    financial model should easily carry over to the more advanced models and approaches
    discussed from [Chapter 3](ch03.xhtml#three_state_economy) onward.
  prefs: []
  type: TYPE_NORMAL
- en: References
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Articles and books cited in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Cox, John, Jonathan Ingersoll and Stephen Ross. 1985\. “A Theory of the Term
    Structure of Interest Rates.” *Econometrica* 53 (2): 385–407.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fletcher, Laurence. 2020\. “Hedge Funds Exploit Technology to Reduce Cost and
    Waste.” *Financial Times*, December 15, 2020\. [*https://oreil.ly/HE4Cc*](https://oreil.ly/HE4Cc).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Heston, Steven. 1993\. “A Closed-Form Solution for Options with Stochastic
    Volatility with Applications to Bond and Currency Options.” *The Review of Financial
    Studies* 6 (2): 327–343.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Hilpisch, Yves. 2018\. *Python for Finance: Mastering Data-Driven Finance*.
    2nd ed. Sebastopol: O’Reilly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Hilpisch, Yves. 2020\. *Artificial Intelligence in Finance: A Python-Based
    Guide*. Sebastopol: O’Reilly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Longstaff, Francis and Eduardo Schwartz. 2001\. “Valuing American Options by
    Simulation: A Simple Least Squares Approach.” *Review of Financial Studies* 14
    (1): 113–147.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Markowitz, Harry. 1952\. “Portfolio Selection.” *Journal of Finance* 7 (1):
    77-91.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Milne, Frank. 1995\. *Finance Theory and Asset Pricing*. New York: Oxford University
    Press.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Rubinstein, Mark. 2006\. *A History of the Theory of Investments*. Hoboken:
    Wiley Finance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL

["```py\npip install --upgrade git+https://github.com/yhilpisch/tpqoa.git\n```", "```py\n[oanda]\naccount_id = XYZ-ABC-...\naccess_token = ZYXCAB...\naccount_type = practice\n```", "```py\nimport tpqoa\napi = tpqoa.tpqoa('aiif.cfg')\n```", "```py\nIn [1]: import os\n        import time\n        import numpy as np\n        import pandas as pd\n        from pprint import pprint\n        from pylab import plt, mpl\n        plt.style.use('seaborn')\n        mpl.rcParams['savefig.dpi'] = 300\n        mpl.rcParams['font.family'] = 'serif'\n        pd.set_option('mode.chained_assignment', None)\n        pd.set_option('display.float_format', '{:.5f}'.format)\n        np.set_printoptions(suppress=True, precision=4)\n        os.environ['PYTHONHASHSEED'] = '0'\n```", "```py\nIn [2]: import tpqoa  ![1](Images/1.png)\n\nIn [3]: api = tpqoa.tpqoa('../aiif.cfg')  ![2](Images/2.png)\n\nIn [4]: ins = api.get_instruments()  ![3](Images/3.png)\n\nIn [5]: ins[:5]  ![4](Images/4.png)\nOut[5]: [('AUD/CAD', 'AUD_CAD'),\n         ('AUD/CHF', 'AUD_CHF'),\n         ('AUD/HKD', 'AUD_HKD'),\n         ('AUD/JPY', 'AUD_JPY'),\n         ('AUD/NZD', 'AUD_NZD')]\n```", "```py\nIn [6]: raw = api.get_history(instrument='EUR_USD',  ![1](Images/1.png)\n                              start='2018-01-01',  ![2](Images/2.png)\n                              end='2020-07-31',  ![3](Images/3.png)\n                              granularity='D',  ![4](Images/4.png)\n                              price='A')  ![5](Images/5.png)\n\nIn [7]: raw.info()\n        <class 'pandas.core.frame.DataFrame'>\n        DatetimeIndex: 671 entries, 2018-01-01 22:00:00 to 2020-07-30 21:00:00\n        Data columns (total 6 columns):\n         #   Column    Non-Null Count  Dtype\n        ---  ------    --------------  -----\n         0   o         671 non-null    float64\n         1   h         671 non-null    float64\n         2   l         671 non-null    float64\n         3   c         671 non-null    float64\n         4   volume    671 non-null    int64\n         5   complete  671 non-null    bool\n        dtypes: bool(1), float64(4), int64(1)\n        memory usage: 32.1 KB\n\nIn [8]: raw.head()\nOut[8]:                           o       h       l       c  volume  complete\n        time\n        2018-01-01 22:00:00 1.20101 1.20819 1.20051 1.20610   35630      True\n        2018-01-02 22:00:00 1.20620 1.20673 1.20018 1.20170   31354      True\n        2018-01-03 22:00:00 1.20170 1.20897 1.20049 1.20710   35187      True\n        2018-01-04 22:00:00 1.20692 1.20847 1.20215 1.20327   36478      True\n        2018-01-07 22:00:00 1.20301 1.20530 1.19564 1.19717   27618      True\n\nIn [9]: raw['c'].plot(figsize=(10, 6));\n```", "```py\nIn [10]: raw = api.get_history(instrument='EUR_USD',\n                               start='2020-07-01',\n                               end='2020-07-31',\n                               granularity='M1',  ![1](Images/1.png)\n                               price='M')   ![2](Images/2.png)\n\nIn [11]: raw.info()\n         <class 'pandas.core.frame.DataFrame'>\n         DatetimeIndex: 30728 entries, 2020-07-01 00:00:00 to 2020-07-30 23:59:00\n         Data columns (total 6 columns):\n          #   Column    Non-Null Count  Dtype\n         ---  ------    --------------  -----\n          0   o         30728 non-null  float64\n          1   h         30728 non-null  float64\n          2   l         30728 non-null  float64\n          3   c         30728 non-null  float64\n          4   volume    30728 non-null  int64\n          5   complete  30728 non-null  bool\n         dtypes: bool(1), float64(4), int64(1)\n         memory usage: 1.4 MB\n\nIn [12]: raw.tail()\nOut[12]:                           o       h       l       c  volume  complete\n         time\n         2020-07-30 23:55:00 1.18724 1.18739 1.18718 1.18738      57      True\n         2020-07-30 23:56:00 1.18736 1.18758 1.18722 1.18757      57      True\n         2020-07-30 23:57:00 1.18756 1.18756 1.18734 1.18734      49      True\n         2020-07-30 23:58:00 1.18736 1.18737 1.18713 1.18717      36      True\n         2020-07-30 23:59:00 1.18718 1.18724 1.18714 1.18722      31      True\n\nIn [13]: raw['c'].plot(figsize=(10, 6));\n```", "```py\nIn [14]: api.stream_data('EUR_USD', stop=10)\n         2020-08-13T12:07:09.735715316Z 1.18328 1.18342\n         2020-08-13T12:07:16.245253689Z 1.18329 1.18343\n         2020-08-13T12:07:16.397803785Z 1.18328 1.18342\n         2020-08-13T12:07:17.240232521Z 1.18331 1.18346\n         2020-08-13T12:07:17.358476854Z 1.18334 1.18348\n         2020-08-13T12:07:17.778061207Z 1.18331 1.18345\n         2020-08-13T12:07:18.016544856Z 1.18333 1.18346\n         2020-08-13T12:07:18.144762415Z 1.18334 1.18348\n         2020-08-13T12:07:18.689365678Z 1.18331 1.18345\n         2020-08-13T12:07:19.148039139Z 1.18331 1.18345\n```", "```py\nIn [15]: order = api.create_order('EUR_USD', units=25000,\n                                  suppress=True, ret=True)  ![1](Images/1.png)\n         pprint(order)  ![1](Images/1.png)\n         {'accountBalance': '98553.3172',\n          'accountID': '101-004-13834683-001',\n          'batchID': '1625',\n          'commission': '0.0',\n          'financing': '0.0',\n          'fullPrice': {'asks': [{'liquidity': '10000000', 'price': 1.18345}],\n                        'bids': [{'liquidity': '10000000', 'price': 1.18331}],\n                        'closeoutAsk': 1.18345,\n                        'closeoutBid': 1.18331,\n                        'type': 'PRICE'},\n          'fullVWAP': 1.18345,\n          'gainQuoteHomeConversionFactor': '0.840811914585',\n          'guaranteedExecutionFee': '0.0',\n          'halfSpreadCost': '1.4788',\n          'id': '1626',\n          'instrument': 'EUR_USD',\n          'lossQuoteHomeConversionFactor': '0.849262285586',\n          'orderID': '1625',\n          'pl': '0.0',\n          'price': 1.18345,\n          'reason': 'MARKET_ORDER',\n          'requestID': '78757241547812154',\n          'time': '2020-08-13T12:07:19.434407966Z',\n          'tradeOpened': {'guaranteedExecutionFee': '0.0',\n                          'halfSpreadCost': '1.4788',\n                          'initialMarginRequired': '832.5',\n                          'price': 1.18345,\n                          'tradeID': '1626',\n                          'units': '25000.0'},\n          'type': 'ORDER_FILL',\n          'units': '25000.0',\n          'userID': 13834683}\n\nIn [16]: def print_details(order):  ![2](Images/2.png)\n             details = (order['time'][:-7], order['instrument'], order['units'],\n                        order['price'], order['pl'])\n             return details\n\nIn [17]: print_details(order)  ![2](Images/2.png)\nOut[17]: ('2020-08-13T12:07:19.434', 'EUR_USD', '25000.0', 1.18345, '0.0')\n\nIn [18]: time.sleep(1)\n```", "```py\nIn [19]: order = api.create_order('EUR_USD', units=-25000,\n                                  suppress=True, ret=True)  ![1](Images/1.png)\n         pprint(order)  ![1](Images/1.png)\n         {'accountBalance': '98549.283',\n          'accountID': '101-004-13834683-001',\n          'batchID': '1627',\n          'commission': '0.0',\n          'financing': '0.0',\n          'fullPrice': {'asks': [{'liquidity': '9975000', 'price': 1.18339}],\n                        'bids': [{'liquidity': '10000000', 'price': 1.18326}],\n                        'closeoutAsk': 1.18339,\n                        'closeoutBid': 1.18326,\n                        'type': 'PRICE'},\n          'fullVWAP': 1.18326,\n          'gainQuoteHomeConversionFactor': '0.840850994445',\n          'guaranteedExecutionFee': '0.0',\n          'halfSpreadCost': '1.3732',\n          'id': '1628',\n          'instrument': 'EUR_USD',\n          'lossQuoteHomeConversionFactor': '0.849301758209',\n          'orderID': '1627',\n          'pl': '-4.0342',\n          'price': 1.18326,\n          'reason': 'MARKET_ORDER',\n          'requestID': '78757241552009237',\n          'time': '2020-08-13T12:07:20.586564454Z',\n          'tradesClosed': [{'financing': '0.0',\n                            'guaranteedExecutionFee': '0.0',\n                            'halfSpreadCost': '1.3732',\n                            'price': 1.18326,\n                            'realizedPL': '-4.0342',\n                            'tradeID': '1626',\n                            'units': '-25000.0'}],\n          'type': 'ORDER_FILL',\n          'units': '-25000.0',\n          'userID': 13834683}\n\nIn [20]: print_details(order) ![2](Images/2.png)\nOut[20]: ('2020-08-13T12:07:20.586', 'EUR_USD', '-25000.0', 1.18326, '-4.0342')\n\nIn [21]: time.sleep(1)\n```", "```py\nIn [22]: order = api.create_order('EUR_USD', units=25000,\n                                  sl_distance=0.005,  ![1](Images/1.png)\n                                  suppress=True, ret=True)\n\nIn [23]: print_details(order)\nOut[23]: ('2020-08-13T12:07:21.740', 'EUR_USD', '25000.0', 1.18343, '0.0')\n\nIn [24]: sl_order = api.get_transaction(tid=int(order['id']) + 1)  ![2](Images/2.png)\n\nIn [25]: sl_order  ![2](Images/2.png)\nOut[25]: {'id': '1631',\n          'time': '2020-08-13T12:07:21.740825489Z',\n          'userID': 13834683,\n          'accountID': '101-004-13834683-001',\n          'batchID': '1629',\n          'requestID': '78757241556206373',\n          'type': 'STOP_LOSS_ORDER',\n          'tradeID': '1630',\n          'price': 1.17843,\n          'distance': '0.005',\n          'timeInForce': 'GTC',\n          'triggerCondition': 'DEFAULT',\n          'reason': 'ON_FILL'}\n\nIn [26]: (sl_order['time'], sl_order['type'], order['price'],\n          sl_order['price'], sl_order['distance'])  ![3](Images/3.png)\nOut[26]: ('2020-08-13T12:07:21.740825489Z',\n          'STOP_LOSS_ORDER',\n          1.18343,\n          1.17843,\n          '0.005')\n\nIn [27]: time.sleep(1)\n\nIn [28]: order = api.create_order('EUR_USD', units=-25000, suppress=True, ret=True)\n\nIn [29]: print_details(order)\nOut[29]: ('2020-08-13T12:07:23.059', 'EUR_USD', '-25000.0', 1.18329, '-2.9725')\n```", "```py\nIn [30]: order = api.create_order('EUR_USD', units=25000,\n                                  tsl_distance=0.005,  ![1](Images/1.png)\n                                  suppress=True, ret=True)\n\nIn [31]: print_details(order)\nOut[31]: ('2020-08-13T12:07:23.204', 'EUR_USD', '25000.0', 1.18341, '0.0')\n\nIn [32]: tsl_order = api.get_transaction(tid=int(order['id']) + 1)  ![2](Images/2.png)\n\nIn [33]: tsl_order  ![2](Images/2.png)\nOut[33]: {'id': '1637',\n          'time': '2020-08-13T12:07:23.204457044Z',\n          'userID': 13834683,\n          'accountID': '101-004-13834683-001',\n          'batchID': '1635',\n          'requestID': '78757241564598562',\n          'type': 'TRAILING_STOP_LOSS_ORDER',\n          'tradeID': '1636',\n          'distance': '0.005',\n          'timeInForce': 'GTC',\n          'triggerCondition': 'DEFAULT',\n          'reason': 'ON_FILL'}\n\nIn [34]: (tsl_order['time'][:-7], tsl_order['type'],\n          order['price'], tsl_order['distance'])  ![3](Images/3.png)\nOut[34]: ('2020-08-13T12:07:23.204', 'TRAILING_STOP_LOSS_ORDER', 1.18341, '0.005')\n\nIn [35]: time.sleep(1)\n\nIn [36]: order = api.create_order('EUR_USD', units=-25000,\n                                  suppress=True, ret=True)\n\nIn [37]: print_details(order)\nOut[37]: ('2020-08-13T12:07:24.551', 'EUR_USD', '-25000.0', 1.1833, '-2.3355')\n\nIn [38]: time.sleep(1)\n```", "```py\nIn [39]: tp_price = round(order['price'] + 0.01, 4)\n         tp_price\nOut[39]: 1.1933\n\nIn [40]: order = api.create_order('EUR_USD', units=25000,\n                                  tp_price=tp_price,  ![1](Images/1.png)\n                                  suppress=True, ret=True)\n\nIn [41]: print_details(order)\nOut[41]: ('2020-08-13T12:07:25.712', 'EUR_USD', '25000.0', 1.18344, '0.0')\n\nIn [42]: tp_order = api.get_transaction(tid=int(order['id']) + 1)  ![2](Images/2.png)\n\nIn [43]: tp_order  ![2](Images/2.png)\nOut[43]: {'id': '1643',\n          'time': '2020-08-13T12:07:25.712531725Z',\n          'userID': 13834683,\n          'accountID': '101-004-13834683-001',\n          'batchID': '1641',\n          'requestID': '78757241572993078',\n          'type': 'TAKE_PROFIT_ORDER',\n          'tradeID': '1642',\n          'price': 1.1933,\n          'timeInForce': 'GTC',\n          'triggerCondition': 'DEFAULT',\n          'reason': 'ON_FILL'}\n\nIn [44]: (tp_order['time'][:-7], tp_order['type'],\n          order['price'], tp_order['price'])  ![3](Images/3.png)\nOut[44]: ('2020-08-13T12:07:25.712', 'TAKE_PROFIT_ORDER', 1.18344, 1.1933)\n\nIn [45]: time.sleep(1)\n\nIn [46]: order = api.create_order('EUR_USD', units=-25000,\n                                  suppress=True, ret=True)\n\nIn [47]: print_details(order)\nOut[47]: ('2020-08-13T12:07:27.020', 'EUR_USD', '-25000.0', 1.18332, '-2.5478')\n```", "```py\nIn [48]: api.print_transactions(tid=int(order['id']) - 22)\n          1626 | 2020-08-13T12:07:19.434407966Z |   EUR_USD |      25000.0 |      0.0\n          1628 | 2020-08-13T12:07:20.586564454Z |   EUR_USD |     -25000.0 |  -4.0342\n          1630 | 2020-08-13T12:07:21.740825489Z |   EUR_USD |      25000.0 |      0.0\n          1633 | 2020-08-13T12:07:23.059178023Z |   EUR_USD |     -25000.0 |  -2.9725\n          1636 | 2020-08-13T12:07:23.204457044Z |   EUR_USD |      25000.0 |      0.0\n          1639 | 2020-08-13T12:07:24.551026466Z |   EUR_USD |     -25000.0 |  -2.3355\n          1642 | 2020-08-13T12:07:25.712531725Z |   EUR_USD |      25000.0 |      0.0\n          1645 | 2020-08-13T12:07:27.020414342Z |   EUR_USD |     -25000.0 |  -2.5478\n```", "```py\nIn [49]: api.get_account_summary()\nOut[49]: {'id': '101-004-13834683-001',\n          'alias': 'Primary',\n          'currency': 'EUR',\n          'balance': '98541.4272',\n          'createdByUserID': 13834683,\n          'createdTime': '2020-03-19T06:08:14.363139403Z',\n          'guaranteedStopLossOrderMode': 'DISABLED',\n          'pl': '-1248.5543',\n          'resettablePL': '-1248.5543',\n          'resettablePLTime': '0',\n          'financing': '-210.0185',\n          'commission': '0.0',\n          'guaranteedExecutionFees': '0.0',\n          'marginRate': '0.0333',\n          'openTradeCount': 1,\n          'openPositionCount': 1,\n          'pendingOrderCount': 0,\n          'hedgingEnabled': False,\n          'unrealizedPL': '941.9536',\n          'NAV': '99483.3808',\n          'marginUsed': '380.83',\n          'marginAvailable': '99107.2283',\n          'positionValue': '3808.3',\n          'marginCloseoutUnrealizedPL': '947.9546',\n          'marginCloseoutNAV': '99489.3818',\n          'marginCloseoutMarginUsed': '380.83',\n          'marginCloseoutPercent': '0.00191',\n          'marginCloseoutPositionValue': '3808.3',\n          'withdrawalLimit': '98541.4272',\n          'marginCallMarginUsed': '380.83',\n          'marginCallPercent': '0.00383',\n          'lastTransactionID': '1646'}\n```", "```py\nIn [50]: import oandaenv as oe\n\nIn [51]: symbol = 'EUR_USD'\n\nIn [52]: date = '2020-08-11'\n\nIn [53]: features = [symbol, 'r', 's', 'm', 'v']\n\nIn [54]: %%time\n         learn_env = oe.OandaEnv(symbol=symbol,\n                           start=f'{date} 08:00:00',\n                           end=f'{date} 13:00:00',\n                           granularity='S30',  ![1](Images/1.png)\n                           price='M',  ![2](Images/2.png)\n                           features=features,  ![3](Images/3.png)\n                           window=20,  ![4](Images/4.png)\n                           lags=3,  ![5](Images/5.png)\n                           leverage=20,  ![6](Images/6.png)\n                           min_accuracy=0.4,  ![7](Images/7.png)\n                           min_performance=0.85  ![8](Images/8.png)\n                          )\n         CPU times: user 23.1 ms, sys: 2.86 ms, total: 25.9 ms\n         Wall time: 26.8 ms\n\nIn [55]: np.bincount(learn_env.data['d'])\nOut[55]: array([299, 281])\n\nIn [56]: learn_env.data.info()\n         <class 'pandas.core.frame.DataFrame'>\n         DatetimeIndex: 580 entries, 2020-08-11 08:10:00 to 2020-08-11 12:59:30\n         Data columns (total 6 columns):\n          #   Column   Non-Null Count  Dtype\n         ---  ------   --------------  -----\n          0   EUR_USD  580 non-null    float64\n          1   r        580 non-null    float64\n          2   s        580 non-null    float64\n          3   m        580 non-null    float64\n          4   v        580 non-null    float64\n          5   d        580 non-null    int64\n         dtypes: float64(5), int64(1)\n         memory usage: 31.7 KB\n```", "```py\nIn [57]: valid_env = oe.OandaEnv(symbol=learn_env.symbol,\n                           start=f'{date} 13:00:00',\n                           end=f'{date} 14:00:00',\n                           granularity=learn_env.granularity,\n                           price=learn_env.price,\n                           features=learn_env.features,\n                           window=learn_env.window,\n                           lags=learn_env.lags,\n                           leverage=learn_env.leverage,\n                           min_accuracy=0,\n                           min_performance=0,\n                           mu=learn_env.mu,\n                           std=learn_env.std\n                          )\n\nIn [58]: valid_env.data.info()\n         <class 'pandas.core.frame.DataFrame'>\n         DatetimeIndex: 100 entries, 2020-08-11 13:10:00 to 2020-08-11 13:59:30\n         Data columns (total 6 columns):\n          #   Column   Non-Null Count  Dtype\n         ---  ------   --------------  -----\n          0   EUR_USD  100 non-null    float64\n          1   r        100 non-null    float64\n          2   s        100 non-null    float64\n          3   m        100 non-null    float64\n          4   v        100 non-null    float64\n          5   d        100 non-null    int64\n         dtypes: float64(5), int64(1)\n         memory usage: 5.5 KB\n\nIn [59]: test_env = oe.OandaEnv(symbol=learn_env.symbol,\n                           start=f'{date} 14:00:00',\n                           end=f'{date} 17:00:00',\n                           granularity=learn_env.granularity,\n                           price=learn_env.price,\n                           features=learn_env.features,\n                           window=learn_env.window,\n                           lags=learn_env.lags,\n                           leverage=learn_env.leverage,\n                           min_accuracy=0,\n                           min_performance=0,\n                           mu=learn_env.mu,\n                           std=learn_env.std\n                          )\n\nIn [60]: test_env.data.info()\n         <class 'pandas.core.frame.DataFrame'>\n         DatetimeIndex: 340 entries, 2020-08-11 14:10:00 to 2020-08-11 16:59:30\n         Data columns (total 6 columns):\n          #   Column   Non-Null Count  Dtype\n         ---  ------   --------------  -----\n          0   EUR_USD  340 non-null    float64\n          1   r        340 non-null    float64\n          2   s        340 non-null    float64\n          3   m        340 non-null    float64\n          4   v        340 non-null    float64\n          5   d        340 non-null    int64\n         dtypes: float64(5), int64(1)\n         memory usage: 18.6 KB\n\nIn [61]: ax = learn_env.data[learn_env.symbol].plot(figsize=(10, 6))\n         plt.axvline(learn_env.data.index[-1], ls='--')\n         valid_env.data[learn_env.symbol].plot(ax=ax, style='-.')\n         plt.axvline(valid_env.data.index[-1], ls='--')\n         test_env.data[learn_env.symbol].plot(ax=ax, style='-.');\n```", "```py\nIn [62]: import sys\n         sys.path.append('../ch11/')  ![1](Images/1.png)\n\nIn [63]: import tradingbot  ![1](Images/1.png)\n         Using TensorFlow backend.\n\nIn [64]: tradingbot.set_seeds(100)\n         agent = tradingbot.TradingBot(24, 0.001, learn_env=learn_env,\n                                       valid_env=valid_env)  ![2](Images/2.png)\n\nIn [65]: episodes = 31\n\nIn [66]: %time agent.learn(episodes)  ![2](Images/2.png)\n         =======================================================================\n         episode:  5/31 | VALIDATION | treward:   97 | perf: 1.004 | eps: 0.96\n         =======================================================================\n         =======================================================================\n         episode: 10/31 | VALIDATION | treward:   97 | perf: 1.005 | eps: 0.91\n         =======================================================================\n         =======================================================================\n         episode: 15/31 | VALIDATION | treward:   97 | perf: 0.986 | eps: 0.87\n         =======================================================================\n         =======================================================================\n         episode: 20/31 | VALIDATION | treward:   97 | perf: 1.012 | eps: 0.83\n         =======================================================================\n         =======================================================================\n         episode: 25/31 | VALIDATION | treward:   97 | perf: 0.995 | eps: 0.79\n         =======================================================================\n         =======================================================================\n         episode: 30/31 | VALIDATION | treward:   97 | perf: 0.972 | eps: 0.75\n         =======================================================================\n         episode: 31/31 | treward:   16 | perf: 0.981 | av: 376.0 | max:  577\n         CPU times: user 22.1 s, sys: 1.17 s, total: 23.3 s\n         Wall time: 20.1 s\n\nIn [67]: tradingbot.plot_performance(agent)  ![3](Images/3.png)\n```", "```py\nIn [68]: import backtest as bt\n\nIn [69]: env = test_env\n\nIn [70]: bt.backtest(agent, env)\n\nIn [71]: env.data['p'].iloc[env.lags:].value_counts()  ![1](Images/1.png)\nOut[71]:  1    263\n         -1     74\n         Name: p, dtype: int64\n\nIn [72]: sum(env.data['p'].iloc[env.lags:].diff() != 0)  ![2](Images/2.png)\nOut[72]: 25\n\nIn [73]: (env.data[['r', 's']].iloc[env.lags:] * env.leverage).sum(\n                 ).apply(np.exp)  ![3](Images/3.png)\nOut[73]: r   0.99966\n         s   1.05910\n         dtype: float64\n\nIn [74]: (env.data[['r', 's']].iloc[env.lags:] * env.leverage).sum(\n                 ).apply(np.exp) - 1  ![4](Images/4.png)\nOut[74]: r   -0.00034\n         s    0.05910\n         dtype: float64\n\nIn [75]: (env.data[['r', 's']].iloc[env.lags:] * env.leverage).cumsum(\n                 ).apply(np.exp).plot(figsize=(10, 6));  ![5](Images/5.png)\n```", "```py\nIn [76]: import tpqoa\n\nIn [77]: class OandaTradingBot(tpqoa.tpqoa):\n             def __init__(self, config_file, agent, granularity, units,\n                          verbose=True):\n                 super(OandaTradingBot, self).__init__(config_file)\n                 self.agent = agent\n                 self.symbol = self.agent.learn_env.symbol\n                 self.env = agent.learn_env\n                 self.window = self.env.window\n                 if granularity is None:\n                     self.granularity = agent.learn_env.granularity\n                 else:\n                     self.granularity = granularity\n                 self.units = units\n                 self.trades = 0\n                 self.position = 0\n                 self.tick_data = pd.DataFrame()\n                 self.min_length = (self.agent.learn_env.window +\n                                    self.agent.learn_env.lags)\n                 self.pl = list()\n                 self.verbose = verbose\n             def _prepare_data(self):\n                 self.data['r'] = np.log(self.data / self.data.shift(1))\n                 self.data.dropna(inplace=True)\n                 self.data['s'] = self.data[self.symbol].rolling(\n                                                     self.window).mean()\n                 self.data['m'] = self.data['r'].rolling(self.window).mean()\n                 self.data['v'] = self.data['r'].rolling(self.window).std()\n                 self.data.dropna(inplace=True)\n                 # self.data_ = (self.data - self.env.mu) / self.env.std ![1](Images/1.png)\n                 self.data_ = (self.data - self.data.mean()) / self.data.std()  ![1](Images/1.png)\n             def _resample_data(self):\n                 self.data = self.tick_data.resample(self.granularity,\n                                 label='right').last().ffill().iloc[:-1]  ![2](Images/2.png)\n                 self.data = pd.DataFrame(self.data['mid'])  ![2](Images/2.png)\n                 self.data.columns = [self.symbol,]  ![2](Images/2.png)\n                 self.data.index = self.data.index.tz_localize(None)  ![2](Images/2.png)\n             def _get_state(self):\n                 state = self.data_[self.env.features].iloc[-self.env.lags:]  ![3](Images/3.png)\n                 return np.reshape(state.values, [1, self.env.lags,\n                                                  self.env.n_features])  ![3](Images/3.png)\n             def report_trade(self, time, side, order):\n                 self.trades += 1\n                 pl = float(order['pl'])  ![4](Images/4.png)\n                 self.pl.append(pl)  ![4](Images/4.png)\n                 cpl = sum(self.pl)  ![5](Images/5.png)\n                 print('\\n' + 75 * '=')\n                 print(f'{time} | *** GOING {side} ({self.trades}) ***')\n                 print(f'{time} | PROFIT/LOSS={pl:.2f} | CUMULATIVE={cpl:.2f}')\n                 print(75 * '=')\n                 if self.verbose:\n                     pprint(order)\n                     print(75 * '=')\n             def on_success(self, time, bid, ask):\n                 df = pd.DataFrame({'ask': ask, 'bid': bid,\n                                    'mid': (bid + ask) / 2},\n                                   index=[pd.Timestamp(time)])\n                 self.tick_data = self.tick_data.append(df)  ![2](Images/2.png)\n                 self._resample_data()  ![2](Images/2.png)\n                 if len(self.data) > self.min_length:\n                     self.min_length += 1\n                     self._prepare_data()\n                     state = self._get_state()  ![6](Images/6.png)\n                     prediction = np.argmax(\n                         self.agent.model.predict(state)[0, 0])  ![6](Images/6.png)\n                     position = 1 if prediction == 1 else -1  ![6](Images/6.png)\n                     if self.position in [0, -1] and position == 1:  ![7](Images/7.png)\n                         order = self.create_order(self.symbol,\n                                 units=(1 - self.position) * self.units,\n                                         suppress=True, ret=True)\n                         self.report_trade(time, 'LONG', order)\n                         self.position = 1\n                     elif self.position in [0, 1] and position == -1:  ![8](Images/8.png)\n                         order = self.create_order(self.symbol,\n                                 units=-(1 + self.position) * self.units,\n                                         suppress=True, ret=True)\n                         self.report_trade(time, 'SHORT', order)\n                         self.position = -1\n```", "```py\nIn [78]: otb = OandaTradingBot('../aiif.cfg', agent, '30s',\n                               25000, verbose=False)  ![1](Images/1.png)\n\nIn [79]: otb.tick_data.info()\n         <class 'pandas.core.frame.DataFrame'>\n         Index: 0 entries\n         Empty DataFrame\nIn [80]: otb.stream_data(agent.learn_env.symbol, stop=1000)  ![2](Images/2.png)\n\n         ===========================================================================\n         2020-08-13T12:19:32.320291893Z | *** GOING SHORT (1) ***\n         2020-08-13T12:19:32.320291893Z | PROFIT/LOSS=0.00 | CUMULATIVE=0.00\n         ===========================================================================\n\n         ===========================================================================\n         2020-08-13T12:20:00.083985447Z | *** GOING LONG (2) ***\n         2020-08-13T12:20:00.083985447Z | PROFIT/LOSS=-6.80 | CUMULATIVE=-6.80\n         ===========================================================================\n\n         ===========================================================================\n         2020-08-13T12:25:00.099901587Z | *** GOING SHORT (3) ***\n         2020-08-13T12:25:00.099901587Z | PROFIT/LOSS=-7.86 | CUMULATIVE=-14.66\n         ===========================================================================\n\nIn [81]: print('\\n' + 75 * '=')\n         print('*** CLOSING OUT ***')\n         order = otb.create_order(otb.symbol,\n                         units=-otb.position * otb.units,\n                         suppress=True, ret=True)  ![3](Images/3.png)\n         otb.report_trade(otb.time, 'NEUTRAL', order)  ![3](Images/3.png)\n         if otb.verbose:\n             pprint(order)\n         print(75 * '=')\n\n         ===========================================================================\n         *** CLOSING OUT ***\n\n         ===========================================================================\n         2020-08-13T12:25:16.870357562Z | *** GOING NEUTRAL (4) ***\n         2020-08-13T12:25:16.870357562Z | PROFIT/LOSS=-3.19 | CUMULATIVE=-17.84\n         ===========================================================================\n         ===========================================================================\n```", "```py\nIn [82]: pl = np.array(otb.pl)  ![1](Images/1.png)\n\nIn [83]: pl  ![1](Images/1.png)\nOut[83]: array([ 0.    , -6.7959, -7.8594, -3.1862])\n\nIn [84]: pl.cumsum()  ![2](Images/2.png)\nOut[84]: array([  0.    ,  -6.7959, -14.6553, -17.8415])\n```", "```py\nIn [85]: import pickle\n\nIn [86]: pickle.dump(agent, open('trading.bot', 'wb'))\n```", "```py\n#\n# Finance Environment\n#\n# (c) Dr. Yves J. Hilpisch\n# Artificial Intelligence in Finance\n#\n#\nimport math\nimport tpqoa\nimport random\nimport numpy as np\nimport pandas as pd\n\nclass observation_space:\n    def __init__(self, n):\n        self.shape = (n,)\n\nclass action_space:\n    def __init__(self, n):\n        self.n = n\n\n    def sample(self):\n        return random.randint(0, self.n - 1)\n\nclass OandaEnv:\n    def __init__(self, symbol, start, end, granularity, price,\n                 features, window, lags, leverage=1,\n                 min_accuracy=0.5, min_performance=0.85,\n                 mu=None, std=None):\n        self.symbol = symbol\n        self.start = start\n        self.end = end\n        self.granularity = granularity\n        self.price = price\n        self.api = tpqoa.tpqoa('../aiif.cfg')\n        self.features = features\n        self.n_features = len(features)\n        self.window = window\n        self.lags = lags\n        self.leverage = leverage\n        self.min_accuracy = min_accuracy\n        self.min_performance = min_performance\n        self.mu = mu\n        self.std = std\n        self.observation_space = observation_space(self.lags)\n        self.action_space = action_space(2)\n        self._get_data()\n        self._prepare_data()\n\n    def _get_data(self):\n        ''' Method to retrieve data from Oanda.\n        '''\n        self.fn = f'../../source/oanda/'  ![1](Images/1.png)\n        self.fn += f'oanda_{self.symbol}_{self.start}_{self.end}_'  ![2](Images/2.png)\n        self.fn += f'{self.granularity}_{self.price}.csv'  ![2](Images/2.png)\n        self.fn = self.fn.replace(' ', '_').replace('-', '_').replace(':', '_')\n        try:\n            self.raw = pd.read_csv(self.fn, index_col=0, parse_dates=True)  ![3](Images/3.png)\n        except:\n            self.raw = self.api.get_history(self.symbol, self.start,\n                                       self.end, self.granularity,\n                                       self.price)  ![4](Images/4.png)\n            self.raw.to_csv(self.fn)  ![5](Images/5.png)\n        self.data = pd.DataFrame(self.raw['c'])  ![6](Images/6.png)\n        self.data.columns = [self.symbol]  ![7](Images/7.png)\n\n    def _prepare_data(self):\n        ''' Method to prepare additional time series data\n            (such as features data).\n        '''\n        self.data['r'] = np.log(self.data / self.data.shift(1))\n        self.data.dropna(inplace=True)\n        self.data['s'] = self.data[self.symbol].rolling(self.window).mean()\n        self.data['m'] = self.data['r'].rolling(self.window).mean()\n        self.data['v'] = self.data['r'].rolling(self.window).std()\n        self.data.dropna(inplace=True)\n        if self.mu is None:\n            self.mu = self.data.mean()\n            self.std = self.data.std()\n        self.data_ = (self.data - self.mu) / self.std\n        self.data['d'] = np.where(self.data['r'] > 0, 1, 0)\n        self.data['d'] = self.data['d'].astype(int)\n\n    def _get_state(self):\n        ''' Privat method that returns the state of the environment.\n        '''\n        return self.data_[self.features].iloc[self.bar -\n                                    self.lags:self.bar].values\n\n    def get_state(self, bar):\n        ''' Method that returns the state of the environment.\n        '''\n        return self.data_[self.features].iloc[bar - self.lags:bar].values\n\n    def reset(self):\n        ''' Method to reset the environment.\n        '''\n        self.treward = 0\n        self.accuracy = 0\n        self.performance = 1\n        self.bar = self.lags\n        state = self._get_state()\n        return state\n\n    def step(self, action):\n        ''' Method to step the environment forwards.\n        '''\n        correct = action == self.data['d'].iloc[self.bar]\n        ret = self.data['r'].iloc[self.bar] * self.leverage\n        reward_1 = 1 if correct else 0  ![8](Images/8.png)\n        reward_2 = abs(ret) if correct else -abs(ret)  ![9](Images/9.png)\n        reward = reward_1 + reward_2 * self.leverage  ![10](Images/10.png)\n        self.treward += reward_1\n        self.bar += 1\n        self.accuracy = self.treward / (self.bar - self.lags)\n        self.performance *= math.exp(reward_2)\n        if self.bar >= len(self.data):\n            done = True\n        elif reward_1 == 1:\n            done = False\n        elif (self.accuracy < self.min_accuracy and\n              self.bar > self.lags + 15):\n            done = True\n        elif (self.performance < self.min_performance and\n              self.bar > self.lags + 15):\n            done = True\n        else:\n            done = False\n        state = self._get_state()\n        info = {}\n        return state, reward, done, info\n```", "```py\n#\n# Vectorized Backtesting of\n# Trading Bot (Financial Q-Learning Agent)\n#\n# (c) Dr. Yves J. Hilpisch\n# Artificial Intelligence in Finance\n#\nimport numpy as np\nimport pandas as pd\npd.set_option('mode.chained_assignment', None)\n\ndef reshape(s, env):\n    return np.reshape(s, [1, env.lags, env.n_features])\n\ndef backtest(agent, env):\n    done = False\n    env.data['p'] = 0\n    state = env.reset()\n    while not done:\n        action = np.argmax(\n            agent.model.predict(reshape(state, env))[0, 0])\n        position = 1 if action == 1 else -1\n        env.data.loc[:, 'p'].iloc[env.bar] = position\n        state, reward, done, info = env.step(action)\n    env.data['s'] = env.data['p'] * env.data['r']\n```", "```py\n#\n# Oanda Trading Bot\n# and Deployment Code\n#\n# (c) Dr. Yves J. Hilpisch\n# Artificial Intelligence in Finance\n#\nimport sys\nimport tpqoa\nimport pickle\nimport numpy as np\nimport pandas as pd\n\nsys.path.append('../ch11/')\n\nclass OandaTradingBot(tpqoa.tpqoa):\n    def __init__(self, config_file, agent, granularity, units,\n                 sl_distance=None, tsl_distance=None, tp_price=None,\n                 verbose=True):\n        super(OandaTradingBot, self).__init__(config_file)\n        self.agent = agent\n        self.symbol = self.agent.learn_env.symbol\n        self.env = agent.learn_env\n        self.window = self.env.window\n        if granularity is None:\n            self.granularity = agent.learn_env.granularity\n        else:\n            self.granularity = granularity\n        self.units = units\n        self.sl_distance = sl_distance\n        self.tsl_distance = tsl_distance\n        self.tp_price = tp_price\n        self.trades = 0\n        self.position = 0\n        self.tick_data = pd.DataFrame()\n        self.min_length = (self.agent.learn_env.window +\n                           self.agent.learn_env.lags)\n        self.pl = list()\n        self.verbose = verbose\n    def _prepare_data(self):\n        ''' Prepares the (lagged) features data.\n '''\n        self.data['r'] = np.log(self.data / self.data.shift(1))\n        self.data.dropna(inplace=True)\n        self.data['s'] = self.data[self.symbol].rolling(self.window).mean()\n        self.data['m'] = self.data['r'].rolling(self.window).mean()\n        self.data['v'] = self.data['r'].rolling(self.window).std()\n        self.data.dropna(inplace=True)\n        self.data_ = (self.data - self.env.mu) / self.env.std\n    def _resample_data(self):\n        ''' Resamples the data to the trading bar length.\n '''\n        self.data = self.tick_data.resample(self.granularity,\n                                label='right').last().ffill().iloc[:-1]\n        self.data = pd.DataFrame(self.data['mid'])\n        self.data.columns = [self.symbol,]\n        self.data.index = self.data.index.tz_localize(None)\n    def _get_state(self):\n        ''' Returns the (current) state of the financial market.\n '''\n        state = self.data_[self.env.features].iloc[-self.env.lags:]\n        return np.reshape(state.values, [1, self.env.lags, self.env.n_features])\n    def report_trade(self, time, side, order):\n        ''' Reports trades and order details.\n '''\n        self.trades += 1\n        pl = float(order['pl'])\n        self.pl.append(pl)\n        cpl = sum(self.pl)\n        print('\\n' + 71 * '=')\n        print(f'{time} | *** GOING {side} ({self.trades}) ***')\n        print(f'{time} | PROFIT/LOSS={pl:.2f} | CUMULATIVE={cpl:.2f}')\n        print(71 * '=')\n        if self.verbose:\n            pprint(order)\n            print(71 * '=')\n    def on_success(self, time, bid, ask):\n        ''' Contains the main trading logic.\n '''\n        df = pd.DataFrame({'ask': ask, 'bid': bid, 'mid': (bid + ask) / 2},\n                          index=[pd.Timestamp(time)])\n        self.tick_data = self.tick_data.append(df)\n        self._resample_data()\n        if len(self.data) > self.min_length:\n            self.min_length += 1\n            self._prepare_data()\n            state = self._get_state()\n            prediction = np.argmax(self.agent.model.predict(state)[0, 0])\n            position = 1 if prediction == 1 else -1\n            if self.position in [0, -1] and position == 1:\n                order = self.create_order(self.symbol,\n                        units=(1 - self.position) * self.units,\n                        sl_distance=self.sl_distance,\n                        tsl_distance=self.tsl_distance,\n                        tp_price=self.tp_price,\n                        suppress=True, ret=True)\n                self.report_trade(time, 'LONG', order)\n                self.position = 1\n            elif self.position in [0, 1] and position == -1:\n                order = self.create_order(self.symbol,\n                        units=-(1 + self.position) * self.units,\n                        sl_distance=self.sl_distance,\n                        tsl_distance=self.tsl_distance,\n                        tp_price=self.tp_price,\n                        suppress=True, ret=True)\n                self.report_trade(time, 'SHORT', order)\n                self.position = -1\n\nif __name__ == '__main__':\n    agent = pickle.load(open('trading.bot', 'rb'))\n    otb = OandaTradingBot('../aiif.cfg', agent, '5s',\n                          25000, verbose=False)\n    otb.stream_data(agent.learn_env.symbol, stop=1000)\n    print('\\n' + 71 * '=')\n    print('*** CLOSING OUT ***')\n    order = otb.create_order(otb.symbol,\n                    units=-otb.position * otb.units,\n                    suppress=True, ret=True)\n    otb.report_trade(otb.time, 'NEUTRAL', order)\n    if otb.verbose:\n        pprint(order)\n    print(71 * '=')\n```"]
["```py\nIn [1]: def u(c):\n            return -c[0] * c[1]  ![1](Images/1.png)\n\nIn [2]: w = 10  ![2](Images/2.png)\n\nIn [3]: from scipy.optimize import minimize\n\nIn [4]: cons = ({'type': 'eq', 'fun': lambda c: c[0] + c[1] - w})  ![3](Images/3.png)\n\nIn [5]: opt = minimize(u, (1, 1), constraints=cons)  ![4](Images/4.png)\n\nIn [6]: opt\nOut[6]:      fun: -24.999999999999996\n             jac: array([-5., -5.])\n         message: 'Optimization terminated successfully'\n            nfev: 6\n             nit: 2\n            njev: 2\n          status: 0\n         success: True\n               x: array([5., 5.])\n\nIn [7]: opt['x']  ![5](Images/5.png)\nOut[7]: array([5., 5.])\n\nIn [8]: -opt['fun']   ![6](Images/6.png)\nOut[8]: 24.999999999999996\n```", "```py\nIn [9]: def iu(u, c0):\n            return u / c0  ![1](Images/1.png)\n\nIn [10]: def c1(c0):\n             return w - c0  ![2](Images/2.png)\n\nIn [11]: import numpy as np\n         np.set_printoptions(precision=5)\n\nIn [12]: from pylab import mpl, plt\n         plt.style.use('seaborn')\n         mpl.rcParams['savefig.dpi'] = 300\n         mpl.rcParams['font.family'] = 'serif'\n\nIn [13]: c0 = np.linspace(1, w)  ![3](Images/3.png)\n\nIn [14]: plt.figure(figsize=(10, 6))\n         plt.plot(c0, c1(c0), label='budget constraint', lw=3.0)\n         plt.plot(c0, iu(15, c0), '--', label='$u=15$')\n         plt.plot(c0, iu(25, c0), label='$u=25$')\n         plt.plot(c0, iu(35, c0), '-.', label='$u=35$')\n         plt.plot(opt['x'][0], opt['x'][1], 'ro', label='$c=(5, 5)$')\n         plt.legend(loc=0);\n```", "```py\nIn [15]: x = np.linspace(0.5, 10, 50)  ![1](Images/1.png)\n\nIn [16]: x[:5]  ![2](Images/2.png)\nOut[16]: array([0.5    , 0.69388, 0.88776, 1.08163, 1.27551])\n\nIn [17]: u = np.log(x)  ![3](Images/3.png)\n\nIn [18]: u1 = 1 / x  ![4](Images/4.png)\n\nIn [19]: u2 = -1 / x ** 2  ![5](Images/5.png)\n\nIn [20]: plt.figure(figsize=(10, 6))  ![6](Images/6.png)\n         plt.plot(x, u, label='$u$')  ![7](Images/7.png)\n         plt.plot(x, u1, '--', label='$du/dx$')  ![8](Images/8.png)\n         plt.plot(x, u2, '-.', label='$d^2u/dx^2$')  ![9](Images/9.png)\n         plt.legend(loc=0);  ![10](Images/10.png)\n```", "```py\nIn [21]: import math\n\nIn [22]: from scipy.optimize import minimize\n\nIn [23]: kappa = 10 / 11\n\nIn [24]: def U(c):\n             return -(math.log(c[0]) +  kappa * math.log(c[1]))  ![1](Images/1.png)\n\nIn [25]: w = 10\n\nIn [26]: cons = ({'type': 'eq', 'fun': lambda c: c[0] + c[1] - w})  ![2](Images/2.png)\n\nIn [27]: opt = minimize(U, (1, 1), constraints=cons)\n\nIn [28]: opt\nOut[28]:      fun: -3.0747286083026886\n              jac: array([-0.19091, -0.19091])\n          message: 'Optimization terminated successfully'\n             nfev: 18\n              nit: 6\n             njev: 6\n           status: 0\n          success: True\n                x: array([5.23811, 4.76189])\n\nIn [29]: opt['x']  ![3](Images/3.png)\nOut[29]: array([5.23811, 4.76189])\n\nIn [30]: -opt['fun']  ![4](Images/4.png)\nOut[30]: 3.0747286083026886\n```", "```py\nIn [31]: B = (10, (11, 11))  ![1](Images/1.png)\n\nIn [32]: S = (10, (20, 5))  ![2](Images/2.png)\n\nIn [33]: M0 = np.array((B[0], S[0]))  ![3](Images/3.png)\n\nIn [34]: M = np.array((B[1], S[1])).T  ![4](Images/4.png)\n\nIn [35]: p = 0.5  ![5](Images/5.png)\n\nIn [36]: P = np.array((p, 1-p))  ![5](Images/5.png)\n\nIn [37]: def U(phi):\n             c1 = np.dot(M, phi)  ![6](Images/6.png)\n             return -np.dot(P, np.log(c1))  ![6](Images/6.png)\n\nIn [38]: -U((1, 0))  ![7](Images/7.png)\nOut[38]: 2.3978952727983707\n\nIn [39]: -U((0, 1))  ![7](Images/7.png)\nOut[39]: 2.3025850929940455\n\nIn [40]: -U((0.5, 0.5))  ![7](Images/7.png)\nOut[40]: 2.410140782802518\n\nIn [41]: w = 10\n\nIn [42]: cons = ({'type': 'eq',\n                  'fun': lambda phi: np.dot(M0, phi) - w})  ![8](Images/8.png)\n\nIn [43]: opt = minimize(U, (1, 1), constraints=cons)  ![9](Images/9.png)\n\nIn [44]: opt\nOut[44]:      fun: -2.4183062699261972\n              jac: array([-1.     , -0.99999])\n          message: 'Optimization terminated successfully'\n             nfev: 15\n              nit: 5\n             njev: 5\n           status: 0\n          success: True\n                x: array([0.69442, 0.30558])\n\nIn [45]: opt['x']  ![10](Images/10.png)\nOut[45]: array([0.69442, 0.30558])\n\nIn [46]: -opt['fun']  ![11](Images/11.png)\nOut[46]: 2.4183062699261972\n\nIn [47]: -U(opt['x'])  ![11](Images/11.png)\nOut[47]: 2.4183062699261972\n\nIn [48]: np.dot(M, opt['x'])  ![12](Images/12.png)\nOut[48]: array([13.75022,  9.16652])\n```", "```py\nIn [49]: M0 = np.array((1, B[0], S[0]))  ![1](Images/1.png)\n\nIn [50]: kappa = 10 / 11  ![2](Images/2.png)\n\nIn [51]: def U(phi):\n             c0 = phi[0]  ![3](Images/3.png)\n             c1 = np.dot(M, phi[1:])  ![3](Images/3.png)\n             return -(np.log(c0) + kappa * np.dot(P, np.log(c1)))  ![3](Images/3.png)\n\nIn [52]: opt = minimize(U, (1, 1, 1), constraints=cons)\n\nIn [53]: opt\nOut[53]:      fun: -3.1799295980286093\n              jac: array([-0.19088, -1.90932, -1.90974])\n          message: 'Optimization terminated successfully'\n             nfev: 32\n              nit: 8\n             njev: 8\n           status: 0\n          success: True\n                x: array([5.23899, 0.33087, 0.14523])\n\nIn [54]: -opt['fun']\nOut[54]: 3.1799295980286093\n\nIn [55]: opt['x'][0]  ![4](Images/4.png)\nOut[55]: 5.23898714830318\n\nIn [56]: np.dot(M, opt['x'][1:])  ![5](Images/5.png)\nOut[56]: array([6.54422, 4.36571])\n```", "```py\nIn [57]: p = 1 / 3  ![1](Images/1.png)\n\nIn [58]: P = np.array((p, (1-p)))  ![1](Images/1.png)\n\nIn [59]: B1 = np.array((11, 11))\n\nIn [60]: S1 = np.array((20, 5))\n\nIn [61]: zeta = np.dot(S1 / (B1 + S1), P) / np.dot(B1 / (B1 + S1), P)  ![2](Images/2.png)\n\nIn [62]: zeta  ![2](Images/2.png)\nOut[62]: 0.7342657342657343\n\nIn [63]: w = 15  ![3](Images/3.png)\n\nIn [64]: B0 = w / (1 + zeta)  ![4](Images/4.png)\n\nIn [65]: B0  ![4](Images/4.png)\nOut[65]: 8.649193548387098\n\nIn [66]: S0 = zeta * B0  ![5](Images/5.png)\n\nIn [67]: S0  ![5](Images/5.png)\nOut[67]: 6.350806451612904\n\nIn [68]: B0 + S0  ![6](Images/6.png)\nOut[68]: 15.000000000000002\n\nIn [69]: i = B1.mean() / B0 - 1  ![7](Images/7.png)\n\nIn [70]: i  ![7](Images/7.png)\nOut[70]: 0.2717948717948717\n\nIn [71]: mu = np.dot(S1, P) / S0 - 1  ![8](Images/8.png)\n\nIn [72]: mu  ![8](Images/8.png)\nOut[72]: 0.5746031746031743\n```", "```py\nIn [73]: import sympy as sy  ![1](Images/1.png)\n\nIn [74]: q = sy.Symbol('q')  ![2](Images/2.png)\n\nIn [75]: eq = (q * 20 + (1 - q) * 5) / (1 + i) - S0  ![3](Images/3.png)\n\nIn [76]: eq  ![4](Images/4.png)\nOut[76]: 11.7943548387097*q - 2.41935483870968\n\nIn [77]: q = sy.solve(eq)[0]  ![5](Images/5.png)\n\nIn [78]: q  ![6](Images/6.png)\nOut[78]: 0.205128205128205\n\nIn [79]: Q = np.array((q, 1 - q))  ![6](Images/6.png)\n\nIn [80]: np.dot(B1, Q) / (1 + i)  ![7](Images/7.png)\nOut[80]: 8.64919354838710\n\nIn [81]: np.dot(S1, Q) / (1 + i)  ![7](Images/7.png)\nOut[81]: 6.35080645161290\n```", "```py\nIn [82]: p = 1 / 3  ![1](Images/1.png)\n\nIn [83]: P = np.array((p, p, p))  ![1](Images/1.png)\n\nIn [84]: B1 = np.array((11, 11, 11))\n\nIn [85]: S1 = np.array((20, 10, 5))\n\nIn [86]: zeta = np.dot(S1 / (B1 + S1), P) / np.dot(B1 / (B1 + S1), P)  ![2](Images/2.png)\n\nIn [87]: zeta  ![2](Images/2.png)\nOut[87]: 0.9155274934101636\n\nIn [88]: w = 15  ![3](Images/3.png)\n\nIn [89]: B0 = w / (1 + zeta)  ![4](Images/4.png)\n\nIn [90]: B0  ![4](Images/4.png)\nOut[90]: 7.8307411674347165\n\nIn [91]: S0 = zeta * B0  ![5](Images/5.png)\n\nIn [92]: S0  ![5](Images/5.png)\nOut[92]: 7.169258832565284\n\nIn [93]: B0 + S0  ![6](Images/6.png)\nOut[93]: 15.0\n\nIn [94]: i = B1.mean() / B0 - 1  ![7](Images/7.png)\n\nIn [95]: i  ![7](Images/7.png)\nOut[95]: 0.40472016183411985\n\nIn [96]: mu = np.dot(S1, P) / S0 - 1  ![8](Images/8.png)\n\nIn [97]: mu  ![8](Images/8.png)\nOut[97]: 0.6273183796451287\n```", "```py\nIn [98]: qu = sy.Symbol('qu')  ![1](Images/1.png)\n         qm = sy.Symbol('qm')  ![1](Images/1.png)\n\nIn [99]: eq = (qu * 20 + qm * 10 + (1 - qu - qm) * 5) / (1 + i) - S0  ![2](Images/2.png)\n\nIn [100]: eq  ![3](Images/3.png)\nOut[100]: 3.55942780337942*qm + 10.6782834101383*qu - 3.60983102918587\n\nIn [101]: Q = sy.solve(eq, set=True)  ![4](Images/4.png)\n\nIn [102]: Q  ![5](Images/5.png)\nOut[102]: ([qm], {(1.01416048550236 - 3.00000000000001*qu,)})\n```", "```py\nIn [103]: p = 1 / 3  ![1](Images/1.png)\n\nIn [104]: P = np.array((p, p, p))  ![1](Images/1.png)\n\nIn [105]: B1 = np.array((11, 11, 11))  ![2](Images/2.png)\n\nIn [106]: S1 = np.array((20, 10, 5))  ![2](Images/2.png)\n\nIn [107]: C1 = np.array((5, 0, 0))  ![2](Images/2.png)\n\nIn [108]: zeta_1 = (np.dot(S1 / (B1 + S1 + C1), P) /\n                    np.dot(B1 / (B1 + S1 + C1), P))  ![3](Images/3.png)\n\nIn [109]: zeta_1  ![3](Images/3.png)\nOut[109]: 0.8862001308044474\n\nIn [110]: zeta_2 = (np.dot(C1 / (B1 + S1 + C1), P) /\n                    np.dot(B1 / (B1 + S1 + C1), P))  ![4](Images/4.png)\n\nIn [111]: zeta_2  ![4](Images/4.png)\nOut[111]: 0.09156311314584695\n\nIn [112]: w = 15  ![5](Images/5.png)\n\nIn [113]: B0 = w / (1 + zeta_1 + zeta_2)  ![6](Images/6.png)\n\nIn [114]: B0  ![6](Images/6.png)\nOut[114]: 7.584325396825396\n\nIn [115]: S0 = zeta_1 * B0  ![7](Images/7.png)\n\nIn [116]: S0  ![7](Images/7.png)\nOut[116]: 6.721230158730158\n\nIn [117]: C0 = zeta_2 * B0  ![8](Images/8.png)\n\nIn [118]: C0  ![8](Images/8.png)\nOut[118]: 0.6944444444444443\n\nIn [119]: B0 + S0 + C0  ![9](Images/9.png)\nOut[119]: 14.999999999999998\n\nIn [120]: i = B1.mean() / B0 - 1  ![10](Images/10.png)\n\nIn [121]: i  ![10](Images/10.png)\nOut[121]: 0.45035971223021587\n\nIn [122]: muS = np.dot(S1, P) / S0 - 1  ![11](Images/11.png)\n\nIn [123]: muS  ![11](Images/11.png)\nOut[123]: 0.7357933579335794\n\nIn [124]: muC = np.dot(C1, P) / C0 - 1  ![12](Images/12.png)\n\nIn [125]: muC  ![12](Images/12.png)\nOut[125]: 1.4000000000000004\n```", "```py\nIn [126]: M = np.array((B1, S1, C1)).T  ![1](Images/1.png)\n\nIn [127]: M  ![1](Images/1.png)\nOut[127]: array([[11, 20,  5],\n                 [11, 10,  0],\n                 [11,  5,  0]])\n\nIn [128]: M0 = np.array((B0, S0, C0))  ![2](Images/2.png)\n\nIn [129]: Q = np.linalg.solve(M.T / (1 + i), M0)  ![3](Images/3.png)\n\nIn [130]: Q  ![4](Images/4.png)\nOut[130]: array([0.20144, 0.34532, 0.45324])\n\nIn [131]: sum(Q)  ![4](Images/4.png)\nOut[131]: 1.0\n\nIn [132]: np.allclose(np.dot(M.T, Q), M0 * (1 + i))  ![5](Images/5.png)\nOut[132]: True\n```"]
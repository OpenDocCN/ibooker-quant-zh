["```py\nIn [1]: import random\n        import numpy as np\n        import pandas as pd\n        from pylab import plt, mpl\n        plt.style.use('seaborn')\n        mpl.rcParams['savefig.dpi'] = 300\n        mpl.rcParams['font.family'] = 'serif'\n\nIn [2]: url = 'https://hilpisch.com/aiif_eikon_eod_data.csv'\n\nIn [3]: raw = pd.read_csv(url, index_col=0, parse_dates=True)\n\nIn [4]: symbol = 'EUR='\n\nIn [5]: raw['bull'] = np.log(raw[symbol] / raw[symbol].shift(1))  ![1](Images/1.png)\n\nIn [6]: data = pd.DataFrame(raw['bull']).loc['2015-01-01':]  ![1](Images/1.png)\n\nIn [7]: data.dropna(inplace=True)\n\nIn [8]: data.info()\n        <class 'pandas.core.frame.DataFrame'>\n        DatetimeIndex: 1305 entries, 2015-01-01 to 2020-01-01\n        Data columns (total 1 columns):\n         #   Column  Non-Null Count  Dtype\n        ---  ------  --------------  -----\n         0   bull    1305 non-null   float64\n        dtypes: float64(1)\n        memory usage: 20.4 KB\n```", "```py\nIn [9]: np.random.seed(100)\n\nIn [10]: data['random'] = np.random.choice([-1, 1], len(data)) * data['bull']  ![1](Images/1.png)\n\nIn [11]: data['bear'] = -data['bull']  ![2](Images/2.png)\n\nIn [12]: def top(t):\n             top = pd.DataFrame(data['bull'])\n             top.columns = ['top']\n             top = top.sort_values('top')\n             n = int(len(data) * t)\n             top['top'].iloc[:n] = abs(top['top'].iloc[:n])\n             top['top'].iloc[n:] = abs(top['top'].iloc[n:])\n             top['top'].iloc[n:-n] = np.random.choice([-1, 1],\n                             len(top['top'].iloc[n:-n])) * top['top'].iloc[n:-n]\n             data[f'{int(t * 100)}_top'] = top.sort_index()\n\nIn [13]: for t in [0.1, 0.15]:\n             top(t)  ![3](Images/3.png)\n\nIn [14]: def afi(ratio):\n             correct = np.random.binomial(1, ratio, len(data))\n             random = np.random.choice([-1, 1], len(data))\n             strat = np.where(correct, abs(data['bull']), random * data['bull'])\n             data[f'{int(ratio * 100)}_afi'] = strat\n\nIn [15]: for ratio in [0.51, 0.6, 0.75, 0.9]:\n             afi(ratio)  ![4](Images/4.png)\n```", "```py\nIn [16]: data.head()\nOut[16]:                 bull    random      bear    10_top    15_top    51_afi  \\\n         Date\n         2015-01-01  0.000413 -0.000413 -0.000413  0.000413 -0.000413  0.000413\n         2015-01-02 -0.008464  0.008464  0.008464  0.008464  0.008464  0.008464\n         2015-01-05 -0.005767 -0.005767  0.005767 -0.005767  0.005767 -0.005767\n         2015-01-06 -0.003611 -0.003611  0.003611 -0.003611  0.003611  0.003611\n         2015-01-07 -0.004299 -0.004299  0.004299  0.004299  0.004299  0.004299\n\n                       60_afi    75_afi    90_afi\n         Date\n         2015-01-01  0.000413  0.000413  0.000413\n         2015-01-02  0.008464  0.008464  0.008464\n         2015-01-05  0.005767 -0.005767  0.005767\n         2015-01-06  0.003611  0.003611  0.003611\n         2015-01-07  0.004299  0.004299  0.004299\n\nIn [17]: data.sum().apply(np.exp)\nOut[17]: bull       0.926676\n         random     1.097137\n         bear       1.079126\n         10_top     9.815383\n         15_top    21.275448\n         51_afi    12.272497\n         60_afi    22.103642\n         75_afi    49.227314\n         90_afi    98.176658\n         dtype: float64\n\nIn [18]: data.cumsum().apply(np.exp).plot(figsize=(10, 6));\n```", "```py\nbull          0.782657\nrandom        0.800253\nbear          1.277698\n10_top      165.066583\n15_top     1026.275100\n51_afi      206.639897\n60_afi      691.751006\n75_afi     2947.811043\n90_afi    16581.526533\ndtype: float64\n```"]
["```py\nIn [1]: import numpy as np\n        import pandas as pd\n        from pylab import mpl, plt\n        plt.style.use('seaborn')\n        mpl.rcParams['font.family'] = 'serif'\n        %matplotlib inline\n```", "```py\nIn [2]: filename = '../../source/tr_eikon_eod_data.csv'  ![1](images/1.png)\n\nIn [3]: !head -5 $filename  ![2](images/2.png)\n\n        Date,AAPL.O,MSFT.O,INTC.O,AMZN.O,GS.N,SPY,.SPX,.VIX,EUR=,XAU=,GDX,GLD\n        2010-01-04,30.57282657,30.95,20.88,133.9,173.08,113.33,1132.99,20.04,1.4411,1120.0,47.71,109.8\n        2010-01-05,30.625683660000004,30.96,20.87,134.69,176.14,113.63,1136.52,19.35,1.4368,1118.65,48.17,109.7\n        2010-01-06,30.138541290000003,30.77,20.8,132.25,174.26,113.71,1137.14,19.16,1.4412,1138.5,49.34,111.51\n        2010-01-07,30.082827060000003,30.452,20.6,130.0,177.67,114.19,1141.69,19.06,1.4318,1131.9,49.1,110.82\n\nIn [4]: data = pd.read_csv(filename,  ![3](images/3.png)\n                           index_col=0, ![4](images/4.png)\n                           parse_dates=True)  ![5](images/5.png)\n\nIn [5]: data.info()  ![6](images/6.png)\n\n        <class 'pandas.core.frame.DataFrame'>\n        DatetimeIndex: 1972 entries, 2010-01-04 to 2017-10-31\n        Data columns (total 12 columns):\n        AAPL.O    1972 non-null float64\n        MSFT.O    1972 non-null float64\n        INTC.O    1972 non-null float64\n        AMZN.O    1972 non-null float64\n        GS.N      1972 non-null float64\n        SPY       1972 non-null float64\n        .SPX      1972 non-null float64\n        .VIX      1972 non-null float64\n        EUR=      1972 non-null float64\n        XAU=      1972 non-null float64\n        GDX       1972 non-null float64\n        GLD       1972 non-null float64\n        dtypes: float64(12)\n        memory usage: 200.3 KB\n```", "```py\nIn [6]: data.head()  ![1](images/1.png)\nOut[6]:                AAPL.O  MSFT.O  INTC.O  AMZN.O    GS.N     SPY     .SPX   .VIX  \\\n        Date\n        2010-01-04  30.572827  30.950   20.88  133.90  173.08  113.33  1132.99  20.04\n        2010-01-05  30.625684  30.960   20.87  134.69  176.14  113.63  1136.52  19.35\n        2010-01-06  30.138541  30.770   20.80  132.25  174.26  113.71  1137.14  19.16\n        2010-01-07  30.082827  30.452   20.60  130.00  177.67  114.19  1141.69  19.06\n        2010-01-08  30.282827  30.660   20.83  133.52  174.31  114.57  1144.98  18.13\n\n                      EUR=     XAU=    GDX     GLD\n        Date\n        2010-01-04  1.4411  1120.00  47.71  109.80\n        2010-01-05  1.4368  1118.65  48.17  109.70\n        2010-01-06  1.4412  1138.50  49.34  111.51\n        2010-01-07  1.4318  1131.90  49.10  110.82\n        2010-01-08  1.4412  1136.10  49.84  111.37\n\nIn [7]: data.tail()  ![2](images/2.png)\nOut[7]:             AAPL.O  MSFT.O  INTC.O   AMZN.O    GS.N     SPY     .SPX   .VIX  \\\n        Date\n        2017-10-25  156.41   78.63   40.78   972.91  241.71  255.29  2557.15  11.23\n        2017-10-26  157.41   78.76   41.35   972.43  241.72  255.62  2560.40  11.30\n        2017-10-27  163.05   83.81   44.40  1100.95  241.71  257.71  2581.07   9.80\n        2017-10-30  166.72   83.89   44.37  1110.85  240.89  256.75  2572.83  10.50\n        2017-10-31  169.04   83.18   45.49  1105.28  242.48  257.15  2575.26  10.18\n\n                      EUR=     XAU=    GDX     GLD\n        Date\n        2017-10-25  1.1812  1277.01  22.83  121.35\n        2017-10-26  1.1650  1266.73  22.43  120.33\n        2017-10-27  1.1608  1272.60  22.57  120.90\n        2017-10-30  1.1649  1275.86  22.76  121.13\n        2017-10-31  1.1644  1271.20  22.48  120.67\n\nIn [8]: data.plot(figsize=(10, 12), subplots=True)  ![3](images/3.png)\n        # plt.savefig('../../images/ch08/fts_01.png');\n```", "```py\nIn [9]: instruments = ['Apple Stock', 'Microsoft Stock',\n                       'Intel Stock', 'Amazon Stock', 'Goldman Sachs Stock',\n                       'SPDR S&P 500 ETF Trust', 'S&P 500 Index',\n                       'VIX Volatility Index', 'EUR/USD Exchange Rate',\n                       'Gold Price', 'VanEck Vectors Gold Miners ETF',\n                       'SPDR Gold Trust']\n\nIn [10]: for pari in zip(data.columns, instruments):\n             print('{:8s} | {}'.format(pari[0], pari[1]))\n\n         AAPL.O   | Apple Stock\n         MSFT.O   | Microsoft Stock\n         INTC.O   | Intel Stock\n         AMZN.O   | Amazon Stock\n         GS.N     | Goldman Sachs Stock\n         SPY      | SPDR S&P 500 ETF Trust\n         .SPX     | S&P 500 Index\n         .VIX     | VIX Volatility Index\n         EUR=     | EUR/USD Exchange Rate\n         XAU=     | Gold Price\n         GDX      | VanEck Vectors Gold Miners ETF\n         GLD      | SPDR Gold Trust\n```", "```py\nIn [11]: data.info()  ![1](images/1.png)\n\n         <class 'pandas.core.frame.DataFrame'>\n         DatetimeIndex: 1972 entries, 2010-01-04 to 2017-10-31\n         Data columns (total 12 columns):\n         AAPL.O    1972 non-null float64\n         MSFT.O    1972 non-null float64\n         INTC.O    1972 non-null float64\n         AMZN.O    1972 non-null float64\n         GS.N      1972 non-null float64\n         SPY       1972 non-null float64\n         .SPX      1972 non-null float64\n         .VIX      1972 non-null float64\n         EUR=      1972 non-null float64\n         XAU=      1972 non-null float64\n         GDX       1972 non-null float64\n         GLD       1972 non-null float64\n         dtypes: float64(12)\n         memory usage: 200.3 KB\n\nIn [12]: data.describe().round(2)  ![2](images/2.png)\nOut[12]:         AAPL.O   MSFT.O   INTC.O   AMZN.O     GS.N      SPY     .SPX     .VIX  \\\n         count  1972.00  1972.00  1972.00  1972.00  1972.00  1972.00  1972.00  1972.00\n         mean     86.53    40.59    27.70   401.15   163.61   172.84  1727.54    17.21\n         std      34.04    14.39     5.95   257.12    37.17    42.33   424.35     5.92\n         min      27.44    23.01    17.66   108.61    87.70   102.20  1022.58     9.19\n         25%      57.57    28.12    22.23   202.66   144.23   132.64  1325.53    13.25\n         50%      84.63    36.54    26.41   306.42   162.09   178.80  1783.81    15.65\n         75%     111.87    50.08    33.74   559.45   184.11   208.01  2080.15    19.20\n         max     169.04    83.89    45.49  1110.85   252.89   257.71  2581.07    48.00\n\n                   EUR=     XAU=      GDX      GLD\n         count  1972.00  1972.00  1972.00  1972.00\n         mean      1.25  1352.47    34.50   130.60\n         std       0.12   195.38    15.44    19.46\n         min       1.04  1051.36    12.47   100.50\n         25%       1.13  1214.56    22.22   116.77\n         50%       1.29  1288.82    26.59   123.90\n         75%       1.35  1491.98    49.77   145.43\n         max       1.48  1897.10    66.63   184.59\n```", "```py\nIn [13]: data.mean()  ![1](images/1.png)\nOut[13]: AAPL.O      86.530152\n         MSFT.O      40.586752\n         INTC.O      27.701411\n         AMZN.O     401.154006\n         GS.N       163.614625\n         SPY        172.835399\n         .SPX      1727.538342\n         .VIX        17.209498\n         EUR=         1.252613\n         XAU=      1352.471593\n         GDX         34.499391\n         GLD        130.601856\n         dtype: float64\n\nIn [14]: data.aggregate([min,  ![2](images/2.png)\n                         np.mean,  ![3](images/3.png)\n                         np.std,  ![4](images/4.png)\n                         np.median,  ![5](images/5.png)\n                         max]  ![6](images/6.png)\n         ).round(2)\nOut[14]:         AAPL.O  MSFT.O  INTC.O   AMZN.O    GS.N     SPY     .SPX   .VIX  EUR=  \\\n         min      27.44   23.01   17.66   108.61   87.70  102.20  1022.58   9.19  1.04\n         mean     86.53   40.59   27.70   401.15  163.61  172.84  1727.54  17.21  1.25\n         std      34.04   14.39    5.95   257.12   37.17   42.33   424.35   5.92  0.12\n         median   84.63   36.54   26.41   306.42  162.09  178.80  1783.81  15.65  1.29\n         max     169.04   83.89   45.49  1110.85  252.89  257.71  2581.07  48.00  1.48\n\n                    XAU=    GDX     GLD\n         min     1051.36  12.47  100.50\n         mean    1352.47  34.50  130.60\n         std      195.38  15.44   19.46\n         median  1288.82  26.59  123.90\n         max     1897.10  66.63  184.59\n```", "```py\nIn [15]: data.diff().head()  ![1](images/1.png)\nOut[15]:               AAPL.O  MSFT.O  INTC.O  AMZN.O  GS.N   SPY  .SPX  .VIX    EUR=  \\\n         Date\n         2010-01-04       NaN     NaN     NaN     NaN   NaN   NaN   NaN   NaN     NaN\n         2010-01-05  0.052857   0.010   -0.01    0.79  3.06  0.30  3.53 -0.69 -0.0043\n         2010-01-06 -0.487142  -0.190   -0.07   -2.44 -1.88  0.08  0.62 -0.19  0.0044\n         2010-01-07 -0.055714  -0.318   -0.20   -2.25  3.41  0.48  4.55 -0.10 -0.0094\n         2010-01-08  0.200000   0.208    0.23    3.52 -3.36  0.38  3.29 -0.93  0.0094\n\n                      XAU=   GDX   GLD\n         Date\n         2010-01-04    NaN   NaN   NaN\n         2010-01-05  -1.35  0.46 -0.10\n         2010-01-06  19.85  1.17  1.81\n         2010-01-07  -6.60 -0.24 -0.69\n         2010-01-08   4.20  0.74  0.55\n\nIn [16]: data.diff().mean()  ![2](images/2.png)\nOut[16]: AAPL.O    0.070252\n         MSFT.O    0.026499\n         INTC.O    0.012486\n         AMZN.O    0.492836\n         GS.N      0.035211\n         SPY       0.072968\n         .SPX      0.731745\n         .VIX     -0.005003\n         EUR=     -0.000140\n         XAU=      0.076712\n         GDX      -0.012801\n         GLD       0.005515\n         dtype: float64\n```", "```py\nIn [17]: data.pct_change().round(3).head()  ![1](images/1.png)\nOut[17]:             AAPL.O  MSFT.O  INTC.O  AMZN.O   GS.N    SPY   .SPX   .VIX   EUR=  \\\n         Date\n         2010-01-04     NaN     NaN     NaN     NaN    NaN    NaN    NaN    NaN    NaN\n         2010-01-05   0.002   0.000  -0.000   0.006  0.018  0.003  0.003 -0.034 -0.003\n         2010-01-06  -0.016  -0.006  -0.003  -0.018 -0.011  0.001  0.001 -0.010  0.003\n         2010-01-07  -0.002  -0.010  -0.010  -0.017  0.020  0.004  0.004 -0.005 -0.007\n         2010-01-08   0.007   0.007   0.011   0.027 -0.019  0.003  0.003 -0.049  0.007\n\n                      XAU=    GDX    GLD\n         Date\n         2010-01-04    NaN    NaN    NaN\n         2010-01-05 -0.001  0.010 -0.001\n         2010-01-06  0.018  0.024  0.016\n         2010-01-07 -0.006 -0.005 -0.006\n         2010-01-08  0.004  0.015  0.005\n\nIn [18]: data.pct_change().mean().plot(kind='bar', figsize=(10, 6));  ![2](images/2.png)\n         # plt.savefig('../../images/ch08/fts_02.png');\n```", "```py\nIn [19]: rets = np.log(data / data.shift(1))  ![1](images/1.png)\n\nIn [20]: rets.head().round(3)  ![2](images/2.png)\nOut[20]:             AAPL.O  MSFT.O  INTC.O  AMZN.O   GS.N    SPY   .SPX   .VIX   EUR=  \\\n         Date\n         2010-01-04     NaN     NaN     NaN     NaN    NaN    NaN    NaN    NaN    NaN\n         2010-01-05   0.002   0.000  -0.000   0.006  0.018  0.003  0.003 -0.035 -0.003\n         2010-01-06  -0.016  -0.006  -0.003  -0.018 -0.011  0.001  0.001 -0.010  0.003\n         2010-01-07  -0.002  -0.010  -0.010  -0.017  0.019  0.004  0.004 -0.005 -0.007\n         2010-01-08   0.007   0.007   0.011   0.027 -0.019  0.003  0.003 -0.050  0.007\n\n                      XAU=    GDX    GLD\n         Date\n         2010-01-04    NaN    NaN    NaN\n         2010-01-05 -0.001  0.010 -0.001\n         2010-01-06  0.018  0.024  0.016\n         2010-01-07 -0.006 -0.005 -0.006\n         2010-01-08  0.004  0.015  0.005\n\nIn [21]: rets.cumsum().apply(np.exp).plot(figsize=(10, 6));  ![3](images/3.png)\n         # plt.savefig('../../images/ch08/fts_03.png');\n```", "```py\nIn [22]: data.resample('1w', label='right').last().head()  ![1](images/1.png)\nOut[22]:                AAPL.O  MSFT.O  INTC.O  AMZN.O    GS.N     SPY     .SPX   .VIX  \\\n         Date\n         2010-01-10  30.282827   30.66   20.83  133.52  174.31  114.57  1144.98  18.13\n         2010-01-17  29.418542   30.86   20.80  127.14  165.21  113.64  1136.03  17.91\n         2010-01-24  28.249972   28.96   19.91  121.43  154.12  109.21  1091.76  27.31\n         2010-01-31  27.437544   28.18   19.40  125.41  148.72  107.39  1073.87  24.62\n         2010-02-07  27.922829   28.02   19.47  117.39  154.16  106.66  1066.19  26.11\n\n                       EUR=     XAU=    GDX     GLD\n         Date\n         2010-01-10  1.4412  1136.10  49.84  111.37\n         2010-01-17  1.4382  1129.90  47.42  110.86\n         2010-01-24  1.4137  1092.60  43.79  107.17\n         2010-01-31  1.3862  1081.05  40.72  105.96\n         2010-02-07  1.3662  1064.95  42.41  104.68\n\nIn [23]: data.resample('1m', label='right').last().head()  ![2](images/2.png)\nOut[23]:                AAPL.O   MSFT.O  INTC.O  AMZN.O    GS.N       SPY     .SPX  \\\n         Date\n         2010-01-31  27.437544  28.1800   19.40  125.41  148.72  107.3900  1073.87\n         2010-02-28  29.231399  28.6700   20.53  118.40  156.35  110.7400  1104.49\n         2010-03-31  33.571395  29.2875   22.29  135.77  170.63  117.0000  1169.43\n         2010-04-30  37.298534  30.5350   22.84  137.10  145.20  118.8125  1186.69\n         2010-05-31  36.697106  25.8000   21.42  125.46  144.26  109.3690  1089.41\n\n                      .VIX    EUR=     XAU=    GDX      GLD\n         Date\n         2010-01-31  24.62  1.3862  1081.05  40.72  105.960\n         2010-02-28  19.50  1.3625  1116.10  43.89  109.430\n         2010-03-31  17.59  1.3510  1112.80  44.41  108.950\n         2010-04-30  22.05  1.3295  1178.25  50.51  115.360\n         2010-05-31  32.07  1.2267  1213.81  49.86  118.881\n\nIn [24]: rets.cumsum().resample('1m', label='right').last(\n                                   ).plot(figsize=(10, 6));  ![3](images/3.png)\n         # plt.savefig('../../images/ch08/fts_04.png');\n```", "```py\nIn [25]: sym = 'AAPL.O'\n\nIn [26]: data = pd.DataFrame(data[sym])\n\nIn [27]: data.tail()\nOut[27]:             AAPL.O\n         Date\n         2017-10-25  156.41\n         2017-10-26  157.41\n         2017-10-27  163.05\n         2017-10-30  166.72\n         2017-10-31  169.04\n```", "```py\nIn [28]: window = 20  ![1](images/1.png)\n\nIn [29]: data['min'] = data[sym].rolling(window=window).min()  ![2](images/2.png)\n\nIn [30]: data['mean'] = data[sym].rolling(window=window).mean()  ![3](images/3.png)\n\nIn [31]: data['std'] = data[sym].rolling(window=window).std()  ![4](images/4.png)\n\nIn [32]: data['median'] = data[sym].rolling(window=window).median()  ![5](images/5.png)\n\nIn [33]: data['max'] = data[sym].rolling(window=window).max()  ![6](images/6.png)\n\nIn [34]: data['ewma'] = data[sym].ewm(halflife=0.5, min_periods=window).mean()  ![7](images/7.png)\n```", "```py\nIn [35]: data.dropna().head()\nOut[35]:                AAPL.O        min       mean       std     median        max  \\\n         Date\n         2010-02-01  27.818544  27.437544  29.580892  0.933650  29.821542  30.719969\n         2010-02-02  27.979972  27.437544  29.451249  0.968048  29.711113  30.719969\n         2010-02-03  28.461400  27.437544  29.343035  0.950665  29.685970  30.719969\n         2010-02-04  27.435687  27.435687  29.207892  1.021129  29.547113  30.719969\n         2010-02-05  27.922829  27.435687  29.099892  1.037811  29.419256  30.719969\n\n                          ewma\n         Date\n         2010-02-01  27.805432\n         2010-02-02  27.936337\n         2010-02-03  28.330134\n         2010-02-04  27.659299\n         2010-02-05  27.856947\n\nIn [36]: ax = data[['min', 'mean', 'max']].iloc[-200:].plot(\n             figsize=(10, 6), style=['g--', 'r--', 'g--'], lw=0.8)  ![1](images/1.png)\n         data[sym].iloc[-200:].plot(ax=ax, lw=2.0);  ![2](images/2.png)\n         # plt.savefig('../../images/ch08/fts_05.png');\n```", "```py\nIn [37]: data['SMA1'] = data[sym].rolling(window=42).mean()  ![1](images/1.png)\n\nIn [38]: data['SMA2'] = data[sym].rolling(window=252).mean()  ![2](images/2.png)\n\nIn [39]: data[[sym, 'SMA1', 'SMA2']].tail()\nOut[39]:             AAPL.O        SMA1        SMA2\n         Date\n         2017-10-25  156.41  157.610952  139.862520\n         2017-10-26  157.41  157.514286  140.028472\n         2017-10-27  163.05  157.517619  140.221210\n         2017-10-30  166.72  157.597857  140.431528\n         2017-10-31  169.04  157.717857  140.651766\n\nIn [40]: data[[sym, 'SMA1', 'SMA2']].plot(figsize=(10, 6));  ![3](images/3.png)\n         # plt.savefig('../../images/ch08/fts_06.png');\n```", "```py\nIn [41]: data.dropna(inplace=True)  ![1](images/1.png)\n\nIn [42]: data['positions'] = np.where(data['SMA1'] > data['SMA2'],  ![2](images/2.png)\n                                      1,  ![3](images/3.png)\n                                      -1)  ![4](images/4.png)\n\nIn [43]: ax = data[[sym, 'SMA1', 'SMA2', 'positions']].plot(figsize=(10, 6),\n                                                       secondary_y='positions')\n         ax.get_legend().set_bbox_to_anchor((0.25, 0.85));\n         # plt.savefig('../../images/ch08/fts_07.png');\n```", "```py\nIn [44]: # EOD data from Thomson Reuters Eikon Data API\n         raw = pd.read_csv('../../source/tr_eikon_eod_data.csv',\n                          index_col=0, parse_dates=True)\n\nIn [45]: data = raw[['.SPX', '.VIX']]\n\nIn [46]: data.tail()\nOut[46]:                .SPX   .VIX\n         Date\n         2017-10-25  2557.15  11.23\n         2017-10-26  2560.40  11.30\n         2017-10-27  2581.07   9.80\n         2017-10-30  2572.83  10.50\n         2017-10-31  2575.26  10.18\n\nIn [47]: data.plot(subplots=True, figsize=(10, 6));\n         # plt.savefig('../../images/ch08/fts_08.png');\n```", "```py\nIn [48]: data.loc[:'2012-12-31'].plot(secondary_y='.VIX', figsize=(10, 6));\n         # plt.savefig('../../images/ch08/fts_09.png');\n```", "```py\nIn [49]: rets = np.log(data / data.shift(1))\n\nIn [50]: rets.head()\nOut[50]:                 .SPX      .VIX\n         Date\n         2010-01-04       NaN       NaN\n         2010-01-05  0.003111 -0.035038\n         2010-01-06  0.000545 -0.009868\n         2010-01-07  0.003993 -0.005233\n         2010-01-08  0.002878 -0.050024\n\nIn [51]: rets.dropna(inplace=True)\n\nIn [52]: rets.plot(subplots=True, figsize=(10, 6));\n         # plt.savefig('../../images/ch08/fts_10.png');\n```", "```py\nIn [53]: pd.plotting.scatter_matrix(rets,  ![1](images/1.png)\n                                    alpha=0.2,  ![2](images/2.png)\n                                    diagonal='hist',  ![3](images/3.png)\n                                    hist_kwds={'bins': 35},  ![4](images/4.png)\n                                    figsize=(10, 6));\n         # plt.savefig('../../images/ch08/fts_11.png');\n```", "```py\nIn [54]: reg = np.polyfit(rets['.SPX'], rets['.VIX'], deg=1)  ![1](images/1.png)\n\nIn [55]: ax = rets.plot(kind='scatter', x='.SPX', y='.VIX', figsize=(10, 6))  ![2](images/2.png)\n         ax.plot(rets['.SPX'], np.polyval(reg, rets['.SPX']), 'r', lw=2);  ![3](images/3.png)\n         # plt.savefig('../../images/ch08/fts_12.png');\n```", "```py\nIn [56]: rets.corr()  ![1](images/1.png)\nOut[56]:           .SPX      .VIX\n         .SPX  1.000000 -0.808372\n         .VIX -0.808372  1.000000\n\nIn [57]: ax = rets['.SPX'].rolling(window=252).corr(\n                           rets['.VIX']).plot(figsize=(10, 6))  ![2](images/2.png)\n         ax.axhline(rets.corr().iloc[0, 1], c='r');  ![3](images/3.png)\n         # plt.savefig('../../images/ch08/fts_13.png');\n```", "```py\nIn [58]: %%time\n         # data from FXCM Forex Capital Markets Ltd.\n         tick = pd.read_csv('../../source/fxcm_eur_usd_tick_data.csv',\n                              index_col=0, parse_dates=True)\n\n         CPU times: user 23 ms, sys: 3.35 ms, total: 26.4 ms\n         Wall time: 25.1 ms\n\nIn [59]: tick.info()\n\n         <class 'pandas.core.frame.DataFrame'>\n         DatetimeIndex: 17352 entries, 2017-11-10 12:00:00.007000 to 2017-11-10 14:00:00.131000\n         Data columns (total 2 columns):\n         Bid    17352 non-null float64\n         Ask    17352 non-null float64\n         dtypes: float64(2)\n         memory usage: 406.7 KB\n\nIn [60]: tick['Mid'] = tick.mean(axis=1)  ![1](images/1.png)\n\nIn [61]: tick['Mid'].plot(figsize=(10, 6));\n         # plt.savefig('../../images/ch08/fts_14.png');\n```", "```py\nIn [62]: tick_resam = tick.resample(rule='1min', label='right').last()\n\nIn [63]: tick_resam.head()\nOut[63]:                          Bid      Ask       Mid\n         2017-11-10 12:01:00  1.16406  1.16407  1.164065\n         2017-11-10 12:02:00  1.16396  1.16397  1.163965\n         2017-11-10 12:03:00  1.16416  1.16418  1.164170\n         2017-11-10 12:04:00  1.16417  1.16417  1.164170\n         2017-11-10 12:05:00  1.16425  1.16427  1.164260\n\nIn [64]: tick_resam['Mid'].plot(figsize=(10, 6));\n         # plt.savefig('../../images/ch08/fts_15.png');\n```"]
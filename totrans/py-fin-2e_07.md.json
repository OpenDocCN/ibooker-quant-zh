["```py\nIn [1]: import matplotlib as mpl  ![1](images/1.png)\n\nIn [2]: mpl.__version__  ![2](images/2.png)\nOut[2]: '2.0.2'\n\nIn [3]: import matplotlib.pyplot as plt  ![4](images/4.png)\n\nIn [4]: plt.style.use('seaborn')  ![5](images/5.png)\n\nIn [5]: mpl.rcParams['font.family'] = 'serif'  ![3](images/3.png)\n\nIn [6]: %matplotlib inline\n```", "```py\nIn [7]: import numpy as np\n\nIn [8]: np.random.seed(1000)  ![1](images/1.png)\n\nIn [9]: y = np.random.standard_normal(20)  ![2](images/2.png)\n\nIn [10]: x = np.arange(len(y))  ![3](images/3.png)\n         plt.plot(x, y);  ![4](images/4.png)\n         # plt.savefig('../../images/ch07/mpl_01')\n```", "```py\nIn [11]: plt.plot(y);\n         # plt.savefig('../../images/ch07/mpl_02')\n```", "```py\nIn [12]: plt.plot(y.cumsum());\n         # plt.savefig('../../images/ch07/mpl_03')\n```", "```py\nIn [13]: plt.plot(y.cumsum())\n         plt.grid(False);  ![1](images/1.png)\n         # plt.savefig('../../images/ch07/mpl_04')\n```", "```py\nIn [14]: plt.plot(y.cumsum())\n         plt.xlim(-1, 20)\n         plt.ylim(np.min(y.cumsum()) - 1,\n                  np.max(y.cumsum()) + 1);\n         # plt.savefig('../../images/ch07/mpl_05')\n```", "```py\nIn [15]: plt.figure(figsize=(10, 6))  ![1](images/1.png)\n         plt.plot(y.cumsum(), 'b', lw=1.5)  ![2](images/2.png)\n         plt.plot(y.cumsum(), 'ro')  ![3](images/3.png)\n         plt.xlabel('index')  ![4](images/4.png)\n         plt.ylabel('value')  ![5](images/5.png)\n         plt.title('A Simple Plot');  ![6](images/6.png)\n         # plt.savefig('../../images/ch07/mpl_06')\n```", "```py\nIn [16]: y = np.random.standard_normal((20, 2)).cumsum(axis=0)\n```", "```py\nIn [17]: plt.figure(figsize=(10, 6))\n         plt.plot(y, lw=1.5)\n         plt.plot(y, 'ro')\n         plt.xlabel('index')\n         plt.ylabel('value')\n         plt.title('A Simple Plot');\n         # plt.savefig('../../images/ch07/mpl_07')\n```", "```py\nIn [18]: plt.figure(figsize=(10, 6))\n         plt.plot(y[:, 0], lw=1.5, label='1st')  ![1](images/1.png)\n         plt.plot(y[:, 1], lw=1.5, label='2nd')  ![1](images/1.png)\n         plt.plot(y, 'ro')\n         plt.legend(loc=0)  ![2](images/2.png)\n         plt.xlabel('index')\n         plt.ylabel('value')\n         plt.title('A Simple Plot');\n         # plt.savefig('../../images/ch07/mpl_08')\n```", "```py\nIn [19]: y[:, 0] = y[:, 0] * 100  ![1](images/1.png)\n\nIn [20]: plt.figure(figsize=(10, 6))\n         plt.plot(y[:, 0], lw=1.5, label='1st')\n         plt.plot(y[:, 1], lw=1.5, label='2nd')\n         plt.plot(y, 'ro')\n         plt.legend(loc=0)\n         plt.xlabel('index')\n         plt.ylabel('value')\n         plt.title('A Simple Plot');\n         # plt.savefig('../../images/ch07/mpl_09')\n```", "```py\nIn [21]: fig, ax1 = plt.subplots()  ![1](images/1.png)\n         plt.plot(y[:, 0], 'b', lw=1.5, label='1st')\n         plt.plot(y[:, 0], 'ro')\n         plt.legend(loc=8)\n         plt.xlabel('index')\n         plt.ylabel('value 1st')\n         plt.title('A Simple Plot')\n         ax2 = ax1.twinx()  ![2](images/2.png)\n         plt.plot(y[:, 1], 'g', lw=1.5, label='2nd')\n         plt.plot(y[:, 1], 'ro')\n         plt.legend(loc=0)\n         plt.ylabel('value 2nd');\n         # plt.savefig('../../images/ch07/mpl_10')\n```", "```py\nfig, ax1 = plt.subplots()\nax2 = ax1.twinx()\n```", "```py\nIn [22]: plt.figure(figsize=(10, 6))\n         plt.subplot(211)  ![1](images/1.png)\n         plt.plot(y[:, 0], lw=1.5, label='1st')\n         plt.plot(y[:, 0], 'ro')\n         plt.legend(loc=0)\n         plt.ylabel('value')\n         plt.title('A Simple Plot')\n         plt.subplot(212)  ![2](images/2.png)\n         plt.plot(y[:, 1], 'g', lw=1.5, label='2nd')\n         plt.plot(y[:, 1], 'ro')\n         plt.legend(loc=0)\n         plt.xlabel('index')\n         plt.ylabel('value');\n         # plt.savefig('../../images/ch07/mpl_11')\n```", "```py\nIn [23]: plt.figure(figsize=(10, 6))\n         plt.subplot(121)\n         plt.plot(y[:, 0], lw=1.5, label='1st')\n         plt.plot(y[:, 0], 'ro')\n         plt.legend(loc=0)\n         plt.xlabel('index')\n         plt.ylabel('value')\n         plt.title('1st Data Set')\n         plt.subplot(122)\n         plt.bar(np.arange(len(y)), y[:, 1], width=0.5,\n                 color='g', label='2nd')  ![1](images/1.png)\n         plt.legend(loc=0)\n         plt.xlabel('index')\n         plt.title('2nd Data Set');\n         # plt.savefig('../../images/ch07/mpl_12')\n```", "```py\nIn [24]: y = np.random.standard_normal((1000, 2))  ![1](images/1.png)\n\nIn [25]: plt.figure(figsize=(10, 6))\n         plt.plot(y[:, 0], y[:, 1], 'ro')  ![2](images/2.png)\n         plt.xlabel('1st')\n         plt.ylabel('2nd')\n         plt.title('Scatter Plot');\n         # plt.savefig('../../images/ch07/mpl_13')\n```", "```py\nIn [26]: plt.figure(figsize=(10, 6))\n         plt.scatter(y[:, 0], y[:, 1], marker='o')  ![1](images/1.png)\n         plt.xlabel('1st')\n         plt.ylabel('2nd')\n         plt.title('Scatter Plot');\n         # plt.savefig('../../images/ch07/mpl_14')\n```", "```py\nIn [27]: c = np.random.randint(0, 10, len(y))\n\nIn [28]: plt.figure(figsize=(10, 6))\n         plt.scatter(y[:, 0], y[:, 1],\n                     c=c,  ![1](images/1.png)\n                     cmap='coolwarm',  ![2](images/2.png)\n                     marker='o')  ![3](images/3.png)\n         plt.colorbar()\n         plt.xlabel('1st')\n         plt.ylabel('2nd')\n         plt.title('Scatter Plot');\n         # plt.savefig('../../images/ch07/mpl_15')\n```", "```py\nIn [29]: plt.figure(figsize=(10, 6))\n         plt.hist(y, label=['1st', '2nd'], bins=25)  ![1](images/1.png)\n         plt.legend(loc=0)\n         plt.xlabel('value')\n         plt.ylabel('frequency')\n         plt.title('Histogram');\n         # plt.savefig('../../images/ch07/mpl_16')\n```", "```py\nplt.hist(x, bins=10, range=None, normed=False, weights=None, cumulative=False, bottom=None, histtype='bar', align='mid', orientation='vertical', rwidth=None, log=False, color=None, label=None, stacked=False, hold=None, **kwargs)\n```", "```py\nIn [30]: plt.figure(figsize=(10, 6))\n         plt.hist(y, label=['1st', '2nd'], color=['b', 'g'],\n                     stacked=True, bins=20, alpha=0.5)\n         plt.legend(loc=0)\n         plt.xlabel('value')\n         plt.ylabel('frequency')\n         plt.title('Histogram');\n         # plt.savefig('../../images/ch07/mpl_17')\n```", "```py\nIn [31]: fig, ax = plt.subplots(figsize=(10, 6))\n         plt.boxplot(y)  ![1](images/1.png)\n         plt.setp(ax, xticklabels=['1st', '2nd'])  ![2](images/2.png)\n         plt.xlabel('data set')\n         plt.ylabel('value')\n         plt.title('Boxplot');\n         # plt.savefig('../../images/ch07/mpl_18')\n```", "```py\nline = plt.plot(data, 'r')\n```", "```py\nplt.setp(line, linestyle='--')\n```", "```py\nIn [32]: def func(x):\n             return 0.5 * np.exp(x) + 1  ![1](images/1.png)\n         a, b = 0.5, 1.5  ![2](images/2.png)\n         x = np.linspace(0, 2)  ![3](images/3.png)\n         y = func(x)  ![4](images/4.png)\n         Ix = np.linspace(a, b)  ![5](images/5.png)\n         Iy = func(Ix) ![6](images/6.png)\n         verts = [(a, 0)] + list(zip(Ix, Iy)) + [(b, 0)]  ![7](images/7.png)\n```", "```py\nIn [33]: from matplotlib.patches import Polygon\n         fig, ax = plt.subplots(figsize=(10, 6))\n         plt.plot(x, y, 'b', linewidth=2)  ![1](images/1.png)\n         plt.ylim(ymin=0)  ![2](images/2.png)\n         poly = Polygon(verts, facecolor='0.7', edgecolor='0.5')  ![3](images/3.png)\n         ax.add_patch(poly)  ![3](images/3.png)\n         plt.text(0.5 * (a + b), 1, r'$\\int_a^b f(x)\\mathrm{d}x$',\n                  horizontalalignment='center', fontsize=20)  ![4](images/4.png)\n         plt.figtext(0.9, 0.075, '$x$')  ![5](images/5.png)\n         plt.figtext(0.075, 0.9, '$f(x)$')  ![5](images/5.png)\n         ax.set_xticks((a, b))  ![6](images/6.png)\n         ax.set_xticklabels(('$a$', '$b$'))  ![6](images/6.png)\n         ax.set_yticks([func(a), func(b)])  ![7](images/7.png)\n         ax.set_yticklabels(('$f(a)$', '$f(b)$'))  ![7](images/7.png)\n         # plt.savefig('../../images/ch07/mpl_19')\nOut[33]: [<matplotlib.text.Text at 0x1066af438>, <matplotlib.text.Text at 0x10669ba20>]\n```", "```py\nIn [34]: strike = np.linspace(50, 150, 24)  ![1](images/1.png)\n\nIn [35]: ttm = np.linspace(0.5, 2.5, 24)  ![2](images/2.png)\n\nIn [36]: strike, ttm = np.meshgrid(strike, ttm)  ![3](images/3.png)\n\nIn [37]: strike[:2].round(1)  ![3](images/3.png)\nOut[37]: array([[ 50. ,  54.3,  58.7,  63. ,  67.4,  71.7,  76.1,  80.4,  84.8,\n                  89.1,  93.5,  97.8, 102.2, 106.5, 110.9, 115.2, 119.6, 123.9,\n                 128.3, 132.6, 137. , 141.3, 145.7, 150. ],\n                [ 50. ,  54.3,  58.7,  63. ,  67.4,  71.7,  76.1,  80.4,  84.8,\n                  89.1,  93.5,  97.8, 102.2, 106.5, 110.9, 115.2, 119.6, 123.9,\n                 128.3, 132.6, 137. , 141.3, 145.7, 150. ]])\n\nIn [38]: iv = (strike - 100) ** 2 / (100 * strike) / ttm  ![4](images/4.png)\n\nIn [39]: iv[:5, :3]  ![4](images/4.png)\nOut[39]: array([[1.        , 0.76695652, 0.58132045],\n                [0.85185185, 0.65333333, 0.4951989 ],\n                [0.74193548, 0.56903226, 0.43130227],\n                [0.65714286, 0.504     , 0.38201058],\n                [0.58974359, 0.45230769, 0.34283001]])\n```", "```py\nIn [40]: from mpl_toolkits.mplot3d import Axes3D  ![1](images/1.png)\n         fig = plt.figure(figsize=(10, 6))\n         ax = fig.gca(projection='3d')  ![2](images/2.png)\n         surf = ax.plot_surface(strike, ttm, iv, rstride=2, cstride=2,\n                                cmap=plt.cm.coolwarm, linewidth=0.5,\n                                antialiased=True)  ![3](images/3.png)\n         ax.set_xlabel('strike')  ![4](images/4.png)\n         ax.set_ylabel('time-to-maturity')  ![5](images/5.png)\n         ax.set_zlabel('implied volatility')  ![6](images/6.png)\n         fig.colorbar(surf, shrink=0.5, aspect=5);  ![7](images/7.png)\n         # plt.savefig('../../images/ch07/mpl_20')\n```", "```py\nIn [41]: fig = plt.figure(figsize=(10, 6))\n         ax = fig.add_subplot(111, projection='3d')\n         ax.view_init(30, 60)  ![1](images/1.png)\n         ax.scatter(strike, ttm, iv, zdir='z', s=25,\n                    c='b', marker='^')  ![2](images/2.png)\n         ax.set_xlabel('strike')\n         ax.set_ylabel('time-to-maturity')\n         ax.set_zlabel('implied volatility');\n         # plt.savefig('../../images/ch07/mpl_21')\n```", "```py\nIn [42]: import pandas as pd\n\nIn [43]: import cufflinks as cf  ![1](images/1.png)\n\nIn [44]: import plotly.offline as plyo  ![2](images/2.png)\n\nIn [45]: plyo.init_notebook_mode(connected=True)  ![3](images/3.png)\n```", "```py\nIn [46]: a = np.random.standard_normal((250, 5)).cumsum(axis=0)  ![1](images/1.png)\n\nIn [47]: index = pd.date_range('2019-1-1',  ![2](images/2.png)\n                               freq='B',  ![3](images/3.png)\n                               periods=len(a)) ![4](images/4.png)\n\nIn [48]: df = pd.DataFrame(100 + 5 * a,  ![5](images/5.png)\n                           columns=list('abcde'),  ![6](images/6.png)\n                           index=index)  ![7](images/7.png)\n\nIn [49]: df.head()  ![8](images/8.png)\nOut[49]:                      a           b           c          d           e\n         2019-01-01  109.037535   98.693865  104.474094  96.878857  100.621936\n         2019-01-02  107.598242   97.005738  106.789189  97.966552  100.175313\n         2019-01-03  101.639668  100.332253  103.183500  99.747869  107.902901\n         2019-01-04   98.500363  101.208283  100.966242  94.023898  104.387256\n         2019-01-07   93.941632  103.319168  105.674012  95.891062   86.547934\n```", "```py\nIn [50]: plyo.iplot(  ![1](images/1.png)\n             df.iplot(asFigure=True),  ![2](images/2.png)\n             # image ='png', ![3](images/3.png)\n             filename='ply_01'  ![4](images/4.png)\n         )\n```", "```py\nIn [51]: plyo.iplot(\n             df[['a', 'b']].iplot(asFigure=True,\n                      theme='polar',  ![1](images/1.png)\n                      title='A Time Series Plot',  ![2](images/2.png)\n                      xTitle='date',  ![3](images/3.png)\n                      yTitle='value',  ![4](images/4.png)\n                      mode={'a': 'markers', 'b': 'lines+markers'},  ![5](images/5.png)\n                      symbol={'a': 'dot', 'b': 'diamond'},  ![6](images/6.png)\n                      size=3.5,  ![7](images/7.png)\n                      colors={'a': 'blue', 'b': 'magenta'},  ![8](images/8.png)\n                                 ),\n             # image ='png',\n             filename='ply_02'\n         )\n```", "```py\nIn [52]: plyo.iplot(\n             df.iplot(kind='hist',  ![1](images/1.png)\n                      subplots=True,  ![2](images/2.png)\n                      bins=15,  ![3](images/3.png)\n                      asFigure=True),\n             # image ='png',\n             filename='ply_03'\n         )\n```", "```py\nIn [53]: # data from FXCM Forex Capital Markets Ltd.\n         raw = pd.read_csv('../../source/fxcm_eur_usd_eod_data.csv',\n                          index_col=0, parse_dates=True)  ![1](images/1.png)\n\nIn [54]: raw.info()  ![2](images/2.png)\n\n         <class 'pandas.core.frame.DataFrame'>\n         DatetimeIndex: 2820 entries, 2007-06-03 to 2017-05-31\n         Data columns (total 10 columns):\n         Time          2820 non-null object\n         OpenBid       2820 non-null float64\n         HighBid       2820 non-null float64\n         LowBid        2820 non-null float64\n         CloseBid      2820 non-null float64\n         OpenAsk       2820 non-null float64\n         HighAsk       2820 non-null float64\n         LowAsk        2820 non-null float64\n         CloseAsk      2820 non-null float64\n         TotalTicks    2820 non-null int64\n         dtypes: float64(8), int64(1), object(1)\n         memory usage: 242.3+ KB\n\nIn [55]: quotes = raw[['OpenAsk', 'HighAsk', 'LowAsk', 'CloseAsk']]  ![3](images/3.png)\n         quotes = quotes.iloc[-60:]  ![4](images/4.png)\n         quotes.tail()  ![5](images/5.png)\nOut[55]:             OpenAsk  HighAsk   LowAsk  CloseAsk\n         Date\n         2017-05-27  1.11808  1.11808  1.11743   1.11788\n         2017-05-28  1.11788  1.11906  1.11626   1.11660\n         2017-05-29  1.11660  1.12064  1.11100   1.11882\n         2017-05-30  1.11882  1.12530  1.11651   1.12434\n         2017-05-31  1.12434  1.12574  1.12027   1.12133\n```", "```py\nIn [56]: qf = cf.QuantFig(\n                  quotes,  ![1](images/1.png)\n                  title='EUR/USD Exchange Rate',  ![2](images/2.png)\n                  legend='top',  ![3](images/3.png)\n                  name='EUR/USD'  ![4](images/4.png)\n         )\n\nIn [57]: plyo.iplot(\n             qf.iplot(asFigure=True),\n             # image ='png',\n             filename='qf_01'\n         )\n```", "```py\nIn [58]: qf.add_bollinger_bands(periods=15,  ![1](images/1.png)\n                                boll_std=2)  ![2](images/2.png)\n\nIn [59]: plyo.iplot(qf.iplot(asFigure=True),\n              # image='png',\n              filename='qf_02')\n```", "```py\nIn [60]: qf.add_rsi(periods=14,  ![1](images/1.png)\n                   showbands=False)  ![2](images/2.png)\n\nIn [61]: plyo.iplot(\n              qf.iplot(asFigure=True),\n              # image='png',\n              filename='qf_03'\n         )\n```"]
- en: Chapter 1\. Importing and Processing Financial Data in Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter is dedicated to laying the foundation needed to analyze financial
    data through coding. This requires some preparation, such as downloading the right
    software and creating an algorithm that fetches historical data automatically.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of the chapter, you should know how to automatically import historical
    financial data using Python, a skill that should save you time. So let’s get started.
  prefs: []
  type: TYPE_NORMAL
- en: Installing the Environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The first step is to prepare the environment and everything else necessary
    for the success of the algorithms. For this, you need two programs:'
  prefs: []
  type: TYPE_NORMAL
- en: A Python interpreter that you use to write and execute code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Charting and financial software that you use as a database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s start with the Python interpreter. I use a software called SPYDER. Some
    people may be more familiar with other software such as Jupyter and PyCharm, but
    the process is the same. You can download SPYDER from the [official website](https://www.spyder-ide.org) or,
    even better, download it as part of a bigger package called [Anaconda](https://oreil.ly/nI8Ed),
    which facilitates installation and offers more tools. Note that it is open source,
    free-to-use software.
  prefs: []
  type: TYPE_NORMAL
- en: SPYDER’s interface is split into three windows, as you can see in [Figure 1-1](#figure1-1). The
    window on the left is used to write the code that is later executed (the algorithm
    is told to run and apply the code). Typically, you will see multiple lines of
    code in that area.
  prefs: []
  type: TYPE_NORMAL
- en: The window on the upper right is the variable explorer. Every time a variable
    is stored, you can see it there. The window on the lower right is the console
    that shows the result of the code, whether it is an error or an output.
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/mfpr_0101.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1-1\. SPYDER’s interface
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'The types of data that you can define and use in the code are classified into
    several categories:'
  prefs: []
  type: TYPE_NORMAL
- en: Integers
  prefs: []
  type: TYPE_NORMAL
- en: These are whole numbers, which can be either positive or negative. Examples
    are −8 and 745\. They are, however, limited to between −2147483648 and 2147483647\.
    Any number falling outside this range is considered a different data type called
    a *long*. The difference between data types has to do with memory. Integers are
    32 bits in width, whereas longs are 64 bits in width.
  prefs: []
  type: TYPE_NORMAL
- en: Floats
  prefs: []
  type: TYPE_NORMAL
- en: These are real numbers with decimal points such as 18.54 and 311.52.
  prefs: []
  type: TYPE_NORMAL
- en: Strings
  prefs: []
  type: TYPE_NORMAL
- en: These are words stored in a variable. More scientifically, they are a set of
    structured characters (text). In Python, you write strings between single or double
    quotes.
  prefs: []
  type: TYPE_NORMAL
- en: In line 1 of the code in [Figure 1-1](#figure1-1), I have defined a variable
    called `age` and set it to 13\. When you run this code, you should see the creation
    of `age` in the variable explorer with type `int` (integer) and a value of 13\.
    In line 3, I have executed the code that defines the `height` variable set to
    184.50 (therefore, a float data type).
  prefs: []
  type: TYPE_NORMAL
- en: Notice that next to the definition of the variable, I have written the phrase
    `in centimeters`, preceded by a hashmark. This is called a *comment*. Comments
    are very important in Python for explaining the code. Therefore, anything preceded
    by `#` will not be executed. In the variable explorer, you can see the `height`
    variable with the `float` type. Line 5 defines a string, which in the variable
    explorer is shown as `str` type (string). In the console, you can see that the
    code has been successfully executed because there are no errors, which would be
    shown in red.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step in preparing the environment is to install the charting software
    that allows you to import historical data into SPYDER. Throughout the book, I
    use MetaTrader 5, a benchmark charting program used by many traders around the
    globe. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Download SPYDER and familiarize yourself with how it works.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download the MetaTrader 5 software.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use SPYDER to import historical prices from MetaTrader 5.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: From the [official website](https://www.metatrader5.com/en), download and install
    MetaTrader 5\. You need to create a demo account, which is simply a virtual account
    with imaginary money. The word *demo* does not refer to a limited duration of
    use but to the fact that it is not using real money.
  prefs: []
  type: TYPE_NORMAL
- en: To open an account, select File > Open an Account, choose MetaQuotes Software
    Corp, and then click Next. Next, choose the first option to open a demo account;
    this will let you trade virtual money. Finally, enter some basic information such
    as name, email, and account type. You will not receive a verification request
    or any type of confirmation as the demo should launch directly, allowing you to
    see the charts.
  prefs: []
  type: TYPE_NORMAL
- en: '[Figure 1-2](#figure1-2) shows the platform’s interface. By default, MetaTrader
    5 does not show all the markets it covers, so you need to make them accessible
    for import and visualization if necessary. Click View, click Market Watch, and
    then right-click any of the symbols shown in the new tab and choose Show All.
    This way you can see the extended list with more markets.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/mfpr_0102.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1-2\. MetaTrader 5’s interface
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Creating the Importing Algorithm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Being able to automatically summon historical data of any time frame is a wonderful
    time-saver as it allows you to focus on research and analysis instead of wasting
    valuable time acquiring and cleaning the data. Let’s create a set of functions
    that import the historical data of a selected asset almost instantaneously.
  prefs: []
  type: TYPE_NORMAL
- en: Before proceeding to the coding part, you need to install the MetaTrader 5 Python
    integration library so you can use it later in SPYDER. This is easy and requires
    one step. Open the Anaconda prompt and type in `pip install Metatrader5`, as shown
    in [Figure 1-3](#figure1-3).
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/mfpr_0103.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1-3\. Anaconda prompt showing the command to install the MetaTrader 5
    library
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Installation is the bridge that allows you to use Python libraries designed
    for MetaTrader 5 in the interpreter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code block uses the `import` built-in statement, which calls
    for internal (self-created) or external (created by third parties) libraries.
    A library is a store of functions, and thus, you need to import the libraries
    that are pertinent to what you want to do. For demonstration purposes, import
    the following modules, packages, and libraries:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The `datetime` module gives tools for manipulating the dates and times, the
    `pytz` library offers cross-platform time zone calculations that are needed for
    the import, and the `pandas` and `numpy` libraries are used for data manipulation
    and analysis.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: You mainly use `numpy` for most calculations and data manipulation.
  prefs: []
  type: TYPE_NORMAL
- en: The MetaTrader 5 library imports the functions relating to the software’s module
    and is the key library that will allow you to import the financial historical
    data.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the three last lines of code contain the `as` statement. This is used
    to give a custom name to the library when you want to use it frequently and save
    writing space. In other words, Python recognizes the MetaTrader 5 library as mt5
    from now on.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '*Modules* are files that contain functions and variables. A *package* is a
    collection of modules; it needs to have an *init.py* file. A library is simply
    a collection of packages.'
  prefs: []
  type: TYPE_NORMAL
- en: Executing the `import` statements means that Python now recognizes the functions
    inside them and will allow you to use them in future code if you decide to call
    them. You must run them every time you open a new session, which is why the `import`
    statements are usually found at the beginning of the code.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step is to create the universe of the time frames that you will be
    able to import. Even though I will be showing you how to analyze and back-test
    hourly data, you can define a wider universe, as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'A *time frame* is the frequency with which you record the prices. With hourly
    data, you will record the last price printed every hour. This means that in a
    day, you can have up to 24 hourly prices. This allows you to see the intraday
    evolution of the price. However, the close price is just one of the things that
    you want to import. During a time period (whether hourly or daily), you will see
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The first price of the time period, which is called the *open price*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The highest price printed during the time period, which is called the *high
    price*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The lowest price printed during the time period, which is called the *low price*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The last price seen before starting a new time period, which is referred to
    as the *close price*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Altogether these are called the OHLC^([1](ch01.xhtml#idm46762873126720)) data,
    which are generally ordered as written.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code defines the current time, which is used so that the algorithm
    has a reference point when importing the data. Basically, you are creating a variable
    that stores the current time and date:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s now proceed to defining the universe of the assets you want to back-test.
    I do a mix of four asset classes: currencies, cryptocurrencies, commodities, and
    equity indices:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Currencies* (also known as *forex*, an abbreviation for foreign exchange market)
    form the biggest financial market in terms of daily volume. Currencies are quoted
    in pairs, meaning that you cannot just buy USD in absolute terms; you have to
    buy it using another currency. Therefore, the EURUSD pair refers to the price
    of 1 EUR in terms of USD. The back-testing universe comprises EURUSD, USDCHF,
    GBPUSD, and USDCAD.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: USD is an abbreviation for the United States dollar, EUR is an abbreviation
    for the euro currency, CHF is an abbreviation for the Swiss franc, GBP is an abbreviation
    for Great Britain’s pound, and CAD is an abbreviation for the Canadian dollar.
  prefs: []
  type: TYPE_NORMAL
- en: '*Cryptocurrencies* (also known as *cryptos*) are a new, disruptive asset class
    characterized by severe volatility. The most well-known cryptocurrency is Bitcoin,
    followed by Ethereum. Note that both are expressed in terms of USD; this is why
    they are labeled as BTCUSD and ETHUSD.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Notice that Bitcoin (BTC) and Ethereum (ETH) are quoted versus USD. They are
    generally considered the most liquid cryptocurrency pairs.
  prefs: []
  type: TYPE_NORMAL
- en: '*Commodities* are physical assets such as gold, silver, and copper. They are
    divided into many categories such as energy (crude oil, Brent oil, etc.) and industrial
    metals (copper, zinc, etc.). In the universe of assets, I stick to gold and silver.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Equity indices* are weighted calculations of a select basket of a country’s
    stocks. They are used to analyze the overall stock market health of a nation.
    In this book, I cover the S&P 500, a proxy for US stocks, and the FTSE 100, a
    proxy for UK stocks:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that you have your time and asset variables ready, all you need is to create
    the structure of the importing algorithm. The `get_quotes()` function does this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Notice that in the `get_quotes()` function, you finally use the `pytz` and
    `pandas` libraries. The function starts by defining the Olson time zone, which
    you can set yourself. Here is a brief, nonexhaustive list of what you can enter
    depending on your time zone:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Afterward, I define two variables called `time_from` and `time_to`:'
  prefs: []
  type: TYPE_NORMAL
- en: The `time_from` variable contains the datetime referring to the beginning of
    the import date (e.g., 01-01-2020).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `time_to` variable contains the datetime referring to the end of the import
    date (e.g., 12-31-2020).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The next step is to create a variable that imports the financial data using
    the time periods you have specified. This is done through the `rates` variable
    using the `mt5.copy_rates_range()` function. Finally, using `pandas`, transform
    the data into a data frame.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Throughout the book you will be dealing with arrays and not data frames; however,
    the function `get_quotes()` first imports the values as a data frame due to compatibility,
    and then you will transform it into an array. At any rate, the main difference
    between a data frame and an array is the type of data you can keep inside and
    the structure of the axes.
  prefs: []
  type: TYPE_NORMAL
- en: 'The final function required for the importing process is the `mass_import()`
    function. It lets you choose the time frame using the variable and then uses the
    `get_quotes()` function to import the data and format it to an array. The following
    code snippet defines the `mass_import()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The `mass_import()` function automatically converts the data frame into an array,
    so you do not have to worry about conversion when using the automatic import.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: The algorithm imports a number of historical data limited by MetaTrader 5\.
    Although that number is high, in time you may need to adjust the year argument
    higher in order to get the data. For instance, if you get an empty array using
    the `mass_import()` function, try putting a more recent year in the `get_quotes()`
    function (“2014” instead of “2013,” as shown in the preceding example).
  prefs: []
  type: TYPE_NORMAL
- en: Even though there is a MAC version of MetaTrader 5, the Python library only
    works on Windows. It requires an emulator on a Mac. For Mac users, you may also
    try the manual import method shown later in the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Putting It All Together
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let’s now see a full example of data import. Remember that the full importing
    code can be found in the GitHub repository of the book. Normally I am dealing
    only with hourly data in the book because traders use it heavily, which creates
    interesting signals; however, let’s try applying a couple of examples of importing
    after having defined the functions seen in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To import the daily ETHUSD data, type the following code:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'To import the hourly GBPUSD data, type the following code:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: There are many ways to import data into Python; some are automatic, and some
    are manual. You have just seen the first way of using code to communicate with
    a charting platform and to download the data. The manual way is to have an Excel
    file with OHLC data that you have downloaded from a third party. In this case,
    you can use the `pandas` library to import it and transform it into an array.
  prefs: []
  type: TYPE_NORMAL
- en: Suppose that the Excel filename is *my_data* and the file is stored on your
    desktop. You have to make sure that the SPYDER directory is in the same place
    as the file. In layperson’s terms, SPYDER must search the desktop for the Excel
    file. To choose the right directory, you must click the folder button next to
    the arrow, as shown in [Figure 1-4](#figure1-4).
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/mfpr_0104.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1-4\. Directory tab
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: You should get a separate window where you can choose the desktop location and
    then validate the choice. Having done this, the tab should look like [Figure 1-5](#figure1-5).
  prefs: []
  type: TYPE_NORMAL
- en: '![](assets/mfpr_0105.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 1-5\. Directory tab
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'You must use the `read_excel()` function to get the values inside the Excel
    file. Follow this syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Right about now, you have a data frame called `my_data` with four different
    columns representing open, high, low, and close prices. You generally have to
    enter the library’s name before using a function that belongs to it; this is why
    `read_excel()` is preceded by `pd`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Remember that `pd` is the shortcut used to refer to `pandas`. In parallel, `np`
    is the shortcut used to refer to `numpy`.
  prefs: []
  type: TYPE_NORMAL
- en: The following syntax shows how to convert structured elements from a data frame
    to an array to facilitate manipulation. The array library I use is called `numpy`,
    which is the main library used in this book.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: I recommend using the automatic way for Windows users and the manual way for
    macOS users due to compatibility issues.
  prefs: []
  type: TYPE_NORMAL
- en: 'In your opinion, what should you do before using the functions of `numpy`?
    If your answer is import the library, then you are correct. The following code
    snippet imports `numpy` and converts `my_data` into an array so that it is ready
    for analysis:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Alternatively, you can do all of this in one line by just adding `.values` to
    `pd.​read_excel('my_data.xlsx')`, thus becoming `pd.read_excel('my_data.xlsx').​values`
    and resulting in an array instead of a data frame.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The research and trading framework is composed of four different algorithms
    that are discussed in detail in the next chapter. They can be summarized as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Import algorithm
  prefs: []
  type: TYPE_NORMAL
- en: This is the algorithm shown in this chapter that deals with importing and preparing
    the historical OHLC data to be analyzed or back-tested. I believe that at this
    stage you can easily do this automatically and manually.
  prefs: []
  type: TYPE_NORMAL
- en: Signal algorithm
  prefs: []
  type: TYPE_NORMAL
- en: This algorithm, which you will see in [Chapter 2](ch02.xhtml#chapter2), will
    be responsible for generating the buy and sell orders. In essence, it is the set
    of conditions that gives the green light that a pattern has appeared and a trade
    can take place.
  prefs: []
  type: TYPE_NORMAL
- en: Charting algorithm
  prefs: []
  type: TYPE_NORMAL
- en: This is the simplest algorithm. You will use it to chart the signals on the
    price chart. Its purpose is to visually analyze the buy and sell signals on the
    chart. You will also learn about this in [Chapter 2](ch02.xhtml#chapter2).
  prefs: []
  type: TYPE_NORMAL
- en: Performance algorithm
  prefs: []
  type: TYPE_NORMAL
- en: This algorithm is used to calculate and analyze the results acquired from the
    signal algorithm. Basically, it calculates performance metrics on the signals
    generated following the patterns’ conditions. You will also learn about this in [Chapter 2](ch02.xhtml#chapter2).
  prefs: []
  type: TYPE_NORMAL
- en: It is important that you know how to automatically import and prepare financial
    data that you will later analyze. Python offers strong and rapid tools to do so;
    hence, make sure you master this technique so that you supersize your research
    capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: ^([1](ch01.xhtml#idm46762873126720-marker)) An abbreviation for *open*, *high*,
    *low*, *and* *close*.
  prefs: []
  type: TYPE_NORMAL

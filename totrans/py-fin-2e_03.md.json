["```py\nIn [1]: a = 10\n        type(a)\nOut[1]: int\n```", "```py\nIn [2]: a.bit_length()\nOut[2]: 4\n```", "```py\nIn [3]: a = 100000\n        a.bit_length()\nOut[3]: 17\n```", "```py\nIn [4]: googol = 10 ** 100\n        googol\nOut[4]: 10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n\nIn [5]: googol.bit_length()\nOut[5]: 333\n```", "```py\nIn [6]: 1 + 4\nOut[6]: 5\n\nIn [7]: 1 / 4\nOut[7]: 0.25\n\nIn [8]: type(1 / 4)\nOut[8]: float\n```", "```py\nIn [9]: 1.6 / 4\nOut[9]: 0.4\n\nIn [10]: type (1.6 / 4)\nOut[10]: float\n```", "```py\nIn [11]: b = 0.35\n         type(b)\nOut[11]: float\n\nIn [12]: b + 0.1\nOut[12]: 0.44999999999999996\n```", "```py\nIn [13]: c = 0.5\n         c.as_integer_ratio()\nOut[13]: (1, 2)\n```", "```py\nIn [14]: b.as_integer_ratio()\nOut[14]: (3152519739159347, 9007199254740992)\n```", "```py\nIn [15]: import decimal\n         from decimal import Decimal\n\nIn [16]: decimal.getcontext()\nOut[16]: Context(prec=28, rounding=ROUND_HALF_EVEN, Emin=-999999, Emax=999999, capitals=1, clamp=0, flags=[], traps=[InvalidOperation, DivisionByZero, Overflow])\n\nIn [17]: d = Decimal(1) / Decimal (11)\n         d\nOut[17]: Decimal('0.09090909090909090909090909091')\n```", "```py\nIn [18]: decimal.getcontext().prec = 4  ![1](images/1.png)\n\nIn [19]: e = Decimal(1) / Decimal (11)\n         e\nOut[19]: Decimal('0.09091')\n\nIn [20]: decimal.getcontext().prec = 50  ![2](images/2.png)\n\nIn [21]: f = Decimal(1) / Decimal (11)\n         f\nOut[21]: Decimal('0.090909090909090909090909090909090909090909090909091')\n```", "```py\nIn [22]: g = d + e + f\n         g\nOut[22]: Decimal('0.27272818181818181818181818181909090909090909090909')\n```", "```py\nIn [23]: import keyword\n\nIn [24]: keyword.kwlist\nOut[24]: ['False',\n          'None',\n          'True',\n          'and',\n          'as',\n          'assert',\n          'break',\n          'class',\n          'continue',\n          'def',\n          'del',\n          'elif',\n          'else',\n          'except',\n          'finally',\n          'for',\n          'from',\n          'global',\n          'if',\n          'import',\n          'in',\n          'is',\n          'lambda',\n          'nonlocal',\n          'not',\n          'or',\n          'pass',\n          'raise',\n          'return',\n          'try',\n          'while',\n          'with',\n          'yield']\n```", "```py\nIn [25]: 4 > 3  ![1](images/1.png)\nOut[25]: True\n\nIn [26]: type(4 > 3)\nOut[26]: bool\n\nIn [27]: type(False)\nOut[27]: bool\n\nIn [28]: 4 >= 3  ![2](images/2.png)\nOut[28]: True\n\nIn [29]: 4 < 3  ![3](images/3.png)\nOut[29]: False\n\nIn [30]: 4 <= 3  ![4](images/4.png)\nOut[30]: False\n\nIn [31]: 4 == 3  ![5](images/5.png)\nOut[31]: False\n\nIn [32]: 4 != 3  ![6](images/6.png)\nOut[32]: True\n```", "```py\nIn [33]: True and True\nOut[33]: True\n\nIn [34]: True and False\nOut[34]: False\n\nIn [35]: False and False\nOut[35]: False\n\nIn [36]: True or True\nOut[36]: True\n\nIn [37]: True or False\nOut[37]: True\n\nIn [38]: False or False\nOut[38]: False\n\nIn [39]: not True\nOut[39]: False\n\nIn [40]: not False\nOut[40]: True\n```", "```py\nIn [41]: (4 > 3) and (2 > 3)\nOut[41]: False\n\nIn [42]: (4 == 3) or (2 != 3)\nOut[42]: True\n\nIn [43]: not (4 != 4)\nOut[43]: True\n\nIn [44]: (not (4 != 4)) and (2 == 3)\nOut[44]: False\n```", "```py\nIn [45]: if 4 > 3:  ![1](images/1.png)\n             print('condition true')  ![2](images/2.png)\n\n         condition true\n\nIn [46]: i = 0  ![3](images/3.png)\n         while i < 4:  ![4](images/4.png)\n             print('condition true, i = ', i)  ![5](images/5.png)\n             i += 1  ![6](images/6.png)\n\n         condition true, i =  0\n         condition true, i =  1\n         condition true, i =  2\n         condition true, i =  3\n```", "```py\nIn [47]: int(True)\nOut[47]: 1\n\nIn [48]: int(False)\nOut[48]: 0\n\nIn [49]: float(True)\nOut[49]: 1.0\n\nIn [50]: float(False)\nOut[50]: 0.0\n\nIn [51]: bool(0)\nOut[51]: False\n\nIn [52]: bool(0.0)\nOut[52]: False\n\nIn [53]: bool(1)\nOut[53]: True\n\nIn [54]: bool(10.5)\nOut[54]: True\n\nIn [55]: bool(-2)\nOut[55]: True\n```", "```py\nIn [56]: t = 'this is a string object'\n```", "```py\nIn [57]: t.capitalize()\nOut[57]: 'This is a string object'\n```", "```py\nIn [58]: t.split()\nOut[58]: ['this', 'is', 'a', 'string', 'object']\n```", "```py\nIn [59]: t.find('string')\nOut[59]: 10\n```", "```py\nIn [60]: t.find('Python')\nOut[60]: -1\n```", "```py\nIn [61]: t.replace(' ', '|')\nOut[61]: 'this|is|a|string|object'\n```", "```py\nIn [62]: 'http://www.python.org'.strip('htp:/')\nOut[62]: 'www.python.org'\n```", "```py\nIn [63]: print('Python for Finance')  ![1](images/1.png)\n\n         Python for Finance\n\nIn [64]: print(t)  ![2](images/2.png)\n\n         this is a string object\n\nIn [65]: i = 0\n         while i < 4:\n             print(i)  ![3](images/3.png)\n             i += 1\n\n         0\n         1\n         2\n         3\n\nIn [66]: i = 0\n         while i < 4:\n             print(i, end='|')  ![4](images/4.png)\n             i += 1\n\n         0|1|2|3|\n```", "```py\nIn [67]: 'this is an integer %d' % 15  ![1](images/1.png)\nOut[67]: 'this is an integer 15'\n\nIn [68]: 'this is an integer %4d' % 15  ![2](images/2.png)\nOut[68]: 'this is an integer   15'\n\nIn [69]: 'this is an integer %04d' % 15  ![3](images/3.png)\nOut[69]: 'this is an integer 0015'\n\nIn [70]: 'this is a float %f' % 15.3456  ![4](images/4.png)\nOut[70]: 'this is a float 15.345600'\n\nIn [71]: 'this is a float %.2f' % 15.3456  ![5](images/5.png)\nOut[71]: 'this is a float 15.35'\n\nIn [72]: 'this is a float %8f' % 15.3456  ![6](images/6.png)\nOut[72]: 'this is a float 15.345600'\n\nIn [73]: 'this is a float %8.2f' % 15.3456  ![7](images/7.png)\nOut[73]: 'this is a float    15.35'\n\nIn [74]: 'this is a float %08.2f' % 15.3456  ![8](images/8.png)\nOut[74]: 'this is a float 00015.35'\n\nIn [75]: 'this is a string %s' % 'Python'  ![9](images/9.png)\nOut[75]: 'this is a string Python'\n\nIn [76]: 'this is a string %10s' % 'Python'  ![10](images/10.png)\nOut[76]: 'this is a string     Python'\n```", "```py\nIn [77]: 'this is an integer {:d}'.format(15)\nOut[77]: 'this is an integer 15'\n\nIn [78]: 'this is an integer {:4d}'.format(15)\nOut[78]: 'this is an integer   15'\n\nIn [79]: 'this is an integer {:04d}'.format(15)\nOut[79]: 'this is an integer 0015'\n\nIn [80]: 'this is a float {:f}'.format(15.3456)\nOut[80]: 'this is a float 15.345600'\n\nIn [81]: 'this is a float {:.2f}'.format(15.3456)\nOut[81]: 'this is a float 15.35'\n\nIn [82]: 'this is a float {:8f}'.format(15.3456)\nOut[82]: 'this is a float 15.345600'\n\nIn [83]: 'this is a float {:8.2f}'.format(15.3456)\nOut[83]: 'this is a float    15.35'\n\nIn [84]: 'this is a float {:08.2f}'.format(15.3456)\nOut[84]: 'this is a float 00015.35'\n\nIn [85]: 'this is a string {:s}'.format('Python')\nOut[85]: 'this is a string Python'\n\nIn [86]: 'this is a string {:10s}'.format('Python')\nOut[86]: 'this is a string Python    '\n```", "```py\nIn [87]: i = 0\n         while i < 4:\n             print('the number is %d' % i)\n             i += 1\n\n         the number is 0\n         the number is 1\n         the number is 2\n         the number is 3\n\nIn [88]: i = 0\n         while i < 4:\n             print('the number is {:d}'.format(i))\n             i += 1\n\n         the number is 0\n         the number is 1\n         the number is 2\n         the number is 3\n```", "```py\nIn [89]: import re\n```", "```py\nIn [90]: series = \"\"\"\n '01/18/2014 13:00:00', 100, '1st';\n '01/18/2014 13:30:00', 110, '2nd';\n '01/18/2014 14:00:00', 120, '3rd'\n \"\"\"\n```", "```py\nIn [91]: dt = re.compile(\"'[0-9/:\\s]+'\")  # datetime\n```", "```py\nIn [92]: result = dt.findall(series)\n         result\nOut[92]: [\"'01/18/2014 13:00:00'\", \"'01/18/2014 13:30:00'\", \"'01/18/2014 14:00:00'\"]\n```", "```py\nIn [93]: from datetime import datetime\n         pydt = datetime.strptime(result[0].replace(\"'\", \"\"),\n                                  '%m/%d/%Y %H:%M:%S')\n         pydt\nOut[93]: datetime.datetime(2014, 1, 18, 13, 0)\n\nIn [94]: print(pydt)\n\n         2014-01-18 13:00:00\n\nIn [95]: print(type(pydt))\n\n         <class 'datetime.datetime'>\n```", "```py\nIn [96]: t = (1, 2.5, 'data')\n         type(t)\nOut[96]: tuple\n```", "```py\nIn [97]: t = 1, 2.5, 'data'\n         type(t)\nOut[97]: tuple\n```", "```py\nIn [98]: t[2]\nOut[98]: 'data'\n\nIn [99]: type(t[2])\nOut[99]: str\n```", "```py\nIn [100]: t.count('data')\nOut[100]: 1\n\nIn [101]: t.index(1)\nOut[101]: 0\n```", "```py\nIn [102]: l = [1, 2.5, 'data']\n          l[2]\nOut[102]: 'data'\n```", "```py\nIn [103]: l = list(t)\n          l\nOut[103]: [1, 2.5, 'data']\n\nIn [104]: type(l)\nOut[104]: list\n```", "```py\nIn [105]: l.append([4, 3])  ![1](images/1.png)\n          l\nOut[105]: [1, 2.5, 'data', [4, 3]]\n\nIn [106]: l.extend([1.0, 1.5, 2.0])  ![2](images/2.png)\n          l\nOut[106]: [1, 2.5, 'data', [4, 3], 1.0, 1.5, 2.0]\n\nIn [107]: l.insert(1, 'insert')  ![3](images/3.png)\n          l\nOut[107]: [1, 'insert', 2.5, 'data', [4, 3], 1.0, 1.5, 2.0]\n\nIn [108]: l.remove('data')  ![4](images/4.png)\n          l\nOut[108]: [1, 'insert', 2.5, [4, 3], 1.0, 1.5, 2.0]\n\nIn [109]: p = l.pop(3)  ![5](images/5.png)\n          print(l, p)\n\n          [1, 'insert', 2.5, 1.0, 1.5, 2.0] [4, 3]\n```", "```py\nIn [110]: l[2:5]  ![1](images/1.png)\nOut[110]: [2.5, 1.0, 1.5]\n```", "```py\nIn [111]: for element in l[2:5]:\n              print(element ** 2)\n\n          6.25\n          1.0\n          2.25\n```", "```py\nIn [112]: r = range(0, 8, 1)  ![1](images/1.png)\n          r\nOut[112]: range(0, 8)\n\nIn [113]: type(r)\nOut[113]: range\n```", "```py\nIn [114]: for i in range(2, 5):\n              print(l[i] ** 2)\n\n          6.25\n          1.0\n          2.25\n```", "```py\nIn [115]: for i in range(1, 10):\n              if i % 2 == 0:  ![1](images/1.png)\n                  print(\"%d is even\" % i)\n              elif i % 3 == 0:\n                  print(\"%d is multiple of 3\" % i)\n              else:\n                  print(\"%d is odd\" % i)\n\n          1 is odd\n          2 is even\n          3 is multiple of 3\n          4 is even\n          5 is odd\n          6 is even\n          7 is odd\n          8 is even\n          9 is multiple of 3\n```", "```py\nIn [116]: total = 0\n          while total < 100:\n              total += 1\n          print(total)\n\n          100\n```", "```py\nIn [117]: m = [i ** 2 for i in range(5)]\n          m\nOut[117]: [0, 1, 4, 9, 16]\n```", "```py\nIn [118]: def f(x):\n              return x ** 2\n          f(2)\nOut[118]: 4\n```", "```py\nIn [119]: def even(x):\n              return x % 2 == 0\n          even(3)\nOut[119]: False\n```", "```py\nIn [120]: list(map(even, range(10)))\nOut[120]: [True, False, True, False, True, False, True, False, True, False]\n```", "```py\nIn [121]: list(map(lambda x: x ** 2, range(10)))\nOut[121]: [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n```", "```py\nIn [122]: list(filter(even, range(15)))\nOut[122]: [0, 2, 4, 6, 8, 10, 12, 14]\n```", "```py\nIn [123]: d = {\n               'Name' : 'Angela Merkel',\n               'Country' : 'Germany',\n               'Profession' : 'Chancelor',\n               'Age' : 63\n               }\n          type(d)\nOut[123]: dict\n\nIn [124]: print(d['Name'], d['Age'])\n\n          Angela Merkel 63\n```", "```py\nIn [125]: d.keys()\nOut[125]: dict_keys(['Name', 'Country', 'Profession', 'Age'])\n\nIn [126]: d.values()\nOut[126]: dict_values(['Angela Merkel', 'Germany', 'Chancelor', 63])\n\nIn [127]: d.items()\nOut[127]: dict_items([('Name', 'Angela Merkel'), ('Country', 'Germany'), ('Profession', 'Chancelor'), ('Age', 63)])\n\nIn [128]: birthday = True\n          if birthday is True:\n              d['Age'] += 1\n          print(d['Age'])\n\n          64\n```", "```py\nIn [129]: for item in d.items():\n              print(item)\n\n          ('Name', 'Angela Merkel')\n          ('Country', 'Germany')\n          ('Profession', 'Chancelor')\n          ('Age', 64)\n\nIn [130]: for value in d.values():\n              print(type(value))\n\n          <class 'str'>\n          <class 'str'>\n          <class 'str'>\n          <class 'int'>\n```", "```py\nIn [131]: s = set(['u', 'd', 'ud', 'du', 'd', 'du'])\n          s\nOut[131]: {'d', 'du', 'u', 'ud'}\n\nIn [132]: t = set(['d', 'dd', 'uu', 'u'])\n```", "```py\nIn [133]: s.union(t)  ![1](images/1.png)\nOut[133]: {'d', 'dd', 'du', 'u', 'ud', 'uu'}\n\nIn [134]: s.intersection(t)  ![2](images/2.png)\nOut[134]: {'d', 'u'}\n\nIn [135]: s.difference(t)  ![3](images/3.png)\nOut[135]: {'du', 'ud'}\n\nIn [136]: t.difference(s)  ![4](images/4.png)\nOut[136]: {'dd', 'uu'}\n\nIn [137]: s.symmetric_difference(t)  ![5](images/5.png)\nOut[137]: {'dd', 'du', 'ud', 'uu'}\n```", "```py\nIn [138]: from random import randint\n          l = [randint(0, 10) for i in range(1000)]  ![1](images/1.png)\n          len(l)  ![2](images/2.png)\nOut[138]: 1000\n\nIn [139]: l[:20]\nOut[139]: [10, 9, 2, 4, 5, 1, 7, 4, 6, 10, 9, 5, 4, 6, 10, 3, 4, 7, 0, 5]\n\nIn [140]: s = set(l)\n          s\nOut[140]: {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n```"]
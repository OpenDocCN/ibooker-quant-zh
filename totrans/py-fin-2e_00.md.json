["```py\nIn [1]: import this\n\n        The Zen of Python, by Tim Peters\n\n        Beautiful is better than ugly.\n        Explicit is better than implicit.\n        Simple is better than complex.\n        Complex is better than complicated.\n        Flat is better than nested.\n        Sparse is better than dense.\n        Readability counts.\n        Special cases aren't special enough to break the rules.\n        Although practicality beats purity.\n        Errors should never pass silently.\n        Unless explicitly silenced.\n        In the face of ambiguity, refuse the temptation to guess.\n        There should be one-- and preferably only one --obvious way to do it.\n        Although that way may not be obvious at first unless you're Dutch.\n        Now is better than never.\n        Although never is often better than *right* now.\n        If the implementation is hard to explain, it's a bad idea.\n        If the implementation is easy to explain, it may be a good idea.\n        Namespaces are one honking great idea -- let's do more of those!\n```", "```py\nIn [2]: 100 * 2.5 + 50\nOut[2]: 300.0\n\nIn [3]: log(1)\n\n        ----------------------------------------\n        NameErrorTraceback (most recent call last)\n        <ipython-input-3-cfa4946d0225> in <module>()\n----> 1 log(1)\n\n        NameError: name 'log' is not defined\n\nIn [4]: import math\n\nIn [5]: math.log(1)\nOut[5]: 0.0\n```", "```py\nIn [6]: S0 = 100.  ![1](images/1.png)\n        K = 105.  ![1](images/1.png)\n        T = 1.0  ![1](images/1.png)\n        r = 0.05  ![1](images/1.png)\n        sigma = 0.2  ![1](images/1.png)\n\nIn [7]: import math\n        import numpy as np  ![2](images/2.png)\n\n        I = 100000\n\n        np.random.seed(1000)  ![3](images/3.png)\n        z = np.random.standard_normal(I)  ![4](images/4.png)\n        ST = S0 * np.exp((r - sigma ** 2 / 2) * T + sigma * math.sqrt(T) * z)  ![5](images/5.png)\n        hT = np.maximum(ST - K, 0)  ![6](images/6.png)\n        C0 = math.exp(-r * T) * np.mean(hT)  ![7](images/7.png)\n\nIn [8]: print('Value of the European Call Option %5.3f:' % C0)  ![8](images/8.png)\n\n        Value of the European Call Option 8.019:\n```", "```py\n#\n# Monte Carlo valuation of European call option\n# in Black-Scholes-Merton model\n# bsm_mcs_euro.py\n#\n# Python for Finance\n# (c) Dr. Yves J. Hilpisch\n#\nimport math\nimport numpy as np\n\n# Parameter Values\nS0 = 100.  # initial index level\nK = 105.  # strike price\nT = 1.0  # time-to-maturity\nr = 0.05  # riskless short rate\nsigma = 0.2  # volatility\n\nI = 100000  # number of simulations\n\n# Valuation Algorithm\nz = np.random.standard_normal(I)  # pseudorandom numbers\n# index values at maturity\nST = S0 * np.exp((r - 0.5 * sigma ** 2) * T + sigma * math.sqrt(T) * z)\nhT = np.maximum(ST - K, 0)  # inner values at maturity\nC0 = math.exp(-r * T) * np.mean(hT)  # Monte Carlo estimator\n\n# Result Output\nprint('Value of the European Call Option %5.3f' % C0)\n```", "```py\nIn [10]: import numpy as np  ![1](images/1.png)\n         import pandas as pd  ![1](images/1.png)\n\nIn [11]: data = pd.read_csv('http://hilpisch.com/tr_eikon_eod_data.csv',\n                           index_col=0, parse_dates=True)  ![2](images/2.png)\n         data = pd.DataFrame(data['.SPX'])  ![3](images/3.png)\n         data.info()  ![4](images/4.png)\n\n         <class 'pandas.core.frame.DataFrame'>\n         DatetimeIndex: 1972 entries, 2010-01-04 to 2017-10-31\n         Data columns (total 1 columns):\n         .SPX    1972 non-null float64\n         dtypes: float64(1)\n         memory usage: 30.8 KB\n\nIn [12]: data['rets'] = np.log(data / data.shift(1))  ![5](images/5.png)\n         data['vola'] = data['rets'].rolling(252).std() * np.sqrt(252)  ![6](images/6.png)\n\nIn [13]: data[['.SPX', 'vola']].plot(subplots=True, figsize=(10, 6));  ![7](images/7.png)\n         plt.savefig('../images/01_chapter/spx_volatility.png')\n```", "```py\nIn [14]: loops = 2500000\n         import math\n         a = range(1, loops)\n         def f(x):\n             return 3 * math.log(x) + math.cos(x) ** 2\n         %timeit r = [f(x) for x in a]\n\n         1.52 s ± 29.2 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\n```", "```py\nIn [15]: import numpy as np\n         a = np.arange(1, loops)\n         %timeit r = 3 * np.log(a) + np.cos(a) ** 2\n\n         83.3 ms ± 1.16 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)\n```", "```py\nIn [16]: import numexpr as ne\n         ne.set_num_threads(1)\n         f = '3 * log(a) + cos(a) ** 2'\n         %timeit r = ne.evaluate(f)\n\n         78.2 ms ± 4.08 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)\n```", "```py\nIn [17]: ne.set_num_threads(4)\n         %timeit r = ne.evaluate(f)\n\n         21.9 ms ± 113 µs per loop (mean ± std. dev. of 7 runs, 10 loops each)\n```"]
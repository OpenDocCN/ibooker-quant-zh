["```py\ndef signal(data, open_column, close_column, buy_column, sell_column):\n\n    data = add_column(data, 5)    \n\n    for i in range(len(data)):    \n\n       try:\n\n      `# Bullish pattern`\n           if data[i, close_column]>data[i, open_column] and\\               data[i, close_column]>data[i - 1, close_column] and\\               data[i, close_column]-data[i, open_column]<body and\\               data[i-1, close_column]>data[i-1, open_column] and\\               data[i-1, close_column]>data[i-2, close_column] and\\               data[i-1, close_column]-data[i-1, open_column]<body and\\               data[i-2, close_column]>data[i-2, open_column] and\\               data[i-2, close_column]>data[i-3, close_column] and\\               data[i-2, close_column]-data[i-2, open_column]<body and\\               data[i-3, close_column]>data[i-3, open_column] and\\               data[i-3, close_column]>data[i-4, close_column] and\\               data[i-3, close_column]-data[i-3, open_column]<body and\\               data[i-4, close_column]>data[i-4, open_column] and\\               data[i-4, close_column]-data[i-4, open_column]<body and\\               data[i, buy_column] == 0:\n\n                    data[i + 1, 4] = 1 \n\n           `# Bearish pattern`\n           elif  data[i, close_column]<data[i, open_column] and\\                  data[i, close_column]<data[i-1, close_column] and\\                  data[i, open_column]-data[i, close_column]<body and\\                  data[i-1, close_column]<data[i-1, open_column] and\\                  data[i-1, close_column]<data[i-2, close_column] and\\                  data[i-1, open_column]-data[i-1, close_column]<body and\\                  data[i-2, close_column]<data[i-2, open_column] and\\                  data[i-2, close_column]<data[i-3, close_column] and\\                  data[i-2, open_column]-data[i-2, close_column]<body and\\                  data[i-3, close_column]<data[i-3, open_column] and\\                  data[i-3, close_column]<data[i-4, close_column] and\\                  data[i-3, open_column]-data[i-3, close_column]<body and\\                  data[i-4, close_column]<data[i-4, open_column] and\\                  data[i-4, open_column]-data[i-4, close_column]<body and\\                  data[i, sell_column] == 0:\n\n                    data[i + 1, 5] = -1 \n\n       except IndexError:\n\n            pass\n\n    return data\n\n```", "```py\n`# Importing the necessary libraries`\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n`# Creating high volatility noise`\nhv_noise = np.random.normal(0, 1, 250)\n\n`# Creating low volatility noise`\nlv_noise = np.random.normal(0, 0.1, 250)\n\n`# Plotting`\nplt.plot(hv_noise, color = 'red', label = 'High Volatility')\nplt.plot(lv_noise, color = 'blue', label = 'Low Volatility')\nplt.axhline(y = 0, color = 'black', linewidth = 1)\nplt.grid()\nplt.legend()\n\n```", "```py\ndef atr(data, lookback, high_column, low_column, close_column, position):\n\n    data = add_column(data, 1)\n\n    for i in range(len(data)):\n\n        try:\n\n            data[i, position] = max(data[i, high_column] - \\\n                                data[i, low_column], abs(data[i, \\\n                                high_column] - data[i - 1, close_column]),\\\n                                abs(data[i, low_column]  - \\\n                                data[i - 1, close_column]))\n\n        except ValueError:\n\n            pass\n\n    data[0, position] = 0   \n\n    data = smoothed_ma(data, 2, lookback, position, position + 1)\n\n    data = delete_column(data, position, 1)\n\n    data = delete_row(data, lookback)\n\n    return data\n\n```", "```py\ndef signal(data, open_column, high_column, low_column, close_column, \n           atr_column, buy_column, sell_column):\n\n    data = add_column(data, 5)    \n\n    for i in range(len(data)):  \n\n       try:\n\n    `# Bullish pattern`\n           if data[i, close_column] > data[i, open_column] and \\               data[i, close_column] > data[i - 1, close_column] and \\               data[i - 1, close_column] > data[i - 1, open_column] and \\               data[i, high_column] - data[i, low_column] > (2 * data[i - \\               1, atr_column]) and data[i, close_column] - data[i, \\               open_column] > data[i - 1, close_column] - data[i - 1, \\               open_column] and data[i, buy_column] == 0:\n\n                    data[i + 1, buy_column] = 1 \n\n           `# Bearish pattern`\n           elif data[i, close_column] < data[i, open_column] and \\               data[i, close_column] < data[i - 1, close_column] and \\               data[i - 1, close_column] < data[i - 1, open_column] and \\               data[i, high_column] - data[i, low_column] > (2 * data[i - \\               1, atr_column]) and data[i, open_column] - data[i, \\               close_column] > data[i - 1, open_column] - data[i - 1, \\               close_column] and data[i, sell_column] == 0:\n\n                    data[i + 1, sell_column] = -1 \n\n       except IndexError:\n\n            pass\n\n    return data\n\n```", "```py\ndef signal(data, open_column, high_column, low_column, close_column, \n           buy_column, sell_column):\n\n    data = add_column(data, 5)    \n\n    for i in range(len(data)):  \n\n       try:\n\n      `# Bullish pattern`\n           if data[i, close_column] > data[i, open_column] and \\               data[i, open_column] == data[i, low_column] and \\               data[i - 1, close_column] > data[i - 1, open_column] and \\               data[i, open_column] < data[i - 1, close_column] and \\               data[i, buy_column] == 0:\n\n                    data[i + 1, buy_column] = 1 \n\n      `# Bearish pattern`\n           elif data[i, close_column] < data[i, open_column] and \\                 data[i, open_column] == data[i, high_column] and \\                 data[i - 1, close_column] < data[i - 1, open_column] and \\                 data[i, open_column] > data[i - 1, close_column] and \\                 data[i, sell_column] == 0:\n\n                    data[i + 1, sell_column] = -1 \n\n       except IndexError:\n\n            pass\n\n    return data\n\n```", "```py\ndef signal(data, open_column, high_column, low_column, close_column, \n           buy_column, sell_column):\n\n    data = add_column(data, 5)    \n\n    for i in range(len(data)):  \n\n       try:\n\n    `# Bullish pattern`\n           if data[i, close_column] > data[i - 1, high_column] and \\               data[i, close_column] > data[i - 2, high_column] and \\               data[i, low_column] <= data[i - 3, high_column] and \\               data[i, close_column] > data[i, open_column] and \\               data[i - 1, close_column] >= data[i - 3, high_column] and \\               data[i - 2, low_column] >= data[i - 3, low_column] and \\               data[i - 2, close_column] > data[i - 2, open_column] and \\               data[i - 2, close_column] > data[i - 3, high_column] and \\               data[i - 1, high_column] <= data[i - 2, high_column]: \n\n                    data[i + 1, buy_column] = 1 \n\n           `# Bearish pattern`\n           elif data[i, close_column] < data[i - 1, low_column] and \\                 data[i, close_column] < data[i - 2, low_column] and \\                 data[i, high_column] >= data[i - 3, low_column] and \\                 data[i, close_column] < data[i, open_column] and \\                 data[i - 1, high_column] <= data[i - 3, high_column] and \\                 data[i - 2, close_column] <= data[i - 3, low_column] and \\                 data[i - 2, close_column] < data[i - 2, open_column] and \\                 data[i - 2, close_column] < data[i - 3, low_column] and \\                 data[i - 1, low_column] >= data[i - 2, low_column]:   \n\n                    data[i + 1, sell_column] = -1 \n\n       except IndexError:\n\n            pass\n\n    return data\n\n```", "```py\ndef signal(data, open_column, high_column, low_column, close_column, \n           buy_column, sell_column):\n\n    data = add_column(data, 5)    \n\n    for i in range(len(data)):  \n\n       try:\n\n           `# Bullish pattern`\n           if data[i, close_column] > data[i, open_column] and \\               data[i, close_column] > data[i - 1, close_column] and \\               data[i, low_column] > data[i - 1, low_column] and \\               data[i - 1, close_column] == data[i - 1, open_column] and \\               data[i - 2, close_column] > data[i - 2, open_column] and \\               data[i - 2, high_column] < data[i - 1, high_column]:\n\n                    data[i + 1, buy_column] = 1 \n\n           `# Bearish pattern`\n           elif data[i, close_column] < data[i, open_column] and \\                 data[i, close_column] < data[i - 1, close_column] and \\                 data[i, low_column] < data[i - 1, low_column] and \\                 data[i - 1, close_column] == data[i - 1, open_column] and \\                 data[i - 2, close_column] < data[i - 2, open_column] and \\                 data[i - 2, low_column] > data[i - 1, low_column]:\n\n                    data[i + 1, sell_column] = -1 \n\n       except IndexError:\n\n            pass\n\n    return data\n\n```"]
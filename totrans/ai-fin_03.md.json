["```py\nIn [1]: import gym\n        import numpy as np\n        import pandas as pd\n        np.random.seed(100)\n\nIn [2]: env = gym.make('CartPole-v0')  ![1](Images/1.png)\n\nIn [3]: env.seed(100)  ![2](Images/2.png)\nOut[3]: [100]\n\nIn [4]: action_size = env.action_space.n  ![3](Images/3.png)\n        action_size  ![3](Images/3.png)\nOut[4]: 2\n\nIn [5]: [env.action_space.sample() for _ in range(10)]  ![4](Images/4.png)\nOut[5]: [1, 0, 0, 0, 1, 1, 0, 0, 0, 0]\n\nIn [6]: state_size = env.observation_space.shape[0]  ![5](Images/5.png)\n        state_size  ![5](Images/5.png)\nOut[6]: 4\n\nIn [7]: state = env.reset()  ![6](Images/6.png)\n        state  # [cart position, cart velocity, pole angle, pole angular velocity]\nOut[7]: array([-0.01628537,  0.02379786, -0.0391981 , -0.01476447])\n\nIn [8]: state, reward, done, _ = env.step(env.action_space.sample())  ![7](Images/7.png)\n        state, reward, done, _  ![7](Images/7.png)\nOut[8]: (array([-0.01580941, -0.17074066, -0.03949338,  0.26529786]), 1.0, False, {})\n```", "```py\nIn [9]: %%time\n        data = pd.DataFrame()\n        state = env.reset()\n        length = []\n        for run in range(25000):\n            done = False\n            prev_state = env.reset()\n            treward = 1\n            results = []\n            while not done:\n                action = env.action_space.sample()\n                state, reward, done, _ = env.step(action)\n                results.append({'s1': prev_state[0], 's2': prev_state[1],\n                                's3': prev_state[2], 's4': prev_state[3],\n                                'a': action, 'r': reward})\n                treward += reward if not done else 0\n                prev_state = state\n            if treward >= 110:  ![1](Images/1.png)\n                data = data.append(pd.DataFrame(results))  ![2](Images/2.png)\n                length.append(treward)  ![3](Images/3.png)\n        CPU times: user 9.84 s, sys: 48.7 ms, total: 9.89 s\n        Wall time: 9.89 s\n\nIn [10]: np.array(length).mean()  ![4](Images/4.png)\nOut[10]: 119.75\n\nIn [11]: data.info()  ![5](Images/5.png)\n         <class 'pandas.core.frame.DataFrame'>\n         Int64Index: 479 entries, 0 to 143\n         Data columns (total 6 columns):\n          #   Column  Non-Null Count  Dtype\n         ---  ------  --------------  -----\n          0   s1      479 non-null    float64\n          1   s2      479 non-null    float64\n          2   s3      479 non-null    float64\n          3   s4      479 non-null    float64\n          4   a       479 non-null    int64\n          5   r       479 non-null    float64\n         dtypes: float64(5), int64(1)\n         memory usage: 26.2 KB\n\nIn [12]: data.tail()  ![5](Images/5.png)\nOut[12]:            s1        s2        s3        s4  a    r\n         139  0.639509  0.992699 -0.112029 -1.548863  0  1.0\n         140  0.659363  0.799086 -0.143006 -1.293131  0  1.0\n         141  0.675345  0.606042 -0.168869 -1.048421  0  1.0\n         142  0.687466  0.413513 -0.189837 -0.813148  1  1.0\n         143  0.695736  0.610658 -0.206100 -1.159030  0  1.0\n```", "```py\nIn [13]: from pylab import plt\n         plt.style.use('seaborn')\n         %matplotlib inline\n\nIn [14]: import tensorflow as tf\n         tf.random.set_seed(100)\n\nIn [15]: from keras.layers import Dense\n         from keras.models import Sequential\n         Using TensorFlow backend.\n\nIn [16]: model = Sequential()  ![1](Images/1.png)\n         model.add(Dense(64, activation='relu',\n                         input_dim=env.observation_space.shape[0]))  ![1](Images/1.png)\n         model.add(Dense(1, activation='sigmoid'))  ![1](Images/1.png)\n         model.compile(loss='binary_crossentropy',\n                       optimizer='adam',\n                       metrics=['acc'])  ![1](Images/1.png)\n\nIn [17]: %%time\n         model.fit(data[['s1', 's2', 's3', 's4']], data['a'],\n                   epochs=25, verbose=False, validation_split=0.2)  ![2](Images/2.png)\n         CPU times: user 1.02 s, sys: 166 ms, total: 1.18 s\n         Wall time: 797 ms\n\nOut[17]: <keras.callbacks.callbacks.History at 0x7ffa53685190>\n\nIn [18]: res = pd.DataFrame(model.history.history)  ![3](Images/3.png)\n         res.tail(3)  ![3](Images/3.png)\nOut[18]:     val_loss  val_acc      loss       acc\n         22  0.660300  0.59375  0.646965  0.626632\n         23  0.660828  0.59375  0.646794  0.621410\n         24  0.659114  0.59375  0.645908  0.626632\n```", "```py\nIn [20]: def epoch():\n             done = False\n             state = env.reset()\n             treward = 1\n             while not done:\n                 action = np.where(model.predict(np.atleast_2d(state))[0][0] > \\\n                          0.5, 1, 0)  ![1](Images/1.png)\n                 state, reward, done, _ = env.step(action)  ![2](Images/2.png)\n                 treward += reward if not done else 0\n             return treward\n\nIn [21]: res = np.array([epoch() for _ in range(100)])\n         res ![3](Images/3.png)\nOut[21]: array([200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,\n                200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,\n                200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,\n                200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,\n                200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,\n                200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,\n                200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,\n                200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,\n                200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,\n                200.])\n\nIn [22]: res.mean()  ![4](Images/4.png)\nOut[22]: 200.0\n```"]
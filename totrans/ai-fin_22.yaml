- en: Appendix B. Neural Network Classes
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附录B. 神经网络类
- en: Building on the foundations from [Appendix A](app01.xhtml#app_interactive_neural_networks),
    this appendix provides simple, class-based implementations of neural networks
    that mimic the APIs of packages such as `scikit-learn`. The implementation is
    based on pure, simple Python code and is for illustration and instruction. The
    classes presented in this appendix cannot replace robust, efficient, and scalable
    implementations found in the standard Python packages, such as `scikit-learn`
    or `TensorFlow` in combination with `Keras`.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 基于[附录 A](app01.xhtml#app_interactive_neural_networks)的基础，本附录提供了类似于`scikit-learn`等包的API的简单基于类的神经网络实现。该实现基于纯粹简单的Python代码，仅供示例和教学之用。本附录中介绍的类不能替代标准Python包中发现的健壮、高效和可伸缩的实现，如`scikit-learn`或`TensorFlow`结合`Keras`。
- en: 'The appendix comprises the following sections:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 附录包括以下部分：
- en: '[“Activation Functions”](#app_nnc_activation) introduces a Python function
    with different activation functions.'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“激活函数”](#app_nnc_activation)介绍了一个带有不同激活函数的Python函数。'
- en: '[“Simple Neural Networks”](#app_nnc_sinn) presents a Python class for *simple
    neural networks*.'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“简单神经网络”](#app_nnc_sinn)介绍了一个用于*简单神经网络*的Python类。'
- en: '[“Shallow Neural Networks”](#app_nnc_shnn) presents a Python class for *shallow
    neural networks*.'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“浅层神经网络”](#app_nnc_shnn)介绍了一个用于*浅层神经网络*的Python类。'
- en: '[“Predicting Market Direction”](#app_nnc_fin) applies the class for shallow
    neural networks to financial data.'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[“预测市场方向”](#app_nnc_fin)将浅层神经网络类应用于金融数据。'
- en: The implementations and examples in this appendix are simple and straightforward.
    The Python classes are not well suited to attack larger estimation or classification
    problems. The idea is rather to show easy-to-understand Python implementations
    from scratch.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本附录中的实现和示例都非常简单直接。这些Python类并不适合解决更大的估计或分类问题。其主要目的是展示从头开始易于理解的Python实现。
- en: Activation Functions
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 激活函数
- en: '[Appendix A](app01.xhtml#app_interactive_neural_networks) uses two activation
    functions implicitly or explicitly: linear function and sigmoid function. The
    Python function `activation` adds the `relu` (rectified linear unit) and `softplus`
    functions to the set of options. For all these activation functions, the first
    derivative is also defined:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '[附录 A](app01.xhtml#app_interactive_neural_networks)隐式或显式地使用了两个激活函数：线性函数和Sigmoid函数。Python函数`activation`添加了`relu`（修正线性单元）和`softplus`函数作为选项。对于所有这些激活函数，也定义了第一导数：'
- en: '[PRE0]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Simple Neural Networks
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简单神经网络
- en: 'This section presents a class for *simple neural networks* that has an API
    similar to those of models from standard Python packages for machine or deep learning
    (in particular, `scikit-learn` and `Keras`). Consider the class `sinn` as presented
    in the following Python code. It implements a simple neural network and defines
    the two main methods `.fit()` and `.predict()`. The `.metrics()` method calculates
    typical performance metrics: the mean-squared error (MSE) for estimation and the
    accuracy for classification. The class also implements two methods for the forward
    and backward propagation steps:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本节介绍了一个*简单神经网络*类，其API与标准Python包（特别是`scikit-learn`和`Keras`）中的模型类似。考虑到类`sinn`的Python代码如下所示。它实现了一个简单的神经网络，并定义了两个主要方法`.fit()`和`.predict()`。`.metrics()`方法计算了估计的均方误差（MSE）和分类的准确度等典型性能指标。该类还实现了前向传播和反向传播步骤的两个方法：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Estimation
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 估计
- en: 'First is an estimation problem that can be solved by the use of regression
    techniques:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 首先是可以通过回归技术解决的估计问题：
- en: '[PRE2]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[![1](Images/1.png)](#co_neural_network_classes_CO1-1)'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_neural_network_classes_CO1-1)'
- en: Exact solution by regression
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 通过回归的精确解决方案
- en: 'Applying the `sinn` class to the estimation problem requires quite some effort
    in the form of repeated learning steps. However, by increasing the number of steps,
    one can make the estimate arbitrarily precise:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 将`sinn`类应用于估计问题需要进行多次学习步骤的努力。但是，通过增加步骤的数量，可以使估计任意精确：
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[![1](Images/1.png)](#co_neural_network_classes_CO2-1)'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_neural_network_classes_CO2-1)'
- en: Residual errors of the neural network estimation
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 神经网络估计的残差误差
- en: Classification
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分类
- en: 'Second is a classification problem that can also be attacked with the `sinn`
    class. Here, standard regression techniques are in general of no use. For the
    particular set of random features and labels, the `sinn` model reaches an accuracy
    of 100%. Again, quite some effort is required in the form of repeated learning
    steps. [Figure B-1](#figure_nnc_01) shows how the prediction accuracy changes
    with the number of learning steps:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 其次是一个分类问题，也可以用`sinn`类来解决。在这里，标准的回归技术通常无效。对于随机特征和标签集合，`sinn`模型达到了100%的准确率。同样地，需要大量的重复学习步骤。[图 B-1](#figure_nnc_01)显示了预测准确率随学习步骤数量变化的情况：
- en: '[PRE4]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[![1](Images/1.png)](#co_neural_network_classes_CO3-1)'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_neural_network_classes_CO3-1)'
- en: The sigmoid function is used for activation
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: sigmoid函数用于激活
- en: '[![2](Images/2.png)](#co_neural_network_classes_CO3-2)'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_neural_network_classes_CO3-2)'
- en: Perfect accuracy on this particular data set
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个特定数据集上表现完美
- en: '![aiif 1601](Images/aiif_1601.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![aiif 1601](Images/aiif_1601.png)'
- en: Figure B-1\. Prediction accuracy versus the number of learning steps
  id: totrans-31
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图B-1\. 预测准确率与学习步骤数量的关系
- en: Shallow Neural Networks
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 浅层神经网络
- en: 'This section applies the class `shnn`, which implements *shallow neural networks*
    with one hidden layer, to estimation and classification problems. The class structure
    is along the lines of the `sinn` class from the previous section:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 本节应用`shnn`类，该类实现了具有一个隐藏层的*浅层神经网络*，用于估计和分类问题。该类结构类似于前一节中的`sinn`类：
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Estimation
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 估计
- en: 'Again, the estimation problem comes first. For 5 features and 10 samples, a
    perfect regression solution is unlikely to exist. As a result, the MSE value of
    the regression is relatively high:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，估计问题排在首位。对于5个特征和10个样本，完美的回归解决方案不太可能存在。因此，相对于回归值，MSE值相对较高：
- en: '[PRE6]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'However, the shallow neural network estimate based on the `shnn` class is quite
    good and shows a relatively low MSE value compared to the regression value:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，基于`shnn`类的浅层神经网络估计表现相当良好，并显示出与回归值相比相对较低的MSE值：
- en: '[PRE7]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Classification
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分类
- en: 'The classification example takes the estimation numbers and applies rounding
    to them. The shallow neural network converges quickly to predict the labels with
    100% accuracy (see [Figure B-2](#figure_nnc_02)):'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 分类示例将估计的数字应用四舍五入处理。浅层神经网络迅速收敛，以100%的准确率预测标签（见[图 B-2](#figure_nnc_02)）：
- en: '[PRE8]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '![aiif 1602](Images/aiif_1602.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![aiif 1602](Images/aiif_1602.png)'
- en: Figure B-2\. Performance metrics for the shallow neural network (classification)
  id: totrans-44
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图B-2\. 浅层神经网络（分类）的性能指标
- en: Predicting Market Direction
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 预测市场方向
- en: This section applies the `shnn` class to predict the future direction of the
    EUR/USD exchange rate. The analysis is in-sample only to illustrate the application
    of `shnn` to real-world data. See [Chapter 10](ch10.xhtml#vectorized_backtesting)
    for the implementation of a more realistic setup for the vectorized backtesting
    of such prediction-based strategies.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 本节应用`shnn`类来预测EUR/USD汇率未来的走向。分析仅适用于样本内，以说明`shnn`在实际数据中的应用。详见[第10章](ch10.xhtml#vectorized_backtesting)，了解更真实的基于预测策略的向量化回测设置实现。
- en: 'The following Python code imports the financial data—10 years’ worth of EOD
    data—and creates lagged, normalized log returns used as the features. The labels
    data is the direction of the price series as a binary data set:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 以下Python代码导入了金融数据——10年的EOD数据，并创建了滞后、归一化的对数收益率作为特征。标签数据是价格序列方向的二进制数据集：
- en: '[PRE9]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[![1](Images/1.png)](#co_neural_network_classes_CO4-1)'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_neural_network_classes_CO4-1)'
- en: Market direction as the labels data
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 标签数据为市场方向
- en: '[![2](Images/2.png)](#co_neural_network_classes_CO4-2)'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_neural_network_classes_CO4-2)'
- en: Lagged log returns as the features data
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 拖尾对数收益作为特征数据
- en: '[![3](Images/3.png)](#co_neural_network_classes_CO4-3)'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_neural_network_classes_CO4-3)'
- en: Gaussian normalization of the features data
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 特征数据的高斯归一化
- en: 'With the data preprocessing accomplished, the application of the shallow neural
    network class `shnn` for a supervised classification is straightforward. [Figure B-3](#figure_nnc_03)
    shows that the prediction-based strategy in-sample significantly outperforms the
    passive benchmark investment:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 数据预处理完成后，将浅层神经网络类`shnn`应用于监督分类问题非常简单。[图 B-3](#figure_nnc_03)显示了样本内基于预测策略显著优于被动基准投资的情况：
- en: '[PRE10]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[![1](Images/1.png)](#co_neural_network_classes_CO5-1)'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_neural_network_classes_CO5-1)'
- en: Derives the position values from the prediction values
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 从预测值派生出位置值
- en: '[![2](Images/2.png)](#co_neural_network_classes_CO5-3)'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_neural_network_classes_CO5-3)'
- en: Calculates the strategy returns from the position values and the log returns
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 从仓位价值和对数收益率计算策略收益
- en: '[![3](Images/3.png)](#co_neural_network_classes_CO5-4)'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_neural_network_classes_CO5-4)'
- en: Calculates the gross performance of the strategy and the benchmark investment
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 计算策略和基准投资的总体表现
- en: '[![4](Images/4.png)](#co_neural_network_classes_CO5-5)'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](Images/4.png)](#co_neural_network_classes_CO5-5)'
- en: Shows the gross performance of the strategy and the benchmark investment over
    time
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 显示策略和基准投资随时间的总体表现
- en: '![aiif 1603](Images/aiif_1603.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![aiif 1603](Images/aiif_1603.png)'
- en: Figure B-3\. Gross performance of prediction-based strategy compared to passive
    benchmark investment (in-sample)
  id: totrans-66
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 B-3\. 基于预测的策略与被动基准投资的总体表现（样本内）

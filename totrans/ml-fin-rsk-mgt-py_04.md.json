["```py\nIn [1]: import numpy as np\n        import pandas as pd\n        import math\n        import datetime\n        import yfinance as yf\n        import matplotlib.pyplot as plt\n        import tensorflow as tf\n        from tensorflow.keras.models import Sequential\n        from tensorflow.keras.callbacks import EarlyStopping\n        from tensorflow.keras.layers import (Dense, Dropout,\n                                             Activation, Flatten,\n                                             MaxPooling2D, SimpleRNN)\n        from sklearn.model_selection import train_test_split\n\nIn [2]: n_steps = 13 ![1](assets/1.png)\n        n_features = 1 ![2](assets/2.png)\n\nIn [3]: model = Sequential() ![3](assets/3.png)\n        model.add(SimpleRNN(512, activation='relu',\n                            input_shape=(n_steps, n_features),\n                            return_sequences=True)) ![4](assets/4.png)\n        model.add(Dropout(0.2)) ![5](assets/5.png)\n        model.add(Dense(256, activation = 'relu')) ![6](assets/6.png)\n        model.add(Flatten()) ![7](assets/7.png)\n        model.add(Dense(1, activation='linear')) ![8](assets/8.png)\n\nIn [4]: model.compile(optimizer='rmsprop',\n                      loss='mean_squared_error',\n                      metrics=['mse']) ![9](assets/9.png)\n\nIn [5]: def split_sequence(sequence, n_steps):\n            X, y = [], []\n            for i in range(len(sequence)):\n                end_ix = i + n_steps\n                if end_ix > len(sequence) - 1:\n                    break\n                seq_x, seq_y = sequence[i:end_ix], sequence[end_ix]\n                X.append(seq_x)\n                y.append(seq_y)\n            return np.array(X), np.array(y) ![10](assets/10.png)\n```", "```py\nIn [6]: ticker = ['AAPL', 'MSFT']\n        start = datetime.datetime(2019, 1, 1)\n        end = datetime.datetime(2020, 1 ,1)\n        stock_prices = yf.download(ticker,start=start, end = end, interval='1d')\\\n                       .Close\n        [*********************100%***********************]  2 of 2 completed\n\nIn [7]: diff_stock_prices = stock_prices.diff().dropna()\n\nIn [8]: split = int(len(diff_stock_prices['AAPL'].values) * 0.95)\n        diff_train_aapl = diff_stock_prices['AAPL'].iloc[:split]\n        diff_test_aapl = diff_stock_prices['AAPL'].iloc[split:]\n        diff_train_msft = diff_stock_prices['MSFT'].iloc[:split]\n        diff_test_msft = diff_stock_prices['MSFT'].iloc[split:]\n\nIn [9]: X_aapl, y_aapl = split_sequence(diff_train_aapl, n_steps) ![1](assets/1.png)\n        X_aapl = X_aapl.reshape((X_aapl.shape[0],  X_aapl.shape[1],\n                                 n_features)) ![2](assets/2.png)\n\nIn [10]: history = model.fit(X_aapl, y_aapl,\n                             epochs=400, batch_size=150, verbose=0,\n                             validation_split = 0.10) ![3](assets/3.png)\n\nIn [11]: start = X_aapl[X_aapl.shape[0] - n_steps] ![4](assets/4.png)\n         x_input = start ![5](assets/5.png)\n         x_input = x_input.reshape((1, n_steps, n_features))\n\nIn [12]: tempList_aapl = [] ![6](assets/6.png)\n         for i in range(len(diff_test_aapl)):\n             x_input = x_input.reshape((1, n_steps, n_features)) ![7](assets/7.png)\n             yhat = model.predict(x_input, verbose=0) ![8](assets/8.png)\n             x_input = np.append(x_input, yhat)\n             x_input = x_input[1:]\n             tempList_aapl.append(yhat) ![9](assets/9.png)\n\nIn [13]: X_msft, y_msft = split_sequence(diff_train_msft, n_steps)\n         X_msft = X_msft.reshape((X_msft.shape[0],  X_msft.shape[1],\n                                  n_features))\n\nIn [14]: history = model.fit(X_msft, y_msft,\n                             epochs=400, batch_size=150, verbose=0,\n                             validation_split = 0.10)\n\nIn [15]: start = X_msft[X_msft.shape[0] - n_steps]\n         x_input = start\n         x_input = x_input.reshape((1, n_steps, n_features))\n\nIn [16]: tempList_msft = []\n         for i in range(len(diff_test_msft)):\n             x_input = x_input.reshape((1, n_steps, n_features))\n             yhat = model.predict(x_input, verbose=0)\n             x_input = np.append(x_input, yhat)\n             x_input = x_input[1:]\n             tempList_msft.append(yhat)\n```", "```py\nIn [17]: fig, ax = plt.subplots(2,1, figsize=(18,15))\n         ax[0].plot(diff_test_aapl, label='Actual Stock Price', linestyle='--')\n         ax[0].plot(diff_test_aapl.index, np.array(tempList_aapl).flatten(),\n                    linestyle='solid', label=\"Prediction\")\n         ax[0].set_title('Predicted Stock Price-Apple')\n         ax[0].legend(loc='best')\n         ax[1].plot(diff_test_msft, label='Actual Stock Price', linestyle='--')\n         ax[1].plot(diff_test_msft.index,np.array(tempList_msft).flatten(),\n                    linestyle='solid', label=\"Prediction\")\n         ax[1].set_title('Predicted Stock Price-Microsoft')\n         ax[1].legend(loc='best')\n\n         for ax in ax.flat:\n             ax.set(xlabel='Date', ylabel='$')\n         plt.show()\n```", "```py\nIn [18]: from tensorflow.keras.layers import LSTM\n\nIn [19]: n_steps = 13 ![1](assets/1.png)\n         n_features = 1 ![2](assets/2.png)\n\nIn [20]: model = Sequential()\n         model.add(LSTM(512, activation='relu',\n                   input_shape=(n_steps, n_features),\n                   return_sequences=True)) ![3](assets/3.png)\n         model.add(Dropout(0.2)) ![4](assets/4.png)\n         model.add(LSTM(256,activation='relu')) ![5](assets/5.png)\n         model.add(Flatten())![6](assets/6.png)\n         model.add(Dense(1, activation='linear')) ![7](assets/7.png)\n\nIn [21]: model.compile(optimizer='rmsprop', loss='mean_squared_error',\n                       metrics=['mse']) ![8](assets/8.png)\n\nIn [22]: history = model.fit(X_aapl, y_aapl,\n                             epochs=400, batch_size=150, verbose=0,\n                             validation_split = 0.10) ![9](assets/9.png)\n\nIn [23]: start = X_aapl[X_aapl.shape[0] - 13]\n         x_input = start\n         x_input = x_input.reshape((1, n_steps, n_features))\n```", "```py\nIn [24]: tempList_aapl = []\n         for i in range(len(diff_test_aapl)):\n             x_input = x_input.reshape((1, n_steps, n_features))\n             yhat = model.predict(x_input, verbose=0)\n             x_input = np.append(x_input, yhat)\n             x_input = x_input[1:]\n             tempList_aapl.append(yhat)\n\nIn [25]: history = model.fit(X_msft, y_msft,\n                             epochs=400, batch_size=150, verbose=0,\n                             validation_split = 0.10)\n\nIn [26]: start = X_msft[X_msft.shape[0] - 13]\n         x_input = start\n         x_input = x_input.reshape((1, n_steps, n_features))\n\nIn [27]: tempList_msft = []\n         for i in range(len(diff_test_msft)):\n             x_input = x_input.reshape((1, n_steps, n_features))\n             yhat = model.predict(x_input, verbose=0)\n             x_input = np.append(x_input, yhat)\n             x_input = x_input[1:]\n             tempList_msft.append(yhat)\n```", "```py\nIn [28]: fig, ax = plt.subplots(2, 1, figsize=(18, 15))\n         ax[0].plot(diff_test_aapl, label='Actual Stock Price', linestyle='--')\n         ax[0].plot(diff_test_aapl.index, np.array(tempList_aapl).flatten(),\n                    linestyle='solid', label=\"Prediction\")\n         ax[0].set_title('Predicted Stock Price-Apple')\n         ax[0].legend(loc='best')\n         ax[1].plot(diff_test_msft, label='Actual Stock Price', linestyle='--')\n         ax[1].plot(diff_test_msft.index, np.array(tempList_msft).flatten(),\n                    linestyle='solid', label=\"Prediction\")\n         ax[1].set_title('Predicted Stock Price-Microsoft')\n         ax[1].legend(loc='best')\n\n         for ax in ax.flat:\n             ax.set(xlabel='Date', ylabel='$')\n         plt.show()\n```"]
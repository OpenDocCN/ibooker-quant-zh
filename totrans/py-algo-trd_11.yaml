- en: Appendix A. Python, NumPy, matplotlib, pandas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Talk is cheap. Show me the code.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Linus Torvalds
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Python has become a powerful programming language and has developed a vast
    ecosystem of helpful packages over the last couple of years. This appendix provides
    a concise overview of Python and three of the major pillars of the so-called *scientific
    or data science stack*:'
  prefs: []
  type: TYPE_NORMAL
- en: '`NumPy` (see [*https://numpy.org*](https://numpy.org))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`matplotlib` (see [*https://matplotlib.org*](https://matplotlib.org))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pandas` (see [*https://pandas.pydata.org*](https://pandas.pydata.org))'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NumPy` provides performant array operations on large, homogeneous numerical
    data sets while `pandas` is primarily designed to handle tabular data, such as
    financial time series data, efficiently.'
  prefs: []
  type: TYPE_NORMAL
- en: Such an introductory appendix—only addressing selected topics relevant to the
    rest of the contents of this book—cannot, of course, replace a thorough introduction
    to Python and the packages covered. However, if you are rather new to Python or
    programming in general you might get a first overview and a feeling of what Python
    is all about. If you are already experienced in another language typically used
    in quantitative finance (such as Matlab, R, C++, or VBA), you see what typical
    data structures, programming paradigms, and idioms in Python look like.
  prefs: []
  type: TYPE_NORMAL
- en: For a comprehensive overview of Python applied to finance see, Hilpisch (2018).
    Other, more general introductions to the language with a scientific and data analysis
    focus are VanderPlas (2017) and McKinney (2017).
  prefs: []
  type: TYPE_NORMAL
- en: Python Basics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section introduces basic Python data types and structures, control structures,
    and some Python idioms.
  prefs: []
  type: TYPE_NORMAL
- en: Data Types
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It is noteworthy that Python is generally a *dynamically typed system*, which
    means that types of objects are inferred from their contexts. Let us start with
    numbers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_python__numpy__matplotlib__pandas_CO1-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Assigns the variable name `a` an integer value of 3.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_python__numpy__matplotlib__pandas_CO1-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Looks up the type of `a`.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_python__numpy__matplotlib__pandas_CO1-3)'
  prefs: []
  type: TYPE_NORMAL
- en: Looks up the number of bits used to store the integer value.
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_python__numpy__matplotlib__pandas_CO1-4)'
  prefs: []
  type: TYPE_NORMAL
- en: Assigns the variable name `b` a floating point value of 5.0.
  prefs: []
  type: TYPE_NORMAL
- en: 'Python can handle arbitrarily large integers, which is quite beneficial for
    number theoretical applications, for instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_python__numpy__matplotlib__pandas_CO2-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Assigns a “huge” integer value.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_python__numpy__matplotlib__pandas_CO2-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Shows the number of bits used for the integer representation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Arithmetic operations on these objects work as expected:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_python__numpy__matplotlib__pandas_CO3-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Division.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_python__numpy__matplotlib__pandas_CO3-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Multiplication.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_python__numpy__matplotlib__pandas_CO3-3)'
  prefs: []
  type: TYPE_NORMAL
- en: Addition.
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_python__numpy__matplotlib__pandas_CO3-4)'
  prefs: []
  type: TYPE_NORMAL
- en: Difference.
  prefs: []
  type: TYPE_NORMAL
- en: '[![5](assets/5.png)](#co_python__numpy__matplotlib__pandas_CO3-5)'
  prefs: []
  type: TYPE_NORMAL
- en: Power.
  prefs: []
  type: TYPE_NORMAL
- en: 'Many commonly used mathematical functions are found in the `math` module, which
    is part of Python’s standard library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_python__numpy__matplotlib__pandas_CO4-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Imports the `math` module from the standard library.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_python__numpy__matplotlib__pandas_CO4-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Calculates the natural logarithm.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_python__numpy__matplotlib__pandas_CO4-3)'
  prefs: []
  type: TYPE_NORMAL
- en: Calculates the exponential value.
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_python__numpy__matplotlib__pandas_CO4-4)'
  prefs: []
  type: TYPE_NORMAL
- en: Calculates the sine value.
  prefs: []
  type: TYPE_NORMAL
- en: 'Another important basic data type is the string object (`str`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_python__numpy__matplotlib__pandas_CO5-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Assigns a `str` object to the variable name `s`.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_python__numpy__matplotlib__pandas_CO5-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Transforms all characters to lowercase.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_python__numpy__matplotlib__pandas_CO5-3)'
  prefs: []
  type: TYPE_NORMAL
- en: Transforms all characters to uppercase.
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_python__numpy__matplotlib__pandas_CO5-4)'
  prefs: []
  type: TYPE_NORMAL
- en: Selects the first six characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'Such objects can also be combined using the `+` operator. The index value –1
    represents the last character of a string (or last element of a sequence in general):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_python__numpy__matplotlib__pandas_CO6-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Combines sub-sets of the `str` object to a new one.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_python__numpy__matplotlib__pandas_CO6-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Prints out the result.
  prefs: []
  type: TYPE_NORMAL
- en: 'String replacements are often used to parametrize text output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_python__numpy__matplotlib__pandas_CO7-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Defines a string template the “old” way.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_python__numpy__matplotlib__pandas_CO7-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Prints the template with the values replaced the “old” way.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_python__numpy__matplotlib__pandas_CO7-3)'
  prefs: []
  type: TYPE_NORMAL
- en: Defines a string template the “new” way.
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_python__numpy__matplotlib__pandas_CO7-4)'
  prefs: []
  type: TYPE_NORMAL
- en: Prints the template with the values replaced the “new” way.
  prefs: []
  type: TYPE_NORMAL
- en: '[![5](assets/5.png)](#co_python__numpy__matplotlib__pandas_CO7-5)'
  prefs: []
  type: TYPE_NORMAL
- en: Defines variables for later usage during replacement.
  prefs: []
  type: TYPE_NORMAL
- en: '[![6](assets/6.png)](#co_python__numpy__matplotlib__pandas_CO7-6)'
  prefs: []
  type: TYPE_NORMAL
- en: Makes use of a so-called *f-string* for string replacement (introduced in Python
    3.6).
  prefs: []
  type: TYPE_NORMAL
- en: Data Structures
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`tuple` objects are light weight data structures. These are immutable collections
    of other objects and are constructed by objects separated by commas—with or without
    parentheses:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_python__numpy__matplotlib__pandas_CO8-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Constructs a `tuple` object with parentheses.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_python__numpy__matplotlib__pandas_CO8-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Prints out the `str` representation.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_python__numpy__matplotlib__pandas_CO8-3)'
  prefs: []
  type: TYPE_NORMAL
- en: Constructs a `tuple` object without parentheses.
  prefs: []
  type: TYPE_NORMAL
- en: 'Nested structures are also possible:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_python__numpy__matplotlib__pandas_CO9-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Constructs a `tuple` object out of two others.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_python__numpy__matplotlib__pandas_CO9-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Accesses the third element of the first object.
  prefs: []
  type: TYPE_NORMAL
- en: '`list` objects are mutable collections of other objects and are generally constructed
    by providing a comma-separated collection of objects in brackets:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_python__numpy__matplotlib__pandas_CO10-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Generates a `list` object using brackets.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_python__numpy__matplotlib__pandas_CO10-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Appends a new element (final word of `s`) to the `list` object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Sorting is a typical operation on `list` objects, which can also be constructed
    using the `list` constructor (here applied to a tuple object):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_python__numpy__matplotlib__pandas_CO11-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Creates a `list` object from a `tuple`.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_python__numpy__matplotlib__pandas_CO11-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Sorts all elements in-place (that is, changes the object itself).
  prefs: []
  type: TYPE_NORMAL
- en: 'Dictionary (`dict`) objects are so-called key-value stores and are generally
    constructed with curly brackets:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_python__numpy__matplotlib__pandas_CO12-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Creates a `dict` object using curly brackets and key-value pairs.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_python__numpy__matplotlib__pandas_CO12-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Accesses the value given a key.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_python__numpy__matplotlib__pandas_CO12-3)'
  prefs: []
  type: TYPE_NORMAL
- en: Adds a new key-value pair.
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_python__numpy__matplotlib__pandas_CO12-4)'
  prefs: []
  type: TYPE_NORMAL
- en: Selects and shows all keys.
  prefs: []
  type: TYPE_NORMAL
- en: '[![5](assets/5.png)](#co_python__numpy__matplotlib__pandas_CO12-5)'
  prefs: []
  type: TYPE_NORMAL
- en: Selects and shows all values.
  prefs: []
  type: TYPE_NORMAL
- en: Control Structures
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Iterations are very important operations in programming in general and financial
    analytics in particular. Many Python objects are iterable, which proves rather
    convenient in many circumstances. Consider the special iterator object `range`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_python__numpy__matplotlib__pandas_CO13-1)'
  prefs: []
  type: TYPE_NORMAL
- en: '` object given a single parameter (end value + 1).'
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_python__numpy__matplotlib__pandas_CO13-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Creates a `range` object with `start`, `end`, and `step` parameter values.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_python__numpy__matplotlib__pandas_CO13-3)'
  prefs: []
  type: TYPE_NORMAL
- en: Iterates over a `range` object and prints the squared values.
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_python__numpy__matplotlib__pandas_CO13-4)'
  prefs: []
  type: TYPE_NORMAL
- en: Iterates over a `range` object using `start, end`, and `step` parameters.
  prefs: []
  type: TYPE_NORMAL
- en: '[![5](assets/5.png)](#co_python__numpy__matplotlib__pandas_CO13-5)'
  prefs: []
  type: TYPE_NORMAL
- en: Iterates over a `list` object.
  prefs: []
  type: TYPE_NORMAL
- en: '[![6](assets/6.png)](#co_python__numpy__matplotlib__pandas_CO13-6)'
  prefs: []
  type: TYPE_NORMAL
- en: Iterates over a `str` object.
  prefs: []
  type: TYPE_NORMAL
- en: '`while` loops are similar to their counterparts in other languages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_python__numpy__matplotlib__pandas_CO14-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Sets the counter value to 0.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_python__numpy__matplotlib__pandas_CO14-2)'
  prefs: []
  type: TYPE_NORMAL
- en: As long as the value of `i` is smaller than 5…
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_python__numpy__matplotlib__pandas_CO14-3)'
  prefs: []
  type: TYPE_NORMAL
- en: …print the square root of `i` and…
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_python__numpy__matplotlib__pandas_CO14-4)'
  prefs: []
  type: TYPE_NORMAL
- en: …increase the value of `i` by 1.
  prefs: []
  type: TYPE_NORMAL
- en: Python Idioms
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Python in many places relies on a number of special idioms. Let us start with
    a rather popular one, the *list comprehension*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_python__numpy__matplotlib__pandas_CO15-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Creates a new `list` object based on the *list comprehension* syntax (`for`
    loop in brackets).
  prefs: []
  type: TYPE_NORMAL
- en: 'So-called *lambda* or *anonymous functions* are useful helpers in many places:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_python__numpy__matplotlib__pandas_CO16-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Defines a new function `f` via the `lambda` syntax.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_python__numpy__matplotlib__pandas_CO16-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Evaluates the function `f` for a value of 5.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_python__numpy__matplotlib__pandas_CO16-3)'
  prefs: []
  type: TYPE_NORMAL
- en: Maps the function `f` to all elements of the `range` object and creates a `list`
    object with the results, which is printed.
  prefs: []
  type: TYPE_NORMAL
- en: 'In general, one works with regular Python functions (as opposed to lambda functions),
    which are constructed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_python__numpy__matplotlib__pandas_CO17-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Regular functions use the `def` statement for the definition.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_python__numpy__matplotlib__pandas_CO17-2)'
  prefs: []
  type: TYPE_NORMAL
- en: With the `return` statement, one defines what gets returned when the execution/evaluation
    is successful; multiple `return` statements are possible (for example, for different
    cases).
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_python__numpy__matplotlib__pandas_CO17-3)'
  prefs: []
  type: TYPE_NORMAL
- en: "`\x960\x97` allows for multiple arguments to be passed as an iterable object\
    \ (for example, `list` object)."
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_python__numpy__matplotlib__pandas_CO17-4)'
  prefs: []
  type: TYPE_NORMAL
- en: Iterates over the arguments.
  prefs: []
  type: TYPE_NORMAL
- en: '[![5](assets/5.png)](#co_python__numpy__matplotlib__pandas_CO17-5)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Does something with every argument: here, printing.'
  prefs: []
  type: TYPE_NORMAL
- en: '[![6](assets/6.png)](#co_python__numpy__matplotlib__pandas_CO17-6)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Returns something: here, `None`; not necessary for a valid Python function.'
  prefs: []
  type: TYPE_NORMAL
- en: '[![7](assets/7.png)](#co_python__numpy__matplotlib__pandas_CO17-7)'
  prefs: []
  type: TYPE_NORMAL
- en: Passes the `list` object `l` to the function `f`, which interprets it as a list
    of arguments.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following function definition, which returns different values/strings
    based on an `if-elif-else` control structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_python__numpy__matplotlib__pandas_CO18-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Imports the `random` module to draw random numbers.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_python__numpy__matplotlib__pandas_CO18-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Draws a random integer between 0 and 1,000.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_python__numpy__matplotlib__pandas_CO18-3)'
  prefs: []
  type: TYPE_NORMAL
- en: Prints the value of the drawn number.
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_python__numpy__matplotlib__pandas_CO18-4)'
  prefs: []
  type: TYPE_NORMAL
- en: Checks for a single digit number, and if `False`…
  prefs: []
  type: TYPE_NORMAL
- en: '[![5](assets/5.png)](#co_python__numpy__matplotlib__pandas_CO18-5)'
  prefs: []
  type: TYPE_NORMAL
- en: …checks for a double digit number; if also `False`…
  prefs: []
  type: TYPE_NORMAL
- en: '[![6](assets/6.png)](#co_python__numpy__matplotlib__pandas_CO18-6)'
  prefs: []
  type: TYPE_NORMAL
- en: …the only case that remains is the triple digit case.
  prefs: []
  type: TYPE_NORMAL
- en: '[![7](assets/7.png)](#co_python__numpy__matplotlib__pandas_CO18-7)'
  prefs: []
  type: TYPE_NORMAL
- en: Calls the function with the random number value `a`.
  prefs: []
  type: TYPE_NORMAL
- en: NumPy
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many operations in computational finance take place over large arrays of numerical
    data. `NumPy` is a Python package that allows the efficient handling of and operation
    on such data structures. Although quite a mighty package with a wealth of functionality,
    it suffices for the purposes of this book to cover the basics of `NumPy`. A neat
    online book that is available for free about `NumPy` is [*From Python to NumPy*](https://oreil.ly/Yxequ).
    It covers many important aspects in detail that are omitted in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Regular ndarray Object
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The workhorse is the `NumPy` `ndarray` class, which provides the data structure
    for n-dimensional array objects. You can generate an `ndarray` object, for instance,
    from a `list` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_python__numpy__matplotlib__pandas_CO19-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Imports `NumPy` as `np` by convention.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_python__numpy__matplotlib__pandas_CO19-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Instantiates an `ndarray` object from the `range` object; `np.arange` could
    also be used, for instance.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_python__numpy__matplotlib__pandas_CO19-3)'
  prefs: []
  type: TYPE_NORMAL
- en: Prints out the values.
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_python__numpy__matplotlib__pandas_CO19-4)'
  prefs: []
  type: TYPE_NORMAL
- en: Reshapes the object to a two-dimensional one…
  prefs: []
  type: TYPE_NORMAL
- en: '[![5](assets/5.png)](#co_python__numpy__matplotlib__pandas_CO19-5)'
  prefs: []
  type: TYPE_NORMAL
- en: …and prints out the result.
  prefs: []
  type: TYPE_NORMAL
- en: '[![6](assets/6.png)](#co_python__numpy__matplotlib__pandas_CO19-6)'
  prefs: []
  type: TYPE_NORMAL
- en: Reshapes the object to a three-dimensional one…
  prefs: []
  type: TYPE_NORMAL
- en: '[![7](assets/7.png)](#co_python__numpy__matplotlib__pandas_CO19-7)'
  prefs: []
  type: TYPE_NORMAL
- en: …and prints out the result.
  prefs: []
  type: TYPE_NORMAL
- en: '[![8](assets/8.png)](#co_python__numpy__matplotlib__pandas_CO19-8)'
  prefs: []
  type: TYPE_NORMAL
- en: This changes the `dtype` of the object to `np.float` and…
  prefs: []
  type: TYPE_NORMAL
- en: '[![9](assets/9.png)](#co_python__numpy__matplotlib__pandas_CO19-9)'
  prefs: []
  type: TYPE_NORMAL
- en: …shows the new set of (now floating point) numbers.
  prefs: []
  type: TYPE_NORMAL
- en: Many Python data structures are designed to be quite general. An example are
    mutable `list` objects that can be easily manipulated in many ways (adding and
    removing elements, storing other complex data structures, and so on). The strategy
    of `NumPy` with the regular `ndarray` object is to provide a more specialized
    data structure for which all elements are of the same atomic type and which in
    turn allows the contiguous storage in memory. This makes the `ndarray` object
    much better at solving problems in certain settings, such as when operating on
    larger, or even large, numerical data sets. In the case of `NumPy`, this specialization
    also comes along with convenience for the programmer on the one hand and often
    increased speed on the other hand.
  prefs: []
  type: TYPE_NORMAL
- en: Vectorized Operations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A major strength of `NumPy` are *vectorized operations*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_python__numpy__matplotlib__pandas_CO20-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Implements a scalar multiplication on the one-dimensional `ndarray` object (vector).
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_python__numpy__matplotlib__pandas_CO20-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Calculates the square of each number of `b` in vectorized fashion.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_python__numpy__matplotlib__pandas_CO20-3)'
  prefs: []
  type: TYPE_NORMAL
- en: Defines a function `f` via a `lambda` constructor.
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_python__numpy__matplotlib__pandas_CO20-4)'
  prefs: []
  type: TYPE_NORMAL
- en: Applies `f` to the `ndarray` object `a` using vectorization.
  prefs: []
  type: TYPE_NORMAL
- en: 'In many scenarios, only a (small) part of the data stored in an `ndarray` object
    is of interest. `NumPy` supports basic and advanced slicing and other selection
    features:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_python__numpy__matplotlib__pandas_CO21-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Selects the third to sixth elements.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_python__numpy__matplotlib__pandas_CO21-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Selects the third row and fifth (final) row.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_python__numpy__matplotlib__pandas_CO21-3)'
  prefs: []
  type: TYPE_NORMAL
- en: Picks out the middle square from the `b` object.
  prefs: []
  type: TYPE_NORMAL
- en: Boolean Operations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Boolean operations are also supported in many places:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_python__numpy__matplotlib__pandas_CO22-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Which numbers are greater than 10?
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_python__numpy__matplotlib__pandas_CO22-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Return all those numbers greater than 10.
  prefs: []
  type: TYPE_NORMAL
- en: ndarray Methods and NumPy Functions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Furthermore, `ndarray` objects have multiple (convenience) methods already
    built in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_python__numpy__matplotlib__pandas_CO23-1)'
  prefs: []
  type: TYPE_NORMAL
- en: The sum of all elements.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_python__numpy__matplotlib__pandas_CO23-2)'
  prefs: []
  type: TYPE_NORMAL
- en: The mean of all elements.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_python__numpy__matplotlib__pandas_CO23-3)'
  prefs: []
  type: TYPE_NORMAL
- en: The mean along the first axis.
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_python__numpy__matplotlib__pandas_CO23-4)'
  prefs: []
  type: TYPE_NORMAL
- en: The mean along the second axis.
  prefs: []
  type: TYPE_NORMAL
- en: '[![5](assets/5.png)](#co_python__numpy__matplotlib__pandas_CO23-5)'
  prefs: []
  type: TYPE_NORMAL
- en: The standard deviation over all elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, there is a wealth of so-called *universal functions* that the `NumPy`
    package provides. They are universal in the sense that they can be applied in
    general to `NumPy` `ndarray` objects and to standard numerical Python data types.
    For details, see [Universal functions (ufunc)](https://oreil.ly/Ogiah):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_python__numpy__matplotlib__pandas_CO24-1)'
  prefs: []
  type: TYPE_NORMAL
- en: The sum of all elements.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_python__numpy__matplotlib__pandas_CO24-2)'
  prefs: []
  type: TYPE_NORMAL
- en: The mean along the first axis.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_python__numpy__matplotlib__pandas_CO24-3)'
  prefs: []
  type: TYPE_NORMAL
- en: The sine value for all elements rounded to two digits.
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_python__numpy__matplotlib__pandas_CO24-4)'
  prefs: []
  type: TYPE_NORMAL
- en: The sine value of a Python `float` object.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, you should be aware that applying `NumPy` universal functions to standard
    Python data types generally comes with a significant performance burden:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_python__numpy__matplotlib__pandas_CO25-1)'
  prefs: []
  type: TYPE_NORMAL
- en: List comprehension using `NumPy` universal function on Python `float` objects.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_python__numpy__matplotlib__pandas_CO25-2)'
  prefs: []
  type: TYPE_NORMAL
- en: List comprehension using `math` function on Python `float` objects.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the other hand, using the vectorized operations from `NumPy` on `ndarray`
    objects is faster than both of the preceding alternatives that result in `list`
    objects. However, the speed advantage often comes at the cost of a larger, or
    even huge, memory footprint:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_python__numpy__matplotlib__pandas_CO26-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Vectorized calculation of the sine values with `NumPy`, which is much faster
    in general.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_python__numpy__matplotlib__pandas_CO26-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Imports the `sys` module with many system-related functions.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_python__numpy__matplotlib__pandas_CO26-3)'
  prefs: []
  type: TYPE_NORMAL
- en: Shows the size of the `a` object in memory.
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_python__numpy__matplotlib__pandas_CO26-4)'
  prefs: []
  type: TYPE_NORMAL
- en: Shows the number of bytes used to store the data in the `a` object.
  prefs: []
  type: TYPE_NORMAL
- en: Vectorization sometimes is a very useful approach to write concise code that
    is often also much faster than Python code. However, be aware of the memory footprint
    that vectorization can have in many scenarios relevant to finance. Often, there
    are alternative implementations of algorithms available that are memory efficient
    and that, by using performance libraries such as `Numba` or `Cython`, can even
    be faster. See Hilpisch (2018, ch. 10).
  prefs: []
  type: TYPE_NORMAL
- en: ndarray Creation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here, we use the ndarray object constructor `np.arange()`, which yields an
    `ndarray` object of integers. The following is a simple example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_python__numpy__matplotlib__pandas_CO27-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Instantiates an `ndarray` object via the `np.arange()` constructor.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_python__numpy__matplotlib__pandas_CO27-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Prints out the values.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_python__numpy__matplotlib__pandas_CO27-3)'
  prefs: []
  type: TYPE_NORMAL
- en: The resulting `dtype` is `np.int64`.
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_python__numpy__matplotlib__pandas_CO27-4)'
  prefs: []
  type: TYPE_NORMAL
- en: Uses `arange()` again, but this time with `start`, `end`, and `step` parameters.
  prefs: []
  type: TYPE_NORMAL
- en: '[![5](assets/5.png)](#co_python__numpy__matplotlib__pandas_CO27-5)'
  prefs: []
  type: TYPE_NORMAL
- en: Prints out the values.
  prefs: []
  type: TYPE_NORMAL
- en: '[![6](assets/6.png)](#co_python__numpy__matplotlib__pandas_CO27-6)'
  prefs: []
  type: TYPE_NORMAL
- en: The resulting `dtype` is `np.float64`.
  prefs: []
  type: TYPE_NORMAL
- en: '[![7](assets/7.png)](#co_python__numpy__matplotlib__pandas_CO27-7)'
  prefs: []
  type: TYPE_NORMAL
- en: Uses the `linspace()` constructor, which evenly spaces the interval between
    0 and 10 in 11 intervals, giving back an `ndarray` object with 12 values.
  prefs: []
  type: TYPE_NORMAL
- en: Random Numbers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In financial analytics, one often needs random^([1](app01.html#idm45785328416584))
    numbers. `NumPy` provides many functions to sample from different distributions.
    Those regularly needed in quantitative finance are the standard normal distribution
    and the Poisson distribution. The respective functions are found in the sub-package
    `numpy.random`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_python__numpy__matplotlib__pandas_CO28-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Draws ten standard normally distributed random numbers.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_python__numpy__matplotlib__pandas_CO28-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Draws ten Poisson distributed random numbers.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_python__numpy__matplotlib__pandas_CO28-3)'
  prefs: []
  type: TYPE_NORMAL
- en: Fixes the seed value of the random number generator for repeatability.
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_python__numpy__matplotlib__pandas_CO28-4)'
  prefs: []
  type: TYPE_NORMAL
- en: Generates a two-dimensional `ndarray` object with random numbers.
  prefs: []
  type: TYPE_NORMAL
- en: '[![5](assets/5.png)](#co_python__numpy__matplotlib__pandas_CO28-5)'
  prefs: []
  type: TYPE_NORMAL
- en: Prints a small selection of the numbers.
  prefs: []
  type: TYPE_NORMAL
- en: '[![6](assets/6.png)](#co_python__numpy__matplotlib__pandas_CO28-6)'
  prefs: []
  type: TYPE_NORMAL
- en: The mean of all values is close to `0` but not exactly `0`.
  prefs: []
  type: TYPE_NORMAL
- en: '[![7](assets/7.png)](#co_python__numpy__matplotlib__pandas_CO28-7)'
  prefs: []
  type: TYPE_NORMAL
- en: The standard deviation is close to `1` but not exactly `1`.
  prefs: []
  type: TYPE_NORMAL
- en: '[![8](assets/8.png)](#co_python__numpy__matplotlib__pandas_CO28-8)'
  prefs: []
  type: TYPE_NORMAL
- en: The first moment is corrected in vectorized fashion.
  prefs: []
  type: TYPE_NORMAL
- en: '[![9](assets/9.png)](#co_python__numpy__matplotlib__pandas_CO28-9)'
  prefs: []
  type: TYPE_NORMAL
- en: The mean now is “almost equal” to `0`.
  prefs: []
  type: TYPE_NORMAL
- en: '[![10](assets/10.png)](#co_python__numpy__matplotlib__pandas_CO28-10)'
  prefs: []
  type: TYPE_NORMAL
- en: The second moment is corrected in vectorized fashion.
  prefs: []
  type: TYPE_NORMAL
- en: '[![11](assets/11.png)](#co_python__numpy__matplotlib__pandas_CO28-11)'
  prefs: []
  type: TYPE_NORMAL
- en: The standard deviation is now exactly `1`.
  prefs: []
  type: TYPE_NORMAL
- en: matplotlib
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At this point, it makes sense to introduce plotting with [`matplotlib`](http://matplotlib.org),
    the plotting workhorse in the Python ecosystem. We use `matplotlib` with the settings
    of another library throughout, namely [`seaborn`](https://oreil.ly/SWvT6). This
    results in a more modern plotting style. The following code generates [Figure A-1](#plot_01):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_python__numpy__matplotlib__pandas_CO29-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Imports the main plotting library.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_python__numpy__matplotlib__pandas_CO29-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Sets new plot style defaults.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_python__numpy__matplotlib__pandas_CO29-3)'
  prefs: []
  type: TYPE_NORMAL
- en: Imports the top level module.
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_python__numpy__matplotlib__pandas_CO29-4)'
  prefs: []
  type: TYPE_NORMAL
- en: Sets the resolution to 300 DPI (for saving) and the font to `serif`.
  prefs: []
  type: TYPE_NORMAL
- en: '[![5](assets/5.png)](#co_python__numpy__matplotlib__pandas_CO29-6)'
  prefs: []
  type: TYPE_NORMAL
- en: Generates an `ndarray` object with random numbers.
  prefs: []
  type: TYPE_NORMAL
- en: '[![6](assets/6.png)](#co_python__numpy__matplotlib__pandas_CO29-7)'
  prefs: []
  type: TYPE_NORMAL
- en: Instantiates a new `figure` object.
  prefs: []
  type: TYPE_NORMAL
- en: '[![7](assets/7.png)](#co_python__numpy__matplotlib__pandas_CO29-8)'
  prefs: []
  type: TYPE_NORMAL
- en: First calculates the cumulative sum over all elements of the `ndarray` object
    and then plots the result.
  prefs: []
  type: TYPE_NORMAL
- en: '![pfat aa01](assets/pfat_aa01.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure A-1\. Line plot with `matplotlib`
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Multiple line plots in a single `figure` object are also easy to generate (see
    [Figure A-2](#plot_02)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_python__numpy__matplotlib__pandas_CO30-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Instantiates a new `figure` objects and defines the size.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_python__numpy__matplotlib__pandas_CO30-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Plots five lines by calculating the cumulative sum along the first axis and
    defines a label.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_python__numpy__matplotlib__pandas_CO30-3)'
  prefs: []
  type: TYPE_NORMAL
- en: Puts a legend in the optimal position (`loc=0`).
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_python__numpy__matplotlib__pandas_CO30-4)'
  prefs: []
  type: TYPE_NORMAL
- en: Adds a label to the x-axis.
  prefs: []
  type: TYPE_NORMAL
- en: '[![5](assets/5.png)](#co_python__numpy__matplotlib__pandas_CO30-5)'
  prefs: []
  type: TYPE_NORMAL
- en: Adds a label to the y-axis.
  prefs: []
  type: TYPE_NORMAL
- en: '[![6](assets/6.png)](#co_python__numpy__matplotlib__pandas_CO30-6)'
  prefs: []
  type: TYPE_NORMAL
- en: Adds a title to the figure.
  prefs: []
  type: TYPE_NORMAL
- en: '![pfat aa02](assets/pfat_aa02.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure A-2\. Plot with multiple lines
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Other important plotting types are histograms and bar charts. A histogram for
    all 500 values of the `data` object is shown as [Figure A-3](#plot_03). In the
    code, the `.flatten()` method is used to generate a one-dimensional array from
    the two-dimensional one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_python__numpy__matplotlib__pandas_CO31-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Plots the histogram with 30 bins (data groups).
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, consider the bar chart presented in [Figure A-4](#plot_04), generated
    by the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_python__numpy__matplotlib__pandas_CO32-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Plots a bar chart based on a small sub-set of the original data set.
  prefs: []
  type: TYPE_NORMAL
- en: '![pfat aa03](assets/pfat_aa03.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure A-3\. Histogram of random data
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '![pfat aa04](assets/pfat_aa04.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure A-4\. Bar chart of random data
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'To conclude the introduction to `matplotlib`, consider the ordinary least squares
    (OLS) regression of the sample data displayed in [Figure A-5](#plot_05). `NumPy`
    provides with the two functions `polyfit` and `polyval` convenience functions
    to implement OLS based on simple monomials, <math alttext="x comma x squared comma
    x cubed comma period period period comma x Superscript n"><mrow><mi>x</mi> <mo>,</mo>
    <msup><mi>x</mi> <mn>2</mn></msup> <mo>,</mo> <msup><mi>x</mi> <mn>3</mn></msup>
    <mo>,</mo> <mo>.</mo> <mo>.</mo> <mo>.</mo> <mo>,</mo> <msup><mi>x</mi> <mi>n</mi></msup></mrow></math>
    . For illustration purposes, consider linear, cubic, and ninth degree OLS regression
    (see [Figure A-5](#plot_05)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_python__numpy__matplotlib__pandas_CO33-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Creates an `ndarray` object for the `x` values.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_python__numpy__matplotlib__pandas_CO33-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Defines the `y` values as the cumulative sum of the `data` object.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_python__numpy__matplotlib__pandas_CO33-3)'
  prefs: []
  type: TYPE_NORMAL
- en: Linear regression.
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_python__numpy__matplotlib__pandas_CO33-4)'
  prefs: []
  type: TYPE_NORMAL
- en: Cubic regression.
  prefs: []
  type: TYPE_NORMAL
- en: '[![5](assets/5.png)](#co_python__numpy__matplotlib__pandas_CO33-5)'
  prefs: []
  type: TYPE_NORMAL
- en: Ninth degree regression.
  prefs: []
  type: TYPE_NORMAL
- en: '[![6](assets/6.png)](#co_python__numpy__matplotlib__pandas_CO33-6)'
  prefs: []
  type: TYPE_NORMAL
- en: The new `figure` object.
  prefs: []
  type: TYPE_NORMAL
- en: '[![7](assets/7.png)](#co_python__numpy__matplotlib__pandas_CO33-7)'
  prefs: []
  type: TYPE_NORMAL
- en: The base data.
  prefs: []
  type: TYPE_NORMAL
- en: '[![8](assets/8.png)](#co_python__numpy__matplotlib__pandas_CO33-8)'
  prefs: []
  type: TYPE_NORMAL
- en: The regression results visualized.
  prefs: []
  type: TYPE_NORMAL
- en: '[![9](assets/9.png)](#co_python__numpy__matplotlib__pandas_CO33-11)'
  prefs: []
  type: TYPE_NORMAL
- en: Places a legend.
  prefs: []
  type: TYPE_NORMAL
- en: '![pfat aa05](assets/pfat_aa05.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure A-5\. Linear, cubic, and 9th degree regression
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: pandas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`pandas` is a package with which one can manage and operate on time series
    data and other tabular data structures efficiently. It allows implementation of
    even sophisticated data analytics tasks on pretty large data sets in-memory. While
    the focus lies on in-memory operations, there are also multiple options for out-of-memory
    (on-disk) operations. Although `pandas` provides a number of different data structures,
    embodied by powerful classes, the most commonly used structure is the `DataFrame`
    class, which resembles a typical table of a relational (SQL) database and is used
    to manage, for instance, financial time series data. This is what we focus on
    in this section.'
  prefs: []
  type: TYPE_NORMAL
- en: DataFrame Class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In its most basic form, a `DataFrame` object is characterized by an index,
    column names, and tabular data. To make this more specific, consider the following
    sample data set:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_python__numpy__matplotlib__pandas_CO34-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Imports the `pandas` package.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_python__numpy__matplotlib__pandas_CO34-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Fixes the seed value of the random number generator of `NumPy`.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_python__numpy__matplotlib__pandas_CO34-3)'
  prefs: []
  type: TYPE_NORMAL
- en: Creates an `ndarray` object with random numbers.
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_python__numpy__matplotlib__pandas_CO34-4)'
  prefs: []
  type: TYPE_NORMAL
- en: Defines a `DatetimeIndex` object with some dates.
  prefs: []
  type: TYPE_NORMAL
- en: '[![5](assets/5.png)](#co_python__numpy__matplotlib__pandas_CO34-5)'
  prefs: []
  type: TYPE_NORMAL
- en: Defines a `list` object containing the column names (labels).
  prefs: []
  type: TYPE_NORMAL
- en: '[![6](assets/6.png)](#co_python__numpy__matplotlib__pandas_CO34-6)'
  prefs: []
  type: TYPE_NORMAL
- en: Instantiates a `DataFrame` object.
  prefs: []
  type: TYPE_NORMAL
- en: '[![7](assets/7.png)](#co_python__numpy__matplotlib__pandas_CO34-7)'
  prefs: []
  type: TYPE_NORMAL
- en: Shows the `str` (HTML) representation of the new object.
  prefs: []
  type: TYPE_NORMAL
- en: '`DataFrame` objects have built in a multitude of basic, advanced, and convenience
    methods, a few of which are illustrated in the Python code that follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_python__numpy__matplotlib__pandas_CO35-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Shows the first five data rows.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_python__numpy__matplotlib__pandas_CO35-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Shows the last five data rows.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_python__numpy__matplotlib__pandas_CO35-3)'
  prefs: []
  type: TYPE_NORMAL
- en: Prints the `index` attribute of the object.
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_python__numpy__matplotlib__pandas_CO35-4)'
  prefs: []
  type: TYPE_NORMAL
- en: Prints the `column` attribute of the object.
  prefs: []
  type: TYPE_NORMAL
- en: '[![5](assets/5.png)](#co_python__numpy__matplotlib__pandas_CO35-5)'
  prefs: []
  type: TYPE_NORMAL
- en: Shows some meta data about the object.
  prefs: []
  type: TYPE_NORMAL
- en: '[![6](assets/6.png)](#co_python__numpy__matplotlib__pandas_CO35-6)'
  prefs: []
  type: TYPE_NORMAL
- en: Provides selected summary statistics about the data.
  prefs: []
  type: TYPE_NORMAL
- en: While `NumPy` provides a specialized data structure for multi-dimensional arrays
    (with numerical data in general), `pandas` takes specialization one step further
    to tabular (two-dimensional) data with the `DataFrame` class. In particular, `pandas`
    is strong in handling financial time series data, as subsequent examples illustrate.
  prefs: []
  type: TYPE_NORMAL
- en: Numerical Operations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Numerical operations are in general as easy with `DataFrame` objects as with
    `NumPy` `ndarray` objects. They are also quite close in terms of syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_python__numpy__matplotlib__pandas_CO36-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Scalar (vectorized) multiplication of all elements.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_python__numpy__matplotlib__pandas_CO36-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Calculates the column-wise standard deviation…
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_python__numpy__matplotlib__pandas_CO36-3)'
  prefs: []
  type: TYPE_NORMAL
- en: …and mean value. With `DataFrame` objects, column-wise operations are the default.
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_python__numpy__matplotlib__pandas_CO36-4)'
  prefs: []
  type: TYPE_NORMAL
- en: Calculates the mean value per index value (that is, row-wise).
  prefs: []
  type: TYPE_NORMAL
- en: '[![5](assets/5.png)](#co_python__numpy__matplotlib__pandas_CO36-5)'
  prefs: []
  type: TYPE_NORMAL
- en: Applies a function of `NumPy` to the `DataFrame` object.
  prefs: []
  type: TYPE_NORMAL
- en: Data Selection
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Pieces of data can be looked up via different mechanisms:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_python__numpy__matplotlib__pandas_CO37-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Selects a column by name.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_python__numpy__matplotlib__pandas_CO37-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Selects a row by index position.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_python__numpy__matplotlib__pandas_CO37-3)'
  prefs: []
  type: TYPE_NORMAL
- en: Selects two rows by index position.
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_python__numpy__matplotlib__pandas_CO37-4)'
  prefs: []
  type: TYPE_NORMAL
- en: Selects two row values from one column by index positions.
  prefs: []
  type: TYPE_NORMAL
- en: '[![5](assets/5.png)](#co_python__numpy__matplotlib__pandas_CO37-5)'
  prefs: []
  type: TYPE_NORMAL
- en: Uses the dot lookup syntax to select a column.
  prefs: []
  type: TYPE_NORMAL
- en: '[![6](assets/6.png)](#co_python__numpy__matplotlib__pandas_CO37-6)'
  prefs: []
  type: TYPE_NORMAL
- en: Selects a row by index value.
  prefs: []
  type: TYPE_NORMAL
- en: '[![7](assets/7.png)](#co_python__numpy__matplotlib__pandas_CO37-7)'
  prefs: []
  type: TYPE_NORMAL
- en: Selects a single data point by index value and column name.
  prefs: []
  type: TYPE_NORMAL
- en: '[![8](assets/8.png)](#co_python__numpy__matplotlib__pandas_CO37-8)'
  prefs: []
  type: TYPE_NORMAL
- en: Implements a vectorized arithmetic operation.
  prefs: []
  type: TYPE_NORMAL
- en: Boolean Operations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Data selection based on Boolean operations is also a strength of pandas:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_python__numpy__matplotlib__pandas_CO38-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Which values in column `no3` are greater than 0.5?
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_python__numpy__matplotlib__pandas_CO38-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Select all such rows for which the condition is `True`.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_python__numpy__matplotlib__pandas_CO38-3)'
  prefs: []
  type: TYPE_NORMAL
- en: Combines two conditions with the `&` (bitwise `and`) operator; `|` is the bitwise
    `or` operator.
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_python__numpy__matplotlib__pandas_CO38-4)'
  prefs: []
  type: TYPE_NORMAL
- en: Selects all rows with index values greater (later) than `'2020-5-15'` (here,
    based on `str` object sorting).
  prefs: []
  type: TYPE_NORMAL
- en: '[![5](assets/5.png)](#co_python__numpy__matplotlib__pandas_CO38-5)'
  prefs: []
  type: TYPE_NORMAL
- en: Uses the `.query()` method to select rows given conditions as `str` objects.
  prefs: []
  type: TYPE_NORMAL
- en: Plotting with pandas
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`pandas` is well integrated with the `matplotlib` plotting package, which makes
    it convenient to plot data stored in `DataFrame` objects. In general, a single
    method call does the trick already (see [Figure A-6](#plot_06)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_python__numpy__matplotlib__pandas_CO39-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Plots the data as a line plot (column-wise) and fixes the figure size.
  prefs: []
  type: TYPE_NORMAL
- en: '![pfat aa06](assets/pfat_aa06.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure A-6\. Line plot with `pandas`
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '`pandas` takes care of the proper formatting of the index values, dates in
    this case. This only works for a `DatetimeIndex` properly. If the date-time information
    is available as `str` objects only, the `DatetimeIndex()` constructor can be used
    to transform the date-time information easily:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_python__numpy__matplotlib__pandas_CO40-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Date-time index data as a `list` object of `str` objects.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_python__numpy__matplotlib__pandas_CO40-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Generates a `DatetimeIndex` object out of the `list` object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Histograms are also generated this way. In both cases, `pandas` takes care
    of the handling of the single columns and automatically generates single lines
    (with respective legend entries, see [Figure A-6](#plot_06)) and generates respective
    sub-plots with three different histograms (as in [Figure A-7](#plot_07)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_python__numpy__matplotlib__pandas_CO41-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Generates a histogram for each column.
  prefs: []
  type: TYPE_NORMAL
- en: '![pfat aa07](assets/pfat_aa07.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure A-7\. Histograms with `pandas`
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: Input-Output Operations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Yet another strength of `pandas` is the exporting and importing of data to
    and from diverse data storage formats (see also [Chapter 3](ch03.html#financial_data)).
    Consider the case of comma separated value (CSV) files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_python__numpy__matplotlib__pandas_CO42-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Writes the data to disk as a CSV file.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_python__numpy__matplotlib__pandas_CO42-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Opens that file and prints the contents line by line.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_python__numpy__matplotlib__pandas_CO42-3)'
  prefs: []
  type: TYPE_NORMAL
- en: Reads the data stored in the CSV file into a new `DataFrame` object.
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_python__numpy__matplotlib__pandas_CO42-4)'
  prefs: []
  type: TYPE_NORMAL
- en: Defines the first column to be the `index` column.
  prefs: []
  type: TYPE_NORMAL
- en: '[![5](assets/5.png)](#co_python__numpy__matplotlib__pandas_CO42-5)'
  prefs: []
  type: TYPE_NORMAL
- en: Date-time information in the index column shall be transformed to `Timestamp`
    objects.
  prefs: []
  type: TYPE_NORMAL
- en: '[![6](assets/6.png)](#co_python__numpy__matplotlib__pandas_CO42-6)'
  prefs: []
  type: TYPE_NORMAL
- en: Prints the first five rows of the new `DataFrame` object.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, in general, you would store `DataFrame` objects on disk in more efficient
    binary formats like [HDF5](http://hdfgroup.org). `pandas` in this case wraps the
    functionality of the [`PyTables` package](http://pytables.org). The constructor
    function to be used is `HDFStore`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_python__numpy__matplotlib__pandas_CO43-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Opens an `HDFStore` object.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_python__numpy__matplotlib__pandas_CO43-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Writes the `DataFrame` object (the data) to the `HDFStore`.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_python__numpy__matplotlib__pandas_CO43-3)'
  prefs: []
  type: TYPE_NORMAL
- en: Shows the structure/contents of the database file.
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_python__numpy__matplotlib__pandas_CO43-4)'
  prefs: []
  type: TYPE_NORMAL
- en: Reads the data into a new `DataFrame` object.
  prefs: []
  type: TYPE_NORMAL
- en: '[![5](assets/5.png)](#co_python__numpy__matplotlib__pandas_CO43-5)'
  prefs: []
  type: TYPE_NORMAL
- en: Closes the `HDFStore` object.
  prefs: []
  type: TYPE_NORMAL
- en: '[![6](assets/6.png)](#co_python__numpy__matplotlib__pandas_CO43-6)'
  prefs: []
  type: TYPE_NORMAL
- en: Shows the final five rows of the new `DataFrame` object.
  prefs: []
  type: TYPE_NORMAL
- en: '[![7](assets/7.png)](#co_python__numpy__matplotlib__pandas_CO43-7)'
  prefs: []
  type: TYPE_NORMAL
- en: Removes the CSV and HDF5 files.
  prefs: []
  type: TYPE_NORMAL
- en: Case Study
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When it comes to financial data, there are useful data importing functions
    available in the `pandas` package (see also [Chapter 3](ch03.html#financial_data)).
    The following code reads historical daily data for the S&P 500 index and the VIX
    volatility index from a CSV file stored on a remote server using the `pd.read_csv()`
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_python__numpy__matplotlib__pandas_CO44-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Imports the `pandas` package.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_python__numpy__matplotlib__pandas_CO44-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Reads historical data for the S&P 500 stock index from a CSV file (data from
    Refinitiv Eikon Data API).
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_python__numpy__matplotlib__pandas_CO44-3)'
  prefs: []
  type: TYPE_NORMAL
- en: Shows the meta information for the resulting `DataFrame` object.
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_python__numpy__matplotlib__pandas_CO44-4)'
  prefs: []
  type: TYPE_NORMAL
- en: Reads historical data for the VIX volatility index.
  prefs: []
  type: TYPE_NORMAL
- en: '[![5](assets/5.png)](#co_python__numpy__matplotlib__pandas_CO44-5)'
  prefs: []
  type: TYPE_NORMAL
- en: Shows the meta information for the resulting `DataFrame` object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us combine the respective `Close` columns into a single `DataFrame` object.
    Multiple ways are possible to accomplish this goal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_python__numpy__matplotlib__pandas_CO45-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Uses the `join` method to combine the relevant data sub-sets.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_python__numpy__matplotlib__pandas_CO45-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Uses the `merge` function for the combination.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_python__numpy__matplotlib__pandas_CO45-3)'
  prefs: []
  type: TYPE_NORMAL
- en: Uses the `DataFrame` constructor in combination with a `dict` object as input.
  prefs: []
  type: TYPE_NORMAL
- en: 'Having available the combined data in a single object makes visual analysis
    straightforward (see [Figure A-8](#example_01)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_python__numpy__matplotlib__pandas_CO46-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Plots the two data sub-sets into separate sub-plots.
  prefs: []
  type: TYPE_NORMAL
- en: '![pfat aa08](assets/pfat_aa08.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure A-8\. Historical end-of-day closing values for the S&P 500 and VIX
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: '`pandas` also allows vectorized operations on whole `DataFrame` objects. The
    following code calculates the log returns over the two columns of the `spxvix`
    object simultaneously in vectorized fashion. The `shift` method shifts the data
    set by the number of index values as provided (in this particular case, by one
    trading day):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_python__numpy__matplotlib__pandas_CO47-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Calculates the log returns for the two time series in fully vectorized fashion.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_python__numpy__matplotlib__pandas_CO47-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Drops all rows containing `NaN` values (“not a number”).
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_python__numpy__matplotlib__pandas_CO47-3)'
  prefs: []
  type: TYPE_NORMAL
- en: Shows the first five rows of the new `DataFrame` object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the plot in [Figure A-9](#example_02) showing the VIX log returns
    against the SPX log returns in a scatter plot with a linear regression. It illustrates
    a strong negative correlation between the two indexes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_python__numpy__matplotlib__pandas_CO48-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Implements a linear regression on the two log return data sets.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_python__numpy__matplotlib__pandas_CO48-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Creates a scatter plot of the log returns.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_python__numpy__matplotlib__pandas_CO48-3)'
  prefs: []
  type: TYPE_NORMAL
- en: Plots the linear regression line in the existing scatter plot.
  prefs: []
  type: TYPE_NORMAL
- en: '![pfat aa09](assets/pfat_aa09.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure A-9\. Scatter plot of S&P 500 and VIX log returns with linear regression
    line
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'Having financial time series data stored in a `pandas` `DataFrame` object makes
    the calculation of typical statistics straightforward:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_python__numpy__matplotlib__pandas_CO49-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Calculates the annualized mean return for the two indexes.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_python__numpy__matplotlib__pandas_CO49-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Calculates the annualized standard deviation.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_python__numpy__matplotlib__pandas_CO49-3)'
  prefs: []
  type: TYPE_NORMAL
- en: Calculates the Sharpe ratio for a risk-free short rate of 1%.
  prefs: []
  type: TYPE_NORMAL
- en: 'The maximum drawdown, which we only calculate for the S&P 500 index, is a bit
    more involved. For its calculation, we use the `.cummax()` method, which records
    the running, historical maximum of the time series up to a certain date. Consider
    the following code that generates the plot in [Figure A-10](#example_03):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_python__numpy__matplotlib__pandas_CO50-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Instantiates a new `figure` object.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_python__numpy__matplotlib__pandas_CO50-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Plots the historical closing values for the S&P 500 index.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_python__numpy__matplotlib__pandas_CO50-3)'
  prefs: []
  type: TYPE_NORMAL
- en: Calculates and plots the running maximum over time.
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_python__numpy__matplotlib__pandas_CO50-4)'
  prefs: []
  type: TYPE_NORMAL
- en: Places a legend on the canvas.
  prefs: []
  type: TYPE_NORMAL
- en: '![pfat aa10](assets/pfat_aa10.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure A-10\. Historical closing prices of S&P 500 index and running maximum
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
- en: 'The *absolute maximum drawdown* is the largest difference between the running
    maximum and the current index level. In our particular case, it is about 580 index
    points. The *relative maximum drawdown* might sometimes be a bit more meaningful.
    It is here a value of about 20%:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_python__numpy__matplotlib__pandas_CO51-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Derives the *absolute* maximum drawdown.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_python__numpy__matplotlib__pandas_CO51-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Derives the *relative* maximum drawdown.
  prefs: []
  type: TYPE_NORMAL
- en: 'The longest drawdown period is calculated as follows. The following code selects
    all those data points where the drawdown is zero (where a new maximum is reached).
    It then calculates the difference between two consecutive index values (trading
    dates) for which the drawdown is zero and takes the maximum value. Given the data
    set we are analyzing, the longest drawdown period is 417 days:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: '[![1](assets/1.png)](#co_python__numpy__matplotlib__pandas_CO52-1)'
  prefs: []
  type: TYPE_NORMAL
- en: Picks out all index positions where the drawdown is 0.
  prefs: []
  type: TYPE_NORMAL
- en: '[![2](assets/2.png)](#co_python__numpy__matplotlib__pandas_CO52-2)'
  prefs: []
  type: TYPE_NORMAL
- en: Calculates the `timedelta` values between all such index positions.
  prefs: []
  type: TYPE_NORMAL
- en: '[![3](assets/3.png)](#co_python__numpy__matplotlib__pandas_CO52-3)'
  prefs: []
  type: TYPE_NORMAL
- en: Shows a select few of these values.
  prefs: []
  type: TYPE_NORMAL
- en: '[![4](assets/4.png)](#co_python__numpy__matplotlib__pandas_CO52-4)'
  prefs: []
  type: TYPE_NORMAL
- en: Picks out the maximum value for the result.
  prefs: []
  type: TYPE_NORMAL
- en: Conclusions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This appendix provides a concise, introductory overview of selected topics relevant
    to use Python, `NumPy`, `matplotlib`, and `pandas` in the context of algorithmic
    trading. It cannot, of course, replace a thorough training and practical experience,
    but it helps those who want to get started quickly and who are willing to dive
    deeper into the details where necessary.
  prefs: []
  type: TYPE_NORMAL
- en: Further Resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A valuable, free source for the topics covered in this appendix are the [Scipy
    Lecture Notes](http://scipy-lectures.org) that are available in multiple electronic
    formats. Also freely available is the online book [From Python to NumPy](https://oreil.ly/vo54e)
    by Nicolas Rougier.
  prefs: []
  type: TYPE_NORMAL
- en: 'Books cited in this appendix:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Hilpisch, Yves. 2018\. *Python for Finance*. 2nd ed. Sebastopol: O’Reilly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'McKinney, Wes. 2017\. *Python for Data Analysis*. 2nd ed. Sebastopol: O’Reilly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'VanderPlas, Jake. 2017\. *Python Data Science Handbook*. Sebastopol: O’Reilly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ^([1](app01.html#idm45785328416584-marker)) Note that computers can only generate
    *pseudorandom* numbers as approximations for *truly random* numbers.
  prefs: []
  type: TYPE_NORMAL

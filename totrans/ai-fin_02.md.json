["```py\nIn [1]: import numpy as np\n        import pandas as pd\n        from pylab import plt, mpl\n        plt.style.use('seaborn')\n        mpl.rcParams['savefig.dpi'] = 300\n        mpl.rcParams['font.family'] = 'serif'\n        np.set_printoptions(precision=4, suppress=True)\n\nIn [2]: from sklearn.cluster import KMeans\n        from sklearn.datasets import make_blobs\n\nIn [3]: x, y = make_blobs(n_samples=100, centers=4,\n                          random_state=500, cluster_std=1.25)  ![1](Images/1.png)\n\nIn [4]: model = KMeans(n_clusters=4, random_state=0)  ![2](Images/2.png)\n\nIn [5]: model.fit(x)  ![3](Images/3.png)\nOut[5]: KMeans(n_clusters=4, random_state=0)\n\nIn [6]: y_ = model.predict(x)  ![4](Images/4.png)\n\nIn [7]: y_  ![5](Images/5.png)\nOut[7]: array([3, 3, 1, 2, 1, 1, 3, 2, 1, 2, 2, 3, 2, 0, 0, 3, 2, 0, 2, 0, 0, 3,\n               1, 2, 1, 1, 0, 0, 1, 3, 2, 1, 1, 0, 1, 3, 1, 3, 2, 2, 2, 1, 0, 0,\n               3, 1, 2, 0, 2, 0, 3, 0, 1, 0, 1, 3, 1, 2, 0, 3, 1, 0, 3, 2, 3, 0,\n               1, 1, 1, 2, 3, 1, 2, 0, 2, 3, 2, 0, 2, 2, 1, 3, 1, 3, 2, 2, 3, 2,\n               0, 0, 0, 3, 3, 3, 3, 0, 3, 1, 0, 0], dtype=int32)\n\nIn [8]: plt.figure(figsize=(10, 6))\n        plt.scatter(x[:, 0], x[:, 1], c=y_,  cmap='coolwarm');\n```", "```py\nIn [9]: ssp = [1, 1, 1, 1, 0]  ![1](Images/1.png)\n\nIn [10]: asp = [1, 0]  ![2](Images/2.png)\n\nIn [11]: def epoch():\n             tr = 0\n             for _ in range(100):\n                 a = np.random.choice(asp)  ![3](Images/3.png)\n                 s = np.random.choice(ssp)  ![4](Images/4.png)\n                 if a == s:\n                     tr += 1  ![5](Images/5.png)\n             return tr\n\nIn [12]: rl = np.array([epoch() for _ in range(15)])  ![6](Images/6.png)\n         rl\nOut[12]: array([53, 55, 50, 48, 46, 41, 51, 49, 50, 52, 46, 47, 43, 51, 52])\n\nIn [13]: rl.mean()  ![7](Images/7.png)\nOut[13]: 48.93333333333333\n```", "```py\nIn [14]: ssp = [1, 1, 1, 1, 0]\n\nIn [15]: def epoch():\n             tr = 0\n             asp = [0, 1]  ![1](Images/1.png)\n             for _ in range(100):\n                 a = np.random.choice(asp)\n                 s = np.random.choice(ssp)\n                 if a == s:\n                     tr += 1\n                 asp.append(s)  ![2](Images/2.png)\n             return tr\n\nIn [16]: rl = np.array([epoch() for _ in range(15)])\n         rl\nOut[16]: array([64, 65, 77, 65, 54, 64, 71, 64, 57, 62, 69, 63, 61, 66, 75])\n\nIn [17]: rl.mean()\nOut[17]: 65.13333333333334\n```", "```py\nIn [18]: def f(x):\n             return 2 * x ** 2 - x ** 3 / 3  ![1](Images/1.png)\n\nIn [19]: x = np.linspace(-2, 4, 25)  ![2](Images/2.png)\n         x  ![2](Images/2.png)\nOut[19]: array([-2.  , -1.75, -1.5 , -1.25, -1.  , -0.75, -0.5 , -0.25,  0.  ,\n                 0.25,  0.5 ,  0.75,  1.  ,  1.25,  1.5 ,  1.75,  2.  ,  2.25,\n                 2.5 ,  2.75,  3.  ,  3.25,  3.5 ,  3.75,  4.  ])\n\nIn [20]: y = f(x)  ![3](Images/3.png)\n         y  ![3](Images/3.png)\nOut[20]: array([10.6667,  7.9115,  5.625 ,  3.776 ,  2.3333,  1.2656,  0.5417,\n                 0.1302,  0.    ,  0.1198,  0.4583,  0.9844,  1.6667,  2.474 ,\n                 3.375 ,  4.3385,  5.3333,  6.3281,  7.2917,  8.1927,  9.    ,\n                 9.6823, 10.2083, 10.5469, 10.6667])\n\nIn [21]: plt.figure(figsize=(10, 6))\n         plt.plot(x, y, 'ro');\n```", "```py\nIn [22]: beta = np.cov(x, y, ddof=0)[0, 1] / np.var(x)  ![1](Images/1.png)\n         beta  ![1](Images/1.png)\nOut[22]: 1.0541666666666667\n\nIn [23]: alpha = y.mean() - beta * x.mean()  ![2](Images/2.png)\n         alpha  ![2](Images/2.png)\nOut[23]: 3.8625000000000003\n\nIn [24]: y_ = alpha + beta * x  ![3](Images/3.png)\n\nIn [25]: MSE = ((y - y_) ** 2).mean()  ![4](Images/4.png)\n         MSE  ![4](Images/4.png)\nOut[25]: 10.721953125\n\nIn [26]: plt.figure(figsize=(10, 6))\n         plt.plot(x, y, 'ro', label='sample data')\n         plt.plot(x, y_, lw=3.0, label='linear regression')\n         plt.legend();\n```", "```py\nIn [27]: plt.figure(figsize=(10, 6))\n         plt.plot(x, y, 'ro', label='sample data')\n         for deg in [1, 2, 3]:\n             reg = np.polyfit(x, y, deg=deg)  ![1](Images/1.png)\n             y_ = np.polyval(reg, x)  ![2](Images/2.png)\n             MSE = ((y - y_) ** 2).mean()  ![3](Images/3.png)\n             print(f'deg={deg} | MSE={MSE:.5f}')\n             plt.plot(x, np.polyval(reg, x), label=f'deg={deg}')\n         plt.legend();\n         deg=1 | MSE=10.72195\n         deg=2 | MSE=2.31258\n         deg=3 | MSE=0.00000\n\nIn [28]: reg  ![4](Images/4.png)\nOut[28]: array([-0.3333,  2.    ,  0.    , -0.    ])\n```", "```py\nIn [29]: from sklearn.neural_network import MLPRegressor\n\nIn [30]: model = MLPRegressor(hidden_layer_sizes=3 * [256],\n                              learning_rate_init=0.03,\n                              max_iter=5000)  ![1](Images/1.png)\n\nIn [31]: model.fit(x.reshape(-1, 1), y)  ![2](Images/2.png)\nOut[31]: MLPRegressor(hidden_layer_sizes=[256, 256, 256], learning_rate_init=0.03,\n                      max_iter=5000)\n\nIn [32]: y_ = model.predict(x.reshape(-1, 1))  ![3](Images/3.png)\n\nIn [33]: MSE = ((y - y_) ** 2).mean()\n         MSE\nOut[33]: 0.021662355744355866\n\nIn [34]: plt.figure(figsize=(10, 6))\n         plt.plot(x, y, 'ro', label='sample data')\n         plt.plot(x, y_, lw=3.0, label='dnn estimation')\n         plt.legend();\n```", "```py\nIn [35]: import tensorflow as tf\n         tf.random.set_seed(100)\n\nIn [36]: from keras.layers import Dense\n         from keras.models import Sequential\n         Using TensorFlow backend.\n\nIn [37]: model = Sequential()  ![1](Images/1.png)\n         model.add(Dense(256, activation='relu', input_dim=1)) ![2](Images/2.png)\n         model.add(Dense(1, activation='linear'))  ![3](Images/3.png)\n         model.compile(loss='mse', optimizer='rmsprop')  ![4](Images/4.png)\n\nIn [38]: ((y - y_) ** 2).mean()\nOut[38]: 0.021662355744355866\n\nIn [39]: plt.figure(figsize=(10, 6))\n         plt.plot(x, y, 'ro', label='sample data')\n         for _ in range(1, 6):\n             model.fit(x, y, epochs=100, verbose=False)  ![5](Images/5.png)\n             y_ =  model.predict(x)  ![6](Images/6.png)\n             MSE = ((y - y_.flatten()) ** 2).mean()  ![7](Images/7.png)\n             print(f'round={_} | MSE={MSE:.5f}')\n             plt.plot(x, y_, '--', label=f'round={_}')  ![8](Images/8.png)\n         plt.legend();\n         round=1 | MSE=3.09714\n         round=2 | MSE=0.75603\n         round=3 | MSE=0.22814\n         round=4 | MSE=0.11861\n         round=5 | MSE=0.09029\n```", "```py\nIn [40]: np.random.seed(0)\n         x = np.linspace(-1, 1)\n         y = np.random.random(len(x)) * 2 - 1\n\nIn [41]: plt.figure(figsize=(10, 6))\n         plt.plot(x, y, 'ro', label='sample data')\n         for deg in [1, 5, 9, 11, 13, 15]:\n             reg = np.polyfit(x, y, deg=deg)\n             y_ = np.polyval(reg, x)\n             MSE = ((y - y_) ** 2).mean()\n             print(f'deg={deg:2d} | MSE={MSE:.5f}')\n             plt.plot(x, np.polyval(reg, x), label=f'deg={deg}')\n         plt.legend();\n         deg= 1 | MSE=0.28153\n         deg= 5 | MSE=0.27331\n         deg= 9 | MSE=0.25442\n         deg=11 | MSE=0.23458\n         deg=13 | MSE=0.22989\n         deg=15 | MSE=0.21672\n```", "```py\nIn [42]: model = Sequential()\n         model.add(Dense(256, activation='relu', input_dim=1))\n         for _ in range(3):\n             model.add(Dense(256, activation='relu'))  ![1](Images/1.png)\n         model.add(Dense(1, activation='linear'))\n         model.compile(loss='mse', optimizer='rmsprop')\n\nIn [43]: model.summary()  ![2](Images/2.png)\n         Model: \"sequential_2\"\n         _________________________________________________________________\n         Layer (type)                 Output Shape              Param #\n         =================================================================\n         dense_3 (Dense)              (None, 256)               512\n         _________________________________________________________________\n         dense_4 (Dense)              (None, 256)               65792\n         _________________________________________________________________\n         dense_5 (Dense)              (None, 256)               65792\n         _________________________________________________________________\n         dense_6 (Dense)              (None, 256)               65792\n         _________________________________________________________________\n         dense_7 (Dense)              (None, 1)                 257\n         =================================================================\n         Total params: 198,145\n         Trainable params: 198,145\n         Non-trainable params: 0\n         _________________________________________________________________\n\nIn [44]: %%time\n         plt.figure(figsize=(10, 6))\n         plt.plot(x, y, 'ro', label='sample data')\n         for _ in range(1, 8):\n             model.fit(x, y, epochs=500, verbose=False)\n             y_ =  model.predict(x)\n             MSE = ((y - y_.flatten()) ** 2).mean()\n             print(f'round={_} | MSE={MSE:.5f}')\n             plt.plot(x, y_, '--', label=f'round={_}')\n         plt.legend();\n         round=1 | MSE=0.13560\n         round=2 | MSE=0.08337\n         round=3 | MSE=0.06281\n         round=4 | MSE=0.04419\n         round=5 | MSE=0.03329\n         round=6 | MSE=0.07676\n         round=7 | MSE=0.00431\n         CPU times: user 30.4 s, sys: 4.7 s, total: 35.1 s\n         Wall time: 13.6 s\n```", "```py\nIn [45]: f = 5\n         n = 10\n\nIn [46]: np.random.seed(100)\n\nIn [47]: x = np.random.randint(0, 2, (n, f))  ![1](Images/1.png)\n         x  ![1](Images/1.png)\nOut[47]: array([[0, 0, 1, 1, 1],\n                [1, 0, 0, 0, 0],\n                [0, 1, 0, 0, 0],\n                [0, 1, 0, 0, 1],\n                [0, 1, 0, 0, 0],\n                [1, 1, 1, 0, 0],\n                [1, 0, 0, 1, 1],\n                [1, 1, 1, 0, 0],\n                [1, 1, 1, 1, 1],\n                [1, 1, 1, 0, 1]])\n\nIn [48]: y = np.random.randint(0, 2, n)  ![2](Images/2.png)\n         y  ![2](Images/2.png)\nOut[48]: array([1, 1, 0, 0, 1, 1, 0, 1, 0, 1])\n\nIn [49]: model = Sequential()\n         model.add(Dense(256, activation='relu', input_dim=f))\n         model.add(Dense(1, activation='sigmoid'))  ![3](Images/3.png)\n         model.compile(loss='binary_crossentropy', optimizer='rmsprop',\n                      metrics=['acc'])  ![4](Images/4.png)\n\nIn [50]: model.fit(x, y, epochs=50, verbose=False)\nOut[50]: <keras.callbacks.callbacks.History at 0x7fde09dd1cd0>\n\nIn [51]: y_ = np.where(model.predict(x).flatten() > 0.5, 1, 0)\n         y_\nOut[51]: array([1, 1, 0, 0, 0, 1, 0, 1, 0, 1], dtype=int32)\n\nIn [52]: y == y_  ![5](Images/5.png)\nOut[52]: array([ True,  True,  True,  True, False,  True,  True,  True,  True,\n                 True])\n\nIn [53]: res = pd.DataFrame(model.history.history)  ![6](Images/6.png)\n\nIn [54]: res.plot(figsize=(10, 6));  ![6](Images/6.png)\n```", "```py\nIn [55]: f = 10\n         n = 250\n\nIn [56]: np.random.seed(100)\n\nIn [57]: x = np.random.randint(0, 2, (n, f))  ![1](Images/1.png)\n         x[:4]  ![1](Images/1.png)\nOut[57]: array([[0, 0, 1, 1, 1, 1, 0, 0, 0, 0],\n                [0, 1, 0, 0, 0, 0, 1, 0, 0, 1],\n                [0, 1, 0, 0, 0, 1, 1, 1, 0, 0],\n                [1, 0, 0, 1, 1, 1, 1, 1, 0, 0]])\n\nIn [58]: y = np.random.randint(0, 2, n)  ![2](Images/2.png)\n         y[:4]  ![2](Images/2.png)\nOut[58]: array([0, 1, 0, 0])\n\nIn [59]: 2 ** f  ![3](Images/3.png)\nOut[59]: 1024\n```", "```py\nIn [60]: fcols = [f'f{_}' for _ in range(f)]  ![1](Images/1.png)\n         fcols  ![1](Images/1.png)\nOut[60]: ['f0', 'f1', 'f2', 'f3', 'f4', 'f5', 'f6', 'f7', 'f8', 'f9']\n\nIn [61]: data = pd.DataFrame(x, columns=fcols)  ![2](Images/2.png)\n         data['l'] = y  ![3](Images/3.png)\n\nIn [62]: data.info()  ![4](Images/4.png)\n         <class 'pandas.core.frame.DataFrame'>\n         RangeIndex: 250 entries, 0 to 249\n         Data columns (total 11 columns):\n          #   Column  Non-Null Count  Dtype\n         ---  ------  --------------  -----\n          0   f0      250 non-null    int64\n          1   f1      250 non-null    int64\n          2   f2      250 non-null    int64\n          3   f3      250 non-null    int64\n          4   f4      250 non-null    int64\n          5   f5      250 non-null    int64\n          6   f6      250 non-null    int64\n          7   f7      250 non-null    int64\n          8   f8      250 non-null    int64\n          9   f9      250 non-null    int64\n          10  l       250 non-null    int64\n         dtypes: int64(11)\n         memory usage: 21.6 KB\n```", "```py\nIn [63]: grouped = data.groupby(list(data.columns))  ![1](Images/1.png)\n\nIn [64]: freq = grouped['l'].size().unstack(fill_value=0)  ![2](Images/2.png)\n\nIn [65]: freq['sum'] = freq[0] + freq[1]  ![3](Images/3.png)\n\nIn [66]: freq.head(10)  ![4](Images/4.png)\nOut[66]: l                              0  1  sum\n         f0 f1 f2 f3 f4 f5 f6 f7 f8 f9\n         0  0  0  0  0  0  0  1  1  1   0  1    1\n                           1  0  1  0   1  1    2\n                                    1   0  1    1\n                        1  0  0  0  0   1  0    1\n                                    1   0  1    1\n                              1  1  1   0  1    1\n                           1  0  0  0   0  1    1\n                                 1  0   0  1    1\n                     1  0  0  0  1  1   1  0    1\n                           1  1  0  0   1  0    1\n\nIn [67]: freq['sum'].describe().astype(int)  ![5](Images/5.png)\nOut[67]: count    227\n         mean       1\n         std        0\n         min        1\n         25%        1\n         50%        1\n         75%        1\n         max        2\n         Name: sum, dtype: int64\n```", "```py\nIn [68]: from sklearn.neural_network import MLPClassifier\n         from sklearn.metrics import accuracy_score\n\nIn [69]: model = MLPClassifier(hidden_layer_sizes=[128, 128, 128],\n                               max_iter=1000, random_state=100)\n\nIn [70]: model.fit(data[fcols], data['l'])\nOut[70]: MLPClassifier(hidden_layer_sizes=[128, 128, 128], max_iter=1000,\n                       random_state=100)\n\nIn [71]: accuracy_score(data['l'], model.predict(data[fcols]))\nOut[71]: 0.952\n```", "```py\nIn [72]: split = int(len(data) * 0.7)  ![1](Images/1.png)\n\nIn [73]: train = data[:split]  ![1](Images/1.png)\n         test = data[split:]  ![1](Images/1.png)\n\nIn [74]: model.fit(train[fcols], train['l'])  ![2](Images/2.png)\nOut[74]: MLPClassifier(hidden_layer_sizes=[128, 128, 128], max_iter=1000,\n                       random_state=100)\n\nIn [75]: accuracy_score(train['l'], model.predict(train[fcols]))  ![3](Images/3.png)\nOut[75]: 0.9714285714285714\n\nIn [76]: accuracy_score(test['l'], model.predict(test[fcols]))  ![4](Images/4.png)\nOut[76]: 0.38666666666666666\n```", "```py\nIn [77]: factor = 50\n\nIn [78]: big = pd.DataFrame(np.random.randint(0, 2, (factor * n, f)),\n                            columns=fcols)\n\nIn [79]: big['l'] = np.random.randint(0, 2, factor * n)\n\nIn [80]: train = big[:split]\n         test = big[split:]\n\nIn [81]: model.fit(train[fcols], train['l'])\nOut[81]: MLPClassifier(hidden_layer_sizes=[128, 128, 128], max_iter=1000,\n                       random_state=100)\n\nIn [82]: accuracy_score(train['l'], model.predict(train[fcols]))  ![1](Images/1.png)\nOut[82]: 0.9657142857142857\n\nIn [83]: accuracy_score(test['l'], model.predict(test[fcols]))  ![2](Images/2.png)\nOut[83]: 0.5043407707910751\n```", "```py\nIn [84]: grouped = big.groupby(list(data.columns))\n\nIn [85]: freq = grouped['l'].size().unstack(fill_value=0)\n\nIn [86]: freq['sum'] = freq[0] + freq[1]  ![1](Images/1.png)\n\nIn [87]: freq.head(6)\nOut[87]: l                               0  1  sum\n         f0 f1 f2 f3 f4 f5 f6 f7 f8 f9\n         0  0  0  0  0  0  0  0  0  0   10  9   19\n                                    1    5  4    9\n                                 1  0    2  5    7\n                                    1    6  6   12\n                              1  0  0    9  8   17\n                                    1    7  4   11\n\nIn [88]: freq['sum'].describe().astype(int)  ![2](Images/2.png)\nOut[88]: count    1024\n         mean       12\n         std         3\n         min         2\n         25%        10\n         50%        12\n         75%        15\n         max        26\n         Name: sum, dtype: int64\n```", "```py\nIn [89]: 8 ** 25\nOut[89]: 37778931862957161709568\n```"]
["```py\nIn [1]: 1 + 3  ![1](Images/1.png)\nOut[1]: 4\n\nIn [2]: 3 * 4  ![2](Images/2.png)\nOut[2]: 12\n\nIn [3]: t = 0  ![3](Images/3.png)\n\nIn [4]: t  ![4](Images/4.png)\nOut[4]: 0\n\nIn [5]: t = 1  ![5](Images/5.png)\n\nIn [6]: type(t)  ![6](Images/6.png)\nOut[6]: int\n```", "```py\nIn [7]: 1 + 0.5   ![1](Images/1.png)\nOut[7]: 1.5\n\nIn [8]: 10.5 - 2  ![2](Images/2.png)\nOut[8]: 8.5\n\nIn [9]: c = 2 + 0.75  ![3](Images/3.png)\n\nIn [10]: c  ![4](Images/4.png)\nOut[10]: 2.75\n\nIn [11]: type(c)  ![5](Images/5.png)\nOut[11]: float\n```", "```py\nIn [12]: c0 = -9.5  ![1](Images/1.png)\n\nIn [13]: c1 = 11.75  ![2](Images/2.png)\n\nIn [14]: c = (c0, c1)  ![3](Images/3.png)\n\nIn [15]: c  ![4](Images/4.png)\nOut[15]: (-9.5, 11.75)\n\nIn [16]: type(c)  ![5](Images/5.png)\nOut[16]: tuple\n\nIn [17]: c[0]  ![6](Images/6.png)\nOut[17]: -9.5\n\nIn [18]: c[1]  ![7](Images/7.png)\nOut[18]: 11.75\n```", "```py\nIn [19]: c = [c0, c1]  ![1](Images/1.png)\n\nIn [20]: c  ![2](Images/2.png)\nOut[20]: [-9.5, 11.75]\n\nIn [21]: type(c)  ![3](Images/3.png)\nOut[21]: list\n\nIn [22]: c[0]  ![4](Images/4.png)\nOut[22]: -9.5\n\nIn [23]: c[1]  ![5](Images/5.png)\nOut[23]: 11.75\n\nIn [24]: c[0] = 10  ![6](Images/6.png)\n\nIn [25]: c  ![7](Images/7.png)\nOut[25]: [10, 11.75]\n```", "```py\nIn [26]: c = (-10, 12)  ![1](Images/1.png)\n\nIn [27]: R = sum(c)  ![2](Images/2.png)\n\nIn [28]: R  ![3](Images/3.png)\nOut[28]: 2\n\nIn [29]: r = R / abs(c[0])  ![4](Images/4.png)\n\nIn [30]: r  ![5](Images/5.png)\nOut[30]: 0.2\n```", "```py\nIn [31]: i = 0.1  ![1](Images/1.png)\n\nIn [32]: def D(c1):  ![2](Images/2.png)\n             return c1 / (1 + i)  ![3](Images/3.png)\n\nIn [33]: D(12.1)  ![4](Images/4.png)\nOut[33]: 10.999999999999998\n\nIn [34]: D(11)  ![5](Images/5.png)\nOut[34]: 10.0\n```", "```py\nIn [35]: def NPV(c):\n             return c[0] + D(c[1])\n\nIn [36]: cA = (-10.5, 12.1)  ![1](Images/1.png)\n\nIn [37]: cB = (-10.5, 11)  ![2](Images/2.png)\n\nIn [38]: NPV(cA)  ![1](Images/1.png)\nOut[38]: 0.4999999999999982\n\nIn [39]: NPV(cB)  ![2](Images/2.png)\nOut[39]: -0.5\n```", "```py\nIn [40]: import numpy as np  ![1](Images/1.png)\n\nIn [41]: c0 = -10  ![2](Images/2.png)\n\nIn [42]: c1 = np.array((20, 5))  ![3](Images/3.png)\n\nIn [43]: type(c1)  ![4](Images/4.png)\nOut[43]: numpy.ndarray\n\nIn [44]: c1  ![5](Images/5.png)\nOut[44]: array([20,  5])\n\nIn [45]: c = (c0, c1)  ![6](Images/6.png)\n\nIn [46]: c  ![7](Images/7.png)\nOut[46]: (-10, array([20,  5]))\n\nIn [47]: 1.5 * c1 + 2  ![8](Images/8.png)\nOut[47]: array([32. ,  9.5])\n\nIn [48]: c1 + 1.5 * np.array((10, 4))  ![9](Images/9.png)\nOut[48]: array([35., 11.])\n```", "```py\nIn [49]: S0 = 10  ![1](Images/1.png)\n\nIn [50]: S1 = np.array((12.5, 7.5))  ![2](Images/2.png)\n\nIn [51]: S = (S0, S1)  ![3](Images/3.png)\n\nIn [52]: S  ![4](Images/4.png)\nOut[52]: (10, array([12.5,  7.5]))\n\nIn [53]: S[0]  ![5](Images/5.png)\nOut[53]: 10\n\nIn [54]: S[1][0]  ![6](Images/6.png)\nOut[54]: 12.5\n\nIn [55]: S[1][1]  ![7](Images/7.png)\nOut[55]: 7.5\n```", "```py\nIn [56]: p = 0.4\n\nIn [57]: 1 - p\nOut[57]: 0.6\n\nIn [58]: P = np.array((p, 1-p))\n\nIn [59]: P\nOut[59]: array([0.4, 0.6])\n```", "```py\nIn [60]: P  ![1](Images/1.png)\nOut[60]: array([0.4, 0.6])\n\nIn [61]: S0 = 10  ![2](Images/2.png)\n\nIn [62]: S1 = np.array((20, 5))  ![3](Images/3.png)\n\nIn [63]: np.dot(P, S1)  ![4](Images/4.png)\nOut[63]: 11.0\n```", "```py\nIn [64]: def ER(x0, x1):\n             return np.dot(P, x1) - x0  ![1](Images/1.png)\n\nIn [65]: ER(S0, S1)  ![2](Images/2.png)\nOut[65]: 1.0\n\nIn [66]: def mu(x0, x1):\n             return (np.dot(P, x1) - x0) / x0  ![3](Images/3.png)\n\nIn [67]: mu(S0, S1)  ![4](Images/4.png)\nOut[67]: 0.1\n```", "```py\nIn [68]: def r(x0, x1):\n             return (x1 - x0) / x0  ![1](Images/1.png)\n\nIn [69]: r(S0, S1)  ![2](Images/2.png)\nOut[69]: array([ 1. , -0.5])\n\nIn [70]: mu = np.dot(P, r(S0, S1))  ![3](Images/3.png)\n\nIn [71]: mu  ![4](Images/4.png)\nOut[71]: 0.10000000000000003\n\nIn [72]: def sigma2(P, r, mu):\n             return np.dot(P, (r - mu) ** 2)  ![5](Images/5.png)\n\nIn [73]: sigma2(P, r(S0, S1), mu)  ![6](Images/6.png)\nOut[73]: 0.54\n\nIn [74]: def sigma(P, r, mu):\n             return np.sqrt(np.dot(P, (r - mu) ** 2))  ![7](Images/7.png)\n\nIn [75]: sigma(P, r(S0, S1), mu)  ![8](Images/8.png)\nOut[75]: 0.7348469228349535\n```", "```py\nIn [76]: S1 = np.arange(20)  ![1](Images/1.png)\n\nIn [77]: S1[:7]  ![2](Images/2.png)\nOut[77]: array([0, 1, 2, 3, 4, 5, 6])\n\nIn [78]: K = 10  ![3](Images/3.png)\n\nIn [79]: C1 = np.maximum(S1 - K, 0)  ![4](Images/4.png)\n\nIn [80]: C1  ![5](Images/5.png)\nOut[80]: array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\nIn [81]: from pylab import mpl, plt  ![6](Images/6.png)\n         # plotting configuration\n         plt.style.use('seaborn')\n         mpl.rcParams['savefig.dpi'] = 300\n         mpl.rcParams['font.family'] = 'serif'\n\nIn [82]: plt.figure(figsize=(10, 6))\n         plt.plot(S1, C1, lw = 3.0, label='$C_1 = \\max(S_1 - K, 0)$')  ![7](Images/7.png)\n         plt.legend(loc=0)  ![8](Images/8.png)\n         plt.xlabel('$S_1$')  ![9](Images/9.png)\n         plt.ylabel('$C_1$');  ![10](Images/10.png)\n```", "```py\nIn [83]: B = (10, np.array((11, 11)))  ![1](Images/1.png)\n\nIn [84]: S = (10, np.array((20, 5)))  ![2](Images/2.png)\n\nIn [85]: M = np.array((B[1], S[1])).T  ![3](Images/3.png)\n\nIn [86]: M  ![4](Images/4.png)\nOut[86]: array([[11, 20],\n                [11,  5]])\n\nIn [87]: K = 15  ![5](Images/5.png)\n\nIn [88]: C1 = np.maximum(S[1] - K, 0)  ![6](Images/6.png)\n\nIn [89]: C1  ![7](Images/7.png)\nOut[89]: array([5, 0])\n\nIn [90]: phi = np.linalg.solve(M, C1)  ![8](Images/8.png)\n\nIn [91]: phi  ![8](Images/8.png)\nOut[91]: array([-0.15151515,  0.33333333])\n```", "```py\nIn [92]: C0 = np.dot(phi, (B[0], S[0]))\n\nIn [93]: C0\nOut[93]: 1.8181818181818183\n\nIn [94]: 10/3 - 50/33\nOut[94]: 1.8181818181818183\n```", "```py\nIn [95]: from numpy.random import default_rng\n         rng = default_rng(100)  ![1](Images/1.png)\n\nIn [96]: n = 1000  ![2](Images/2.png)\n\nIn [97]: b = rng.random(n)  ![3](Images/3.png)\n\nIn [98]: b[:5]  ![3](Images/3.png)\nOut[98]: array([0.83498163, 0.59655403, 0.28886324, 0.04295157, 0.9736544 ])\n\nIn [99]: s = (1 - b)  ![4](Images/4.png)\n\nIn [100]: s[:5]  ![4](Images/4.png)\nOut[100]: array([0.16501837, 0.40344597, 0.71113676, 0.95704843, 0.0263456 ])\n\nIn [101]: def portfolio(b, s):\n              A = [b[i] * B[1] + s[i] * S[1] for i in range(n)]  ![5](Images/5.png)\n              return np.array(A)  ![6](Images/6.png)\n\nIn [102]: A = portfolio(b, s)  ![7](Images/7.png)\n\nIn [103]: A[:3]  ![7](Images/7.png)\nOut[103]: array([[12.48516533, 10.00988978],\n                 [14.63101376,  8.57932416],\n                 [17.40023082,  6.73317945]])\n\nIn [104]: plt.figure(figsize=(10, 6))\n          plt.plot(A[:, 0], A[:, 1], 'r.');  ![8](Images/8.png)\n```", "```py\nIn [105]: s = rng.random(n)  ![1](Images/1.png)\n\nIn [106]: b[:5] + s[:5]\nOut[106]: array([1.36885777, 1.5863474 , 0.71245805, 0.32077672, 1.5401562 ])\n\nIn [107]: A = portfolio(b, s)  ![2](Images/2.png)\n\nIn [108]: plt.figure(figsize=(10, 6))\n          plt.plot(A[:, 0], A[:, 1], 'r.');\n```", "```py\nIn [109]: b = rng.standard_normal(n)  ![1](Images/1.png)\n\nIn [110]: s = rng.standard_normal(n)  ![1](Images/1.png)\n\nIn [111]: b[:5] + s[:5]  ![1](Images/1.png)\nOut[111]: array([-0.23046605, -3.45760465,  1.10260637, -2.44445777,\n           1.05866637])\n\nIn [112]: A = portfolio(b, s)\n\nIn [113]: plt.figure(figsize=(10, 6))\n          plt.plot(A[:, 0], A[:, 1], 'r.');\n```", "```py\nIn [114]: i = (B[1][0] - B[0]) / B[0]\n\nIn [115]: i\nOut[115]: 0.1\n\nIn [116]: q = (S[0] * (1 + i) - S[1][1]) / (S[1][0] - S[1][1])\n\nIn [117]: q\nOut[117]: 0.4\n```", "```py\nIn [118]: Q = (q, 1 - q)  ![1](Images/1.png)\n\nIn [119]: np.dot(Q, C1) / (1 + i)  ![2](Images/2.png)\nOut[119]: 1.8181818181818181\n```", "```py\nIn [120]: B = (10, np.array((11, 11)))\n\nIn [121]: S = (10, np.array((20, 5)))\n\nIn [122]: M = np.array((B[1], S[1])).T  ![1](Images/1.png)\n\nIn [123]: M  ![1](Images/1.png)\nOut[123]: array([[11, 20],\n                 [11,  5]])\n\nIn [124]: M0 = np.array((B[0], S[0]))  ![2](Images/2.png)\n\nIn [125]: R = M / M0 - 1  ![3](Images/3.png)\n\nIn [126]: R  ![4](Images/4.png)\nOut[126]: array([[ 0.1,  1. ],\n                 [ 0.1, -0.5]])\n\nIn [127]: P = np.array((0.5, 0.5))  ![5](Images/5.png)\n```", "```py\nIn [128]: np.dot(P, R)  ![1](Images/1.png)\nOut[128]: array([0.1 , 0.25])\n\nIn [129]: s = 0.55  ![2](Images/2.png)\n\nIn [130]: phi = (1-s, s)  ![3](Images/3.png)\n\nIn [131]: mu = np.dot(phi, np.dot(P, R))  ![4](Images/4.png)\n\nIn [132]: mu  ![5](Images/5.png)\nOut[132]: 0.18250000000000005\n\nIn [133]: sigma = s * R[:, 1].std()  ![6](Images/6.png)\n\nIn [134]: sigma  ![7](Images/7.png)\nOut[134]: 0.41250000000000003\n```", "```py\nIn [135]: values = np.linspace(0, 1, 25)  ![1](Images/1.png)\n\nIn [136]: mu = [np.dot(((1-s), s), np.dot(P, R))\n                for s in values]  ![2](Images/2.png)\n\nIn [137]: sigma = [s * R[:, 1].std() for s in values]  ![3](Images/3.png)\n\nIn [138]: plt.figure(figsize=(10, 6))\n          plt.plot(values, mu, lw = 3.0, label='$\\mu_p$')\n          plt.plot(values, sigma, '--', lw = 3.0, label='$\\sigma_p$')\n          plt.legend(loc=0)\n          plt.xlabel('$s$');\n```", "```py\nsigma = list()\nfor s in values:\n    sigma.append(s * R[:, 1].std())\n```", "```py\nIn [139]: plt.figure(figsize=(10, 6))\n          plt.plot(sigma, mu, lw = 3.0, label='risk-return')\n          plt.legend(loc=0)\n          plt.xlabel('$\\sigma_p$')\n          plt.ylabel('$\\mu_p$');\n```"]
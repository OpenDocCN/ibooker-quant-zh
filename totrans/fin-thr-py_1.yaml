- en: Chapter 1\. Finance and Python
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章 金融与Python
- en: The history of finance theory is an interesting example of the interaction between
    abstract theorizing and practical application.
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 金融理论的历史是抽象理论化与实际应用相互作用的有趣例子。
- en: ''
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Frank Milne (1995)
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Frank Milne (1995)
- en: Hedge funds have sucked in tens of billions of dollars in investments in recent
    years, assisted increasingly by technology. The same tech is also benefiting those
    people who make the financial decisions at these organisations.
  id: totrans-4
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 近年来，对冲基金吸引了数十亿美元的投资，越来越多地依靠技术。同样的技术也使得在这些机构做出财务决策的人们受益。
- en: ''
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Laurence Fletcher (2020)
  id: totrans-6
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: Laurence Fletcher (2020)
- en: 'This chapter gives a concise overview of topics relevant for the book. It is
    intended to provide both the financial and technological framework for the chapters
    to follow. [“A Brief History of Finance”](#history_finance) starts by giving a
    brief overview of the history and current state of finance. [“Major Trends in
    Finance”](#major_trends) discusses the major trends that have been driving the
    evolution of finance over time: mathematics, technology, data, and artificial
    intelligence. Against this background, [“A Four-Languages World”](#four_languages)
    argues that finance today is a discipline of four closely interconnected types
    of languages: English, finance, mathematics, and programming. The overall approach
    of the book is explained in [“The Approach of This Book”](#approach_book). [“Getting
    Started with Python”](#python_start) illustrates how an appropriate Python environment
    can be installed on the reader’s computer. However, all the code can be used and
    executed via a regular web browser on the [Quant Platform](http://finpy.pqp.io)
    so that a local Python installation can be set up later.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本章简要概述了本书相关主题。它旨在为接下来的章节提供财务和技术框架。["金融简史"](#history_finance)首先简要介绍了金融的历史和现状。["金融主要趋势"](#major_trends)讨论了推动金融演变的主要趋势：数学、技术、数据和人工智能。在此背景下，["四种语言的世界"](#four_languages)认为当今的金融是四种紧密相互关联的语言学科：英语、金融、数学和编程。本书的整体方法在["本书的方法"](#approach_book)中有详细说明。["Python入门"](#python_start)展示了如何在读者的计算机上安装适当的Python环境。但所有代码也可以通过[Quant平台](http://finpy.pqp.io)的常规Web浏览器使用和执行，以便稍后设置本地Python安装。
- en: A Brief History of Finance
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 金融简史
- en: 'To better understand the current state of finance and the financial industry,
    it is helpful to have a look at how they have developed over time. The history
    of finance as a scientific field can be divided roughly into three periods according
    to Rubinstein (2006):'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 要更好地理解金融及其行业的当前状态，有必要看一看它们如何随时间发展。金融作为一个科学领域的历史可以根据Rubinstein（2006年）的说法大致分为三个时期：
- en: The ancient period (pre-1950)
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 古代时期（1950年前）
- en: A period mainly characterized by informal reasoning, rules of thumb, and the
    experience of market practitioners.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 主要以非正式推理、经验法则和市场从业者的经验为特征的时期。
- en: The classical period (1950–1980)
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 古典时期（1950年至1980年）
- en: A period characterized by the introduction of formal reasoning and mathematics
    to the field. Specialized models (for example, Black and Scholes’s (1973) option
    pricing model) as well as general frameworks (for example, Harrison and Kreps’s
    (1979) risk-neutral pricing approach) were developed during this period.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 主要特点是引入形式推理和数学到该领域。在此期间开发了专业模型（例如，Black和Scholes的（1973年）期权定价模型）以及通用框架（例如，Harrison和Kreps的（1979年）风险中性定价方法）。
- en: The modern period (1980–2000)
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 现代时期（1980年至2000年）
- en: This period generated many advances in specific subfields of finance (for example,
    computational finance) and tackled, among others, important empirical phenomena
    in the financial markets, such as stochastic interest rates (for example, Cox,
    Ingersoll, and Ross (1985)) or stochastic volatility (for example, Heston (1993)).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这一时期在金融的具体子领域中取得了许多进展（例如，计算金融），并处理了金融市场中的重要经验现象，如随机利率（例如，Cox，Ingersoll和Ross（1985年））或随机波动率（例如，Heston（1993年））。
- en: 'Fifteen years after the publication of the Rubinstein (2006) book, we can add
    fourth and fifth periods today. These two periods are responsible for the rise
    and the current omnipresence of Python in finance:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在Rubinstein（2006年）书籍出版十五年后，我们今天可以添加第四和第五个时期。这两个时期促成了Python在金融中的崛起和当前无处不在：
- en: The computational period (2000–2020)
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 计算时期（2000年至2020年）
- en: This period saw a shift from a theoretical focus in finance to a computational
    one, driven by advances in both hardware and software used in finance. The paper
    by Longstaff and Schwartz (2001)—providing an efficient numerical algorithm to
    value American options by Monte Carlo simulation—illustrates this paradigm shift
    quite well. Their algorithm is computationally demanding in that hundreds of thousands
    of simulations and multiple ordinary least-squares regressions are required in
    general to value only a single option (see Hilpisch (2018)).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一时期，金融领域由理论重心向计算重心转变，这一变化受到了金融硬件和软件的进步推动。Longstaff和Schwartz（2001年）提供了一种高效的数值算法，通过蒙特卡罗模拟对美式期权进行估值，很好地展示了这一范式转变。他们的算法在一般情况下对于估值一个单一期权需要进行数十万次模拟和多次普通最小二乘回归。
- en: The artificial intelligence period (post-2020)
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 人工智能时代（2020年后）
- en: Advances in artificial intelligence (AI) and related success stories have spurred
    interest to make use of the capabilities of AI in the financial domain. While
    there are already successful applications of AI in finance (see Hilpisch (2020)),
    it can be assumed that from 2020 onward there will be a systematic paradigm shift
    toward *AI-first finance*. AI-first finance describes the shift from simple, in
    general linear, models in finance to the use of advanced models and algorithms
    from AI—such as deep neural networks or reinforcement learning—to capture, describe,
    and explain financial phenomena.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 人工智能（AI）的进步和相关成功案例促使人们在金融领域利用AI的能力产生了浓厚兴趣。虽然AI在金融中已经有成功的应用（参见Hilpisch（2020）），但可以预期从2020年开始，会逐步向*AI优先金融*的系统范式转变。AI优先金融描述了从金融中简单的、通常是线性的模型向使用AI中的先进模型和算法——如深度神经网络或强化学习——捕捉、描述和解释金融现象的转变。
- en: Major Trends in Finance
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 金融的主要趋势
- en: 'Like many other subjects and industries, finance has become a more formalized
    scientific discipline over time, driven by the increasing use of formal mathematics,
    advanced technology, increasing data availability, and improved algorithms, such
    as those from AI. Taken together, the evolution of finance over time can therefore
    be characterized by four major trends:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 像许多其他学科和行业一样，金融随着时间的推移变得更加形式化的科学学科，驱动因素包括日益使用的正式数学、先进技术、增加的数据可用性和改进的算法，如来自AI的算法。因此，随着时间的推移，金融的演变可以被四个主要趋势所描述：
- en: Mathematics
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 数学
- en: Starting in the 1950s with the classical period, finance has become a more and
    more formalized discipline, making systematic use of different fields in mathematics,
    like linear algebra or stochastic calculus. The mean-variance portfolio (MVP)
    theory by Markowitz (1952) can be considered a major breakthrough in quantitative
    finance if not its starting point itself—leaving the ancient period characterized
    mainly by informal reasoning behind.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 从1950年代开始的古典时期起，金融变得越来越形式化，系统地利用数学的不同领域，如线性代数或随机微积分。马科维茨（1952年）的均值方差组合理论可以被认为是量化金融的一大突破，如果不是其起始点本身——这使得古代时期主要以非正式推理为特征。
- en: Technology
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 技术
- en: The widespread availability and use of personal computers, workstations, and
    servers, starting mainly in the late 1980s and early 1990s, brought more and more
    technology to the field. While compute power and capacity in the beginning were
    rather limited, they have reached levels as of today that allow us to attack even
    the most complex problems in finance by sheer brute force, often rendering the
    search for rather specialized, efficient models and methods—that characterized
    the classical and modern periods—obsolete. The credo has become “Scale your hardware
    and use modern software in combination with appropriate numerical methods.” On
    the other hand, the modern hardware found in most dorm and living rooms is already
    powerful enough that even high-performance approaches, like parallel processing,
    can generally be used on such commodity hardware—lowering the barriers of entry
    to computational and AI-first finance tremendously.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 个人计算机、工作站和服务器的普及与使用，主要始于20世纪80年代末和90年代初，将更多技术引入了金融领域。尽管计算能力和容量起初相对有限，但如今已经达到了足以攻克金融中甚至最复杂问题的水平，往往通过纯粹的暴力计算，常常使得寻找特定的高效模型和方法——这些特征了古典和现代时期的模式——变得过时。如今的硬件主张变成了“扩展您的硬件，并结合现代软件和适当的数值方法使用”。另一方面，大多数宿舍和起居室中现代硬件已经足够强大，以至于甚至高性能的方法，如并行处理，通常可以在这类大众硬件上使用——极大地降低了计算和AI优先金融的准入门槛。
- en: Data
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 数据
- en: While researchers and practitioners alike mainly relied on printed financial
    information and data in the ancient and classical periods (think of the *Wall
    Street Journal* or the *Financial Times*), electronic financial data sets have
    become more widely available starting in the modern period. However, the computational
    period has seen an explosion in the availability of financial data. High-frequency
    intraday data sets have become the norm and have replaced end-of-day closing prices
    as the major basis for empirical research. A single stock might generate intraday
    data sets with well over 100,000 data points every trading day—this number is
    roughly the equivalent of 400 years’ worth of end-of-day closing prices for the
    same stock (250 trading days per year times 400 years). Even more recently, a
    proliferation in open or free data sets has been observed, which also significantly
    lowers the barriers of entry to computational finance, algorithmic trading, or
    financial econometrics.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然研究人员和从业者们主要依赖于古代和古典时期印刷的金融信息和数据（想想*华尔街日报*或*金融时报*），但从现代时期开始，电子金融数据集的可用性变得更加广泛。然而，计算时期见证了金融数据可用性的爆炸性增长。高频日内数据集已成为经验研究的主要基础，已取代了每日结束价格。单只股票每个交易日可能会生成超过100,000个数据点的日内数据集——这个数量大致相当于同一只股票400年的每日结束价格（每年250个交易日乘以400年）。最近更进一步，观察到了开放或免费数据集的激增，这也显著降低了进入计算金融、算法交易或金融计量经济学的门槛。
- en: Artificial intelligence
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 人工智能
- en: The availability of ever more financial data (“big financial data”) makes the
    application of AI algorithms—such as those from machine learning, deep learning,
    or reinforcement learning (see Hilpisch (2020))—not only possible but also in
    many cases these days necessary. Traditional statistical methods from financial
    econometrics are often not suited anymore to cope with today’s complexities in
    financial markets. Faced with nonlinear, multidimensional, ever-changing financial
    environments, AI-based algorithms might often be the only option to discover relevant
    relationships and patterns, generate valuable insights, and benefit from improved
    prediction capabilities.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 越来越多的金融数据的可用性（“大数据金融数据”）使得应用AI算法（例如机器学习、深度学习或强化学习，详见Hilpisch (2020)）不仅仅是可能的，而且在许多情况下现在是必需的。传统的金融计量经济学中的传统统计方法通常不再适用于应对当今金融市场的复杂性。面对非线性、多维、不断变化的金融环境，基于AI的算法往往可能是发现相关关系和模式、生成有价值洞察并从改进的预测能力中获益的唯一选择。
- en: By reading this book, the reader lays the foundations in the areas of financial
    mathematics and modern technology used to implement formal financial models. The
    reader also acquires skills to work with typical financial data sets encountered
    in finance. Taken together, this prepares the reader to later on also explore
    more easily advanced topics in computational finance or AI as applied to finance.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 通过阅读本书，读者在金融数学和用于实施正式金融模型的现代技术领域奠定了基础。读者还获得了处理金融领域常见的金融数据集的技能。总之，这为读者更轻松地探索应用于金融的高级主题，如计算金融或AI，做好了准备。
- en: Python and Finance
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 和金融
- en: More and more, finance has become a field driven by computationally demanding
    algorithms, ever-increasing data availability, and AI. Python has proven to be
    the right programming language and technology platform to address the requirements
    and challenges that arise from the major trends observed in the field.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 越来越多的金融领域由计算需求量大的算法、日益增加的数据可用性和AI驱动。Python已被证明是应对该领域观察到的主要趋势所带来的要求和挑战的正确编程语言和技术平台。
- en: A Four-Languages World
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个四语言世界
- en: 'Against this background, finance has become a world of four languages:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在此背景下，金融已经成为一个四语言世界：
- en: Natural language
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 自然语言
- en: Today, the *English* language is the only relevant language in the field when
    it comes to published research, books, articles, or news.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 今天，*英语*语言是该领域在发布的研究、书籍、文章或新闻方面唯一相关的语言。
- en: Financial language
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 金融语言
- en: Like every other field, *finance* has technical terms, notions, and expressions
    that describe certain phenomena or ideas that are usually not relevant in other
    domains.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 像其他领域一样，*金融*有描述某些现象或想法的技术术语、概念和表达，这些在其他领域通常不相关。
- en: Mathematical language
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 数学语言
- en: '*Mathematics* is the tool and language of choice when it comes to formalizing
    the notions and concepts of finance.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '*数学*是在形式化金融的概念和观念方面的首选工具和语言。'
- en: Programming language
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 编程语言
- en: As the quote at the beginning of the preface points out, [*Python*](http://python.org)
    as a programming language has become the language of choice in many corners of
    the financial industry.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 正如前言开头的引语所指出的那样，[*Python*](http://python.org) 作为一种编程语言已经成为金融行业许多领域的首选语言。
- en: 'The mastery of finance therefore requires both the academic and practitioner
    to be fluent in all four languages: English, finance, mathematics, and Python.
    This is *not* to say that, for instance, English and Python are the *only* relevant
    natural or programming languages. It is rather the case that if you have only
    a limited amount of time to learn a programming language, you should most probably
    focus on Python—alongside mathematical finance—on your way to mastery of the field.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，精通金融需要学术界和从业者流利掌握四种语言：英语、财务、数学和Python。这并*不*意味着，例如，英语和Python是*唯一*相关的自然语言或编程语言。相反，如果你只有有限的时间学习一门编程语言，你应该优先选择Python——在学习数学金融的过程中。
- en: The Approach of This Book
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本书的方法论
- en: How does this book approach the four languages needed in finance? The English
    language is a no-brainer—you are reading it already. Yet, three remain.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 本书如何处理金融所需的四种语言？英语是显而易见的——你已经在阅读它了。然而，还有三种语言需要学习。
- en: For example, this book cannot introduce every single piece of mathematics in
    detail that is needed in finance. Nor can it introduce every single concept in
    (Python) programming in detail that is needed in computational finance. However,
    it tries to introduce related concepts from finance, mathematics, and programming
    alongside one another whenever possible and sensible.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，本书无法详细介绍金融所需的每一个数学细节，也无法详细介绍计算金融所需的每一个（Python）编程概念。然而，它在可能和合理的情况下尽量同时介绍金融、数学和编程相关的概念。
- en: 'From [Chapter 2](ch02_split_000.xhtml#two_state_economy) onward, the book introduces
    a financial notion or concept and then illustrates it on the basis of both a mathematical
    representation and the implementation in Python. As an example, have a look at
    the following table from [Chapter 3](ch03.xhtml#three_state_economy). The table
    lists the financial topic, the major mathematical elements, and the major Python
    data structure used to implement the financial mathematics:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 从[第二章](ch02_split_000.xhtml#two_state_economy)开始，本书介绍了一个金融概念，并且分别以数学表示和Python实现为基础进行阐述。例如，请看下面来自[第三章](ch03.xhtml#three_state_economy)的表格。该表格列出了金融主题、主要的数学元素以及用于实现金融数学的主要Python数据结构：
- en: '| Finance | Mathematics | Python |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| 财务 | 数学 | Python |'
- en: '| --- | --- | --- |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Uncertainty | Probability space | `ndarray` |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| 不确定性 | 概率空间 | `ndarray` |'
- en: '| Financial assets | Vectors, matrices | `ndarray` |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| 金融资产 | 向量、矩阵 | `ndarray` |'
- en: '| Attainable contingent claims | Span of vectors, basis of vector space | `ndarray`
    |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| 可实现的偶发索赔 | 向量空间的跨度、向量空间的基 | `ndarray` |'
- en: The following is a walkthrough of one specific example, details of which are
    provided in later chapters. The example is only for illustration of the general
    approach of the book at this point.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个具体示例的步骤，其详细信息在后续章节中提供。此时的示例仅用于说明本书的一般方法论。
- en: 'As an example, take the central concept of *uncertainty* in finance from the
    preceding table. Uncertainty embodies the notion that future states of a model
    economy are not known in advance. Which future state of the economy unfolds might
    be important, for example, to determine the payoff of a European call option.
    In a discrete case, one deals with a finite number of such states, like two, three,
    or more. In the most simple case of two future states only, the payoff of a European
    call option is represented mathematically as a *random variable*, which in turn
    can be represented formally as a *vector* <math alttext="v"><mi>v</mi></math>
    that is itself an element of the *vector space* <math alttext="double-struck upper
    R squared"><msup><mi>ℝ</mi> <mn>2</mn></msup></math> . A vector space is a collection
    of objects—called vectors—for which addition and scalar multiplication are defined.
    Formally, one writes for such a vector <math alttext="v"><mi>v</mi></math> , for
    example:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 举例来说，从前述表格中的金融领域中获取 *不确定性* 的中心概念。不确定性体现了模型经济的未来状态事先不可知的概念。经济的未来状态的不同可能是重要的，例如用于确定欧式看涨期权的支付。在离散情况下，人们处理这种状态的有限数量，如两个、三个或更多。在仅有两个未来状态的最简单情况下，欧式看涨期权的支付在数学上表示为一个
    *随机变量*，进而可以形式化地表示为一个自身是 *向量* <math alttext="v"><mi>v</mi></math> 的 *向量空间* <math
    alttext="double-struck upper R squared"><msup><mi>ℝ</mi> <mn>2</mn></msup></math>
    的元素。向量空间是对象集合，称为向量，对其定义了加法和标量乘法。形式上，对于这样一个向量 <math alttext="v"><mi>v</mi></math>
    ，例如可以写成：
- en: <math mode="display"><mrow><mi>v</mi> <mo>=</mo> <mfenced open="(" close=")"><mtable><mtr><mtd><msup><mi>v</mi>
    <mi>u</mi></msup></mtd></mtr> <mtr><mtd><msup><mi>v</mi> <mi>d</mi></msup></mtd></mtr></mtable></mfenced>
    <mo>∈</mo> <msubsup><mi>ℝ</mi> <mrow><mn>≥0</mn></mrow> <mn>2</mn></msubsup></mrow></math>
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: <math mode="display"><mrow><mi>v</mi> <mo>=</mo> <mfenced open="(" close=")"><mtable><mtr><mtd><msup><mi>v</mi>
    <mi>u</mi></msup></mtd></mtr> <mtr><mtd><msup><mi>v</mi> <mi>d</mi></msup></mtd></mtr></mtable></mfenced>
    <mo>∈</mo> <msubsup><mi>ℝ</mi> <mrow><mn>≥0</mn></mrow> <mn>2</mn></msubsup></mrow></math>
- en: Here, both elements of the vector are assumed to be non-negative real numbers
    <math><mrow><msup><mi>v</mi> <mi>u</mi></msup> <mo>,</mo><msup><mi>v</mi> <mi>d</mi></msup>
    <mo>∈</mo><msub><mi>ℝ</mi> <mrow><mn>≥0</mn></mrow></msub></mrow></math> . More
    concretely, if the uncertain, state-dependent price of the stock on which the
    European call option is written is given in this context by
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在此，假设向量的两个元素都是非负实数 <math><mrow><msup><mi>v</mi> <mi>u</mi></msup> <mo>,</mo><msup><mi>v</mi>
    <mi>d</mi></msup> <mo>∈</mo><msub><mi>ℝ</mi> <mrow><mn>≥0</mn></mrow></msub></mrow></math>
    。更具体地说，如果在此背景下给定的欧式看涨期权所写的股票的不确定、状态相关价格是：
- en: <math mode="display"><mrow><mi>S</mi> <mo>=</mo> <mfenced open="(" close=")"><mtable><mtr><mtd><mn>20</mn></mtd></mtr>
    <mtr><mtd><mn>5</mn></mtd></mtr></mtable></mfenced> <mo>∈</mo> <msubsup><mi>ℝ</mi>
    <mrow><mn>≥0</mn></mrow> <mn>2</mn></msubsup></mrow></math>
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: <math mode="display"><mrow><mi>S</mi> <mo>=</mo> <mfenced open="(" close=")"><mtable><mtr><mtd><mn>20</mn></mtd></mtr>
    <mtr><mtd><mn>5</mn></mtd></mtr></mtable></mfenced> <mo>∈</mo> <msubsup><mi>ℝ</mi>
    <mrow><mn>≥0</mn></mrow> <mn>2</mn></msubsup></mrow></math>
- en: and the strike price of the option is <math alttext="upper K equals 15"><mrow><mi>K</mi>
    <mo>=</mo> <mn>15</mn></mrow></math> , the payoff <math alttext="upper C"><mi>C</mi></math>
    of the European call option is given by
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 若期权的行使价格为 <math alttext="upper K equals 15"><mrow><mi>K</mi> <mo>=</mo> <mn>15</mn></mrow></math>，则欧式看涨期权的支付
    <math alttext="upper C"><mi>C</mi></math> 为
- en: <math mode="display"><mrow><mi>C</mi> <mo>=</mo> <mo movablelimits="true" form="prefix">max</mo>
    <mrow><mo>(</mo> <mi>S</mi> <mo>-</mo> <mi>K</mi> <mo>,</mo> <mn>0</mn> <mo>)</mo></mrow>
    <mo>=</mo> <mfenced open="(" close=")"><mtable><mtr><mtd><mrow><mo movablelimits="true"
    form="prefix">max</mo> <mo>(</mo> <mn>20</mn> <mo>-</mo> <mn>15</mn> <mo>,</mo>
    <mn>0</mn> <mo>)</mo></mrow></mtd></mtr> <mtr><mtd><mrow><mo movablelimits="true"
    form="prefix">max</mo> <mo>(</mo> <mn>5</mn> <mo>-</mo> <mn>15</mn> <mo>,</mo>
    <mn>0</mn> <mo>)</mo></mrow></mtd></mtr></mtable></mfenced> <mo>=</mo> <mfenced
    open="(" close=")"><mtable><mtr><mtd><mn>5</mn></mtd></mtr> <mtr><mtd><mn>0</mn></mtd></mtr></mtable></mfenced>
    <mo>∈</mo> <msubsup><mi>ℝ</mi> <mrow><mn>≥0</mn></mrow> <mn>2</mn></msubsup></mrow></math>
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: <math mode="display"><mrow><mi>C</mi> <mo>=</mo> <mo movablelimits="true" form="prefix">max</mo>
    <mrow><mo>(</mo> <mi>S</mi> <mo>-</mo> <mi>K</mi> <mo>,</mo> <mn>0</mn> <mo>)</mo></mrow>
    <mo>=</mo> <mfenced open="(" close=")"><mtable><mtr><mtd><mrow><mo movablelimits="true"
    form="prefix">max</mo> <mo>(</mo> <mn>20</mn> <mo>-</mo> <mn>15</mn> <mo>,</mo>
    <mn>0</mn> <mo>)</mo></mrow></mtd></mtr> <mtr><mtd><mrow><mo movablelimits="true"
    form="prefix">max</mo> <mo>(</mo> <mn>5</mn> <mo>-</mo> <mn>15</mn> <mo>,</mo>
    <mn>0</mn> <mo>)</mo></mrow></mtd></mtr></mtable></mfenced> <mo>=</mo> <mfenced
    open="(" close=")"><mtable><mtr><mtd><mn>5</mn></mtd></mtr> <mtr><mtd><mn>0</mn></mtd></mtr></mtable></mfenced>
    <mo>∈</mo> <msubsup><mi>ℝ</mi> <mrow><mn>≥0</mn></mrow> <mn>2</mn></msubsup></mrow></math>
- en: This illustrates how the notions of the *uncertain price of a stock* and the
    *state-dependent payoff of a European option* can be modeled mathematically as
    a vector. The discipline dealing with vectors and vector spaces in mathematics
    is called *linear algebra*.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这说明了如何数学上建模 *股票的不确定价格* 和 *欧式期权的状态相关支付* 作为一个向量。处理数学中向量和向量空间的学科称为 *线性代数*。
- en: 'How can all this be translated into Python programming? First, *real numbers*
    are represented as *floating point numbers* or `float` objects in Python:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如何将这一切翻译成Python编程？首先，*实数* 在Python中表示为 *浮点数* 或 `float` 对象：
- en: '[PRE0]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[![1](Images/1.png)](#co_finance_and_python_CO1-1)'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_finance_and_python_CO1-1)'
- en: Defines a variable with the name `vu` and the value 1.5.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 定义一个名为 `vu` 的变量，并赋值为 1.5。
- en: '[![2](Images/2.png)](#co_finance_and_python_CO1-2)'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_finance_and_python_CO1-2)'
- en: Defines a variable with the name `vd` and the value 3.75.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 定义一个名为 `vd` 的变量，并赋值为 3.75。
- en: '[![3](Images/3.png)](#co_finance_and_python_CO1-3)'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_finance_and_python_CO1-3)'
- en: Looks up the type of the `vu` object—it is a `float` object.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 查找 `vu` 对象的类型——它是一个 `float` 对象。
- en: '[![4](Images/4.png)](#co_finance_and_python_CO1-4)'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](Images/4.png)](#co_finance_and_python_CO1-4)'
- en: Adds up the values of `vu` and `vd`.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 计算 `vu` 和 `vd` 的值的总和。
- en: 'Second, one usually calls collections of objects of the same type in programming
    *arrays*. In Python, the package [`NumPy`](http://numpy.org) provides support
    for such data structures. The major data structure provided by this package is
    called `ndarray`, which is an abbreviation for <math alttext="n"><mi>n</mi></math>
    -dimensional array. Real-valued vectors are straightforward to model with `NumPy`:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，在编程中，通常称同一类型对象的集合为 *数组*。在Python中，[`NumPy`](http://numpy.org) 包提供了对这种数据结构的支持。该包提供的主要数据结构称为
    `ndarray`，这是 <math alttext="n"><mi>n</mi></math> 维数组的缩写。用 `NumPy` 可以轻松地建模实数向量：
- en: '[PRE1]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[![1](Images/1.png)](#co_finance_and_python_CO2-1)'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_finance_and_python_CO2-1)'
- en: Imports the `NumPy` package.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 导入 `NumPy` 包。
- en: '[![2](Images/2.png)](#co_finance_and_python_CO2-2)'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_finance_and_python_CO2-2)'
- en: Instantiates an `ndarray` object.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 实例化一个 `ndarray` 对象。
- en: '[![3](Images/3.png)](#co_finance_and_python_CO2-3)'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_finance_and_python_CO2-3)'
- en: Prints out the data stored in the object.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 打印对象中存储的数据。
- en: '[![4](Images/4.png)](#co_finance_and_python_CO2-4)'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](Images/4.png)](#co_finance_and_python_CO2-4)'
- en: Looks up the data type for all elements.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 查找所有元素的数据类型。
- en: '[![5](Images/5.png)](#co_finance_and_python_CO2-5)'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '[![5](Images/5.png)](#co_finance_and_python_CO2-5)'
- en: Looks up the shape of the object.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 查找对象的形状。
- en: '[![6](Images/6.png)](#co_finance_and_python_CO2-6)'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '[![6](Images/6.png)](#co_finance_and_python_CO2-6)'
- en: Vector addition illustrated.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 向量加法的示例。
- en: '[![7](Images/7.png)](#co_finance_and_python_CO2-7)'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '[![7](Images/7.png)](#co_finance_and_python_CO2-7)'
- en: Scalar multiplication illustrated.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 标量乘法的示例。
- en: 'This shows how the mathematical concepts surrounding vectors are represented
    and applied in Python. It is then only one step further to apply those insights
    to finance:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这展示了围绕向量的数学概念如何在 Python 中表示和应用。然后，将这些见解应用于金融只是进一步的一步：
- en: '[PRE2]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[![1](Images/1.png)](#co_finance_and_python_CO3-1)'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '[![1](Images/1.png)](#co_finance_and_python_CO3-1)'
- en: Defines the uncertain price of the stock as an `ndarray` object.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 将股票的不确定价格定义为 `ndarray` 对象。
- en: '[![2](Images/2.png)](#co_finance_and_python_CO3-2)'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '[![2](Images/2.png)](#co_finance_and_python_CO3-2)'
- en: Defines the strike price as a Python variable with an integer value (`int` object).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 将行权价格定义为具有整数值的 Python 变量（`int` 对象）。
- en: '[![3](Images/3.png)](#co_finance_and_python_CO3-3)'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '[![3](Images/3.png)](#co_finance_and_python_CO3-3)'
- en: Calculates the maximum expression element-wise.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 计算每个表达式元素的最大值。
- en: '[![4](Images/4.png)](#co_finance_and_python_CO3-4)'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '[![4](Images/4.png)](#co_finance_and_python_CO3-4)'
- en: Shows the resulting data now stored in the `ndarray` object `C`.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 显示现在存储在 `ndarray` 对象 `C` 中的结果数据。
- en: 'This illustrates the style and approach of this book:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这说明了本书的风格和方法：
- en: Notions and concepts in finance are introduced.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 介绍了金融中的概念和概念。
- en: A mathematical representation and model is provided.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提供数学表示和模型。
- en: The mathematical model is translated into executable Python code.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将数学模型转化为可执行的 Python 代码。
- en: In that sense, finance motivates the use of mathematics, which in turn motivates
    the use of Python programming techniques.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个意义上，金融激发了数学的使用，而数学的使用又激发了 Python 编程技术的使用。
- en: Getting Started with Python
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 入门指南
- en: 'One of the benefits of Python is that it is an open source language, which
    holds true for the absolute majority of important packages as well. This allows
    for easy installation of the language and required packages on all major operating
    systems, such as macOS, Windows, and Linux. There are only a few major packages
    that are required for the code of this book and finance in general in addition
    to a basic Python interpreter:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: Python 的一个好处是它是一种开源语言，绝大多数重要的包也是如此。这使得语言和所需的包在 macOS、Windows 和 Linux 等所有主要操作系统上的安装变得非常容易。除了基本的
    Python 解释器外，这本书和金融一般需要的代码只需要几个重要的包：
- en: '[`NumPy`](http://numpy.org)'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '[`NumPy`](http://numpy.org)'
- en: This package allows the efficient handling of large, *n*-dimensional numerical
    data sets.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这个包允许高效处理大型、*n* 维数的数值数据集。
- en: '[`pandas`](http://pandas.pydata.org)'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '[`pandas`](http://pandas.pydata.org)'
- en: This package is primarily for the efficient handling of tabular data sets, such
    as financial time series data. Although not required for the purposes of this
    book, `pandas` has become one of the most popular Python packages in finance.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这个包主要用于高效处理表格数据集，如金融时间序列数据。尽管本书的目的不需要，但 `pandas` 已经成为金融领域最流行的 Python 包之一。
- en: '[`SciPy`](http://scipy.org)'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SciPy`](http://scipy.org)'
- en: This package is a collection of scientific functions that are required, for
    example, to solve typical optimization problems.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这个包是科学函数的集合，例如解决典型的优化问题所需的函数。
- en: '[`SymPy`](http://sympy.org)'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '[`SymPy`](http://sympy.org)'
- en: This package allows for symbolic mathematics with Python, which sometimes comes
    in handy when dealing with financial models and algorithms.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这个包允许使用 Python 进行符号数学运算，在处理金融模型和算法时有时会派上用场。
- en: '[`matplotlib`](http://matplotlib.org)'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '[`matplotlib`](http://matplotlib.org)'
- en: This package is the standard package in Python for visualization. It allows
    you to generate and customize different types of plots, such as line plots, bar
    charts, and histograms.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这个包是 Python 中用于可视化的标准包。它允许您生成和自定义不同类型的图表，如线图、条形图和直方图。
- en: 'Similarly, there are only two tools that are required to get started with interactive
    Python coding:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，只有两个工具是开始交互式 Python 编码所需的：
- en: '[IPython](http://ipython.org)'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '[IPython](http://ipython.org)'
- en: This is the most popular environment in which to do interactive Python coding
    on the command line (terminal, shell).
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在命令行（终端、Shell）上进行交互式Python编码的最受欢迎环境。
- en: '[JupyterLab](http://jupyter.org)'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '[JupyterLab](http://jupyter.org)'
- en: This is the interactive development environment in which to do interactive Python
    coding and development in the browser.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在浏览器中进行交互式Python编码和开发的互动开发环境。
- en: 'The technical prerequisites to follow along with regard to Python programming
    are minimal. There are basically two options for making use of the Python code
    in this book:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 学习Python编程的技术先决条件很少。这本书中使用Python代码的基本选择有两种：
- en: Quant Platform
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: Quant Platform
- en: On the [Quant Platform](http://finpy.pqp.io), for which you can sign up for
    free, you find a full-fledged environment for interactive financial analytics
    with Python. This allows you to make use of the Python code provided in this book
    via the browser, making a local installation unnecessary. After signing up for
    free, you have automatic access to all code and all Jupyter Notebooks that accompany
    the book, and you can execute the code right away in the browser.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在[Quant Platform](http://finpy.pqp.io)上（您可以免费注册），您会找到一个完整的互动金融分析环境，可以通过浏览器使用本书中提供的Python代码，无需本地安装。免费注册后，您可以自动访问所有代码和附带书籍的Jupyter笔记本，可以立即在浏览器中执行代码。
- en: Local Python environment
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 本地Python环境
- en: It is also straightforward nowadays to install a local Python environment that
    allows you to dive into financial analytics and the book code on your own computer.
    This section describes how to do this.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 如今安装本地Python环境并在自己的计算机上进行金融分析和书籍代码的最有效方式也是非常直接的。本节介绍如何执行此操作。
- en: Local Installation Versus the Quant Platform
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 本地安装与Quant Platform比较
- en: From experience, the local installation of an appropriate Python environment
    can sometimes prove difficult for someone who is just starting out in the programming
    world. Therefore, it is recommended that you do not spend too much time at the
    beginning on installing Python locally if you face any issues. Rather, make use
    of the [Quant Platform](http://finpy.pqp.io) and later on, with some more experience,
    you can still return and install Python on your local machine.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 根据经验，对于刚开始接触编程的人来说，本地安装适当的Python环境有时可能会比较困难。因此，如果在本地安装Python时遇到任何问题，建议您不要在开始阶段花费太多时间。相反，可以利用[Quant
    Platform](http://finpy.pqp.io)，稍后在积累了一些经验后，仍然可以返回并在本地机器上安装Python。
- en: An easy and modern way of installing Python is by the use of the [`conda`](http://conda.io)
    package and environment manager (see [Figure 1-1](#conda_01)).
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 使用[`conda`](http://conda.io)软件包和环境管理器安装Python的简单而现代的方式（参见[图1-1](#conda_01))。
- en: '![ftwp 0101](Images/ftwp_0101.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![ftwp 0101](Images/ftwp_0101.png)'
- en: Figure 1-1\. `conda` web page
  id: totrans-129
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图1-1\. `conda` 网页
- en: The most efficient way to install `conda` and a basic Python interpreter is
    via the [Miniconda](https://oreil.ly/NI0Wi) distribution. On the Miniconda [download
    page](https://oreil.ly/gaWTP), installer packages for the most important operating
    systems and Python versions are provided (see [Figure 1-2](#conda_02)). Additional
    options, such as for Apple’s M1 chips (“Apple Silicon”), are provided by the [Miniforge
    project](https://oreil.ly/gKeo3).
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 安装`conda`和基本Python解释器的最高效方式是通过[Miniconda](https://oreil.ly/NI0Wi)发行版（见Miniconda
    [下载页面](https://oreil.ly/gaWTP)，提供了最重要的操作系统和Python版本的安装包（参见[图1-2](#conda_02)）。Miniforge项目还提供了额外的选项，如适用于Apple
    M1芯片（“Apple Silicon”）的选项（https://oreil.ly/gKeo3）。
- en: '![ftwp 0102](Images/ftwp_0102.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![ftwp 0102](Images/ftwp_0102.png)'
- en: Figure 1-2\. Miniconda download page
  id: totrans-132
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图1-2\. Miniconda下载页面
- en: 'After having installed Miniconda or Miniforge according to the guidelines provided
    for your operating system, you should open a shell or command prompt and check
    whether `conda` is available. The examples that follow are based on `conda` as
    installed via Miniforge on an Apple Mac computer with the M1 chip. You should
    get an output similar to this:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 根据操作系统提供的指南安装了Miniconda或Miniforge之后，应打开Shell或命令提示符，并检查`conda`是否可用。以下示例基于在搭载M1芯片的Apple
    Mac计算机上通过Miniforge安装的`conda`。您应该会得到类似于这样的输出：
- en: '[PRE3]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Also note the `(base)` part of the prompt that is typical for `conda`-based
    Python installations. The next step is to create a new *Python environment* as
    follows (and to answer “y” when prompted):'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 还要注意`conda`基础Python安装的提示符中的`(base)`部分。下一步是按以下方式创建一个新的*Python环境*（并在提示时回答“y”）：
- en: '[PRE4]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'After the successful completion, activate the environment as follows:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 成功完成后，激活环境如下所示：
- en: '[PRE5]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Notice how the prompt changes. Next, install the required tools IPython and
    JupyterLab as follows (and answer “y” when prompted):'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 注意提示符的变化。接下来，按照以下方式安装所需工具 IPython 和 JupyterLab（在提示时回答“y”）：
- en: '[PRE6]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'After that, you should install the major Python packages generally used for
    financial data science as follows (the flag `-y` avoids the confirmation prompt):'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，你应该安装通常用于金融数据科学的主要 Python 包，如下所示（使用 `-y` 标志避免确认提示）：
- en: '[PRE7]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'This provides the most important Python packages for data analysis in general
    and financial analytics in particular. You might check whether everything has
    been installed as follows:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 这提供了一般数据分析和特别是金融分析中最重要的 Python 包。你可以检查是否已经安装完成，如下所示：
- en: '[PRE8]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'An interactive Python session is then started by simply typing `python`:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 通过简单地输入 `python`，然后启动交互式 Python 会话：
- en: '[PRE9]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'A better interactive shell is provided by IPython, which is started via `ipython`
    on the shell:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 更好的交互式 shell 由 IPython 提供，通过在 shell 上输入 `ipython` 启动：
- en: '[PRE10]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'However, it is recommended—especially for the Python beginner—to work with
    JupyterLab in the browser. To this end, type `jupyter lab` on the shell, which
    should give an output with messages similar to the following:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，特别是对于 Python 初学者，推荐在浏览器中使用 JupyterLab。为此，请在 shell 中输入 `jupyter lab`，将输出类似以下的消息：
- en: '[PRE11]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In general, a new browser tab is opened automatically, which then shows you
    the starting page of JupyterLab similar to [Figure 1-3](#jupyter_01).
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 通常会自动打开一个新的浏览器标签页，然后显示类似 [图 1-3](#jupyter_01) 的 JupyterLab 启动页面。
- en: You can then open a new Jupyter Notebook and start with interactive Python coding,
    as shown in [Figure 1-4](#jupyter_02). To write code in a cell, click on the cell.
    To execute the code, use Shift-Return, Ctrl-Return, or Alt-Return (you will notice
    the difference).
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，你可以打开一个新的 Jupyter Notebook 并开始交互式 Python 编码，如 [图 1-4](#jupyter_02) 所示。要在单元格中编写代码，请单击单元格。要执行代码，请使用
    Shift-Return、Ctrl-Return 或 Alt-Return（你会注意到不同）。
- en: '![ftwp 0103](Images/ftwp_0103.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![ftwp 0103](Images/ftwp_0103.png)'
- en: Figure 1-3\. JupyterLab start page
  id: totrans-154
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 1-3\. JupyterLab 启动页面
- en: '![ftwp 0104](Images/ftwp_0104.png)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![ftwp 0104](Images/ftwp_0104.png)'
- en: Figure 1-4\. New Jupyter Notebook
  id: totrans-156
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 1-4\. 新的 Jupyter Notebook
- en: You can also open one of the Jupyter Notebook files provided with this book
    (see [Figure 1-5](#jupyter_03)).
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以打开本书提供的其中一个 Jupyter Notebook 文件（见 [图 1-5](#jupyter_03)）。
- en: '![ftwp 0105](Images/ftwp_0105.png)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![ftwp 0105](Images/ftwp_0105.png)'
- en: Figure 1-5\. Jupyter Notebook accompanying the book
  id: totrans-159
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 1-5\. 本书附带的 Jupyter Notebook
- en: This section just provides the very basics to get started with Python and related
    tools, such as IPython and JupyterLab. For more details—for example, about how
    to work with IPython—refer to the book by VanderPlas (2016) listed in [Chapter 7](ch07.xhtml#where_to_go).
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 本节只提供了开始使用 Python 和相关工具（如 IPython 和 JupyterLab）的基础知识。关于如何使用 IPython 等更多详细信息，请参考
    VanderPlas（2016）在 [第 7 章](ch07.xhtml#where_to_go) 中列出的书籍。
- en: Conclusions
  id: totrans-161
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 结论
- en: Finance can look back on a long history. The period from 1950 to 1980 is characterized
    by the introduction of rigorous mathematical analysis to the field. From the 1980s
    onward, and in particular since 2000, the role of computers and computational
    finance has gained tremendously in importance. This trend will be further reinforced
    by the increasing role AI plays in the field, with its computationally demanding
    algorithms from machine learning (ML) and deep learning (DL).
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 金融可以回顾长期历史。从 1950 年到 1980 年，以严格的数学分析引入为特征。从 1980 年代开始，特别是自 2000 年以来，计算机和计算金融的角色显著增加。这一趋势将因人工智能在领域中的增加作用而进一步加强，其机器学习（ML）和深度学习（DL）的计算需求算法。
- en: 'The finance field makes use of four different types of language: *natural language*
    (English in general), *financial language* (notions and expressions special to
    the field), *mathematical language* (like linear algebra or probability theory),
    and *programming language* (like Python for the purposes of this book).'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 金融领域使用四种不同类型的语言：*自然语言*（一般是英语）、*金融语言*（专有名词和表达方式）、*数学语言*（如线性代数或概率论）、以及*编程语言*（例如本书使用的
    Python）。
- en: The approach of this book is to introduce related concepts from finance, mathematics,
    and Python programming alongside one another. The necessary prerequisites on the
    Python side are minimal, with the `conda` package and environment manager often
    as the tool of choice nowadays to manage Python environments.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 本书的方法是将金融、数学和Python编程的相关概念同时介绍。目前，Python方面的必备先决条件很少，`conda`包和环境管理器通常是管理Python环境的首选工具。
- en: You are now ready to move on to [Chapter 2](ch02_split_000.xhtml#two_state_economy),
    which discusses the most simple financial model presented in the book and introduces
    many of the central finance notions. The intuition that you gain in the most simple
    financial model should easily carry over to the more advanced models and approaches
    discussed from [Chapter 3](ch03.xhtml#three_state_economy) onward.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以继续阅读[第2章](ch02_split_000.xhtml#two_state_economy)，该章节讨论了本书中介绍的最简单的金融模型，并引入了许多核心的金融概念。您在最简单的金融模型中获得的直觉应该很容易转移到从[第3章](ch03.xhtml#three_state_economy)开始讨论的更高级模型和方法中。
- en: References
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 参考文献
- en: 'Articles and books cited in this chapter:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章引用的文章和书籍中：
- en: 'Cox, John, Jonathan Ingersoll and Stephen Ross. 1985\. “A Theory of the Term
    Structure of Interest Rates.” *Econometrica* 53 (2): 385–407.'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Cox, John, Jonathan Ingersoll和Stephen Ross. 1985\. “利率期限结构理论.” *计量经济学* 53 (2):
    385–407.'
- en: Fletcher, Laurence. 2020\. “Hedge Funds Exploit Technology to Reduce Cost and
    Waste.” *Financial Times*, December 15, 2020\. [*https://oreil.ly/HE4Cc*](https://oreil.ly/HE4Cc).
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Fletcher, Laurence. 2020\. “对冲基金利用技术降低成本和浪费.” *《金融时报》*, 2020年12月15日. [*https://oreil.ly/HE4Cc*](https://oreil.ly/HE4Cc).
- en: 'Heston, Steven. 1993\. “A Closed-Form Solution for Options with Stochastic
    Volatility with Applications to Bond and Currency Options.” *The Review of Financial
    Studies* 6 (2): 327–343.'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Heston, Steven. 1993\. “随机波动率期权的闭式解及其在债券和货币期权中的应用.” *金融研究评论* 6 (2): 327–343.'
- en: 'Hilpisch, Yves. 2018\. *Python for Finance: Mastering Data-Driven Finance*.
    2nd ed. Sebastopol: O’Reilly.'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Hilpisch, Yves. 2018\. *Python金融实战*. 第2版. Sebastopol: O’Reilly.'
- en: 'Hilpisch, Yves. 2020\. *Artificial Intelligence in Finance: A Python-Based
    Guide*. Sebastopol: O’Reilly.'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Hilpisch, Yves. 2020\. *金融中的人工智能：基于Python的指南*. Sebastopol: O’Reilly.'
- en: 'Longstaff, Francis and Eduardo Schwartz. 2001\. “Valuing American Options by
    Simulation: A Simple Least Squares Approach.” *Review of Financial Studies* 14
    (1): 113–147.'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Longstaff, Francis和Eduardo Schwartz. 2001\. “通过模拟估值美式期权：一种简单的最小二乘方法.” *金融研究评论*
    14 (1): 113–147.'
- en: 'Markowitz, Harry. 1952\. “Portfolio Selection.” *Journal of Finance* 7 (1):
    77-91.'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Markowitz, Harry. 1952\. “投资组合选择.” *《金融杂志》* 7 (1): 77-91.'
- en: 'Milne, Frank. 1995\. *Finance Theory and Asset Pricing*. New York: Oxford University
    Press.'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Milne, Frank. 1995\. *金融理论与资产定价*. New York: Oxford University Press.'
- en: 'Rubinstein, Mark. 2006\. *A History of the Theory of Investments*. Hoboken:
    Wiley Finance.'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Rubinstein, Mark. 2006\. *投资理论的历史*. Hoboken: Wiley Finance.'
